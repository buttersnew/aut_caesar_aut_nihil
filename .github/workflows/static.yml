name: Deploy static content to Pages

on:
  push:
    branches: ["develop"]
    paths:
      - 'website/**'
  workflow_run:
    workflows: ["Create Pre-Release"]
    types:
      - completed
  workflow_dispatch:

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get release info (Stable and Pre-release) - CORRECTED
        id: latest_info
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e # Exit on any error

          # --- LOGIC FOR STABLE RELEASE ---
          STABLE_TAG=$(gh release list --limit 1 --exclude-pre-releases --json tagName | jq -r '.[0].tagName')
          if [[ -n "$STABLE_TAG" && "$STABLE_TAG" != "null" ]]; then
            echo "STABLE_EXISTS=true" >> $GITHUB_OUTPUT
            RELEASE_INFO=$(gh release view "$STABLE_TAG" --json publishedAt,assets)
            echo "STABLE_VERSION=${STABLE_TAG#v}" >> $GITHUB_OUTPUT
            echo "STABLE_MOD_URL=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name | startswith("ACAN")).browser_download_url')" >> $GITHUB_OUTPUT
            echo "STABLE_MANUAL_URL=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name == "aut_ceasar_aut_nihil_handbook.pdf").browser_download_url')" >> $GITHUB_OUTPUT
            RELEASE_DATE_ISO=$(echo "$RELEASE_INFO" | jq -r '.publishedAt')
            echo "STABLE_UPDATE_DATE=$(date -d "$RELEASE_DATE_ISO" +"%d.%m.%Y")" >> $GITHUB_OUTPUT
          else
            echo "STABLE_EXISTS=false" >> $GITHUB_OUTPUT
          fi

          # --- LOGIC FOR PRE-RELEASE ---
          PRERELEASE_TAG=$(gh release list --limit 10 --json tagName,isPrerelease | jq -r '(.[] | select(.isPrerelease == true) | .tagName)' | head -n 1)
          if [[ -n "$PRERELEASE_TAG" && "$PRERELEASE_TAG" != "null" ]]; then
            echo "PRERELEASE_EXISTS=true" >> $GITHUB_OUTPUT
            RELEASE_INFO=$(gh release view "$PRERELEASE_TAG" --json publishedAt,assets)
            echo "PRERELEASE_VERSION=${PRERELEASE_TAG#v}" >> $GITHUB_OUTPUT
            echo "PRERELEASE_MOD_URL=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name | startswith("ACAN")).browser_download_url')" >> $GITHUB_OUTPUT
            echo "PRERELEASE_MANUAL_URL=$(echo "$RELEASE_INFO" | jq -r '.assets[] | select(.name == "aut_ceasar_aut_nihil_handbook.pdf").browser_download_url')" >> $GITHUB_OUTPUT
            RELEASE_DATE_ISO=$(echo "$RELEASE_INFO" | jq -r '.publishedAt')
            echo "PRERELEASE_UPDATE_DATE=$(date -d "$RELEASE_DATE_ISO" +"%d.%m.%Y")" >> $GITHUB_OUTPUT
          else
            echo "PRERELEASE_EXISTS=false" >> $GITHUB_OUTPUT
          fi

      - name: Update Stable Release section (if available)
        if: steps.latest_info.outputs.STABLE_EXISTS == 'true'
        run: |
          sed -i 's|<!-- STABLE_DOWNLOAD_AVAILABLE -->||g' website/index.html
          sed -i 's|<!-- /STABLE_DOWNLOAD_AVAILABLE -->||g' website/index.html
          sed -i 's|__STABLE_VERSION__|${{ steps.latest_info.outputs.STABLE_VERSION }}|g' website/index.html
          sed -i 's|__STABLE_MOD_URL__|${{ steps.latest_info.outputs.STABLE_MOD_URL }}|g' website/index.html
          sed -i 's|__STABLE_MANUAL_URL__|${{ steps.latest_info.outputs.STABLE_MANUAL_URL }}|g' website/index.html
          sed -i 's|__STABLE_UPDATE_DATE__|${{ steps.latest_info.outputs.STABLE_UPDATE_DATE }}|g' website/index.html

      - name: Update Stable Release section (if unavailable)
        if: steps.latest_info.outputs.STABLE_EXISTS == 'false'
        run: |
          sed -i 's|<!-- STABLE_DOWNLOAD_UNAVAILABLE -->||g' website/index.html
          sed -i 's|<!-- /STABLE_DOWNLOAD_UNAVAILABLE -->||g' website/index.html

      - name: Update Pre-Release section (if available)
        if: steps.latest_info.outputs.PRERELEASE_EXISTS == 'true'
        run: |
          sed -i 's|<!-- PRERELEASE_DOWNLOAD_AVAILABLE -->||g' website/index.html
          sed -i 's|<!-- /PRERELEASE_DOWNLOAD_AVAILABLE -->||g' website/index.html
          sed -i 's|__PRERELEASE_VERSION__|${{ steps.latest_info.outputs.PRERELEASE_VERSION }}|g' website/index.html
          sed -i 's|__PRERELEASE_MOD_URL__|${{ steps.latest_info.outputs.PRERELEASE_MOD_URL }}|g' website/index.html
          sed -i 's|__PRERELEASE_MANUAL_URL__|${{ steps.latest_info.outputs.PRERELEASE_MANUAL_URL }}|g' website/index.html
          sed -i 's|__PRERELEASE_UPDATE_DATE__|${{ steps.latest_info.outputs.PRERELEASE_UPDATE_DATE }}|g' website/index.html

      - name: Update Pre-Release section (if unavailable)
        if: steps.latest_info.outputs.PRERELEASE_EXISTS == 'false'
        run: |
          sed -i 's|<!-- PRERELEASE_DOWNLOAD_UNAVAILABLE -->||g' website/index.html
          sed -i 's|<!-- /PRERELEASE_DOWNLOAD_UNAVAILABLE -->||g' website/index.html
      
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './website'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4