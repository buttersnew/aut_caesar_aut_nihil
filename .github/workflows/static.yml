name: Deploy static content to Pages

on:
  push:
    branches: ["develop"]
    paths:
      - 'website/**'

  workflow_run:
    workflows: ["Create Pre-Release"]
    types:
      - completed

  workflow_dispatch:

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    
    # We are using the permissions that you confirmed are valid.
    # The script below will prove if these are sufficient.
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get latest release info
        id: latest_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e

          echo "Fetching latest release..."
          LATEST_TAG=$(gh release list --limit 1 --json tagName --jq '.[0].tagName')
          
          if [[ -z "$LATEST_TAG" ]]; then
            echo "::error::Could not find any releases. Check repository permissions."
            exit 1
          fi
          
          echo "Found latest tag: $LATEST_TAG"

          echo "--- DUMPING ASSET JSON ---"
          gh release view "$LATEST_TAG" --json assets
          echo "--- END ASSET JSON ---"
          # ------------------------------------

          MOD_URL=$(gh release view "$LATEST_TAG" --json assets --jq '.assets[] | select(.name | startswith("ACAN")).url')
          MOD_UPDATED=$(date -d (gh release view "$LATEST_TAG" --json assets --jq '.assets[] | select(.name | startswith("ACAN")).updatedAt') + "%d.%m.%Y")
          MANUAL_URL=$(gh release view "$LATEST_TAG" --json assets --jq '.assets[] | select(.name == "aut_ceasar_aut_nihil_handbook.pdf").url')
          MANUAL_UPDATED=$(date -d (gh release view "$LATEST_TAG" --json assets --jq '.assets[] | select(.name == "aut_ceasar_aut_nihil_handbook.pdf").updatedAt') + "%d.%m.%Y")
          
          echo "Found Mod URL: $MOD_URL"
          echo "Found Manual URL: $MANUAL_URL"

          echo "VERSION=${LATEST_TAG#v}" >> $GITHUB_OUTPUT
          echo "MOD_URL=$MOD_URL" >> $GITHUB_OUTPUT
          echo "MANUAL_URL=$MANUAL_URL" >> $GITHUB_OUTPUT
          echo "MANUAL_UPDATED=$MANUAL_UPDATED" >> $GITHUB_OUTPUT
          echo "MOD_UPDATED=$MOD_UPDATED" >> $GITHUB_OUTPUT
      - name: Render placeholders in index.html
        run: |
          sed -i 's|__MOD_VERSION__|${{ steps.latest_release.outputs.VERSION }}|g' website/index.html
          sed -i 's|__MOD_DOWNLOAD_URL__|${{ steps.latest_release.outputs.MOD_URL }}|g' website/index.html
          sed -i 's|__MANUAL_DOWNLOAD_URL__|${{ steps.latest_release.outputs.MANUAL_URL }}|g' website/index.html
          sed -i 's|__MANUAL_UPDATED__|${{ steps.latest_release.outputs.MANUAL_UPDATED }}|g' website/index.html
          sed -i 's|__MOD_UPDATED__|${{ steps.latest_release.outputs.MOD_UPDATED }}|g' website/index.html

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './website'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4