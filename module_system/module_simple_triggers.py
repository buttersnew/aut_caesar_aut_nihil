from header_common import *
from header_operations import *
from header_parties import *
from header_items import *
from header_skills import *
from header_triggers import *
from header_troops import *
from header_music import *
##diplomacy start+
from header_terrain_types import *
from module_factions import dplmc_factions_end
##diplomacy end+
#from module_items import *

from module_constants import *

import math

#from compiler import *
####################################################################################################################
# Simple triggers are the alternative to old style triggers. They do not preserve state, and thus simpler to maintain.
#
#  Each simple trigger contains the following fields:
# 1) Check interval: How frequently this trigger will be checked
# 2) Operation block: This must be a valid operation block. See header_operations.py for reference.
####################################################################################################################

simple_triggers = [
#1
# This trigger is deprecated. Use "script_game_event_party_encounter" in module_scripts.py instead
(ti_on_party_encounter,
[]),
#2
# This trigger is deprecated. Use "script_game_event_simulate_battle" in module_scripts.py instead
(ti_simulate_battle,
[]),

(1,[
    (call_script, "script_execude_debug_message", 3),

    (gt,"$auto_besiege_town",0),
    (gt,"$g_player_besiege_town", 0),
    (ge, "$g_siege_method", 1),
    (store_current_hours, ":cur_hours"),
    (eq, "$g_siege_force_wait", 0),
    (ge, ":cur_hours", "$g_siege_method_finish_hours"),
    (neg|is_currently_night),
    #SB : add adjusted renown for ladder construction
    (try_begin), #we should have stored the original npc but composition is unlikely to change
        (call_script, "script_get_max_skill_of_player_party", "skl_engineer"),
        (assign, ":troop_no", reg1),
        (neq, ":troop_no", "trp_player"),
        # (is_between, ":troop_no", companions_begin, companions_end),
        (store_mul, ":renown", "$g_siege_method", dplmc_companion_skill_renown + 1),
        (call_script, "script_change_troop_renown", ":troop_no", ":renown"),
    (try_end),
    (rest_for_hours, 0, 0, 0), #stop resting
]),

(0,[
    (call_script, "script_execude_debug_message", 4),
    (try_begin),
        (eq,"$g_player_is_captive",1),
        (gt, "$capturer_party", 0),
        (party_is_active, "$capturer_party"),
        (party_relocate_near_party, "p_main_party", "$capturer_party", 0),
    (else_try),
        (gt, "$enlisted_party", -1),
        (party_is_active, "$enlisted_party"),
        (enable_party, "p_main_party"),
        (party_relocate_near_party, "p_main_party","$enlisted_party", 0),
        (disable_party, "p_main_party"),
    (try_end),
]),

#Auto-menu
(0,[
    (call_script, "script_execude_debug_message", 5),
    (try_begin),
        (check_quest_active, "qst_langobard_arrive"),
        (quest_slot_ge, "qst_langobard_arrive", slot_quest_current_state, 8),
        (neg|quest_slot_ge, "qst_langobard_arrive", slot_quest_current_state, 15),
        (store_current_hours, ":hours"),
        (quest_slot_eq, "qst_langobard_arrive", slot_quest_gold_reward, ":hours"),
        (try_begin),
            (quest_slot_eq, "qst_langobard_arrive", slot_quest_current_state, 8),
            (jump_to_menu, "mnu_longbard_1"),
        (else_try),
            (quest_slot_eq, "qst_langobard_arrive", slot_quest_current_state, 9),
            (jump_to_menu, "mnu_longbard_2"),
        (else_try),
            (quest_slot_eq, "qst_langobard_arrive", slot_quest_current_state, 10),
            (jump_to_menu, "mnu_longbard_3"),
        (else_try),
            (quest_slot_eq, "qst_langobard_arrive", slot_quest_current_state, 11),
            (jump_to_menu, "mnu_longbard_4"),
        (else_try),
            (quest_slot_eq, "qst_langobard_arrive", slot_quest_current_state, 12),
            (jump_to_menu, "mnu_longbard_finale"),
        (else_try),
            (quest_slot_eq, "qst_langobard_arrive", slot_quest_current_state, 14),
            (jump_to_menu, "mnu_longbard_finale_2"),
        (try_end),
    (else_try),
        (troop_slot_ge, "trp_organiser", olympia_auto_menu, 1),
        (try_begin),
            (store_current_hours, ":hours"),
            (troop_slot_eq, "trp_organiser", rest_olympia, ":hours"),
            (troop_get_slot, ":next_menu", "trp_organiser", olympia_auto_menu),
            (troop_set_slot, "trp_organiser", olympia_auto_menu, 0),
            (troop_set_slot, "trp_organiser", rest_olympia, 0),
            (jump_to_menu, ":next_menu"),
            #(rest_for_hours, 0,0,0),#stop resting
        (else_try),
            (troop_slot_eq, "trp_groupie", slot_troop_mother, 1),
            (jump_to_menu, "mnu_groupy"),
        (try_end),
        (party_set_slot, "p_main_party", slot_party_unrested_morale_penalty, 0),#no rest penality in olympia
    (else_try),
        ###this is for special quest
        # (check_quest_active, "qst_wlodowiecus_adventure_1"),
        # (quest_slot_eq, "qst_wlodowiecus_adventure_1", slot_quest_current_state, 2),
        # (eq,"$auto_menu","mnu_visit_to_sagala"),
        # (jump_to_menu, "$auto_menu"),
        # (else_try),##start freelancer###new auto menu for freelancing to avoid a bug where menu is not shown
        (check_quest_active, "qst_freelancing"),
        (quest_slot_ge, "qst_freelancing", slot_quest_freelancer_event, 1),
        (ge,"$auto_menu",1),
        (jump_to_menu, "$auto_menu"),
        (assign,"$auto_menu", -1),
        (quest_set_slot, "qst_freelancing", slot_quest_freelancer_event, 0),
    (else_try),###end freelancer
        (is_between, "$g_last_rest_center",  centers_begin, centers_end), #SB : proper rest conditions
        (party_get_battle_opponent, ":besieger_party", "$g_last_rest_center"),
        (gt, ":besieger_party", 0),
        (store_faction_of_party, ":encountered_faction", "$g_last_rest_center"),
        (store_relation, ":faction_relation", ":encountered_faction", "fac_player_supporters_faction"),
        (store_faction_of_party, ":besieger_party_faction", ":besieger_party"),
        (store_relation, ":besieger_party_relation", ":besieger_party_faction", "fac_player_supporters_faction"),
        (ge, ":faction_relation", 0),
        (lt, ":besieger_party_relation", 0),
        (start_encounter, "$g_last_rest_center"),
        (rest_for_hours, 0, 0, 0), #stop resting
    (else_try),
        (store_current_hours, ":cur_hours"),
        (assign, ":check", 0),
        (try_begin),
            (neq, "$g_check_autos_at_hour", 0),
            (ge, ":cur_hours", "$g_check_autos_at_hour"),
            (assign, ":check", 1),
            (assign, "$g_check_autos_at_hour", 0),
        (try_end),
        (this_or_next|eq, ":check", 1),
        (map_free),
        (try_begin),
            (ge,"$auto_menu",1),
            (jump_to_menu,"$auto_menu"),
            (assign,"$auto_menu",-1),
        (else_try),
            (ge,"$auto_enter_town",1),
            (start_encounter, "$auto_enter_town"),
        (else_try),
            (ge,"$g_camp_mode", 1),
            (troop_slot_ge, "trp_global_variables", g_player_trench, 1),
            (jump_to_menu, "mnu_camp"),
        (else_try),
            (ge,"$g_camp_mode", 1),

            # (try_begin),

                # (troop_set_slot, "trp_global_variables", g_player_trench, 0),
                # (display_message, "@Fortifications are destroyed.", message_alert), #SB : colorize
            # (try_end),
            (assign, "$g_camp_mode", 0),
            (assign, "$g_infinite_camping", 0),
            (assign, "$g_player_icon_state", pis_normal),

            (rest_for_hours, 0, 0, 0), #stop camping
            (display_message, "@Breaking camp...", message_alert), #SB : colorize
        (else_try), #SB : restore after leaving town with disguises
            (gt, "$sneaked_into_town", disguise_none),
            (display_message, "@Removing disguise...", message_alert), #SB : colorize
            (try_begin),
                (eq, "$g_dplmc_player_disguise", 1),
                (set_show_messages, 0),
                #equipment is deposited back to inventory, it starts off blank
                (try_for_range, ":i_slot", ek_item_0, ek_food + 1),
                    (troop_get_inventory_slot, ":item", "trp_player", ":i_slot"),
                    (neq, ":item", -1),
                    (troop_get_inventory_slot_modifier, ":imod", "trp_player", ":i_slot"),
                    (troop_add_item, "trp_random_town_sequence", ":item", ":imod"),
                (try_end),
                #less efficient, but merge and respect original player inventory's order
                (call_script, "script_move_inventory_and_gold", "trp_player", "trp_random_town_sequence", 0), #do not move gold
                (call_script, "script_dplmc_copy_inventory", "trp_random_town_sequence", "trp_player"),
                (call_script, "script_troop_transfer_gold", "trp_random_town_sequence", "trp_player", 0), #move remaining gold now
                (set_show_messages, 1),
            (try_end),
            (assign, "$sneaked_into_town", disguise_none),
        (try_end),
    (try_end),
]),

#Notification menus #6
(0,[
    (call_script, "script_execude_debug_message", 6),
    (troop_slot_ge, "trp_notification_menu_types", 0, 1),
    (troop_get_slot, ":menu_type", "trp_notification_menu_types", 0),
    (troop_get_slot, "$g_notification_menu_var1", "trp_notification_menu_var1", 0),
    (troop_get_slot, "$g_notification_menu_var2", "trp_notification_menu_var2", 0),
    (jump_to_menu, ":menu_type"),
    (assign, ":end_cond", 2),
    (try_for_range, ":cur_slot", 1, ":end_cond"),
        (try_begin),
            (troop_slot_ge, "trp_notification_menu_types", ":cur_slot", 1),
            (val_add, ":end_cond", 1),
        (try_end),
        (store_sub, ":cur_slot_minus_one", ":cur_slot", 1),
        (troop_get_slot, ":local_temp", "trp_notification_menu_types", ":cur_slot"),
        (troop_set_slot, "trp_notification_menu_types", ":cur_slot_minus_one", ":local_temp"),
        (troop_get_slot, ":local_temp", "trp_notification_menu_var1", ":cur_slot"),
        (troop_set_slot, "trp_notification_menu_var1", ":cur_slot_minus_one", ":local_temp"),
        (troop_get_slot, ":local_temp", "trp_notification_menu_var2", ":cur_slot"),
        (troop_set_slot, "trp_notification_menu_var2", ":cur_slot_minus_one", ":local_temp"),
    (try_end),
]),

(1,[
    (call_script, "script_execude_debug_message", 7),
    (map_free),
    (call_script, "script_music_set_situation_with_culture", mtf_sit_travel),
]),


(1,[
    (call_script, "script_execude_debug_message", 8),
    (try_begin),
        (gt, "$g_reset_mission_participation", 1),
        (try_for_range, ":troop", active_npcs_begin, kingdom_ladies_end),
            (troop_set_slot, ":troop", slot_troop_mission_participation, 0),
        (try_end),
    (try_end),
]),

(24.0/number_of_factions,[
    (call_script, "script_execude_debug_message", 9),
    (store_random_in_range, ":kingdom_no", kingdoms_begin, kingdoms_end),
    (try_begin),
        (faction_slot_eq, ":kingdom_no", slot_faction_state, sfs_active),
        (call_script, "script_faction_recalculate_strength", ":kingdom_no"),
        (call_script, "script_evaluate_realm_stability", ":kingdom_no"),
        (try_begin),
            (ge, ":kingdom_no", npc_kingdoms_begin),
            (faction_get_slot, ":faction_morale", ":kingdom_no",  slot_faction_morale_of_player_troops),
            (store_sub, ":divisor", 140, "$player_right_to_rule"),
            (val_div, ":divisor", 14),
            (val_max, ":divisor", 1),
            (store_div, ":faction_morale_div_10", ":faction_morale", ":divisor"), #10 is the base, down to 2 for 100 rtr
            (val_sub, ":faction_morale", ":faction_morale_div_10"),
            (faction_set_slot, ":kingdom_no",  slot_faction_morale_of_player_troops, ":faction_morale"),
        (try_end),
    (try_end),
]),

(0.04,[
    (call_script, "script_execude_debug_message", 10),
    #change location for all ladies
    (store_random_in_range, ":troop_id", kingdom_ladies_begin, kingdom_ladies_end),
    ##diplomacy start+ do not set the troop's center when the troop is leading a party
    (troop_slot_eq, ":troop_id", slot_troop_occupation, slto_kingdom_lady),
    (troop_get_slot, ":leaded_party", ":troop_id", slot_troop_leaded_party),
    (try_begin),
        (gt, ":leaded_party", 0),
        (neg|party_is_active, ":leaded_party"),
        (assign, ":leaded_party", -1),
    (try_end),
    (lt, ":leaded_party", 1),#if the value is 0, it's a bug, so overlook it
    ##diplomacy end+
    #do not change location if under siege
    (assign, ":continue", 1),
    (try_begin),
        (troop_get_slot, ":location", ":troop_id",  slot_troop_cur_center),
        (gt, ":location", -1),
        (party_slot_eq, ":location", slot_village_state, svs_under_siege),
        (assign, ":continue", 0),
    (try_end),
    (eq, ":continue", 1),

    (neg|troop_slot_ge, ":troop_id", slot_troop_prisoner_of_party, 0),
    (call_script, "script_get_kingdom_lady_social_determinants", ":troop_id"),
    (assign, ":location", reg1),
    (troop_set_slot, ":troop_id", slot_troop_cur_center, ":location"),#
]),

# Reduce renown slightly by 0.5% every week
# Discover adultery
(7 * 24,[
    (call_script, "script_execude_debug_message", 11),
    (try_begin),
        (troop_get_slot, ":embezzled_founds_amount", "trp_player", slot_player_embezzeled_founds),
        (gt, ":embezzled_founds_amount", 0),
        (val_sub, ":embezzled_founds_amount", 10),
        (val_max, ":embezzled_founds_amount", 0),
        (troop_set_slot, "trp_player", slot_player_embezzeled_founds, ":embezzled_founds_amount"),
    (try_end),
         #SB : slowly increase renown of minister weekly instead of doing so upon assignment
    (try_begin),
        (gt, "$g_player_minister", 0),
        (neq, "$g_player_minister", "trp_temporary_minister"),
        (call_script, "script_change_troop_renown", "$g_player_minister", 10),
    (try_end),

    (troop_get_slot, ":player_renown", "trp_player", slot_troop_renown),
    (store_div, ":renown_decrease", ":player_renown", 200),
    (val_sub, ":player_renown", ":renown_decrease"),
    (troop_set_slot, "trp_player", slot_troop_renown, ":player_renown"),
    # Discover adultery

    (try_for_range, ":lady", kingdom_ladies_begin, kingdom_ladies_end),
        (try_begin),
            (troop_slot_eq, ":lady",slot_troop_lover, -1),
            (troop_slot_eq, ":lady", slot_troop_lover_attempt, 2),
            (troop_set_slot, ":lady",slot_troop_lover_attempt, 1),
        (try_end),
        (troop_get_slot, ":lover", ":lady", slot_troop_lover),
        (ge, ":lover", 0),
        (try_begin),
            (troop_slot_eq, ":lover", slot_troop_occupation, slto_kingdom_hero),
            (try_begin),
                (eq, ":lover", "trp_player"),
                (call_script, "script_troop_get_relation_with_troop", ":lady", ":lover"),
                (lt, reg0, 10),
                (str_store_troop_name, s30, ":lady"),
                (dialog_box, "@You receive a letter from {s30}, stating that your love affair must come to an end. But you will be always in her heart ...", "@A letter"),
                (troop_set_slot, ":lady",slot_troop_lover, -1),
            (try_end),
            (assign, ":chance", 1),
            (try_begin),
                (eq, ":lover", "trp_player"),
                (assign, ":luck", "$g_player_luck"),
                (val_add, ":chance", 100),
                (val_sub, ":chance", ":luck"),
            (else_try),
                (this_or_next|troop_slot_eq, ":lover", slot_lord_reputation_type, lrep_goodnatured),
                (this_or_next|troop_slot_eq, ":lover", slot_lord_reputation_type, lrep_upstanding),
                (troop_slot_eq, ":lover", slot_lord_reputation_type, lrep_custodian),
                (val_add, ":chance", 1),
            (else_try),
                (this_or_next|troop_slot_eq, ":lover", slot_lord_reputation_type, lrep_martial),
                (this_or_next|troop_slot_eq, ":lover", slot_lord_reputation_type, lrep_selfrighteous),
                (troop_slot_eq, ":lover", slot_lord_reputation_type, lrep_roguish),
                (val_add, ":chance", 1),
            (else_try),
                (val_add, ":chance", 2),
            (try_end),
            (store_random_in_range, ":rand", 1, 350),
            (try_begin),
                (lt, ":rand", ":chance"),
                (troop_get_slot, ":spouse", ":lady", slot_troop_spouse),
                (ge, ":spouse", 0),
                # (assign, ":cont", 0),
                # (try_begin),
                #     (eq, ":spouse", "trp_player"),
                #     (store_current_hours, ":cur_hrs"),
                #     (troop_get_slot, ":marriage_time", ":lady",slot_troop_marriage_time),
                #     (val_sub, ":cur_hrs", ":marriage_time"),
                #     (lt, ":cur_hrs", 720),
                #     (assign, ":cont", 1),
                # (try_end),
                # (eq, ":cont", 0),
                (call_script, "script_troop_change_relation_with_troop", ":lover", ":spouse", -60),
                (call_script, "script_troop_change_relation_with_troop", ":lady", ":spouse", -40),
                (try_begin),
                    (eq, ":spouse", "trp_player"),
                    (str_store_troop_name, s33, ":lover"),
                    (tutorial_box, "@You have been informed that, while you were busy, away from your home, your wife took a lover, a man known as {s33}. You discover that the rumors had already been flying.", "@Adultery Discovered"),
                (else_try),
                    (eq, ":lover", "trp_player"),
                    (troop_set_slot, ":lady",slot_troop_lover_attempt, 1),
                    (str_store_troop_name, s33, ":lady"),
                    (tutorial_box, "@Your love affair with {s33} has been discovered.", "@Adultery Discovered"),
                (else_try),
                    (eq, "$g_love_messages_on", 1),
                    (str_store_troop_name, s43, ":lady"),
                    (str_store_troop_name, s33, ":lover"),
                    (tutorial_box, "@You hear that {s43} took a lover, a man known as {s33}. The rumors already fly high. If you have already cast an eye on her, now is the time to strike.", "@Adultery Discovered"),
                (try_end),
                (call_script, "script_change_troop_controversy", ":lover", 100),
                (call_script, "script_change_troop_renown", ":lover", -50),
                (call_script, "script_change_troop_renown", ":spouse", -75),
                (troop_set_slot, ":lady", slot_troop_lover_found, ":lover"),
                (troop_set_slot, ":lady", slot_troop_lover, -1),
            (try_end),
        (else_try), # lover is dead, clear slot
            (troop_set_slot, ":lady", slot_troop_lover_found, -1),
            (troop_set_slot, ":lady", slot_troop_lover, -1),
        (try_end),
    (try_end),
]),

(335,[
    (call_script, "script_execude_debug_message", 12),
    (try_begin),
        #faction_slot_eq, "$players_kingdom", slot_faction_culture, "fac_culture_7"),# player is part of a roman faction
        (troop_slot_ge, "trp_player", slot_troop_spouse, 1),
        (gt, "$g_player_chamberlain", 0),
        (troop_get_slot, ":spouse", "trp_player", slot_troop_spouse),
        (neg|troop_slot_ge, ":spouse", slot_troop_bachus, 1),
        # (this_or_next|troop_slot_eq, ":spouse", slot_troop_culture, "fac_culture_8"),
        # (this_or_next|troop_slot_eq, ":spouse", slot_troop_culture, "fac_culture_7"),
        # (this_or_next|troop_slot_eq, ":spouse", slot_troop_culture, "fac_culture_5"),
        # (troop_slot_eq, ":spouse", slot_troop_culture, "fac_culture_6"),
        (assign, ":chance", "$player_honor"),
        (val_clamp, ":chance", -50, 50),
        (val_mul, ":chance", -1),
        (val_add, ":chance", 60),
        (store_random_in_range, ":r", 0, 190),
        (lt, ":r", ":chance"),
        (jump_to_menu, "mnu_spouse_vaste"),
    (try_end),
    (try_for_range, ":lady", kingdom_ladies_begin, kingdom_ladies_end),
        (try_begin),
            (troop_slot_eq, ":lady", slot_troop_lover, -1),
            (troop_slot_ge, ":lady", slot_troop_lover_found, 0),
            (troop_set_slot, ":lady", slot_troop_lover_found, -1),
        (try_end),
        (try_begin),
            (troop_slot_eq, ":lady", slot_troop_lover_attempt, 1),
            (troop_set_slot, ":lady",slot_troop_lover_attempt, 0),
        (try_end),
        (try_begin),###this shall randomly break love affairs
            (troop_get_slot, ":lover", ":lady", slot_troop_lover),
            (gt, ":lover", 0), # not player
            (store_random_in_range, ":rand", 0, 100),
            (assign, ":chance", 5),
            (try_begin),
                (troop_slot_ge, ":lady", slot_troop_lover_found, 0),
                (val_add, ":chance", 10),
            (try_end),
            (lt, ":rand", ":chance"),
            (troop_set_slot, ":lady", slot_troop_lover, -1),
            (call_script, "script_troop_change_relation_with_troop", ":lover", ":lady", -45),
            # (try_begin),
            #     (eq, ":lover", "trp_player"),
            #     (str_store_troop_name, s30, ":lady"),
            #     (dialog_box, "@You receive a letter from {s30}, stating that your love affair must come to an end. But you will be always in her heart ...", "@A letter"),
            # (try_end),
        (try_end),
    (try_end),
]),

(24,[
    (call_script, "script_execude_debug_message", 13),

    (troop_set_slot, "trp_global_variables", g_rumours_lover, 0), # for lover rumours

    # Kingdom ladies
    (try_for_range,":troop",kingdom_ladies_begin, kingdom_ladies_end),
        (troop_slot_eq, ":troop", slot_troop_occupation, slto_kingdom_lady), # alive
        ##flirt with ladies once a day
        (try_begin),
            (troop_slot_eq, ":troop", slot_troop_flirted_with, 1),
            (troop_set_slot, ":troop", slot_troop_flirted_with, 0),
        (try_end),

        (troop_get_slot,":val",":troop",slot_troop_days_on_mission),
        (neq,":val",0),
        (val_sub,":val",1),
        (val_max,":val",0),
        # (str_store_troop_name, s30, ":troop"),
        # (assign, reg44, ":val"),
        # (display_message, "@Days remaining {reg44} {s30}"),
        (troop_set_slot,":troop",slot_troop_days_on_mission,":val"),
        (try_begin),
            (eq, ":val", 0),
            (try_begin),
                (troop_slot_eq, ":troop", slot_troop_current_mission, npc_mission_improve_influence),
                (troop_get_slot, ":mission_object", ":troop", slot_troop_mission_object),
                (gt, ":mission_object", 0),
                (neg|troop_slot_ge, ":mission_object", slot_troop_occupation, dplmc_slto_exile), # alive
                (str_store_troop_name, s21, ":troop"),
                (str_store_troop_name, s31, ":mission_object"),
                (troop_get_slot, ":amount", ":troop", slot_troop_mission_amount),
                (store_div, ":probability", ":amount", 10),#250,500,750
                (val_mul, ":probability", -1),
                (val_add, ":probability", 100),
                (try_begin),
                    (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_otherworldly),
                    (val_sub, ":probability", 2),
                (else_try),
                    (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_ambitious),
                    (val_add, ":probability", 10),
                (else_try),
                    (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_adventurous),
                    (val_add, ":probability", 5),
                (else_try),
                    (troop_slot_eq, "$g_talk_troop", slot_lord_reputation_type, lrep_moralist),
                    (val_sub, ":probability", 5),
                (try_end),

                (store_random_in_range, ":random", 0,100),
                (try_begin),
                    (lt, ":random", ":probability"),#55%
                    (call_script, "script_change_player_relation_with_troop", ":mission_object", -3),
                    (call_script, "script_change_troop_controversy", "trp_player", 20),
                    (call_script, "script_change_troop_renown", "trp_player", -5),
                    (call_script, "script_change_influence", "trp_player", ":amount"),
                    # (assign, reg22, ":probability"),
                    (str_store_string, s33, "@You recieve a letter from {s21}. The scheme worked well. However, several rumourss have hit your reputation with {s31}."),
                (else_try),
                    (call_script, "script_change_player_relation_with_troop", ":mission_object", -6),
                    (call_script, "script_change_troop_controversy", "trp_player", 40),
                    (call_script, "script_change_troop_renown", "trp_player", -20),
                    (call_script, "script_change_player_honor", -2),
                    # (assign, reg22, ":probability"),
                    (str_store_string, s33, "@You recieve a letter from {s21}. The scheme failed! {s31} was not amused when he heard about it."),
                (try_end),
                (display_message, "@{s33}"),
                (try_begin),
                    (eq, "$g_infinite_camping", 0),
                    (tutorial_box, "@{s33}", "@You recieve a letter"),
                (try_end),

            (else_try),
                (troop_slot_eq, ":troop", slot_troop_current_mission, npc_mission_improve_relations),
                (troop_get_slot, ":mission_object", ":troop", slot_troop_mission_object),
                (gt, ":mission_object", 0),
                (neg|troop_slot_ge, ":mission_object", slot_troop_occupation, dplmc_slto_exile), # alive
                (str_store_troop_name, s32, ":mission_object"),
                (troop_get_slot, ":target", ":troop", slot_troop_mission_target),
                (gt, ":target", 0),
                (str_store_troop_name, s31, ":target"),
                (troop_get_slot, ":amount", ":troop", slot_troop_mission_amount),
                (try_begin),
                    (eq, ":amount", 120),
                    (store_random_in_range, ":random", 0,100),
                    (try_begin),
                        (is_between, ":random", 10, 45),#35%
                        (store_random_in_range, ":change", -50,-30),
                        (call_script, "script_troop_change_relation_with_troop", ":mission_object", ":target", ":change"),
                    #	(call_script, "script_troop_change_relation_with_troop", ":target", ":mission_object", ":change"),
                        (str_store_string, s33, "@It seems that {s31} has found recent stories about {s32}'s infidelity plausible."),
                        (call_script, "script_change_troop_controversy", ":target", 30),
                        (call_script, "script_change_troop_renown", ":target", -5),
                    (else_try),
                        (str_store_string, s33, "@It appears {s31} has dismissed recent stories about {s32}'s infidelity as nothing but his enemies' gossip."),
                    (try_end),
                    (display_message, "@{s33}"),
                    (try_begin),
                        (eq, "$g_infinite_camping", 0),
                        (tutorial_box, "@{s33}", "@Rumors"),
                    (try_end),
                (else_try),
                    (eq, ":amount", 200),
                    (store_random_in_range, ":random", 0,100),
                    (try_begin),
                        (is_between, ":random", 30, 75),#45%
                        (store_random_in_range, ":change", -60,-40),
                        (call_script, "script_troop_change_relation_with_troop", ":mission_object", ":target", ":change"),
                    #  (call_script, "script_troop_change_relation_with_troop", ":target", ":mission_object", ":change"),
                        (str_store_string, s33, "@It seems that {s31} has found recent stories about {s32}'s disloyalty quite plausible."),
                        (call_script, "script_change_troop_controversy", ":target", 60),
                        (call_script, "script_change_troop_renown", ":target", -10),
                    (else_try),
                        (str_store_string, s33, "@It appears that {s31} has dismissed recent stories about {s32}'s disloyalty as nothing but his enemies' gossip."),
                    (try_end),
                    (display_message, "@{s33}"),
                    (try_begin),
                        (eq, "$g_infinite_camping", 0),
                        (tutorial_box, "@{s33}", "@Rumors"),
                    (try_end),
                (else_try),
                    (eq, ":amount", 1500),
                    (store_random_in_range, ":random", 0,100),
                    (try_begin),
                        (lt, ":random", 55),#55%
                        (store_random_in_range, ":change", -70,-50),
                        (call_script, "script_troop_change_relation_with_troop", ":mission_object", ":target", ":change"),
                    #	(call_script, "script_troop_change_relation_with_troop", ":target", ":mission_object", ":change"),
                        (str_store_string, s33, "@It seems that {s31} was not amused after {s32} was found to be involved in a murder of an important person."),
                        (call_script, "script_change_troop_controversy", ":target", 75),
                        (call_script, "script_change_troop_renown", ":target", -15),
                    (else_try),
                        (str_store_string, s33, "@It appears {s32} had managed to avoid being linked to a recent murder, and his relations with {s31} didn't suffer."),
                    (try_end),
                    (display_message, "@{s33}"),
                    (try_begin),
                        (eq, "$g_infinite_camping", 0),
                        (tutorial_box, "@{s33}", "@Rumors"),
                    (try_end),
                (try_end),
            (try_end),
            (troop_set_slot, ":troop", slot_troop_current_mission, -1),
            (troop_set_slot, ":troop", slot_troop_mission_object, -1),
            (troop_set_slot, ":troop", slot_troop_mission_target, -1),
            (troop_set_slot, ":troop", slot_troop_mission_amount, -1),
        (try_end),
    (try_end),
]),

###if a lord has a bad relationship with his liege, he may give him a present
(3,[
    (call_script, "script_execude_debug_message", 14),
    (store_random_in_range, ":actor", active_npcs_begin, active_npcs_end),

    (troop_slot_eq, ":actor", slot_troop_occupation, slto_kingdom_hero),
    (troop_slot_ge, ":actor", slot_troop_wealth, 40000),
    (store_troop_faction, ":faction", ":actor"),
    (faction_get_slot, ":mission_object", ":faction", slot_faction_leader),
    (gt, ":mission_object", 0),
    (neq, ":mission_object", ":actor"),
    (neq, ":mission_object", "trp_player"),###not if player is king
    (assign, ":save_reg0", reg0),
    (try_begin),
        (call_script, "script_troop_get_relation_with_troop", ":mission_object", ":actor"),
        (lt, reg0, -10),#was 0
        (assign, ":relation", reg0),
        (try_begin),
            (troop_slot_eq, ":actor", slot_lord_reputation_type, lrep_martial),
            (assign, ":relation_modifier", 60),
        (else_try),
            (troop_slot_eq, ":actor", slot_lord_reputation_type, lrep_quarrelsome),
            (assign, ":relation_modifier", 50),
        (else_try),
            (this_or_next|troop_slot_eq, ":actor", slot_lord_reputation_type, lrep_selfrighteous),
            (this_or_next|troop_slot_eq, ":actor", slot_lord_reputation_type, lrep_cunning),
            (troop_slot_eq, ":actor", slot_lord_reputation_type, lrep_debauched),
            (assign, ":relation_modifier", 120),
        (else_try),
            (troop_slot_eq, ":actor", slot_lord_reputation_type, lrep_goodnatured),
            (assign, ":relation_modifier", 90),
        (else_try),
            (troop_slot_eq, ":actor", slot_lord_reputation_type, lrep_upstanding),
            (assign, ":relation_modifier", 70),
        (else_try),
            (assign, ":relation_modifier", 100),
        (try_end),
        (val_abs, ":relation"),
        (val_mul, ":relation", ":relation_modifier"),
        (val_div, ":relation", 100),
        (assign, ":bound", 100),
        (try_begin),
            (eq, ":mission_object", "trp_kingdom_7_lord"),
            (val_add, ":bound", 120),
        (try_end),
        (try_begin),
            (store_random_in_range, ":chance", 0,":bound"),
            (lt, ":chance",":relation"),
            (try_begin),
                (troop_slot_ge, ":actor", slot_troop_wealth, 75000),
                (call_script, "script_add_to_troop_wealth", ":actor", -10000),
                (store_random_in_range, ":change", 6, 15),
                (call_script, "script_troop_change_relation_with_troop", ":mission_object", ":actor", ":change"),
            (else_try),
                (call_script, "script_add_to_troop_wealth", ":actor", -5000),
                (store_random_in_range, ":change", 4, 8),
                (call_script, "script_troop_change_relation_with_troop", ":mission_object", ":actor", ":change"),
            (try_end),
            (try_begin),
                (str_store_troop_name, s32, ":mission_object"),
                (str_store_troop_name, s31, ":actor"),
                (eq, ":faction", "$players_kingdom"),
                (eq, "$g_infinite_camping", 0),
                (eq, "$g_display_gift", 1),
                (tutorial_box, "@It is well known that {s32} dislikes {s31}. Now you hear people say that {s31} has brought beautiful jewellry as present for {s32}.", "@Rumors"),
            (try_end),
            (call_script, "script_change_troop_controversy", ":actor", -25),
            (call_script, "script_change_troop_renown", ":actor", 5),
        (try_end),
    (try_end),
    (assign, reg0, ":save_reg0"),
]),

##if a lord hates another one, he may try to lower his enemies relation with the liege
(20,[
    (call_script, "script_execude_debug_message", 15),

    (store_random_in_range, ":actor", active_npcs_begin, active_npcs_end),
    (troop_slot_eq, ":actor", slot_troop_occupation, slto_kingdom_hero),
    (troop_get_slot, ":actors_gold", ":actor", slot_troop_wealth),
    (try_begin),
        (ge, ":actors_gold", 40000),
        (store_troop_faction, ":faction", ":actor"),
        (faction_get_slot, ":mission_object", ":faction", slot_faction_leader),
        (neq, ":mission_object", ":actor"),
        #(neq, ":mission_object", "trp_player"),
        (ge, ":mission_object", 0),
        (str_store_troop_name, s31, ":mission_object"),
        (try_begin),
            (troop_slot_eq, ":actor", slot_lord_reputation_type, lrep_martial),
            (assign, ":relation_modifier", 80),
            (assign, ":chance", 10),
        (else_try),
            (troop_slot_eq, ":actor", slot_lord_reputation_type, lrep_quarrelsome),
            (assign, ":relation_modifier", 150),
            (assign, ":chance", 20),
        (else_try),
            (this_or_next|troop_slot_eq, ":actor", slot_lord_reputation_type, lrep_selfrighteous),
            (this_or_next|troop_slot_eq, ":actor", slot_lord_reputation_type, lrep_cunning),
            (troop_slot_eq, ":actor", slot_lord_reputation_type, lrep_debauched),
            (assign, ":relation_modifier", 50),
            (assign, ":chance", 25),
        (else_try),
            (troop_slot_eq, ":actor", slot_lord_reputation_type, lrep_goodnatured),
            (assign, ":relation_modifier", 100),
            (assign, ":chance", 1),
        (else_try),
            (troop_slot_eq, ":actor", slot_lord_reputation_type, lrep_upstanding),
            (assign, ":relation_modifier", 70),
            (assign, ":chance", 7),
        (else_try),
            (assign, ":relation_modifier", 100),
            (assign, ":chance", 10),
        (try_end),
        (store_random_in_range, ":action", 0, 105),
        (lt, ":action", ":chance"),
        (assign, ":score", 0),
        (assign, ":target", -1),

        (try_for_range, ":dumy", active_npcs_including_player_begin, active_npcs_end),
            (try_begin),
                (eq, ":dumy", "trp_kingdom_heroes_including_player_begin"),
                (assign, ":dumy", "trp_player"),
                (assign, ":faction3", "$players_kingdom"),
            (else_try),
                (store_faction_of_troop, ":faction3", ":dumy"),
            (try_end),
            (eq, ":faction", ":faction3"),
            (assign, ":c", 0),
            (try_begin),
                (troop_slot_eq, ":dumy", slot_troop_occupation, slto_kingdom_hero),
                (assign, ":c", 1),
            (else_try),
                (eq, ":dumy", "trp_player"),
                (assign, ":c", 1),
            (try_end),
            (eq, ":c", 1),

            (neq, ":mission_object", ":dumy"),
            (call_script, "script_troop_get_relation_with_troop", ":mission_object", ":dumy"),
            (ge, reg0, -70),
            (call_script, "script_troop_get_relation_with_troop", ":actor", ":dumy"),
            # (str_store_troop_name, s40, ":dumy"),
            # (str_store_troop_name, s41, ":actor"),
            # (display_message, "@{s41} mag {s40} {reg0}"),
            (lt, reg0, 0),
            (assign, ":relation", reg0),
            (troop_get_slot, ":renown", ":dumy", slot_troop_renown),
            (val_abs, ":relation"),
            (val_mul, ":relation", ":relation_modifier"),
            (val_div, ":relation", 100),
            (val_mul, ":renown", ":relation"),
            (gt, ":renown", ":score"),
            (assign, ":score", ":renown"),
            (assign, ":target", ":dumy"),
            # (assign, reg5, ":score"),
            # (display_message, "@target: {s40}"),
            # (display_message, "@scroe: {reg5}"),
        (try_end),
        (try_begin),
            (ge, ":target",0),
            (str_store_troop_name, s32, ":target"),
            # (str_store_troop_name, s40, ":actor"),
            # (display_message, "@It was {s40}"),
            (store_random_in_range, ":r", 0,3),
            (try_begin),
                (eq, ":r", 0),
                (assign, ":amount", 120),
                (call_script, "script_add_to_troop_wealth", ":actor", -120),
            (else_try),
                (eq, ":r", 1),
                (assign, ":amount", 200),
                (call_script, "script_add_to_troop_wealth", ":actor", -200),
            (else_try),
                (eq, ":r", 2),
                (assign, ":amount", 1500),
                (call_script, "script_add_to_troop_wealth", ":actor", -1500),
            (else_try),
                (assign, ":amount", 200),
                (call_script, "script_add_to_troop_wealth", ":actor", -200),
            (try_end),
            (try_begin),
                (eq, ":target", "trp_player"),
                (str_store_troop_name, s40, ":actor"),
                (display_message, "@{s40} has spread false rumors about you!",color_bad_news),
            (try_end),
            (try_begin),
                (eq, ":amount", 120),
                (store_random_in_range, ":random", 0,100),
                (try_begin),
                    (neq, ":mission_object", "trp_player"),
                    (is_between, ":random", 25, 55),
                    (store_random_in_range, ":change", -21,-14),
                    #(call_script, "script_troop_change_relation_with_troop", ":target", ":mission_object", ":change"),
                    (call_script, "script_troop_change_relation_with_troop", ":mission_object", ":target", ":change"),
                    (str_store_string, s33, "@It seems that {s31} has found recent stories about {s32}'s infidelity plausible."),
                    (call_script, "script_change_troop_controversy", ":target", 5),
                    (call_script, "script_change_troop_renown", ":target", -2),
                (else_try),
                    (neq, ":mission_object", "trp_player"),
                    (str_store_string, s33, "@It appears {s31} has dismissed recent stories about {s32}'s infidelity as nothing but his enemies' gossip."),
                (try_end),
                (try_begin),
                    (eq, ":faction", "$players_kingdom"),
                    (eq, "$g_infinite_camping", 0),
                    (try_begin),
                        (eq, ":mission_object", "trp_player"),
                        (assign, "$temp", ":target"),
                        (jump_to_menu, "mnu_rumors"),
                    (else_try),
                        (tutorial_box, "@{s33}", "@Rumors"),
                        (display_message, "@{s33}"),
                    (try_end),
                (try_end),
            (else_try),
                (eq, ":amount", 200),
                (store_random_in_range, ":random", 0,100),
                (try_begin),
                    (neq, ":mission_object", "trp_player"),
                    (is_between, ":random", 30, 70),
                    (store_random_in_range, ":change", -35,-23),
                    #(call_script, "script_troop_change_relation_with_troop", ":target", ":mission_object", ":change"),
                    (call_script, "script_troop_change_relation_with_troop", ":mission_object", ":target", ":change"),
                    (str_store_string, s33, "@It seems that {s31} has found recent stories about {s32}'s disloyalty quite plausible."),
                    (call_script, "script_change_troop_controversy", ":target", 10),
                    (call_script, "script_change_troop_renown", ":target", -5),
                (else_try),
                    (neq, ":mission_object", "trp_player"),
                    (str_store_string, s33, "@It appears that {s31} has dismissed recent stories about {s32}'s disloyalty as nothing but his enemies' gossip."),
                (try_end),
                (try_begin),
                    (eq, ":faction", "$players_kingdom"),
                    (eq, "$g_infinite_camping", 0),
                    (try_begin),
                        (eq, ":mission_object", "trp_player"),
                        (assign, "$temp", ":target"),
                        (jump_to_menu, "mnu_rumors"),
                    (else_try),
                        (tutorial_box, "@{s33}", "@Rumors"),
                        (display_message, "@{s33}"),
                    (try_end),
                (try_end),
            (else_try),
                (eq, ":amount", 1500),
                (store_random_in_range, ":random", 0,100),
                (try_begin),
                    (neq, ":mission_object", "trp_player"),
                    (lt, ":random", 50),
                    (store_random_in_range, ":change", -50,-30),
                    #	  (call_script, "script_troop_change_relation_with_troop", ":target", ":mission_object", ":change"),
                    (call_script, "script_troop_change_relation_with_troop", ":mission_object", ":target", ":change"),
                    (str_store_string, s33, "@It seems that {s31} was not amused after {s32} was found to be involved in a murder of an important person."),
                    (call_script, "script_change_troop_controversy", ":target", 25),
                    (call_script, "script_change_troop_renown", ":target", -10),
                (else_try),
                    (neq, ":mission_object", "trp_player"),
                    (str_store_string, s33, "@It appears {s32} had managed to avoid being linked to a recent murder, and his relations with {s31} didn't suffer."),
                (try_end),
                (try_begin),
                    (eq, ":faction", "$players_kingdom"),
                    (eq, "$g_infinite_camping", 0),
                    (try_begin),
                        (eq, ":mission_object", "trp_player"),
                        (assign, "$temp", ":target"),
                        (jump_to_menu, "mnu_rumors"),
                    (else_try),
                        (tutorial_box, "@{s33}", "@Rumors"),
                        (display_message, "@{s33}"),
                    (try_end),
                (try_end),
            (try_end),
        (try_end),
    (try_end),
]),

##if a lord hates the player, he will make trouble in the capital of the player
(12,[
    (call_script, "script_execude_debug_message", 16),
    (store_random_in_range, ":actor", active_npcs_begin, active_npcs_end),
    (troop_slot_eq, ":actor", slot_troop_occupation, slto_kingdom_hero),
    #(troop_slot_ge, ":actor", slot_troop_wealth, 30000),
    (store_troop_faction, ":faction", ":actor"),
    (eq, ":faction", "$players_kingdom"),

    (assign, ":save_reg0", reg0),
    (try_begin),
        (call_script, "script_troop_get_player_relation", ":actor"),
        (assign, ":relation_with_player", reg0),
        (lt, ":relation_with_player", -5),
        (try_begin),
            (troop_slot_eq, ":actor", slot_lord_reputation_type, lrep_martial),
            (assign, ":chance", -5),
        (else_try),
            (troop_slot_eq, ":actor", slot_lord_reputation_type, lrep_quarrelsome),
            (assign, ":chance", 5),
        (else_try),
            (this_or_next|troop_slot_eq, ":actor", slot_lord_reputation_type, lrep_selfrighteous),
            (this_or_next|troop_slot_eq, ":actor", slot_lord_reputation_type, lrep_cunning),
            (troop_slot_eq, ":actor", slot_lord_reputation_type, lrep_debauched),
            (assign, ":chance", 2),
        (else_try),
            (troop_slot_eq, ":actor", slot_lord_reputation_type, lrep_goodnatured),
            (assign, ":chance", -20),
        (else_try),
            (troop_slot_eq, ":actor", slot_lord_reputation_type, lrep_upstanding),
            (assign, ":chance", -15),
        (else_try),
            (assign, ":chance", -10),
        (try_end),
        (val_abs, ":relation_with_player"),
        (val_add, ":chance", ":relation_with_player"),
        (try_begin),
            (assign, ":loop", towns_end),
            (assign, ":town_fond", -1),
            (try_for_range, ":towns", towns_begin, ":loop"),
                (party_slot_eq, ":towns", slot_town_lord, "trp_player"),
                (assign, ":town_fond", ":towns"),
                (assign, ":loop", -1),#end loop
            (try_end),
            (is_between, ":town_fond", towns_begin, towns_end),
            (store_random_in_range, ":action", 0, 110),#make it less often
            (lt, ":action", ":chance"),
            (party_get_slot, ":player_relation", ":town_fond", slot_center_player_relation),
            (assign, ":chance2", 80),
            (val_mul, ":player_relation", -1),
            (val_add, ":chance2", ":player_relation"),
            (store_random_in_range, ":action2",0, 190),
            (try_begin),
                (lt, ":action2", ":chance2"),
                (str_store_party_name, s30, ":town_fond"),
                (str_store_troop_name, s31, ":actor"),
                (call_script, "script_change_player_relation_with_center", ":town_fond", -10),
                (try_begin),
                    (eq, "$g_infinite_camping", 0),
                    (tutorial_box, "@You hear that {s31} gave a speech in {s30}. In his speech he said that you are a dishonerable man, not more worth then a beggar! He also said that you abuse your office and do many other crimes. The people of {s30} believed him! Your relationship with {s30} is hurt!", "@Rumors"),
                (try_end),
            (else_try),
                (str_store_party_name, s30, ":town_fond"),
                (str_store_troop_name, s31, ":actor"),
                (try_begin),
                    (eq, "$g_infinite_camping", 0),
                    (tutorial_box, "@You hear that {s31} gave a speech in {s30}. In his speech he said that you are a dishonerable man, not more worth then a beggar! He also said that you abuse your office and do many other crimes. His speech was a disaster! The people of {s30} throw him out of the city!", "@Rumors"),
                (try_end),
            (try_end),
        (else_try),
            (store_random_in_range, ":action", 0, 110),#make it less often
            (lt, ":action", ":chance"),
            (troop_slot_eq, "trp_player", slot_troop_culture, "fac_culture_7"),#player is roman
            (troop_slot_ge, "trp_senator_dummy", slot_senate_support, 30),
            (party_get_slot, ":player_relation", "p_town_6", slot_center_player_relation),
            (assign, ":chance2", 80),
            (val_mul, ":player_relation", -1),
            (val_add, ":chance2", ":player_relation"),
            (store_random_in_range, ":action2",0, 160),
            (try_begin),
                (lt, ":action2", ":chance2"),
                (str_store_troop_name, s31, ":actor"),
                (set_show_messages, 0),
                (call_script, "script_change_senate_support", -3, 0),
                (set_show_messages, 1),
                (try_begin),
                    (eq, "$g_infinite_camping", 0),
                    (tutorial_box, "@You hear that {s31} gave a speech before the senate. In his speech he said that you are a dishonerable man, not more worth then a beggar! He also said that you abuse your office and do many other crimes. Some senators stopped supporting you.", "@Rumors"),
                (try_end),
            (else_try),
                (str_store_troop_name, s31, ":actor"),
                (try_begin),
                    (eq, "$g_infinite_camping", 0),
                    (tutorial_box, "@You hear that {s31} gave a speech before the senate. In his speech he said that you are a dishonerable man, not more worth then a beggar! He also said that you abuse your office and do many other crimes. His speech has not effected the opinion of the senators.", "@Rumors"),
                (try_end),
            (try_end),
        (try_end),
    (try_end),
    (assign, reg0, ":save_reg0"),
]),

(24,[
    (call_script, "script_execude_debug_message", 17),
    (try_begin),
        (neq, "$g_is_emperor", 1),
        (neg|check_quest_active, "qst_visit_lady"),
        (neg|troop_slot_ge, "trp_player", slot_troop_prisoner_of_party, 1),
        (neg|troop_slot_ge, "trp_player", slot_troop_spouse, active_npcs_begin),

        (assign, ":lady_not_visited_longest_time", -1),
        (assign, ":longest_time_without_visit", 120), #five days

        (try_for_range, ":troop_id", kingdom_ladies_begin, kingdom_ladies_end),
            ##diplomacy start not dead, exiled, etc.
            (neg|troop_slot_ge, ":troop_id", slot_troop_occupation, slto_retirement),

            #not already betrothed
            (neg|troop_slot_eq, "trp_player", slot_troop_betrothed, ":troop_id"),

            ##diplomacy end
            #set up message for ladies the player is courting
            (this_or_next|troop_slot_ge, ":troop_id", slot_troop_met, 2),
            (troop_slot_eq, ":troop_id", slot_troop_lover, "trp_player"),
            (neg|troop_slot_eq, ":troop_id", slot_troop_met, 4),

            (troop_slot_eq, ":troop_id", slot_lady_no_messages, 0),
            (neg|troop_slot_eq, ":troop_id", slot_troop_spouse, "trp_player"),
            (neg|troop_slot_eq, "trp_player", slot_troop_spouse, ":troop_id"),

            (troop_get_slot, ":location", ":troop_id", slot_troop_cur_center),
            (is_between, ":location", walled_centers_begin, walled_centers_end),
            (call_script, "script_troop_get_relation_with_troop", "trp_player", ":troop_id"),
            (gt, reg0, 5),

            (store_current_hours, ":hours_since_last_visit"),
            (troop_get_slot, ":last_visit_hour", ":troop_id", slot_troop_last_talk_time),
            (val_sub, ":hours_since_last_visit", ":last_visit_hour"),

            (gt, ":hours_since_last_visit", ":longest_time_without_visit"),
            (assign, ":longest_time_without_visit", ":hours_since_last_visit"),
            (assign, ":lady_not_visited_longest_time", ":troop_id"),
            (assign, ":visit_lady_location", ":location"),
        (try_end),

        (try_begin),
            (gt, ":lady_not_visited_longest_time", 0),
            (call_script, "script_add_notification_menu", "mnu_notification_lady_requests_visit", ":lady_not_visited_longest_time", ":visit_lady_location"),
        (try_end),
    (else_try), ##if you are the emperor, ladies really really want to you
        (eq, "$g_is_emperor", 1),
        (neg|check_quest_active, "qst_visit_lady"),
        (neg|troop_slot_ge, "trp_player", slot_troop_prisoner_of_party, 1),
        (assign, ":lady_not_visited_longest_time", -1),
        (assign, ":longest_time_without_visit", 96), #4 days
        (try_for_range, ":troop_id", kingdom_ladies_begin, kingdom_ladies_end),
            ##diplomacy start not dead, exiled, etc.
            (neg|troop_slot_ge, ":troop_id", slot_troop_occupation, slto_retirement),
            #not already betrothed
            (neg|troop_slot_eq, "trp_player", slot_troop_betrothed, ":troop_id"),
            ##diplomacy end
            #set up message for ladies the player is courting
            (this_or_next|troop_slot_ge, ":troop_id", slot_troop_met, 2),
            (troop_slot_eq, ":troop_id", slot_troop_lover, "trp_player"),
            (neg|troop_slot_eq, ":troop_id", slot_troop_met, 4),
            (neg|troop_slot_eq, ":troop_id", slot_troop_spouse, "trp_player"),
            (neg|troop_slot_eq, "trp_player", slot_troop_spouse, ":troop_id"),
            (troop_slot_eq, ":troop_id", slot_lady_no_messages, 0),
            #(troop_slot_eq, ":troop_id", slot_troop_spouse, -1),

            (troop_get_slot, ":location", ":troop_id", slot_troop_cur_center),
            (is_between, ":location", walled_centers_begin, walled_centers_end),
            (call_script, "script_troop_get_relation_with_troop", "trp_player", ":troop_id"),
            (gt, reg0, -20),

            (store_current_hours, ":hours_since_last_visit"),
            (troop_get_slot, ":last_visit_hour", ":troop_id", slot_troop_last_talk_time),
            (val_sub, ":hours_since_last_visit", ":last_visit_hour"),

            (gt, ":hours_since_last_visit", ":longest_time_without_visit"),
            (assign, ":longest_time_without_visit", ":hours_since_last_visit"),
            (assign, ":lady_not_visited_longest_time", ":troop_id"),
            (assign, ":visit_lady_location", ":location"),
        (try_end),
        (try_begin),
            (gt, ":lady_not_visited_longest_time", 0),
            (call_script, "script_add_notification_menu", "mnu_notification_lady_requests_visit", ":lady_not_visited_longest_time", ":visit_lady_location"),
        (try_end),
    (try_end),
]),

#Player raiding a village
# This trigger will check if player's raid has been completed and will lead control to village menu.
(1,[
    (call_script, "script_execude_debug_message", 18),
    (is_between,"$g_player_raiding_village",villages_begin,villages_end),
    (try_begin),
        (neq, "$g_player_is_captive", 0),
        #(rest_for_hours, 0, 0, 0), #stop resting - abort
        (assign,"$g_player_raiding_village",0),
    (else_try),
        (this_or_next|party_slot_eq, "$g_player_raiding_village", slot_village_state, svs_looted),
        (party_slot_eq, "$g_player_raiding_village", slot_village_state, svs_deserted),
        (start_encounter, "$g_player_raiding_village"),
        (rest_for_hours, 0),
        (assign,"$g_player_raiding_village",0),
        (assign,"$g_player_raid_complete",1),
    (else_try),
        (party_slot_eq, "$g_player_raiding_village", slot_village_state, svs_being_raided),
        (rest_for_hours_interactive, 3, 5, 1), #rest while attackable    ###CHANGE rest_for_hours to rest_for_hours_interactive; ###OPTIONAL COMMENT OUT
    (else_try),
        (rest_for_hours, 0, 0, 0), #stop resting - abort
        (assign,"$g_player_raiding_village",0),
        (assign,"$g_player_raid_complete",0),
    (try_end),
]),

(0.25,[
    (call_script, "script_execude_debug_message", 19),
    (is_between,"$g_player_raiding_village",villages_begin,villages_end),
    (store_distance_to_party_from_party, ":distance", "$g_player_raiding_village", "p_main_party"),
    (try_begin),
        (gt, ":distance", raid_distance),
        (str_store_party_name_link, s1, "$g_player_raiding_village"),
        (display_message, "@You have broken off your raid of {s1}."),
        (call_script, "script_village_set_state", "$current_town", 0),
        (party_set_slot, "$current_town", slot_village_raided_by, -1),
        (assign, "$g_player_raiding_village", 0),
        (rest_for_hours, 0, 0, 0), #stop resting - abort
    (else_try),
        (ge, ":distance", raid_distance / 2),
        (map_free),
        (jump_to_menu, "mnu_village_loot_continue"),
    (try_end),
]),

#Pay day.#21
(24 * 7,[
    (call_script, "script_execude_debug_message", 20),
    ##rank increase fame
    (try_begin),
        (eq, "$g_rank", 1),
        (display_message, "@As tribunus, you gain fame."),
        (try_begin),
            (neg|troop_slot_ge, "trp_player", slot_troop_renown, 800),
            (call_script, "script_change_troop_renown", "trp_player", 2),
        (try_end),
    (else_try),
        (eq, "$g_rank", 2),
        (display_message, "@As praefectus, you gain fame."),
        (try_begin),
            (neg|troop_slot_ge, "trp_player", slot_troop_renown, 800),
            (call_script, "script_change_troop_renown", "trp_player", 5),
        (try_end),
    (else_try),
        (eq, "$g_rank", 3),
        (display_message, "@As legatus, you gain fame."),
        (try_begin),
            (neg|troop_slot_ge, "trp_player", slot_troop_renown, 800),
            (call_script, "script_change_troop_renown", "trp_player", 8),
        (try_end),
    (try_end),
    (try_begin),
        (troop_slot_ge, "trp_player", slot_troop_spouse, 1),
        (troop_get_slot,":spouse", "trp_player", slot_troop_spouse),
        (troop_slot_eq, ":spouse", slot_troop_bachus, 3),
        (display_message, "@The extravagant parties of your spouse are famous."),
        (try_begin),
            (neg|troop_slot_ge, "trp_player", slot_troop_renown, 800),
            (call_script, "script_change_troop_renown", "trp_player", 5),
        (try_end),
        (try_begin),
            (ge, "$player_honor", -50),
            (call_script, "script_change_player_honor", -1),
        (try_end),
        (store_random_in_range, ":r", 0, 10),
        (ge, ":r", 4),
        (call_script, "script_change_senate_support", 1,1),
    (try_end),
    ##some decrees decrease unrest
    (try_begin),
        (store_random_in_range, reg23, 1, 101),
        (lt, reg23, 30),
        (gt, "$g_unrest", 40),
        (assign, ":counter",0),
        (try_for_range, ":walled_center", walled_centers_begin, walled_centers_end),
            (party_get_slot,":law", ":walled_center", slot_center_decree_law_enforcement),
            (party_get_slot,":curfew", ":walled_center", slot_center_decree_curfew),
            (party_get_slot,":controll", ":walled_center", slot_center_decree_control),
            (party_get_slot,":guard", ":walled_center", slot_center_has_guard),
            (val_clamp, ":guard", 0, 2),
            (val_add, ":counter", ":curfew"),
            (val_add, ":counter", ":controll"),
            (val_add, ":counter", ":law"),
            (val_add, ":counter", ":guard"),
        (try_end),
        (gt, ":counter", 10),
        (val_mul, ":counter", reg23),
        (val_div, ":counter", 100),
        (val_clamp, ":counter", 1, 5),
        (val_sub, "$g_unrest", ":counter"),
        (display_message, "@The Empire seems quiet. Stability increases", color_good_news),
    (try_end),
    (try_begin),
        (gt, "$g_unrest", 20),
        (store_random_in_range, reg23, 0, 100),
        (lt, reg23, 45),
        (eq, "$edict6", 1),
        (val_sub, "$g_unrest", 1),
        (display_message, "@People have trust in a better future. Stability increases", color_good_news),
    (try_end),
    (try_begin),
        (lt, "$g_unrest", 70),
        (store_random_in_range, reg23, 0, 100),
        (ge, reg23, 75),
        (eq, "$edict1", 1),
        (val_add, "$g_unrest", 1),
        (display_message, "@Due to the Edictum de libelli, unrest rises in the Empire. Stability decreases", color_bad_news),
    (try_end),
    (try_begin),
        (ge, "$g_unrest", 5),
        (store_random_in_range, reg23, 0, 100),
        (ge, reg23, 70),
        (eq, "$edict9", 1),
        (val_add, "$g_unrest", 1),
        (display_message, "@Due to the Lex Alimenta, stability increases.", color_good_news),
    (try_end),
]),

  # Oath fulfilled -- ie, mercenary contract expired
(24,[
    (call_script, "script_execude_debug_message", 21),

    (le, "$auto_menu", 0),
    (gt, "$players_kingdom", 0),
    (neq, "$players_kingdom", "fac_player_supporters_faction"),
    (eq, "$player_has_homage", 0),

	  (troop_get_slot, ":player_spouse", "trp_player", slot_troop_spouse),

	  #A player bound to a kingdom by marriage will not have the contract expire. This should no longer be the case, as I've counted wives as having homage, but is in here as a fallback
	  (assign, ":player_has_marriage_in_faction", 0),
	  (try_begin),
        (is_between, ":player_spouse", active_npcs_begin, active_npcs_end),
        (store_faction_of_troop, ":spouse_faction", ":player_spouse"),
        (eq, ":spouse_faction", "$players_kingdom"),
        (assign, ":player_has_marriage_in_faction", 1),
	  (try_end),
	  (eq, ":player_has_marriage_in_faction", 0),

    (store_current_day, ":cur_day"),
    (gt, ":cur_day", "$mercenary_service_next_renew_day"),
    (jump_to_menu, "mnu_oath_fulfilled"),
]),

# Reducing luck by 1 in every 180 hours
(180,[
    (call_script, "script_execude_debug_message", 22),
    (try_begin),
        (faction_slot_eq, "$players_kingdom", slot_faction_government_type, gov_imperial),
        (faction_slot_ge, "$players_kingdom", slot_faction_debts, 1000000),
        ##(ge, "$g_player_debt_to_party_members", 350000),
        ##(eq, "$g_is_emperor", 1),
        (faction_slot_eq, "$players_kingdom", slot_faction_leader, "trp_player"),
        (gt, "$g_player_chamberlain", 1),
        (neg|troop_slot_ge, "$g_player_chamberlain", slot_troop_days_on_mission, 1),
        (jump_to_menu, "mnu_financial_crisis_2"),
    (else_try),
        (faction_slot_eq, "$players_kingdom", slot_faction_government_type, gov_imperial),
        (faction_slot_ge, "$players_kingdom", slot_faction_debts, 750000),
        ##(ge, "$g_player_debt_to_party_members", 100000),
        ##(eq, "$g_is_emperor", 1),
        (faction_slot_eq, "$players_kingdom", slot_faction_leader, "trp_player"),
        (gt, "$g_player_chamberlain", 1),
        (neg|troop_slot_ge, "$g_player_chamberlain", slot_troop_days_on_mission, 1),
        (jump_to_menu, "mnu_financial_crisis"),
    (try_end),
    (try_begin),
        (val_sub, "$g_player_luck", 1),
        (val_max, "$g_player_luck", 0),
    (try_end),
]),

#courtship reset
(72,[
    (call_script, "script_execude_debug_message", 23),
    (assign, "$lady_flirtation_location", 0),
    (assign, "$g_effect_apllied", 0),##efects of slave treatment, let it happen less often
    (faction_slot_eq, "$players_kingdom", slot_faction_leader, "trp_player"),
    (try_begin),
        (faction_slot_eq, "$players_kingdom", slot_faction_government_type, gov_imperial),
        (faction_slot_ge, "$players_kingdom", slot_faction_debts, 750000),
        # (ge, "$g_player_debt_to_party_members", 100000),
        # (eq, "$g_is_emperor", 1),
        (lt, "$g_unrest", 100),
        (display_message, "@Due your debts unrest rises. Stability decreases.", color_bad_news),
        (val_add, "$g_unrest", 1),
        (call_script, "script_change_player_right_to_rule", -1),
    (else_try),
        (ge, "$g_player_debt_to_party_members", 25000),
        (faction_slot_eq, "$players_kingdom", slot_faction_government_type, gov_feudal),
        (faction_slot_eq, "$players_kingdom", slot_faction_state, sfs_active),
        (display_message, "@Your debts undermine your authority.", color_bad_news),
        (call_script, "script_change_player_right_to_rule", -2),
    (try_end),
]),

#reset time to spare
(4,[
    (call_script, "script_execude_debug_message", 24),
    (assign, "$g_time_to_spare", 1),

    (try_begin),
        (troop_slot_ge, "trp_player", slot_troop_spouse, active_npcs_begin),
        (assign, "$g_player_banner_granted", 1),
    (try_end),
]),

# Banner selection menu
(24,[
    (call_script, "script_execude_debug_message", 25),
    (eq, "$g_player_banner_granted", 1),
    (troop_slot_eq, "trp_player", slot_troop_banner_scene_prop, 0),
    (le,"$auto_menu",0),
    (assign, "$g_edit_banner_troop", "trp_player"),
    (assign, "$g_presentation_next_presentation", -1),
    (jump_to_menu, "mnu_choose_banner"),
]),

# Party Morale: Move morale towards target value.
(24,[
    (call_script, "script_execude_debug_message", 26),
    (call_script, "script_get_player_party_morale_values"),
    (assign, ":target_morale", reg0),
    (party_get_morale, ":cur_morale", "p_main_party"),
    (store_sub, ":dif", ":target_morale", ":cur_morale"),
    (store_div, ":dif_to_add", ":dif", 5),
    (store_mul, ":dif_to_add_correction", ":dif_to_add", 5),
    (try_begin),#finding ceiling of the value
        (neq, ":dif_to_add_correction", ":dif"),
        (try_begin),
            (gt, ":dif", 0),
            (val_add, ":dif_to_add", 1),
        (else_try),
            (val_sub, ":dif_to_add", 1),
        (try_end),
    (try_end),
    (val_add, ":cur_morale", ":dif_to_add"),
    (party_set_morale, "p_main_party", ":cur_morale"),
]),

(24.0*3.0/(number_of_centers),[###every center has an ideal prosperity, this is to reach that
 #this is moved up from below , from a 24 x 15 slot to a 24 slot
    (call_script, "script_execude_debug_message", 27),
    (store_random_in_range, ":center_no", centers_begin, centers_end),
    (assign, ":save_reg0", reg0),
    (call_script, "script_get_center_ideal_prosperity", ":center_no"),
    (assign, ":ideal_prosperity", reg0),
    (party_get_slot, ":prosperity", ":center_no", slot_town_prosperity),
    (try_begin),
        (gt, ":prosperity", ":ideal_prosperity"),
        (store_random_in_range, ":change", 1, 3),##more negative effects now possible
        (val_mul, ":change", -1),
        (call_script, "script_change_center_prosperity", ":center_no", ":change"),
        (val_add, "$newglob_total_prosperity_from_convergence", ":change"),
    (else_try),
        (lt, ":prosperity", ":ideal_prosperity"),
        (store_random_in_range, ":change", 1, 3),
        (call_script, "script_change_center_prosperity", ":center_no", ":change"),
        (val_add, "$newglob_total_prosperity_from_convergence", ":change"),
    (try_end),
    (assign, reg0, ":save_reg0"),
]),

##Number 29
#Party AI: pruning some of the prisoners in each center (once a week on average)
(24.0*7.0/(number_of_walled_centers),[
    (call_script, "script_execude_debug_message", 28),
    (store_random_in_range, ":center_no", walled_centers_begin, walled_centers_end),

    (try_begin),
        (party_get_slot, ":lord", ":center_no", slot_town_lord),#only in AI centers
        (ge, ":lord", 1),

        #SB : save g_talk_troop
        (assign, ":save_talk_troop", "$g_talk_troop"),
        (assign, ":save_reg0", reg0),
        (assign, "$g_talk_troop", ransom_brokers_begin), #to get the right price

        (party_get_num_prisoner_stacks, ":num_prisoner_stacks",":center_no"),
        (try_for_range_backwards, ":stack_no", 0, ":num_prisoner_stacks"),
            (party_prisoner_stack_get_troop_id, ":stack_troop",":center_no",":stack_no"),
            (neg|troop_is_hero, ":stack_troop"),
            (party_prisoner_stack_get_size, ":stack_size",":center_no",":stack_no"),
            (store_random_in_range, ":rand_no", 50, 101),
            (val_mul, ":stack_size", ":rand_no"),
            (val_div, ":stack_size", 100),
            (party_remove_prisoners, ":center_no", ":stack_troop", ":stack_size"),
            (call_script, "script_game_get_prisoner_price", ":stack_troop"),
            (store_mul, ":ransom_profits", ":stack_size", reg0),
            (try_begin),
                (party_slot_ge, ":center_no", slot_center_ransom_broker, ransom_brokers_begin),
                (val_mul, ":ransom_profits", 2),
                (val_div, ":ransom_profits", 3),
            (try_end),
            (val_add, reg45, ":ransom_profits"),
            (val_add, reg44, ":stack_size"),
            (call_script, "script_dplmc_distribute_gold_to_lord_and_holdings", ":ransom_profits", ":lord"),
        (try_end),
        (assign, "$g_talk_troop", ":save_talk_troop"),
        (assign, reg0, ":save_reg0"),
    (try_end),
]),

#Adding net incomes to centers (once a week)
(24*7.0/(number_of_walled_centers),[
    (call_script, "script_execude_debug_message", 29),
    (try_begin),
        (neg|is_between, "$g_center_wealth", walled_centers_begin,walled_centers_end),
        (assign, "$g_center_wealth", walled_centers_begin),
    (try_end),
    (try_begin),
        #If non-player center, adding income to wealth
        (party_slot_ge, "$g_center_wealth", slot_town_lord, 0), #center belongs to someone.
        (party_slot_eq, "$g_center_wealth", slot_center_is_besieged_by, -1),# not attrition during siege
        ##diplomacy start+ Save register
        (assign, ":save_reg0", reg0),

        ##diplomacy end+
        (party_get_slot, ":cur_wealth", "$g_center_wealth", slot_town_wealth),
        (party_get_slot, ":added_wealth", "$g_center_wealth", slot_town_prosperity),
        (val_add, ":added_wealth", 20),
        (try_begin),
            (party_slot_eq, "$g_center_wealth", slot_party_type, spt_castle),
            (val_mul, ":added_wealth", 100), ##between 2000 and 12000
        (else_try),
            (val_mul, ":added_wealth", 200), ##between 4000 and 24000
        (try_end),
        (val_add, ":added_wealth", 7500),
        (val_add, ":cur_wealth", ":added_wealth"),
        (assign, ":wages", 0),
        (try_for_range, ":cohort_slot", slot_cohort_town_begin, slot_cohort_town_4+1),
            (party_get_slot, ":cohort", "$g_center_wealth", ":cohort_slot"),
            (call_script, "script_cohort_describe_strength_to_s5_and_refil", "$g_center_wealth", ":cohort", ":cohort_slot", -1, -1, 0),
            (val_add, ":wages", reg5),
        (try_end),
        (val_sub, ":cur_wealth", ":wages"),
        ##diplomacy start+ Allow attrition to occur
        (party_get_slot, ":lord", "$g_center_wealth", slot_town_lord),

        (try_begin),
            (ge, ":lord", 1),
            (assign, ":lord_wages", 0),
            (try_for_range, ":cohort_slot", slot_cohort_town_4+1, slot_cohort_town_end),
                (party_get_slot, ":cohort", "$g_center_wealth", ":cohort_slot"),
                (call_script, "script_cohort_describe_strength_to_s5_and_refil", "$g_center_wealth", ":cohort", ":cohort_slot", -1, -1, 0),
                (val_add, ":lord_wages", reg5),
            (try_end),
            (val_div, ":lord_wages", 2),#is garrison
            #lord has to pay his upkeep
            (try_begin),
                (store_faction_of_party, ":faction", "$g_center_wealth"),
                (faction_slot_eq, ":faction",slot_faction_government_type, gov_imperial),
                (call_script, "script_add_to_faction_bugdet", slot_faction_garrison_wages, ":faction", ":lord_wages"),
            (else_try),
                (call_script, "script_dplmc_remove_gold_from_lord_and_holdings", ":lord_wages", ":lord"),
            (try_end),

            (try_begin),
                (ge, "$cheat_mode", 1),
                (assign, reg1, ":lord_wages"),
                (str_store_troop_name, s1, ":lord"),
                (str_store_party_name, s2, "$g_center_wealth"),
                (display_message, "@{s1} paid {reg1} wages for {s2}"),

                (store_party_size_wo_prisoners, reg1, "$g_center_wealth"),
                (str_store_party_name, s2, "$g_center_wealth"),
                (display_message, "@{s2} party size: {reg1} (before)"),
            (try_end),

            (assign, ":refill_costs", 0),
            #now let the lord higher troops for the garrison
            (try_for_range, ":cohort_slot", slot_cohort_town_4+1, slot_cohort_town_end),
                (troop_slot_ge, ":lord", slot_troop_wealth, 10000),
                (party_get_slot, ":cohort", "$g_center_wealth", ":cohort_slot"),
                (call_script, "script_cohort_describe_strength_to_s5_and_refil", "$g_center_wealth", ":cohort", ":cohort_slot", -1, ":lord", 1),
                (val_add, ":refill_costs", reg6),
            (try_end),

            (try_begin),
                (ge, "$cheat_mode", 1),
                (assign, reg1, ":refill_costs"),
                (str_store_troop_name, s1, ":lord"),
                (str_store_party_name, s2, "$g_center_wealth"),
                (display_message, "@{s1} paid {reg1} denars to hire troops for {s2}"),

                (store_party_size_wo_prisoners, reg1, "$g_center_wealth"),
                (str_store_party_name, s2, "$g_center_wealth"),
                (display_message, "@{s2} party size: {reg1} (after)"),
            (try_end),

            (try_begin),
                (lt, ":cur_wealth", 0),
                (try_begin),##lord helps his center if it needs money
                    (troop_get_slot, ":gold", ":lord", slot_troop_wealth),
                    (assign, ":limit_to_donate", 35000),
                    (try_begin),
                        (this_or_next|troop_slot_ge, ":lord", slot_troop_legion, 1),
                        (troop_slot_ge, ":lord", slot_troop_aux, 1),
                        (assign, ":limit_to_donate", 50000),
                    (try_end),
                    (ge, ":gold", ":limit_to_donate"),
                    (val_add, ":cur_wealth", 2500),
                    (val_sub, ":gold", 2500),
                    (try_begin),
                        (ge, ":gold", 50000),
                        (val_add, ":cur_wealth", 5000),
                        (val_sub, ":gold", 5000),
                    (try_end),
                    (troop_set_slot, ":lord", slot_troop_wealth, ":gold"),
                    (str_store_troop_name, s33, ":lord"),
                    (str_store_party_name, s34, "$g_center_wealth"),
                    (display_message, "@{s33} donates money to the townwatch of {s34}."),
                (try_end),
                (lt, ":cur_wealth", 0),

                # (store_party_size_wo_prisoners, ":garrison_size", "$g_center_wealth"),
                # (call_script, "script_party_get_ideal_size", "$g_center_wealth"),#This script has been modified to support this use
                # (val_mul, reg0, 5),
                # (val_div, reg0, 4),
                # (ge, ":garrison_size", reg0),
                (store_sub, ":percent_under", 0, ":cur_wealth"),
                (val_mul, ":percent_under", 100),
                (val_div, ":percent_under", ":wages"),
                (val_div, ":percent_under", 5), #Max 20 percent (won't take garrison below ideal size)
                (call_script, "script_party_inflict_attrition", "$g_center_wealth", ":percent_under"),
            (try_end),
        (try_end),
        ##diplomacy end+
        (val_clamp, ":cur_wealth", 0, 75001),#to prevent it to become to high

        (party_set_slot, "$g_center_wealth", slot_town_wealth, ":cur_wealth"),

        (try_begin),
            (ge, "$cheat_mode", 1),
            (le, ":added_wealth", ":wages"),
            (assign, reg49, ":wages"),
            (assign, reg50, ":cur_wealth"),
            (assign, reg51, ":added_wealth"),
            (str_store_party_name, s50, "$g_center_wealth"),
            (display_message, "@{reg50} new wealth for {s50}. Wealth added: {reg51}. Wages paid: {reg49}"),
        (try_end),

        ##diplomacy end+
        (assign, reg0, ":save_reg0"),
        ##diplomacy end+
    (try_end),
    (val_add, "$g_center_wealth", 1),
]),

#Checking if the troops are resting at a half payment point
(6,[
    (call_script, "script_execude_debug_message", 30),
    (store_current_day, ":cur_day"),
    (try_begin),
        (neq, ":cur_day", "$g_last_half_payment_check_day"),
        (assign, "$g_last_half_payment_check_day", ":cur_day"),
        (try_begin),
            (eq, "$g_half_payment_checkpoint", 1),
            (val_add, "$g_cur_week_half_daily_wage_payments", 1), #half payment for yesterday
        (try_end),
        (assign, "$g_half_payment_checkpoint", 1),
    (try_end),
    (assign, ":resting_at_manor_or_walled_center", 0),
    (try_begin),
        (neg|map_free),
        (is_between, "$g_last_rest_center", centers_begin, centers_end), #SB : proper rest conditions
        (this_or_next|party_slot_ge, "$g_last_rest_center", slot_center_has_manor, 1),
        (is_between, "$g_last_rest_center", walled_centers_begin, walled_centers_end),
        (assign, ":resting_at_manor_or_walled_center", 1),
    (try_end),
    (call_script, "script_pcamp_ransom_prisoners"),
    (eq, ":resting_at_manor_or_walled_center", 0),
    (assign, "$g_half_payment_checkpoint", 0),
]),

#let only kings decide!!
(48.0/(number_of_factions),[
    (call_script, "script_execude_debug_message", 31),
    (try_begin),
        (neg|is_between, "$g_kingdom_take_stand_on_issue", kingdoms_begin, kingdoms_end),
        (assign, "$g_kingdom_take_stand_on_issue", kingdoms_begin),
    (try_end),

    (try_begin),
        (faction_slot_eq, "$g_kingdom_take_stand_on_issue", slot_faction_state, sfs_active),
        (faction_get_slot, ":king", "$g_kingdom_take_stand_on_issue", slot_faction_leader),
        (this_or_next|troop_slot_eq, ":king", slot_troop_occupation, slto_kingdom_hero),
        (troop_slot_eq, ":king", slot_troop_occupation, slto_kingdom_lady),
        (faction_slot_ge, "$g_kingdom_take_stand_on_issue", slot_faction_political_issue, 1),
        (neg|troop_slot_ge, ":king", slot_troop_stance_on_faction_issue, 1),
        (this_or_next|troop_slot_eq, ":king", slot_troop_stance_on_faction_issue, -1),
        (neq, "$players_kingdom", "$g_kingdom_take_stand_on_issue"),
        (call_script, "script_npc_decision_checklist_take_stand_on_issue", ":king"),
        (troop_set_slot, ":king", slot_troop_stance_on_faction_issue, reg0),
    (try_end),

    (val_add, "$g_kingdom_take_stand_on_issue", 1),
]),

#diplomatic indices
(24.0/(number_of_factions),[
    (call_script, "script_execude_debug_message", 32),
    (try_begin),
        (neg|is_between, "$g_faction_diplomacy", kingdoms_begin, kingdoms_end),
        (assign, "$g_faction_diplomacy", kingdoms_begin),
    (try_end),

    (try_begin),
        (faction_slot_eq, "$g_faction_diplomacy", slot_faction_state, sfs_active),
        (try_for_range, ":faction_2", kingdoms_begin, kingdoms_end),
            (neq, "$g_faction_diplomacy", ":faction_2"),
            (faction_slot_eq, ":faction_2", slot_faction_state, sfs_active),
            #remove provocations
            (store_add, ":slot_truce_days", ":faction_2", slot_faction_truce_days_with_factions_begin),
            (val_sub, ":slot_truce_days", kingdoms_begin),
            (faction_get_slot, ":truce_days", "$g_faction_diplomacy", ":slot_truce_days"),
            #pay tribute
            (try_begin),
                (gt, ":truce_days", dplmc_treaty_tributary_days_expire + 1),
                (faction_slot_eq, ":faction_2", slot_faction_tributary_of, "$g_faction_diplomacy"),
                (try_begin),
                    (faction_slot_eq, "$g_faction_diplomacy", slot_faction_government_type, gov_imperial),
                    (call_script, "script_add_to_faction_bugdet", slot_faction_taxes_diplomacy, "$g_faction_diplomacy", 1500),
                    (faction_get_slot, ":king_other", ":faction_2", slot_faction_leader),
                    (is_between, ":king_other", active_npcs_begin, active_npcs_end),
                    (call_script, "script_add_to_troop_wealth", ":king_other", -1500),
                (else_try),
                    (faction_get_slot, ":king", "$g_faction_diplomacy", slot_faction_leader),
                    (is_between, ":king", active_npcs_begin, active_npcs_end),
                    (call_script, "script_add_to_troop_wealth", ":king", 1500),
                    (faction_get_slot, ":king_other", ":faction_2", slot_faction_leader),
                    (is_between, ":king_other", active_npcs_begin, active_npcs_end),
                    (call_script, "script_add_to_troop_wealth", ":king_other", -1500),
                (try_end),
            (try_end),

            (try_begin),
                (ge, ":truce_days", 1),
                (try_begin),
                    (eq, ":truce_days", 1),
                    (call_script, "script_update_faction_notes", "$g_faction_diplomacy"),
                    (lt, "$g_faction_diplomacy", ":faction_2"),
                    (try_begin),
                        (this_or_next|eq, "$g_faction_diplomacy", "$players_kingdom"),
                        (eq, ":faction_2", "$players_kingdom"),
                        (call_script, "script_add_notification_menu", "mnu_notification_truce_expired", "$g_faction_diplomacy", ":faction_2"),
                    (try_end),
                (else_try),
                    (eq, ":truce_days", dplmc_treaty_tributary_days_expire + 1),#replaced 61
                    (call_script, "script_update_faction_notes", "$g_faction_diplomacy"),
                    (lt, "$g_faction_diplomacy", ":faction_2"),
                    (try_begin),
                        (faction_slot_eq, "$g_faction_diplomacy", slot_faction_tributary_of, ":faction_2"),
                        (call_script, "script_add_notification_menu", "mnu_dplmc_notification_tribute_expired", "$g_faction_diplomacy", ":faction_2"),
                    (else_try),
                        (faction_slot_eq, ":faction_2", slot_faction_tributary_of, "$g_faction_diplomacy"),
                        (call_script, "script_add_notification_menu", "mnu_dplmc_notification_tribute_expired", ":faction_2", "$g_faction_diplomacy"),
                    (try_end),
                    (faction_set_slot, "$g_faction_diplomacy", slot_faction_tributary_of, 0),
                    (faction_set_slot, ":faction_2", slot_faction_tributary_of, 0),
                (else_try),
                    (eq, ":truce_days", dplmc_treaty_alliance_days_expire + 1),#replaced 61
                    (call_script, "script_update_faction_notes", "$g_faction_diplomacy"),
                    (lt, "$g_faction_diplomacy", ":faction_2"),
                    (try_begin),
                        (eq, "$show_truce_expired", 1),
                        (call_script, "script_add_notification_menu", "mnu_dplmc_notification_alliance_expired", "$g_faction_diplomacy", ":faction_2"),
                    (try_end),
                (else_try),
                    (eq, ":truce_days",dplmc_treaty_defense_days_expire + 1),#replaced 41
                    (call_script, "script_update_faction_notes", "$g_faction_diplomacy"),
                    (lt, "$g_faction_diplomacy", ":faction_2"),
                    (try_begin),
                        (eq, "$show_truce_expired", 1),
                        (call_script, "script_add_notification_menu", "mnu_dplmc_notification_defensive_expired", "$g_faction_diplomacy", ":faction_2"),
                    (try_end),
                (else_try),
                    (eq, ":truce_days", dplmc_treaty_trade_days_expire + 1),#replaced 21
                    (call_script, "script_update_faction_notes", "$g_faction_diplomacy"),
                    (lt, "$g_faction_diplomacy", ":faction_2"),
                    (try_begin),
                        (eq, "$show_truce_expired", 1),
                        (call_script, "script_add_notification_menu", "mnu_dplmc_notification_trade_expired", "$g_faction_diplomacy", ":faction_2"),
                    (try_end),
                (try_end),
                (val_sub, ":truce_days", 1),
                (faction_set_slot, "$g_faction_diplomacy", ":slot_truce_days", ":truce_days"),
            (try_end),

            (store_add, ":slot_provocation_days", ":faction_2", slot_faction_provocation_days_with_factions_begin),
            (val_sub, ":slot_provocation_days", kingdoms_begin),
            (faction_get_slot, ":provocation_days", "$g_faction_diplomacy", ":slot_provocation_days"),

            (try_begin),
                (ge, ":provocation_days", 1),

                # (try_begin),
                #     (this_or_next|eq, "$g_faction_diplomacy", "fac_kingdom_7"),
                #     (eq, ":faction_2", "fac_kingdom_7"),
                #     (display_message, "@Check 1"),
                #     (str_store_faction_name, s1, "$g_faction_diplomacy"),
                #     (str_store_faction_name, s2, ":faction_2"),
                #     (assign, reg1, ":truce_days"),
                #     (display_message, "@{s1}, {s2}, {reg1}"),
                # (try_end),

                (try_begin),#factions already at war
                    (store_relation, ":relation", "$g_faction_diplomacy", ":faction_2"),
                    (lt, ":relation", 0),
                    (faction_set_slot, "$g_faction_diplomacy", ":slot_provocation_days", 0),
                (else_try), #Provocation expires
                    (eq, ":provocation_days", 1),
                    (try_begin),# if rome is in civil war avoid them provoking other factions
                        (check_quest_active, "qst_four_emperors"),
                        (this_or_next|quest_slot_eq, "qst_four_emperors", slot_quest_current_state, 8),
                        (quest_slot_eq, "qst_four_emperors", slot_quest_current_state, 7),
                        (quest_slot_eq, "qst_four_emperors", slot_quest_target_troop, "trp_legatus_11"),
                        (this_or_next|eq, "$g_faction_diplomacy", "fac_kingdom_7"),
                        (eq, "$g_faction_diplomacy", "fac_player_supporters_faction"),
                        (call_script, "script_add_notification_menu", "mnu_notification_casus_belli_expired", "$g_faction_diplomacy", ":faction_2"),
                    (else_try),
                        (ge, ":truce_days", 1),
                        (call_script, "script_add_notification_menu", "mnu_notification_casus_belli_truce_decide", "$g_faction_diplomacy", ":faction_2"),
                    (else_try),
                        # (try_begin),
                        #     (this_or_next|eq, "$g_faction_diplomacy", "fac_kingdom_7"),
                        #     (eq, ":faction_2", "fac_kingdom_7"),
                        #     (display_message, "@Check 2"),
                        # (try_end),
                        (try_begin),
                            (faction_slot_eq, "$g_faction_diplomacy", slot_faction_leader, "trp_player"),
                            (call_script, "script_add_notification_menu", "mnu_notification_casus_belli_decide_player", "$g_faction_diplomacy", ":faction_2"),
                        (else_try),
                            (call_script, "script_add_notification_menu", "mnu_notification_casus_belli_decide", "$g_faction_diplomacy", ":faction_2"),
                        (try_end),
                    (try_end),
                    (faction_set_slot, "$g_faction_diplomacy", ":slot_provocation_days", 0),
                (else_try),
                    (val_sub, ":provocation_days", 1),
                    (faction_set_slot, "$g_faction_diplomacy", ":slot_provocation_days", ":provocation_days"),
                (try_end),
            (try_end),
            (try_begin), #at war
                (store_relation, ":relation", "$g_faction_diplomacy", ":faction_2"),
                (lt, ":relation", 0),
                (store_add, ":slot_war_damage", ":faction_2", slot_faction_war_damage_inflicted_on_factions_begin),
                (val_sub, ":slot_war_damage", kingdoms_begin),
                (faction_get_slot, ":war_damage", "$g_faction_diplomacy", ":slot_war_damage"),
                (val_add, ":war_damage", 1),
                (faction_set_slot, "$g_faction_diplomacy", ":slot_war_damage", ":war_damage"),
            (try_end),
        (try_end),
        (call_script, "script_update_faction_notes", "$g_faction_diplomacy"),
    (try_end),
    (val_add, "$g_faction_diplomacy", 1),
]),

(3.0,[
    (call_script, "script_execude_debug_message", 33),
    (assign, ":save_reg0", reg0),
    (store_time_of_day, ":oclock"),
    (store_current_day, ":day_mod"),
    (val_mod, ":day_mod", 8),	#eighth the rate of incidents moto chief
    (store_sub, ":num_villages", villages_end, castles_begin),
    (val_div, ":num_villages", 23),
    (store_mul, ":start_village", ":oclock", ":num_villages"),
    (val_add, ":start_village", castles_begin),
    (store_add, ":end_village", ":start_village", ":num_villages"),
    (val_min, ":end_village", villages_end),
    #MOTO ramp up border incidents
    (try_for_range, ":acting_village", ":start_village", ":end_village"),
        (store_mod, reg0, ":acting_village", 8),	#eighth the rate of incidents moto chief
        (eq, reg0, ":day_mod"),
      # (try_begin),
        # (store_random_in_range, ":acting_village", castles_begin, villages_end),
      #MOTO ramp up border incidents end
        (store_random_in_range, ":target_village", castles_begin, villages_end),
        (store_faction_of_party, ":acting_faction", ":acting_village"),
        (store_faction_of_party, ":target_faction", ":target_village"), #target faction receives the provocation
        (neq, ":acting_village", ":target_village"),
        (neq, ":acting_faction", ":target_faction"),

        (call_script, "script_diplomacy_faction_get_diplomatic_status_with_faction", ":target_faction", ":acting_faction"),
        (ge, reg0, 0),

        (assign, ":block", 0),
        (try_begin),
            (troop_slot_eq, "trp_global_variables", g_civil_war_timer, -1),
            (faction_slot_eq, ":acting_faction", slot_faction_culture, "fac_culture_7"),
            (faction_slot_eq, ":target_faction", slot_faction_culture, "fac_culture_7"),
            (assign, ":block", 1),
        (try_end),
        (eq, ":block", 0),

        (try_begin),
            (party_slot_eq, ":acting_village", slot_center_original_faction, ":target_faction"),
            (call_script, "script_add_notification_menu", "mnu_notification_border_incident", ":acting_village", -1),
        (else_try),
            (party_slot_eq, ":acting_village", slot_center_ex_faction, ":target_faction"),
            (call_script, "script_add_notification_menu", "mnu_notification_border_incident", ":acting_village", -1),
        (else_try),
            #(set_fixed_point_multiplier, 1),
            (store_distance_to_party_from_party, ":distance", ":acting_village", ":target_village"),
            (lt, ":distance", 25),
            (call_script, "script_add_notification_menu", "mnu_notification_border_incident", ":acting_village", ":target_village"),
        (try_end),
    (try_end),
    (assign, reg0, ":save_reg0"),
]),

# Give some xp to hero parties
(0.27, [
    (call_script, "script_execude_debug_message", 34),
    (assign, ":save_reg0", reg0),
    (store_random_in_range, ":troop_no", active_npcs_begin, active_npcs_end),
    (try_begin),
        (troop_get_slot, ":torturer", ":troop_no", slot_troop_tortured_by),
        (ge, ":torturer", 0),
        (troop_get_slot, ":renown", ":troop_no", slot_troop_renown),
        (try_begin),
            (ge, ":renown", 600),
            (assign, ":chance", 60),
        (else_try),
            (is_between, ":renown", 400, 600),
            (assign, ":chance", 40),
        (else_try),
            (assign, ":chance", 20),
        (try_end),
        (try_begin),
            (is_between, "$player_honor", -10, 10),
        (else_try),
            (ge, "$player_honor", 100),
            (val_sub, ":chance", 30),
        (else_try),
            (ge, "$player_honor", 50),
            (val_sub, ":chance", 20),
        (else_try),
            (ge, "$player_honor", 10),
            (val_sub, ":chance", 10),
        (else_try),
            (lt, "$player_honor", 10),
            (val_add, ":chance", 10),
        (try_end),
        (str_store_troop_name, s44, ":torturer"),
        (str_store_troop_name, s45, ":troop_no"),
        (store_random_in_range, ":randomnum", 0, 100),
        (try_begin),
            (lt, ":randomnum", ":chance"),
            (dialog_box, "@It is said that {s44} has tortured {s45} and most people believe the stories.", "@Rumors"),
            (call_script, "script_change_player_honor", -20),
            (troop_set_slot, ":troop_no", slot_troop_tortured_by, -1),
            (call_script, "script_change_relation_with_family_friends_enemies", ":troop_no", -1, 15, "trp_player"),
        (else_try),
            (dialog_box, "@Some people say that {s44} has tortured {s45}, but most people think this is only enemy gossip.", "@Rumors"),
            (call_script, "script_change_player_honor", -5),
            (troop_set_slot, ":troop_no", slot_troop_tortured_by, -1),
            (call_script, "script_change_relation_with_family_friends_enemies", ":troop_no", -1, 8, "trp_player"),
        (try_end),
    (try_end),

    (troop_set_slot, ":troop_no", slot_troop_refused, 0),
    (try_begin),
        (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),

        (troop_get_slot, ":hero_party", ":troop_no", slot_troop_leaded_party),
        (gt, ":hero_party", centers_end),
        (party_is_active, ":hero_party"),

        #first make probability
        (options_get_campaign_ai, ":reduce_campaign_ai"),
        (try_begin),
            (eq, ":reduce_campaign_ai", 0),
            (assign, ":max_accepted_random_value", 42),
        (else_try),
            (eq, ":reduce_campaign_ai", 2),
            (assign, ":max_accepted_random_value", 32),
        (else_try),
            (assign, ":max_accepted_random_value", 37),
        (try_end),
        (store_random_in_range, ":rand", 0, 100),
        (le, ":rand", ":max_accepted_random_value"),

        (store_skill_level, ":trainer_level", "skl_trainer", ":troop_no"),
        (val_add, ":trainer_level", 5), #worst : 5, best : 10
        (store_mul, ":xp_gain", ":trainer_level", 2500),
        (party_upgrade_with_xp, ":hero_party", ":xp_gain", 0),
    (try_end),
    (assign, reg0, ":save_reg0"),
]),

(48.0/(number_of_walled_centers), [
    (call_script, "script_execude_debug_message", 35),
    (store_random_in_range, ":center_no", walled_centers_begin, walled_centers_end),
    (party_get_slot, ":center_lord", ":center_no", slot_town_lord),
    (neq, ":center_lord", "trp_player"),

    (assign, ":xp_gain", 3000), #xp gain in two days of period for each center, average : 3000.

    (assign, ":max_accepted_random_value", 30),
    (try_begin),
        (assign, ":cur_center_lord_faction", -1),
        (try_begin),
            (ge, ":center_lord", 0),
            (store_troop_faction, ":cur_center_lord_faction", ":center_lord"),
        (try_end),
        (neq, ":cur_center_lord_faction", "$players_kingdom"),

        (options_get_campaign_ai, ":reduce_campaign_ai"),
        (try_begin),
            (eq, ":reduce_campaign_ai", 0), #hard (1.5x)
            (assign, ":max_accepted_random_value", 35),
            (val_mul, ":xp_gain", 3),
            (val_div, ":xp_gain", 2),
        (else_try),
            (eq, ":reduce_campaign_ai", 2), #easy (0.5x)
            (assign, ":max_accepted_random_value", 25),
            (val_div, ":xp_gain", 2),
        (try_end),
    (try_end),

    (store_random_in_range, ":rand", 0, 100),
    (le, ":rand", ":max_accepted_random_value"),

    (party_upgrade_with_xp, ":center_no", ":xp_gain", 0),
]),

# Process sieges
(24,[
    (call_script, "script_execude_debug_message", 36),
    (call_script, "script_process_sieges"),
]),

# Process village raids
(2,[
    (call_script, "script_execude_debug_message", 37),
    (call_script, "script_process_village_raids"),
]),

# Decide vassal ai
(6.6,[
    (call_script, "script_execude_debug_message", 38),
    # unused trigger
]),

(24,[##reduce player controversy each day
    (call_script, "script_execude_debug_message", 39),
    (troop_get_slot, ":controversy", "trp_player", slot_troop_controversy),
    (store_random_in_range, ":controversy_deduction", 0, 3),
    (val_sub, ":controversy", ":controversy_deduction"),
    (val_max, ":controversy", 0),
    (troop_set_slot, "trp_player", slot_troop_controversy, ":controversy"),
    # JuJu70 piggybacking - disappearing items
    (store_party_size_wo_prisoners, ":main_party_size", "p_main_party"),
    (gt, ":main_party_size", 50),
    (party_get_morale, ":moral", "p_main_party"),
    (lt, ":moral", 40),
    (troop_get_inventory_capacity, ":inv_size", "trp_player"),
    (store_skill_level, ":bonus", "skl_inventory_management", "trp_player"),
    (val_add, ":bonus", 100),
    (try_for_range, ":i_slot", 0, ":inv_size"),
        (troop_get_inventory_slot, ":item_id", "trp_player", ":i_slot"),
        (ge, ":item_id", 0),
        (try_begin),
            (this_or_next|eq, ":item_id", "itm_jewelry"),
            (this_or_next|eq, ":item_id", "itm_amber"),
            (this_or_next|eq, ":item_id", "itm_ivory"),
            (this_or_next|eq, ":item_id", "itm_silver"),
            (this_or_next|eq, ":item_id", "itm_soapstone"),
            (eq, ":item_id", "itm_furs"),
            (store_random_in_range, ":rand", 0,":bonus"),
            (le, ":rand", 5),
            (troop_remove_item, "trp_player", ":item_id"),
            (str_store_item_name, s33, ":item_id"),
            (str_store_string, s22, "@It seems someone went through your inventory and stole some of your {s33}."),
            (display_message, "@{s22}", color_bad_news),
        (try_end),
    (try_end),
]),

#POLITICAL TRIGGERS
(4,[
    (call_script, "script_execude_debug_message", 40),
    (call_script, "script_cf_random_political_event"),
]),

#Individual lord political calculations
#Check for lords without fiefs, auto-defections, etc
(24.0*7.0/(number_of_active_npcs),[
    (call_script, "script_execude_debug_message", 41),
    (assign, ":save_reg0", reg0),
    (val_add, "$g_lord_long_term_count", 1),
    (try_begin),
        (neg|is_between, "$g_lord_long_term_count", active_npcs_including_player_begin, active_npcs_end),
        (assign, "$g_lord_long_term_count", active_npcs_including_player_begin),
    (try_end),
    (neg|troop_slot_eq, "$g_lord_long_term_count", slot_troop_occupation, dplmc_slto_dead),#is not dead already

    (try_begin),
        (assign, ":troop_no", "$g_lord_long_term_count"),
        (try_begin),#Special handling for trp_player, and get the troop's faction
            (eq, ":troop_no", "trp_kingdom_heroes_including_player_begin"),
            (assign, ":troop_no", "trp_player"),
            (assign, ":faction", "$players_kingdom"),
        (else_try),
            (store_faction_of_troop, ":faction", ":troop_no"),
        (try_end),

        (try_begin),
            (eq, "$cheat_mode", 1),
            (str_store_troop_name, s9, ":troop_no"),
            (display_message, "@{!}DEBUG -- Doing political calculations for {s9}"),
        (try_end),

        #Tally the fiefs owned by the hero, and cache the value in slot.
        #If a lord owns no fiefs, his relations with his liege may deteriorate.
        (try_begin),
            (faction_slot_eq, ":faction", slot_faction_government_type, gov_feudal),
            (assign, reg0, 1),#Center points + 1
            (try_for_range, ":center", centers_begin, centers_end),
                (party_slot_eq, ":center", slot_town_lord, ":troop_no"),
                (try_begin),
                    (is_between, ":center", towns_begin, towns_end),
                    (val_add, reg0, 3),#3 points per town
                (else_try),
                    (is_between, ":center", walled_centers_begin, walled_centers_end),
                    (val_add, reg0, 2),#2 points per castle
                (else_try),
                    (val_add, reg0, 1),#1 point per village
                (try_end),
            (try_end),
            #Update cached total
            (troop_set_slot, ":troop_no", dplmc_slot_troop_center_points_plus_one, reg0),
            #If a lord has no fiefs, relation loss potentially results.
            #Do not apply this to the player.
            (eq, reg0, 1),
            (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
            (neq, ":troop_no", "trp_player"),

            #Don't apply this to the leader
            (faction_get_slot, ":faction_leader", ":faction", slot_faction_leader),
            (gt, ":faction_leader", -1),
            (neq, ":faction_leader", ":troop_no"),
            (neg|troop_slot_eq, ":faction_leader", slot_troop_spouse, ":troop_no"),
            (neg|troop_slot_eq, ":troop_no", slot_troop_spouse, ":faction_leader"),

            (neg|troop_slot_ge, ":troop_no", slot_troop_wealth, 80000),#he is not rich

            (troop_get_slot, ":troop_reputation", ":troop_no", slot_lord_reputation_type),
            (try_begin),
                (this_or_next|eq, ":troop_reputation", lrep_quarrelsome),
                (this_or_next|eq, ":troop_reputation", lrep_selfrighteous),
                (this_or_next|eq, ":troop_reputation", lrep_cunning),
                (eq, ":troop_reputation", lrep_debauched),
                (try_begin),
                    (eq, ":faction", "fac_player_supporters_faction"),
                    (str_store_troop_name, s55, ":troop_no"),
                    (display_message, "@{s55} seems to be angry for not owning a fief.", color_bad_news),
                (try_end),
                (call_script, "script_troop_change_relation_with_troop", ":troop_no", ":faction_leader", -2),#was -4
                (val_add, "$total_no_fief_changes", -2),
            (else_try),
                # (this_or_next|eq, ":troop_reputation", lrep_ambitious),#add support for lady personalities
                (eq, ":troop_reputation", lrep_martial),
                (try_begin),
                    (eq, ":faction", "fac_player_supporters_faction"),
                    (str_store_troop_name, s55, ":troop_no"),
                    (display_message, "@{s55} seems to be angry for not owning a fief.", color_bad_news),
                (try_end),
                (call_script, "script_troop_change_relation_with_troop", ":troop_no", ":faction_leader", -1),# was -2
                (val_add, "$total_no_fief_changes", -1),
            (try_end),
        (try_end),

        # #Auto-indictment or defection
        # (try_begin),
        #     (assign, ":block", 0),
        #     (try_begin),
        #         (neq, ":troop_no", "trp_player"),
        #         (faction_slot_eq, ":faction", slot_faction_government_type, gov_imperial),
        #         (assign, ":block", 1),
        #     (try_end),
        #     (eq, ":block", 0),
        #     (try_begin),
        #         (check_quest_active, "qst_player_treason"),
        #         (eq, ":troop_no", "trp_player"),
        #         (assign, ":block", 1),
        #     (try_end),
        #     (eq, ":block", 0),
        #     (this_or_next|troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
        #     (eq, ":troop_no", "trp_player"),

        #     #There must be a valid faction leader.  The faction leader won't defect from his own kingdom.
        #     #To avoid certain potential complications, also skip the defection/indictment check for the
        #     #spouse of the faction leader.  (Code to make that possible can be added elsewhere if
        #     #necessary.)
        #     (faction_get_slot, ":faction_leader", ":faction", slot_faction_leader),
        #     (gt, ":faction_leader", -1),
        #     (neq, ":troop_no", ":faction_leader"),
        #     (neg|troop_slot_eq, ":troop_no", slot_troop_spouse, ":faction_leader"),
        #     (neg|troop_slot_eq, ":faction_leader", slot_troop_spouse, ":troop_no"),

        #     (assign, ":num_centers", 0),
        #     (try_for_range,":cur_center", walled_centers_begin, walled_centers_end),
        #         (store_faction_of_party, ":faction_of_center", ":cur_center"),
        #         (eq, ":faction_of_center", ":faction"),
        #         (val_add, ":num_centers", 1),
        #     (try_end),

        #     #we are counting num_centers to allow defection although there is high relation between faction leader and troop.
        #     #but this rule should not applied for player's faction and player_supporters_faction so thats why here 1 is added to num_centers in that case.
        #     (try_begin),
        #         (this_or_next|eq, ":faction", "$players_kingdom"),
        #         (eq, ":faction", "fac_player_supporters_faction"),
        #         (val_add, ":num_centers", 1),
        #     (try_end),

        #     (call_script, "script_troop_get_relation_with_troop", ":troop_no", ":faction_leader"),

        #     (this_or_next|le, reg0, -75), #was -50
        #     (eq, ":num_centers", 0), #if there is no walled centers that faction has defection happens 100%.

        #     #(this_or_next|eq, ":troop_no", "trp_player"),
        #     (assign, ":c", 0),
        #     (try_begin),
        #         (neq, ":troop_no", "trp_player"),
        #         (call_script, "script_cf_troop_can_intrigue", ":troop_no", 0), #Should include battle, prisoner, in a castle with others
        #         (assign, ":c", 1),
        #     (else_try),
        #         (eq, ":troop_no", "trp_player"),
        #         (eq, "$g_player_is_captive", 0),
        #         (assign, ":c", 1),
        #     (try_end),
        #     (eq, ":c", 1),
        #     (store_random_in_range, ":who_moves_first", 0, 2),
        #     #The more centralized the faction, the greater the chance the liege will indict
        #     #the lord before he defects.
        #     (faction_get_slot, reg0, ":faction", dplmc_slot_faction_centralization),
        #     (val_clamp, reg0, -3, 4),
        #     (val_add, reg0, 10),#7 minimum, 13 maximum
        #     (store_random_in_range, ":random", 0, reg0),
        #     #Random  < 5: The lord defects
        #     #Random >= 5: The liege indicts the lord for treason

        #     (try_begin),
        #         (this_or_next|eq, ":num_centers", 0), #Thanks Caba`drin & Osviux
        #         (neq, ":who_moves_first", 0),
        #         (lt, ":random", 5),
        #         (neq, ":troop_no", "trp_player"),


        #         (store_faction_of_troop, ":orig_faction", ":troop_no"),
        #         (call_script, "script_lord_find_alternative_faction", ":troop_no"),
        #         (assign, ":new_faction", reg0),

        #         (try_begin),
        #             (neq, ":new_faction", ":orig_faction"),
        #             (is_between, ":new_faction", kingdoms_begin, kingdoms_end),
        #             (call_script, "script_change_troop_faction", ":troop_no", ":new_faction"),
        #             (str_store_troop_name_link, s1, ":troop_no"),
        #             (str_store_faction_name_link, s2, ":new_faction"),
        #             (str_store_faction_name_link, s3, ":faction"),
        #             (try_begin),
        #                 (ge, "$cheat_mode", 1),
        #                 (str_store_troop_name, s4, ":troop_no"),
        #                 (display_message, "@{!}DEBUG - {s4} faction changed in defection"),
        #             (try_end),
        #             (call_script, "script_dplmc_store_troop_is_female", ":troop_no"),
        #             (assign, reg4, reg0),
        #             #SB : factionalize colors
        #             (str_store_string, s4, "str_lord_defects_ordinary"),
        #             (faction_get_color, ":color", ":new_faction"),
        #             (display_log_message, s4, ":color"),
        #             (try_begin),
        #                 (eq, "$cheat_mode", 1),
        #                 (this_or_next|eq, ":new_faction", "$players_kingdom"),
        #                 (eq, ":faction", "$players_kingdom"),
        #                 (call_script, "script_add_notification_menu", "mnu_notification_lord_defects", ":troop_no", ":faction"),
        #             (try_end),
        #         (try_end),
        #     (else_try),
        #         (neq, ":faction_leader", "trp_player"),
        #         (call_script, "script_troop_get_relation_with_troop", ":troop_no", ":faction_leader"),
        #         (le, reg0, -75), #was -50
        #         (try_begin),
        #             (eq, ":troop_no", "trp_player"),
        #             (faction_slot_eq, ":faction", slot_faction_government_type, gov_imperial),
        #             (str_store_troop_name, s22, ":faction_leader"),
        #             (dialog_box, "@Rumors reach you that you have been indicted for treason! A secret trial is taking place under {s22} chairmanship.", "@Treason"),
        #             (call_script, "script_change_player_relation_with_troop", ":faction_leader", -5),
        #             (str_store_string, s2, "@Rumors reach you that you have been indicted for treason! A secret trial is taking place under {s22} chairmanship."),
        #             (call_script, "script_start_quest", "qst_player_treason", ":faction_leader"),
        #             (quest_set_slot, "qst_player_treason", slot_quest_current_state, 1),
        #             (store_current_day, ":day"),
        #             (quest_set_slot, "qst_player_treason", slot_quest_timer, ":day"),
        #         (else_try),
        #             (neq, ":troop_no", "trp_player"),
        #             (call_script, "script_indict_lord_for_treason", ":troop_no", ":faction"),
        #         (try_end),
        #     (try_end),

        #     #Update :faction if it has changed
        #     (try_begin),
        #         (eq, ":troop_no", "trp_player"),
        #         (assign, reg0, "$players_kingdom"),
        #     (else_try),
        #         (store_faction_of_troop, reg0, ":troop_no"),
        #     (try_end),
        #     (neq, reg0, ":faction"),#Fall through if indictment/defection didn't happen
        #     (assign, ":faction", reg0),
        # (try_end),

        (try_begin),
            (le, "$g_civil_war", 0),#no civil war
            (faction_slot_eq, ":faction", slot_faction_government_type, gov_imperial),
            (try_begin),
                (troop_slot_ge, ":troop_no", slot_troop_triumph_points, triumph_threshold),
                (store_faction_of_party, ":fac_rome", "p_town_6"),
                (eq, ":fac_rome", ":faction"),
                (try_begin),
                    (neg|check_quest_active, "qst_triumph"),
                    (eq, ":troop_no", "trp_player"),
                    (call_script, "script_add_notification_menu", "mnu_triumph_awared_player", 0, 0),
                (else_try),
                    (neq, ":troop_no", "trp_player"),
                    (try_begin),
                        (faction_slot_eq, ":faction", slot_faction_leader, "trp_player"),
                        (call_script, "script_add_notification_menu", "mnu_triumph_awared_emperor", ":troop_no", 0),
                    (else_try),
                        (call_script, "script_add_notification_menu", "mnu_triumph_awared_ai", ":troop_no", 0),
                    (try_end),
                (try_end),
            (else_try),
                (troop_slot_ge, ":troop_no", slot_troop_triumph_points, 1),#decrease over time
                (call_script, "script_troop_change_triumph_points", ":troop_no", -1),
            (try_end),
        (try_end),

        #Reduce grudges over time
        (try_begin),
            #Skip this for the dead
            (neg|troop_slot_eq, ":troop_no", slot_troop_occupation, dplmc_slto_dead),
            #Do not perform this for kingdom ladies, since it will potentially mess up courtship.
            (neg|troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_lady),

            (try_for_range, ":active_npc", heroes_begin, heroes_end),
                (neq, ":active_npc", ":troop_no"),
                (neg|troop_slot_eq, ":active_npc", slot_troop_occupation, slto_kingdom_lady),#Don't do for ladies
                (neg|troop_slot_eq, ":active_npc", slot_troop_occupation, dplmc_slto_dead),#Don't do for the dead

                #Fix: there are some NPCs that have "initial" relations with the player set,
                #but they can decay before ever meeting him, so keep them until the first meeting.
                (this_or_next|neq, ":troop_no", "trp_player"),
                (troop_slot_ge, ":troop_no", slot_troop_met, 1),

                (call_script, "script_troop_get_relation_with_troop", ":troop_no", ":active_npc"),
                (lt, reg0, 0),
                (store_sub, ":chance_of_convergence", 0, reg0),
                (store_random_in_range, ":random", 0, 200), ##nero claudius, was 300
                (lt, ":random", ":chance_of_convergence"),
                (call_script, "script_troop_change_relation_with_troop", ":troop_no", ":active_npc", 1),
                (val_add, "$total_relation_changes_through_convergence", 1),
            (try_end),

            #Accelerate forgiveness for lords in exile (with their original faction only)
            (neq, ":troop_no", "trp_player"),
            (troop_slot_eq, ":troop_no", slot_troop_occupation, dplmc_slto_exile),
            (troop_get_slot, ":original_faction", ":troop_no", slot_troop_original_faction),
            (gt, ":original_faction", 0),

            (try_for_range, ":active_npc", heroes_begin, heroes_end),
                (neq, ":active_npc", ":troop_no"),
                (neg|troop_slot_eq, ":active_npc", slot_troop_occupation, slto_kingdom_lady),#Don't do for ladies
                (neg|troop_slot_eq, ":active_npc", slot_troop_occupation, dplmc_slto_dead),#Don't do for the dead
                #Only apply to heroes with the same original faction
                (troop_slot_eq, ":active_npc", slot_troop_original_faction, ":original_faction"),
                (call_script, "script_troop_get_relation_with_troop", ":troop_no", ":active_npc"),
                (lt, reg0, 0),
                (store_sub, ":chance_of_convergence", 0, reg0),
                (store_random_in_range, ":random", 0, 200),##nero claudius, was 300
                (lt, ":random", ":chance_of_convergence"),
                (call_script, "script_troop_change_relation_with_troop", ":troop_no", ":active_npc", 1),
                (val_add, "$total_relation_changes_through_convergence", 1),
            (try_end),
        (try_end),
    (try_end),
    (assign, reg0, ":save_reg0"),
]),

# Process alarms - perhaps break this down into several groups, with a modula
(1,[
    (call_script, "script_execude_debug_message", 42),
    (call_script, "script_process_alarms"),
]),

(1,[
    (call_script, "script_execude_debug_message", 43),
    (call_script, "script_process_kingdom_parties_ai"),
]),

(1.0,[
    (call_script, "script_execude_debug_message", 44),
    (try_for_range, ":troop_no", active_npcs_begin, active_npcs_end),
        (call_script, "script_allow_vassals_to_join_indoor_battle", ":troop_no"),
    (try_end),
]),

# Process siege ai
(1 / number_of_walled_centers,[
    (call_script, "script_execude_debug_message", 45),

    (assign, ":save_reg0", reg0),#Save registers
    (assign, ":save_reg1", reg1),
    ##diplomacy end+
    (store_random_in_range, ":center_no", walled_centers_begin, walled_centers_end),
    (try_begin),
        (party_get_slot, ":besieger_party", ":center_no", slot_center_is_besieged_by),
        (gt, ":besieger_party", 0),
        (party_is_active, ":besieger_party"),
        (store_faction_of_party, ":besieger_faction", ":besieger_party"),
        (party_slot_ge, ":center_no", slot_center_is_besieged_by, 1),
        (party_get_slot, ":siege_begin_hours", ":center_no", slot_center_siege_begin_hours),
        (store_current_hours, ":cur_hours"),
        (store_sub, ":siege_begin_hours", ":cur_hours", ":siege_begin_hours"),
        (assign, ":launch_attack", 0),
        (assign, ":call_attack_back", 0),
        (assign, ":attacker_strength", 0),
        (assign, ":marshall_attacking", 0),
        (try_for_range, ":troop_no", active_npcs_begin, active_npcs_end),
            (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
            (neg|troop_slot_ge, ":troop_no", slot_troop_prisoner_of_party, 0),
            (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
            (gt, ":party_no", 0),
            (party_is_active, ":party_no"),

            (store_troop_faction, ":troop_faction_no", ":troop_no"),
            (eq, ":troop_faction_no", ":besieger_faction"),
            (assign, ":continue", 0),
            (try_begin),
                (party_slot_eq, ":party_no", slot_party_ai_state, spai_besieging_center),
                (party_slot_eq, ":party_no", slot_party_ai_object, ":center_no"),
                (assign, ":continue", 1),
            (else_try),
                (party_slot_eq, ":party_no", slot_party_ai_state, spai_accompanying_army),
                (party_get_slot, ":commander_party", ":party_no", slot_party_ai_object),
                (gt, ":commander_party", 0),
                (party_is_active, ":commander_party"),
                (party_slot_eq, ":commander_party", slot_party_ai_state, spai_besieging_center),
                (party_slot_eq, ":commander_party", slot_party_ai_object, ":center_no"),
                (assign, ":continue", 1),
            (try_end),
            (eq, ":continue", 1),
            (party_get_battle_opponent, ":opponent", ":party_no"),
            (this_or_next|lt, ":opponent", 0),
            (eq, ":opponent", ":center_no"),
            (try_begin),
                (faction_slot_eq, ":besieger_faction", slot_faction_marshall, ":troop_no"),
                (assign, ":marshall_attacking", 1),
            (try_end),
            (call_script, "script_party_calculate_regular_strength", ":party_no"),
            ##diplomacy start+ terrain advantage
            (try_begin),
                (ge, "$g_dplmc_terrain_advantage", DPLMC_TERRAIN_ADVANTAGE_ENABLE),
                (call_script, "script_dplmc_party_calculate_strength_in_terrain", ":party_no", dplmc_terrain_code_siege, 0, 0),
            (try_end),
        ##diplomacy end+
            (val_add, ":attacker_strength", reg0),
        (try_end),
        (try_begin),
            (gt, ":attacker_strength", 0),
            (party_collect_attachments_to_party, ":center_no", "p_collective_enemy"),
            (call_script, "script_party_calculate_regular_strength", "p_collective_enemy"),
            ##diplomacy start+ terrain advantage
            (try_begin),
                (ge, "$g_dplmc_terrain_advantage", DPLMC_TERRAIN_ADVANTAGE_ENABLE),
                (call_script, "script_dplmc_party_calculate_strength_in_terrain", "p_collective_enemy", dplmc_terrain_code_siege, 0, 0),
            (try_end),
		  ##diplomacy end+
            (assign, ":defender_strength", reg0),
            (try_begin),
                (eq, "$auto_enter_town", ":center_no"),
                (eq, "$g_player_is_captive", 0),
                (call_script, "script_party_calculate_regular_strength", "p_main_party"),
                ##diplomacy start+ terrain advantage
                (try_begin),
                    (ge, "$g_dplmc_terrain_advantage", DPLMC_TERRAIN_ADVANTAGE_ENABLE),
                    (call_script, "script_dplmc_party_calculate_strength_in_terrain", "p_collective_enemy", dplmc_terrain_code_siege, 0, 0),
                (try_end),
                ##diplomacy end+
                (val_add, ":defender_strength", reg0),
                (val_mul, ":attacker_strength", 2), #double the power of attackers if the player is in the campaign
            (try_end),
            (party_get_slot, ":siege_hardness", ":center_no", slot_center_siege_hardness),
            (val_add, ":siege_hardness", 100),
            (val_mul, ":defender_strength", ":siege_hardness"),
            (val_div, ":defender_strength", 100),
            (val_max, ":defender_strength", 1),
            (try_begin),
                (eq, ":marshall_attacking", 1),
                (eq, ":besieger_faction", "$players_kingdom"),
                (check_quest_active, "qst_follow_army"),
                (val_mul, ":attacker_strength", 2), #double the power of attackers if the player is in the campaign
            (try_end),
            (store_mul, ":strength_ratio", ":attacker_strength", 100),
            (val_div, ":strength_ratio", ":defender_strength"),
            (store_sub, ":random_up_limit", ":strength_ratio", 250), #was 300 (1.126)

            (try_begin),
                (gt, ":random_up_limit", -100), #never attack if the strength ratio is less than 150%
                (store_div, ":siege_begin_hours_effect", ":siege_begin_hours", 2), #was 3 (1.126)
                (val_add, ":random_up_limit", ":siege_begin_hours_effect"),
            (try_end),

            (val_div, ":random_up_limit", 5),
            (val_max, ":random_up_limit", 0),
            (store_sub, ":random_down_limit", 175, ":strength_ratio"), #was 200 (1.126)
            (val_max, ":random_down_limit", 0),
            (try_begin),
                (store_random_in_range, ":rand", 0, 100),
                (lt, ":rand", ":random_up_limit"),
                (gt, ":siege_begin_hours", 24),#initial preparation
                (assign, ":launch_attack", 1),
            (else_try),
                (store_random_in_range, ":rand", 0, 100),
                (lt, ":rand", ":random_down_limit"),
                (assign, ":call_attack_back", 1),
            (try_end),
        (else_try),
            (assign, ":call_attack_back", 1),
        (try_end),

        #Assault the fortress
        (try_begin),
            (eq, ":launch_attack", 1),
            (call_script, "script_begin_assault_on_center", ":center_no"),
        (else_try),
            (eq, ":call_attack_back", 1),
            (try_for_range, ":troop_no", active_npcs_begin, active_npcs_end),
                (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
                (neg|troop_slot_ge, ":troop_no", slot_troop_prisoner_of_party, 0),
                (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
                (gt, ":party_no", 0),
                (party_is_active, ":party_no"),

                (party_slot_eq, ":party_no", slot_party_ai_state, spai_besieging_center),
                (party_slot_eq, ":party_no", slot_party_ai_object, ":center_no"),
                (party_slot_eq, ":party_no", slot_party_ai_substate, 1),
                (call_script, "script_party_set_ai_state", ":party_no", spai_undefined, -1),
                (call_script, "script_party_set_ai_state", ":party_no", spai_besieging_center, ":center_no"),
                #resetting siege begin time if at least 1 party retreats
                (store_current_hours, ":cur_hours"),
                (party_set_slot, ":center_no", slot_center_siege_begin_hours, ":cur_hours"),
            (try_end),
        (try_end),
    (try_end),
    #Revert registers
    (assign, reg0, ":save_reg0"),
    (assign, reg1, ":save_reg1"),
]),

# Decide faction ais
(6.6,[
    (call_script, "script_execude_debug_message", 46),
    (assign, "$g_recalculate_ais", 1),
]),

# Decide faction ai flag check
(.11,[
    (call_script, "script_execude_debug_message", 47),
    (eq, "$g_recalculate_ais", 1),
    (assign, "$g_recalculate_ais", 0),
    (call_script, "script_init_ai_calculation"),
    (try_for_range, ":faction_no", kingdoms_begin, kingdoms_end),
        (faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
        (call_script, "script_decide_faction_ai", ":faction_no"),
    (try_end),
    (try_for_range, ":troop_no", heroes_begin, heroes_end),
        (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
        (call_script, "script_calculate_troop_ai", ":troop_no"),
    (try_end),
]),

(24,[
    (call_script, "script_execude_debug_message", 48),
    (call_script, "script_find_neighbors"),
    (call_script, "script_randomly_start_war_peace_new", 1),
    # Count faction armies for debug
    (try_begin),
        (eq, "$cheat_mode", 4), #change back to 4
        (try_for_range, ":active_npc", active_npcs_begin, active_npcs_end),
            (store_faction_of_troop, ":active_npc_faction", ":active_npc"),
            (neg|faction_slot_eq, ":active_npc_faction", slot_faction_ai_state, sfai_default),
            (neg|faction_slot_eq, ":active_npc_faction", slot_faction_ai_state, sfai_feast),
            (neg|faction_slot_eq, ":active_npc_faction", slot_faction_ai_state, sfai_gathering_army),
            (troop_get_slot, ":active_npc_party", ":active_npc", slot_troop_leaded_party),
            (party_is_active, ":active_npc_party"),
            (val_add, "$total_vassal_days_on_campaign", 1),
            (party_slot_eq, ":active_npc_party", slot_party_ai_state, spai_accompanying_army),
            (val_add, "$total_vassal_days_responding_to_campaign", 1),
        (try_end),
    (try_end),
]),

# Reset hero quest status
# Change hero relation
(36,[
    (call_script, "script_execude_debug_message", 49),
    (try_for_range, ":troop_no", heroes_begin, heroes_end),
        (troop_set_slot, ":troop_no", slot_troop_does_not_give_quest, 0),
    (try_end),

    (try_for_range, ":troop_no", village_elders_begin, village_elders_end),
        (troop_set_slot, ":troop_no", slot_troop_does_not_give_quest, 0),
    (try_end),
]),

# Refresh merchant inventories
(24.0*7.0/(number_of_villages),[
    (call_script, "script_execude_debug_message", 50),
    (store_random_in_range, ":village", villages_begin, villages_end),
    (call_script, "script_refresh_village_merchant_inventory", ":village"),
]),

#Refreshing village defenders
#Clearing slot_village_player_can_not_steal_cattle flags
(24.0*7.0/(number_of_villages),[
    (call_script, "script_execude_debug_message", 51),
    (store_random_in_range, ":village_no", villages_begin, villages_end),
    (call_script, "script_refresh_village_defenders", ":village_no"),
    (party_set_slot, ":village_no", slot_village_player_can_not_steal_cattle, 0),
]),

# Refresh number of cattle in villages
(24.0*7.0/(number_of_villages),[
    (call_script, "script_execude_debug_message", 52),
    (store_random_in_range, ":village_no", centers_begin, centers_end), ##all centers may have cattle
    (party_get_slot, ":num_cattle", ":village_no", slot_center_head_cattle),
    (party_get_slot, ":num_sheep", ":village_no", slot_center_head_sheep),
    (party_get_slot, ":num_hores", ":village_no", slot_center_head_horses),
    (party_get_slot, ":num_acres", ":village_no", slot_center_acres_pasture),
    (val_max, ":num_acres", 1),

    (store_mul, ":grazing_capacity", ":num_cattle", 400),
    (store_mul, ":sheep_addition", ":num_sheep", 200),
    (store_mul, ":horse_addition", ":num_hores", 200),
    (val_add, ":grazing_capacity", ":sheep_addition"),
    (val_add, ":grazing_capacity", ":horse_addition"),
    (val_div, ":grazing_capacity", ":num_acres"),

    (store_random_in_range, ":random_no", 0, 100),
    (try_begin), #Disaster
        (le, ":random_no", 5),#5% chance of epidemic - should happen once every two years It was more common in ancient times
        (val_min, ":num_cattle", 10),
        (val_min, ":num_sheep", 15),
        (val_min, ":num_hores", 5),
        (party_get_slot, reg4, ":village_no", slot_center_head_cattle),
        (party_get_slot, reg5, ":village_no", slot_center_head_sheep),
        (party_get_slot, reg50, ":village_no", slot_center_head_horses),
        (val_sub, reg4, ":num_cattle"),
        (val_sub, reg5, ":num_sheep"),
        (val_sub, reg50, ":num_hores"),
        (try_begin),
            (lt, reg4, 0),
            (assign, reg4, 0),
        (try_end),
        (try_begin),
            (lt, reg5, 0),
            (assign, reg5, 0),
        (try_end),
        (try_begin),
            (lt, reg50, 0),
            (assign, reg50, 0),
        (try_end),
        (try_begin),
            (gt, reg4, 0),
            (eq, reg5, 0),
            (eq, reg50, 0),
            (party_slot_eq, ":village_no", slot_town_lord, "trp_player"),
            (gt, "$g_player_chamberlain", 0),
            (str_store_party_name_link, s4, ":village_no"),
            (display_log_message, "@A livestock epidemic has killed {reg4} cattle in {s4}."),
        (else_try),
            (eq, reg4, 0),
            (gt, reg5, 0),
            (eq, reg50, 0),
            (party_slot_eq, ":village_no", slot_town_lord, "trp_player"),
            (gt, "$g_player_chamberlain", 0),
            (str_store_party_name_link, s4, ":village_no"),
            (display_log_message, "@A livestock epidemic has killed {reg5} sheep in {s4}."),
        (else_try),
            (eq, reg4, 0),
            (eq, reg5, 0),
            (gt, reg50, 0),
            (party_slot_eq, ":village_no", slot_town_lord, "trp_player"),
            (gt, "$g_player_chamberlain", 0),
            (str_store_party_name_link, s4, ":village_no"),
            (display_log_message, "@A livestock epidemic has killed {reg50} horses in {s4}."),
        (else_try),
            (eq, reg4, 0),
            (gt, reg5, 0),
            (gt, reg50, 0),
            (party_slot_eq, ":village_no", slot_town_lord, "trp_player"),
            (gt, "$g_player_chamberlain", 0),
            (str_store_party_name_link, s4, ":village_no"),
            (display_log_message, "@A livestock epidemic has killed {reg50} horses and {reg5} sheep in {s4}."),
        (else_try),
            (gt, reg4, 0),
            (eq, reg5, 0),
            (gt, reg50, 0),
            (party_slot_eq, ":village_no", slot_town_lord, "trp_player"),
            (gt, "$g_player_chamberlain", 0),
            (str_store_party_name_link, s4, ":village_no"),
            (display_log_message, "@A livestock epidemic has killed {reg50} horses and {reg4} cattle in {s4}."),
        (else_try),
            (gt, reg4, 0),
            (gt, reg5, 0),
            (eq, reg50, 0),
            (party_slot_eq, ":village_no", slot_town_lord, "trp_player"),
            (gt, "$g_player_chamberlain", 0),
            (str_store_party_name_link, s4, ":village_no"),
            (display_log_message, "@A livestock epidemic has killed {reg4} cattle and {reg5} sheep in {s4}."),
        (else_try),
            (gt, reg4, 0),
            (gt, reg5, 0),
            (gt, reg50, 0),
            (party_slot_eq, ":village_no", slot_town_lord, "trp_player"),
            (gt, "$g_player_chamberlain", 0),
            (str_store_party_name_link, s4, ":village_no"),
            (display_log_message, "@A livestock epidemic has killed {reg4} cattle and {reg5} sheep and {reg50} horses in {s4}."),
        (try_end),
    (else_try), #Overgrazing
        (gt, ":grazing_capacity", 100),
        (val_mul, ":num_sheep", 90), #10% decrease at number of cattles
        (val_div, ":num_sheep", 100),

        (val_mul, ":num_cattle", 90), #10% decrease at number of sheeps
        (val_div, ":num_cattle", 100),

        (try_begin),
            (party_slot_eq, ":village_no", slot_center_culture, "fac_culture_3"),##only nomads have horses
            (val_mul, ":num_hores", 90), #10% decrease at number of horses
            (val_div, ":num_hores", 100),
        (try_end),
    (else_try), #superb grazing
        (lt, ":grazing_capacity", 30),

        (val_mul, ":num_cattle", 120), #20% increase at number of cattles
        (val_div, ":num_cattle", 100),
        (val_add, ":num_cattle", 1),

        (val_mul, ":num_sheep", 120), #20% increase at number of sheeps
        (val_div, ":num_sheep", 100),
        (val_add, ":num_sheep", 1),

        (try_begin),
            (party_slot_eq, ":village_no", slot_center_culture, "fac_culture_3"),##only nomads have horses
            (val_mul, ":num_hores", 120), #20% increase at number of horses
            (val_div, ":num_hores", 100),
            (val_add, ":num_hores", 1),
        (try_end),
    (else_try), #very good grazing
        (lt, ":grazing_capacity", 60),

        (val_mul, ":num_cattle", 110), #10% increase at number of cattles
        (val_div, ":num_cattle", 100),
        (val_add, ":num_cattle", 1),

        (val_mul, ":num_sheep", 110), #10% increase at number of sheeps
        (val_div, ":num_sheep", 100),
        (val_add, ":num_sheep", 1),

        (try_begin),
            (party_slot_eq, ":village_no", slot_center_culture, "fac_culture_3"),##only nomads have horses
            (val_mul, ":num_hores", 110), #10% increase at number of horses
            (val_div, ":num_hores", 100),
            (val_add, ":num_hores", 1),
        (try_end),
    (else_try), #good grazing
        (lt, ":grazing_capacity", 100),
        (lt, ":random_no", 50),

        (val_mul, ":num_cattle", 105), #5% increase at number of cattles
        (val_div, ":num_cattle", 100),
        (try_begin), #if very low number of cattles and there is good grazing then increase number of cattles also by one
            (le, ":num_cattle", 20),
            (val_add, ":num_cattle", 1),
        (try_end),

        (val_mul, ":num_sheep", 105), #5% increase at number of sheeps
        (val_div, ":num_sheep", 100),
        (try_begin), #if very low number of sheeps and there is good grazing then increase number of sheeps also by one
            (le, ":num_sheep", 20),
            (val_add, ":num_sheep", 1),
        (try_end),

        (try_begin),
            (party_slot_eq, ":village_no", slot_center_culture, "fac_culture_3"),##only nomads have horses
            (val_mul, ":num_hores", 105), #5% increase at number of horses
            (val_div, ":num_hores", 100),
            (try_begin), #if very low number of horses and there is good grazing then increase number of horses also by one
                (le, ":num_hores", 20),
                (val_add, ":num_hores", 1),
            (try_end),
        (try_end),
    (try_end),
    (party_set_slot, ":village_no", slot_center_head_cattle, ":num_cattle"),
    (party_set_slot, ":village_no", slot_center_head_sheep, ":num_sheep"),
]),

(24,[
    (call_script, "script_execude_debug_message", 53),
    (try_begin),
        (troop_slot_eq, "trp_global_variables", g_player_villa, 2),
        (eq, "$g_player_rent", 1),
        (store_random_in_range, ":rent", 1000, 3000),
        (troop_add_gold, "trp_household_villa", ":rent"),
    (try_end),
    (try_begin),
        (troop_slot_eq, "trp_global_variables", g_player_villa, 2),
        (val_add, "$g_player_villa_costs", 750),
    (try_end),

    (try_begin),
        (troop_slot_eq, "trp_array_villa_feast", 9, 0),
        (dialog_box, "@You are informed that the preparations for your feast in the Domus Mare are finished. Visit the Domus Mare to start the feast."),
    (else_try),
        (troop_slot_ge, "trp_array_villa_feast", 9, 1),
        (troop_get_slot, ":timer33", "trp_array_villa_feast", 9),
        (troop_get_slot, ":guest", "trp_array_villa_feast", ":timer33"),
        (store_random_in_range, ":chance", 0, 100),
        (troop_get_slot, ":renown", "trp_player", slot_troop_renown),
        (store_div, ":success", ":renown", 10),
        (try_begin),
            (this_or_next|troop_slot_eq, ":guest", slot_troop_occupation, slto_kingdom_hero),
            (troop_slot_eq, ":guest", slot_troop_occupation, slto_kingdom_lady),
            (call_script, "script_troop_get_relation_with_troop", ":guest", "trp_player"),
            (assign, ":rel", reg0),
            (val_add, ":success", ":rel"),
            (le, ":chance", ":success"),
            (str_store_troop_name, s40, ":guest"),
            (dialog_box, "@You receive a message: {s40} is grateful to be invited and will attend to the feast."),
        (else_try),
            (this_or_next|troop_slot_eq, ":guest", slot_troop_occupation, slto_kingdom_hero),
            (troop_slot_eq, ":guest", slot_troop_occupation, slto_kingdom_lady),
            (str_store_troop_name, s40, ":guest"),
            (dialog_box, "@You receive a message: {s40} won't attend to the feast."),
            (troop_set_slot, "trp_array_villa_feast", ":timer33", -1),
        (else_try),
            (str_store_troop_name, s40, ":guest"),
            (dialog_box, "@{s40} deceased and won't attend to the feast."),
            (troop_set_slot, "trp_array_villa_feast", ":timer33", -1),
        (try_end),
        (val_sub, ":timer33", 1),
        (troop_set_slot, "trp_array_villa_feast", 9, ":timer33"),
    (try_end),
]),

#Accumulate taxes tigger
##weekly on average, we have 328 centers -> 168/328
(24.0*7.0/(number_of_walled_centers),[
    (call_script, "script_execude_debug_message", 54),
    (assign, ":save_reg0", reg0),
    #Collect taxes for another week
    (try_begin),
        (neg|is_between, "$g_walled_center_trigger_taxes", walled_centers_begin, walled_centers_end),
        (assign, "$g_walled_center_trigger_taxes", walled_centers_begin),
    (try_end),
    (call_script, "script_calculate_weekly_rents", "$g_walled_center_trigger_taxes"),
    (assign, reg0, ":save_reg0"),
    (val_add, "$g_walled_center_trigger_taxes", 1),
]),

#recalculate lord random decision seeds once in every week
(24.0*7.0/(number_of_active_npcs),[
    (call_script, "script_execude_debug_message", 55),
    (try_begin),
        (lt, "$g_set_lord_decision_seed_and_wages", active_npcs_begin),
        (assign, "$g_set_lord_decision_seed_and_wages", active_npcs_begin),
    (try_end),
    (try_begin),
        (ge, "$g_set_lord_decision_seed_and_wages", active_npcs_end),
        (assign, "$g_set_lord_decision_seed_and_wages", active_npcs_begin),
    (try_end),
    ##Nero collects his rents
    (try_begin),
        (eq, "$g_set_lord_decision_seed_and_wages", "trp_kingdom_7_lord"),##Nero
        (troop_slot_ge, "$g_set_lord_decision_seed_and_wages", slot_troop_renown, 1),
        (try_for_range, ":center", centers_begin, centers_end),
            (party_slot_eq, ":center", slot_town_lord, "$g_set_lord_decision_seed_and_wages"),
            (assign, ":c", 0),
            (try_begin),
                (is_between, ":center", walled_centers_begin, walled_centers_end),
                (party_slot_eq, ":center", slot_center_is_besieged_by, -1),
                (assign, ":c", 1),
            (else_try),
                (is_between, ":center", villages_begin, villages_end),
                (neg|party_slot_eq, ":center", slot_village_state, svs_being_raided),
                (neg|party_slot_eq, ":center", slot_village_state, svs_looted),
                (assign, ":c", 1),
            (try_end),
            (eq, ":c", 1),
            (try_begin),
                (troop_slot_eq, "$g_set_lord_decision_seed_and_wages", slot_troop_occupation, slto_kingdom_hero),##Nero still alive
                (call_script, "script_troop_does_business_in_center", "$g_set_lord_decision_seed_and_wages", ":center"),
            (else_try),
                (troop_slot_eq, "$g_set_lord_decision_seed_and_wages", slot_troop_occupation, dplmc_slto_dead),##Nero is dead
                (troop_set_slot, "$g_set_lord_decision_seed_and_wages", slot_troop_renown, -1),
            (try_end),
        (try_end),
    (try_end),
    (try_begin),
        (troop_slot_eq, "$g_set_lord_decision_seed_and_wages", slot_troop_occupation, slto_kingdom_hero),
        ##OLD CHECK
        # (neg|troop_slot_eq, "$g_set_lord_decision_seed_and_wages", slot_troop_occupation, dplmc_slto_dead),#no dead
        # (neg|troop_slot_eq, "$g_set_lord_decision_seed_and_wages", slot_troop_occupation, slto_inactive),#no inactive companion
        # (neg|troop_slot_eq, "$g_set_lord_decision_seed_and_wages", slot_troop_occupation, slto_player_companion),#no inactive companion
        # (assign, ":continue", 1),##make a check to make sure its not a companion leading
        # (troop_get_slot, ":leaded_party", "$g_set_lord_decision_seed_and_wages", slot_troop_leaded_party),
        # (try_begin),
          # (party_is_active, ":leaded_party"),
          # (this_or_next|party_slot_eq, ":leaded_party", slot_party_type, spt_companion_raider),
          # (party_slot_eq, ":leaded_party", slot_party_type, spt_player_camp),
          # (assign, ":continue", 0),
        # (try_end),
        # (eq, ":continue", 1),
        ##setting decision seed
        (store_random_in_range, ":random", 0, 10000),
        (troop_set_slot, "$g_set_lord_decision_seed_and_wages", slot_troop_temp_decision_seed, ":random"),
        ##calculating debts
        (troop_get_slot, ":cur_debt", "$g_set_lord_decision_seed_and_wages", slot_troop_player_debt),#Increasing debt
        (try_begin),
            (is_between, ":cur_debt", 1, dplmc_ransom_debt_mask), #qst_rescue_prisoner does not accumulate
            ##lose relation
            (call_script, "script_troop_change_relation_with_troop", "trp_player", "$g_set_lord_decision_seed_and_wages", -3),
            (str_store_troop_name, s15, "$g_set_lord_decision_seed_and_wages"),
            (assign, reg1, ":cur_debt"),
            (display_message, "@You have an outstanding debt of {reg1} denars with {s15}"),
            #SB : aristocracy/plutocracy debt modifier
            (store_faction_of_troop, ":faction_no", "$g_set_lord_decision_seed_and_wages"),
            (faction_get_slot, ":aristocracy", ":faction_no", dplmc_slot_faction_aristocracy),
            (val_add, ":aristocracy", 205), #1.01x to 1.04x
            (val_mul, ":cur_debt", ":aristocracy"),
            (val_div, ":cur_debt", 200),
            (troop_set_slot, "$g_set_lord_decision_seed_and_wages", slot_troop_player_debt, ":cur_debt"),
        (try_end),
        ##adding income
        (call_script, "script_calculate_hero_weekly_net_income_and_add_to_wealth", "$g_set_lord_decision_seed_and_wages"),#Adding net income
    (try_end),
    (val_add, "$g_set_lord_decision_seed_and_wages", 1),
]),

# Attach Lord Parties to the town they are in
(0.1,[
    (call_script, "script_execude_debug_message", 56),
    (assign, ":save_reg0", reg0),
    (try_for_range, ":troop_no", heroes_begin, heroes_end),
        (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
        (troop_get_slot, ":troop_party_no", ":troop_no", slot_troop_leaded_party),
        (ge, ":troop_party_no", 1),
        (party_is_active, ":troop_party_no"),

        (party_get_attached_to, ":cur_attached_town", ":troop_party_no"),
        (lt, ":cur_attached_town", 1),
        (party_get_cur_town, ":destination", ":troop_party_no"),
        (is_between, ":destination", walled_centers_begin, walled_centers_end),
        (call_script, "script_get_relation_between_parties", ":destination", ":troop_party_no"),
        (try_begin),
            (ge, reg0, 0),
            (party_attach_to_party, ":troop_party_no", ":destination"),
        (else_try),
            (party_set_ai_behavior, ":troop_party_no", ai_bhvr_hold),
        (try_end),
        (store_faction_of_party, ":troop_faction_no", ":troop_party_no"),
        (store_faction_of_party, ":destination_faction_no", ":destination"),
        (eq, ":troop_faction_no", ":destination_faction_no"),
        (party_get_num_prisoner_stacks, ":num_stacks", ":troop_party_no"),
        (gt, ":num_stacks", 0),
        (assign, "$g_move_heroes", 1),
        (call_script, "script_party_prisoners_add_party_prisoners", ":destination", ":troop_party_no"),#Moving prisoners to the center
        (assign, "$g_move_heroes", 1),
        (call_script, "script_party_remove_all_prisoners", ":troop_party_no"),
    (try_end),
    (assign, reg0, ":save_reg0"),
]),

# Check escape chances of hero prisoners.
(2.0*24.0/(number_of_walled_centers),[
    (call_script, "script_execude_debug_message", 57),
    (store_random_in_range, ":center_no", walled_centers_begin, walled_centers_end),
    (assign, ":chance", 30),
    (try_begin),
        (party_slot_ge, ":center_no", slot_center_has_prisoner_tower, 1),
        (assign, ":chance", 2),
    (try_end),
    (call_script, "script_randomly_make_prisoner_heroes_escape_from_party", ":center_no", ":chance"),
]),

(48,[
    (call_script, "script_execude_debug_message", 58),
   ##setting global variables
    (assign, "$g_blood", 0),
    (assign, "$premio_minister",0),
   ##end setting global variables
    (try_begin),
        (quest_slot_eq, "qst_pirates", slot_quest_current_state, 0),
        (main_party_has_troop, "trp_sailor"),
        (party_get_current_terrain, ":cur_terrain", "p_main_party"),
        (this_or_next|eq,":cur_terrain",rt_water),
        (this_or_next|eq,":cur_terrain",rt_deep_water),
        (this_or_next|eq,":cur_terrain",rt_bridge),
        (eq,":cur_terrain",rt_river),
        (jump_to_menu, "mnu_farbius_the_painter_quest_1"),
    (try_end),
    (try_begin),
        (party_slot_eq, "p_main_party", slot_party_on_water, 0), #player on land.
        (call_script, "script_randomly_make_prisoner_heroes_escape_from_party", "p_main_party", 50),
    (try_end),

    (try_for_range, ":chest", pcamp_chests_begin, pcamp_chests_end),
        (troop_get_slot, ":party", ":chest", slot_pcamp_chest_party),
        (gt, ":party", 0),
        (party_is_active, ":party"),
        (call_script, "script_randomly_make_prisoner_heroes_escape_from_party", ":party", pcamp_lord_escape_chance),
    (try_end),
]),

#Hiring men with hero wealths (once a day)
(24.0/(number_of_active_npcs),[
    (call_script, "script_execude_debug_message", 59),

    (try_begin),
        (lt, "$g_hire_troops_and_controversy", active_npcs_begin),
        (assign, "$g_hire_troops_and_controversy", active_npcs_begin),
    (try_end),

    (try_begin),
        (ge, "$g_hire_troops_and_controversy", active_npcs_end),
        (assign, "$g_hire_troops_and_controversy", active_npcs_begin),
    (try_end),
    #are no promoted kingdom ladies!
    (try_begin),
        (try_begin),
            (troop_get_slot, ":day", "$g_hire_troops_and_controversy", slot_troop_assassin_attempt),
            (ge, ":day", 1),
            (val_sub, ":day", 1),
            (troop_set_slot, "$g_hire_troops_and_controversy", slot_troop_assassin_attempt, ":day"),
        (try_end),
        ##diplomacy end+
        (troop_slot_eq, "$g_hire_troops_and_controversy", slot_troop_occupation, slto_kingdom_hero),
        (troop_get_slot, ":party_no", "$g_hire_troops_and_controversy", slot_troop_leaded_party),
        (ge, ":party_no", 1),
        (party_is_active, ":party_no"),
        (party_get_attached_to, ":cur_attached_party", ":party_no"),
        (is_between, ":cur_attached_party", centers_begin, centers_end),
        (party_slot_eq, ":cur_attached_party", slot_center_is_besieged_by, -1), #center not under siege
        (neg|party_slot_ge, ":cur_attached_party", slot_party_looted_left_days, 1), #center not looted

        (call_script, "script_get_cohort_limit", ":party_no"),
        (assign, ":cohorts_end", reg0),
        (try_for_range, ":cohort", slot_cohort_begin, ":cohorts_end"),
            (call_script, "script_hire_men_to_kingdom_hero_party", "$g_hire_troops_and_controversy", -1, ":cohort"),
        (try_end),

        (try_begin),#upgrade troops a bit
            (assign, ":xp_addition_for_party_no", 5000),
            (try_begin),
                (party_slot_ge, ":cur_attached_party", slot_center_has_training_grounds, 1),#training ground
                (val_add, ":xp_addition_for_party_no", 25000),
            (try_end),
            (try_begin),
                (troop_slot_ge, "$g_hire_troops_and_controversy", slot_troop_legion, 1),
                (val_add, ":xp_addition_for_party_no", 10000),
            (try_end),
            (party_upgrade_with_xp, ":party_no", ":xp_addition_for_party_no", 0),
            # debug
            # (str_store_troop_name, s1, "$g_hire_troops_and_controversy"),
            # (str_store_party_name, s2, ":cur_attached_party"),
            # (assign, reg1, ":xp_addition_for_party_no"),
            # (display_message, "@{s1} upgrades troops in {s2} (exp {reg1})"),
        (try_end),
    (try_end),

    (try_begin),
        (troop_get_slot, ":impatience", "$g_hire_troops_and_controversy", slot_troop_intrigue_impatience),
        (val_sub, ":impatience", 5),
        (val_max, ":impatience", 0),
        (troop_set_slot, "$g_hire_troops_and_controversy", slot_troop_intrigue_impatience, ":impatience"),
    (try_end),
    #This reduces controversy by one each round
    (try_begin),
        (troop_get_slot, ":controversy", "$g_hire_troops_and_controversy", slot_troop_controversy),
        (ge, ":controversy", 1),
        (store_random_in_range, ":controversy_deduction", 1, 3),
        (val_min, ":controversy_deduction", 2),
        (val_sub, ":controversy", ":controversy_deduction"),
        (val_max, ":controversy", 0),
        (troop_set_slot, "$g_hire_troops_and_controversy", slot_troop_controversy, ":controversy"),
    (try_end),
    (val_add, "$g_hire_troops_and_controversy", 1),
]),

##This code is to refill the local town watch
(24.0/(number_of_walled_centers),[
    (call_script, "script_execude_debug_message", 60),

    (try_begin),
        (lt, "$g_hire_troops_to_centers", walled_centers_begin),
        (assign, "$g_hire_troops_to_centers", walled_centers_begin),
    (try_end),

    (try_begin),
        (ge, "$g_hire_troops_to_centers", walled_centers_end),
        (assign, "$g_hire_troops_to_centers", walled_centers_begin),
    (try_end),

    (assign, ":save_reg0", reg0),
    (try_begin),
        (neg|party_slot_ge, "$g_hire_troops_to_centers", slot_party_looted_left_days, 1),#fix parties without any member
        (call_script, "script_party_get_ideal_size", "$g_hire_troops_to_centers"),
        (assign, ":ideal_size", reg0),
        (store_party_size_wo_prisoners, ":size", "$g_hire_troops_to_centers"),
        (lt, ":size",":ideal_size"),
        (party_slot_ge, "$g_hire_troops_to_centers", slot_town_lord, 0), #center belongs to someone.
        (party_slot_eq, "$g_hire_troops_to_centers", slot_center_is_besieged_by, -1), #center not under siege

        (store_faction_of_party, ":center_faction", "$g_hire_troops_to_centers"),
        (is_between, ":center_faction", kingdoms_begin, kingdoms_end),
        (party_get_slot, ":cur_wealth", "$g_hire_troops_to_centers", slot_town_wealth),
        (gt, ":cur_wealth", 2000),
        (try_for_range, ":party_template_slot", slot_cohort_town_begin, slot_cohort_town_4+1),
            (party_get_slot, ":party_template", "$g_hire_troops_to_centers", ":party_template_slot"),
            (ge, ":party_template", 1),
            (call_script, "script_cohort_refil_garrison", "$g_hire_troops_to_centers", ":party_template", ":party_template_slot",1),
        (try_end),
    (try_end),
    (assign, reg0, ":save_reg0"),
    (val_add, "$g_hire_troops_to_centers", 1),
]),

(24.0*3.0/(number_of_active_npcs),[
    (call_script, "script_execude_debug_message", 61),
    (assign, ":save_reg0", reg0),
    (store_random_in_range, ":troop_no", heroes_begin, heroes_end),
    (try_begin),
        ##diplomacy end+
        (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
        (neg|troop_slot_ge, ":troop_no", slot_troop_prisoner_of_party, 0),
        (store_troop_faction, ":cur_faction", ":troop_no"),
        (try_begin),
            (this_or_next|eq, ":cur_faction", "fac_outlaws"), #Do nothing
            (eq, ":cur_faction", "fac_commoners"), #Do nothing
        (else_try),
            (neg|troop_slot_ge, ":troop_no", slot_troop_leaded_party, 1),
            (try_begin),
                (eq, "$cheat_mode", 2),
                (str_store_troop_name, s4, ":troop_no"),
                (display_message, "str_debug__attempting_to_spawn_s4"),
            (try_end),

            (call_script, "script_cf_select_random_walled_center_with_faction_and_owner_priority_no_siege", ":cur_faction", ":troop_no"),#Can fail
            (is_between, reg0, walled_centers_begin, walled_centers_end),##avoid script errors
            (assign, ":center_no", reg0),

            (try_begin),
                (eq, "$cheat_mode", 2),
                (str_store_party_name, s7, ":center_no"),
                (str_store_troop_name, s0, ":troop_no"),
                (display_message, "str_debug__s0_is_spawning_around_party__s7"),
            (try_end),

            (call_script, "script_create_kingdom_hero_party", ":troop_no", ":center_no"),

            (try_begin),
                (eq, "$g_there_is_no_avaliable_centers", 0),
                (gt, "$pout_party", 0),#just to be save
                (party_attach_to_party, "$pout_party", ":center_no"),
            (try_end),

            #new
            #(troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
            #(call_script, "script_npc_decision_checklist_party_ai", ":troop_no"), #This handles AI for both marshal and other parties
            #(call_script, "script_party_set_ai_state", ":party_no", reg0, reg1),
            #new end
            (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
            (call_script, "script_party_set_ai_state", ":party_no", spai_holding_center, ":center_no"),
        (else_try),
            (store_current_hours, ":hours"),
            (gt, ":hours", 72),
            (assign, ":c", 0),
            (try_begin),
                (ge, "$g_civil_war", 1),
                (faction_slot_eq, ":cur_faction", slot_faction_culture, "fac_culture_7"),
                (faction_slot_eq, ":cur_faction", slot_faction_num_castles, 0),
                (faction_slot_eq, ":cur_faction", slot_faction_num_towns, 0),
                (assign, ":c", 1),
            (else_try),
                (neg|faction_slot_eq, ":cur_faction", slot_faction_state, sfs_active),
                (assign, ":c", 1),
            (try_end),
            (eq, ":c", 1),

            # (str_store_troop_name_link, s10, ":troop_no"),
            # (display_log_message, "@Check lord change {s10}"),

            (troop_get_slot, reg0, ":troop_no", slot_troop_change_to_faction),
            (neg|is_between, reg0, kingdoms_begin, kingdoms_end),
            (try_begin),
                (is_between, ":troop_no", kings_begin, kings_end),
                (troop_set_slot, ":troop_no", slot_troop_change_to_faction, "fac_commoners"),
            (else_try),
                (troop_slot_eq, ":troop_no", slot_troop_culture, "fac_culture_8"), # judean rebels
                (troop_set_slot, ":troop_no", slot_troop_change_to_faction, "fac_outlaws"),
            (else_try),
                (faction_slot_eq, ":cur_faction", slot_faction_leader, ":troop_no"),
                (this_or_next|eq, ":troop_no", "trp_statthalter_9"),
                (this_or_next|eq, ":troop_no", "trp_senator_2"),
                (this_or_next|eq, ":troop_no", "trp_senator_1"),
                (eq, ":troop_no", "trp_legatus_11"),

                (str_store_troop_name_link, s10, ":troop_no"),
                (display_log_message, "@Facing total defeat, {s10} committed suicide."),

                (call_script, "script_kill_lord_lady", ":troop_no", ":troop_no", 0),
            (else_try),
                # (store_random_in_range, ":random_no", 0, 100),
                # (lt, ":random_no", 10),
                (call_script, "script_lord_find_alternative_faction", ":troop_no"),
                (is_between, reg0, kingdoms_begin, kingdoms_end),
                (neq, reg0, ":cur_faction"),
                (troop_set_slot, ":troop_no", slot_troop_change_to_faction, reg0),
                # (str_store_faction_name_link, s10, reg0),
                # (display_log_message, "@change to {s10}"),
            (try_end),
        (try_end),
    (try_end),
    (assign, reg0, ":save_reg0"),
]),

# Spawn village farmer parties
(24.0/(number_of_villages),[
    (call_script, "script_execude_debug_message", 62),
    (store_random_in_range, ":village_no", villages_begin, villages_end),
    (party_slot_eq, ":village_no", slot_village_state, svs_normal),
    (assign, ":save_reg0", reg0),
    (assign, ":save_reg7", reg7),
    (party_get_slot, ":farmer_party", ":village_no", slot_village_farmer_party),
    (try_begin),
        (this_or_next|le, ":farmer_party", 0),
        (neg|party_is_active, ":farmer_party"),
        (store_random_in_range, ":random_no", 0, 100),
        (lt, ":random_no", 60),
        (call_script, "script_create_village_farmer_party", ":village_no"),
        (try_begin),
            (is_between, reg7, "p_temp_party", last_static_party),
            (str_store_party_name, s1, reg7),
            (display_message, "@reg7 is bugged: {s1}."),
        (try_end),
        (party_set_slot, ":village_no", slot_village_farmer_party, reg7),
    (else_try),
        (is_between, ":farmer_party", "p_temp_party", last_static_party),
        (str_store_party_name, s1, ":village_no"),
        (str_store_party_name, s2, ":farmer_party"),
        (display_message, "@Village farmers party slot is bugged (value = {s2}) for {s1}, reset it."),
        (party_set_slot, ":village_no", slot_village_farmer_party, 0),
    (try_end),
    (assign, reg7, ":save_reg7"),
    (assign, reg0, ":save_reg0"),
]),

(72,[
    (call_script, "script_execude_debug_message", 63),
    # Updating trade good prices according to the productions
    (call_script, "script_update_trade_good_prices"),
    # Updating player odds
    (try_for_range, ":cur_center", centers_begin, centers_end),
        (party_get_slot, ":player_odds", ":cur_center", slot_town_player_odds),
        (try_begin),
            (gt, ":player_odds", 1000),
            (val_mul, ":player_odds", 95),
            (val_div, ":player_odds", 100),
            (val_max, ":player_odds", 1000),
        (else_try),
            (lt, ":player_odds", 1000),
            (val_mul, ":player_odds", 105),
            (val_div, ":player_odds", 100),
            (val_min, ":player_odds", 1000),
        (try_end),
        (party_set_slot, ":cur_center", slot_town_player_odds, ":player_odds"),
    (try_end),
]),

(1,[
    (call_script, "script_execude_debug_message", 64),
    (gt,"$g_work_for_village_ongoing",0),
    (is_between, "$current_town", villages_begin, villages_end),
    (try_begin),
        (this_or_next|eq, "$g_player_is_captive", 1),
        (this_or_next|party_slot_eq, "$current_town", slot_village_state, svs_being_raided),
        (party_slot_ge, "$current_town", slot_village_infested_by_bandits, 1),
        (assign,"$g_work_for_village_ongoing", 0),
        (rest_for_hours,0,0,0),
        (jump_to_menu,"mnu_village_basic_work"),
    (else_try),
        (gt,"$g_work_for_village_ongoing",1),
        (val_sub, "$g_work_for_village_ongoing", 1),
        (store_random_in_range,":show_overrall_message",1,5),
        (try_begin),
            (eq,":show_overrall_message",1),
            (display_message,"@You keep working hard for this village...",0x66CC33),
        (try_end),
        (rest_for_hours,2,5,0),
    (else_try),
        (eq,"$g_work_for_village_ongoing",1),
        (display_message,"@Your strenuous village work ends."),
        (rest_for_hours,0,0,0),
        (val_sub, "$g_work_for_village_ongoing", 1),
        (jump_to_menu,"mnu_village_basic_work"),
    (try_end),
]),

#merchant ai thinking
#Troop AI: Merchants thinking
(8,[
    (call_script, "script_execude_debug_message", 65),
    (assign, ":save_reg0", reg0),
    (try_for_parties, ":party_no"),
        (gt, ":party_no", last_static_party),
        (this_or_next|party_slot_eq, ":party_no", slot_party_type, spt_merchant_caravan),
        (party_slot_eq, ":party_no", slot_party_type, spt_kingdom_caravan),
        (party_is_in_any_town, ":party_no"),
        (store_faction_of_party, ":merchant_faction", ":party_no"),
        (try_begin),
            (faction_slot_eq, ":merchant_faction", slot_faction_num_towns, 0),
            (neq, ":party_no", "p_main_party"),
            (remove_party, ":party_no"),
        (else_try),
            (party_get_cur_town, ":cur_center", ":party_no"),
            (store_random_in_range, ":random_no", 0, 100),
            (assign, ":tariff_succeed_limit", 45), #SB : base amount for medium
            (try_begin),
                (this_or_next|party_slot_eq, ":cur_center", slot_town_lord, "trp_player"),
                (eq, ":merchant_faction", "$players_kingdom"),
                (options_get_campaign_ai, ":reduce_campaign_ai"), #SB : moved this up top
                (val_sub, ":reduce_campaign_ai", 1),
                (val_mul, ":reduce_campaign_ai", 10), #pre-calculate amount
                (val_add, ":tariff_succeed_limit", ":reduce_campaign_ai"),
            (try_end),

            (lt, ":random_no", ":tariff_succeed_limit"),

            #SB : todo queue caravans so they don't blob together, obvious if same destination
            (assign, ":can_leave", 1),

            (try_begin),
                (is_between, ":cur_center", walled_centers_begin, walled_centers_end),
                (neg|party_slot_eq, ":cur_center", slot_center_is_besieged_by, -1),
                (assign, ":can_leave", 0),
            (try_end),
            (eq, ":can_leave", 1),
            (assign, ":do_trade", 0),
            (try_begin),
                (party_get_slot, ":cur_ai_state", ":party_no", slot_party_ai_state),
                (eq, ":cur_ai_state", spai_trading_with_town),
                (party_get_slot, ":cur_ai_object", ":party_no", slot_party_ai_object),
                (eq, ":cur_center", ":cur_ai_object"),
                (assign, ":do_trade", 1),
            (try_end),

            (assign, ":target_center", -1),

            (try_begin), #Make sure escorted caravan continues to its original destination.
                (eq, "$caravan_escort_state", 1),
                (eq, "$caravan_escort_party_id", ":party_no"), #SB : redo globals here
                (assign, ":caravan_distance_to_player", 9999),
                (try_begin), #code from triggers
                    (eq, "$caravan_escort_state", 1),
                    (eq, ":cur_center", "$caravan_escort_destination_town"),
                    #arrived, check if player is nearby to prompt conversation (unless player triggered dialog first)
                    (store_distance_to_party_from_party, ":caravan_distance_to_player","p_main_party","$caravan_escort_party_id"),
                    (lt, ":caravan_distance_to_player", 5),
                    (map_free), #in case player is fighting?
                    (start_encounter, "$caravan_escort_party_id"),
                (else_try),
                    (ge, ":caravan_distance_to_player", 5), #cancel quest
                    (assign, "$caravan_escort_state", 0),
                (else_try),
                    # (neg|party_is_in_town, ":party_no", "$caravan_escort_destination_town"),
                    (neq, ":cur_center", "$caravan_escort_destination_town"),
                    (assign, ":target_center", "$caravan_escort_destination_town"),
                (try_end),
            (else_try),
                (try_begin),
                    (party_slot_eq, ":party_no", slot_party_type, spt_merchant_caravan),
                    (call_script, "script_cf_select_most_profitable_coastal_town_at_peace_with_faction_in_trade_route", ":cur_center", ":merchant_faction", -1),
                (else_try),
                    (call_script, "script_cf_select_most_profitable_town_at_peace_with_faction_in_trade_route", ":cur_center", ":merchant_faction", -1),
                (try_end),
                (assign, ":target_center", reg0),
            (try_end),

            (is_between, ":target_center", towns_begin, towns_end),
            (neg|party_is_in_town, ":party_no", ":target_center"),

            (try_begin),
                (eq, ":do_trade", 1),

                # (str_store_party_name, s10, ":party_no"),
                # (str_store_party_name, s11, ":cur_center"),
                # (display_message, "@Party {s10} trades in {s11}"),

                (neg|party_slot_ge, ":cur_center", slot_party_looted_left_days, 1),#trade only if the center is not looted
                (str_store_party_name, s7, ":cur_center"),
                (call_script, "script_do_merchant_town_trade", ":party_no", ":cur_center"),

                ##drop of prisoners, already done in town_trade
                # (call_script, "script_party_prisoners_add_party_prisoners", ":cur_center", ":party_no"),
                # (call_script, "script_party_remove_all_prisoners", ":party_no"),
                ##refill troops
                (party_get_slot, ":party_template", ":party_no", slot_cohort_1),
                (call_script, "script_cohort_describe_strength_to_s5_and_refil", ":party_no", ":party_template", slot_cohort_1, -1, -1, 1),
            (try_end),

            # (str_store_party_name, s10, ":party_no"),
            # (str_store_party_name, s11, ":target_center"),
            # (display_message, "@Party {s10} travels to {s11}"),


            (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_party),
            (party_set_ai_object, ":party_no", ":target_center"),
            (party_set_flags, ":party_no", pf_default_behavior, 0),
            (party_set_slot, ":party_no", slot_party_ai_state, spai_trading_with_town),
            (party_set_slot, ":party_no", slot_party_ai_object, ":target_center"),
        (try_end),
    (try_end), #Party Loop
    (assign, reg0, ":save_reg0"),
]),

#Troop AI: Village farmers thinking
#(8.5,
(8.5/(number_of_villages),[
    (call_script, "script_execude_debug_message", 66),
    #(try_for_parties, ":party_no"),
    #MOTO farmers start out early in day
    (store_time_of_day, ":oclock"),
    (is_between, ":oclock", 4, 17),
    #MOTO farmers start out early in day end

    (store_random_in_range, ":home_center", villages_begin, villages_end),
    (party_get_slot, ":party_no", ":home_center", slot_village_farmer_party),

    (try_begin),
        (gt, ":party_no", 0),
        (le, ":party_no", last_static_party),
        (str_store_party_name, s35, ":home_center"),
        (display_log_message, "@Farmers from {s35} have commited crimes and will be crucified."),
        (assign, ":party_no", 0),
    (else_try),
        (gt, ":party_no", last_static_party),
        (party_is_active, ":party_no"),
        (party_slot_eq, ":party_no", slot_party_type, spt_village_farmer),
        (party_is_in_any_town, ":party_no"),
        (party_get_slot, ":home_center", ":party_no", slot_party_home_center),
        (party_get_cur_town, ":cur_center", ":party_no"),

        (assign, ":can_leave", 1),
        (try_begin),
            (is_between, ":cur_center", walled_centers_begin, walled_centers_end),
            #siege warfare chief cambia #no villagers in siege
            (this_or_next|party_slot_ge, ":cur_center", slot_center_blockaded, 2),    #center blockaded (by player) OR
            (party_slot_ge, ":cur_center", slot_center_is_besieged_by, 1), #center besieged by someone else
            #siege warfare
            (neg|party_slot_eq, ":cur_center", slot_center_is_besieged_by, -1),
            (assign, ":can_leave", 0),
        (try_end),
        (eq, ":can_leave", 1),

        (try_begin),
            (eq, ":cur_center", ":home_center"),

            #Peasants trade in their home center
            (call_script, "script_do_party_center_trade", ":party_no", ":home_center", 3), #this needs to be the same as the center
            (store_faction_of_party, ":center_faction", ":cur_center"),
            (party_set_faction, ":party_no", ":center_faction"),
            (party_get_slot, ":market_town", ":home_center", slot_village_market_town),
            (party_set_slot, ":party_no", slot_party_ai_object, ":market_town"),
            (party_set_slot, ":party_no", slot_party_ai_state, spai_trading_with_town),
            (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_party),
            (party_set_ai_object, ":party_no", ":market_town"),
            #pick up up to 5 spare items in elder's inventory
            (try_begin),
                (party_get_slot, ":town_elder", ":home_center", slot_town_elder),
                (try_begin), #reaccumulate wealth, since we can't store the party's gold use a slot
                    (party_get_slot, ":cur_wealth", ":party_no", slot_town_wealth),
                    (troop_add_gold, ":town_elder", ":cur_wealth"),
                    (party_set_slot, ":party_no", slot_town_wealth, 0),
                (try_end),
                (party_get_slot, ":num_items", ":party_no", slot_party_next_looted_item_slot),
                # (this_or_next|eq, ":num_items", 0),
                (lt, ":num_items", num_party_loot_slots), #not capped
                (val_add, ":num_items", slot_party_looted_item_1),
                (troop_get_inventory_capacity, ":inv_cap", ":town_elder"),
                (try_for_range, ":item_slot", 10, ":inv_cap"),
                    (troop_get_inventory_slot, ":item_no", ":town_elder", ":item_slot"),
                    (gt, ":item_no", -1),
                    (item_get_type, ":itp", ":item_no"),
                    (neq, ":itp", itp_type_goods), #whatever crap player sells
                    (party_set_slot, ":party_no", ":num_items", ":item_no"),
                    (store_add, ":imod_slot", ":num_items", num_party_loot_slots),
                    (troop_get_inventory_slot_modifier, ":imod_no", ":town_elder", ":item_slot"),
                    (party_set_slot, ":party_no", ":imod_slot", ":imod_no"),
                    (troop_set_inventory_slot, ":town_elder", ":item_slot", -1), #remove
                    (try_begin), #only 5 permited
                        (ge, ":num_items", slot_party_looted_item_1 + num_party_loot_slots),
                        (assign, ":inv_cap", 0),
                    (else_try),
                        (val_add, ":num_items", 1),
                    (try_end),
                (try_end),
            (try_end),

        (else_try),
            (try_begin),
                (party_get_slot, ":cur_ai_object", ":party_no", slot_party_ai_object),
                (eq, ":cur_center", ":cur_ai_object"),
                (neg|party_slot_ge, ":cur_center", slot_party_looted_left_days, 1),#is not raided
                (call_script, "script_do_party_center_trade", ":party_no", ":cur_ai_object", 3), #raised from 10
                (assign, ":total_change", reg0),
                #This is roughly 50% of what a caravan would pay

                #Adding tariffs to the town
                (party_get_slot, ":accumulated_tariffs", ":cur_ai_object", slot_center_accumulated_tariffs),
                (party_get_slot, ":prosperity", ":cur_ai_object", slot_town_prosperity),

                (assign, ":tariffs_generated", ":total_change"),
                (val_mul, ":tariffs_generated", ":prosperity"),
                ##diplomacy start+
                (val_add, ":tariffs_generated", 50),#round properly
                ##diplomacy end+
                (val_div, ":tariffs_generated", 100),
                ##diplomacy start+
                (val_div, ":tariffs_generated", 5),#round properly
                ##diplomacy end+
                (try_begin),
                    (party_slot_ge, ":cur_ai_object", slot_center_decree_control, 1),
                    (val_div, ":tariffs_generated", 10),
                (else_try),
                    (val_div, ":tariffs_generated", 20), #10 for caravans, 20 for villages
                (try_end),

                (try_begin),
                    (party_slot_ge, ":home_center", slot_center_has_trader, 1),
                    (val_mul, ":tariffs_generated", 3),
                    (val_div, ":tariffs_generated", 2),
                (try_end),

                (try_begin),
                    (party_slot_ge, ":home_center", slot_center_has_forum, 1),
                    (val_mul, ":tariffs_generated", 3),
                    (val_div, ":tariffs_generated", 2),
                (try_end),

                (try_begin),
                    (party_slot_ge, ":home_center", slot_center_has_roads, 1),
                    (val_mul, ":tariffs_generated", 3),
                    (val_div, ":tariffs_generated", 2),
                (try_end),
                (try_begin),
                    (party_slot_ge, ":cur_ai_object", slot_center_has_roads, 1),
                    (val_mul, ":tariffs_generated", 3),
                    (val_div, ":tariffs_generated", 2),
                (try_end),
                (val_add, ":accumulated_tariffs", ":tariffs_generated"),
                # ##diplomacy begin
                # (try_begin), #no tariffs for infested villages and towns
                # (party_slot_ge, ":cur_ai_object", slot_village_infested_by_bandits, 1),
                # (assign,":accumulated_tariffs", 0),
                # (try_end),
                # ##diplomacy end
                (try_begin),
                    (ge, "$cheat_mode", 3),
                    (assign, reg4, ":tariffs_generated"),
                    (str_store_party_name, s4, ":cur_ai_object"),
                    (assign, reg5, ":accumulated_tariffs"),
                    (display_message, "@{!}New tariffs at {s4} = {reg4}, total = {reg5}"),
                (try_end),

                (party_set_slot, ":cur_ai_object", slot_center_accumulated_tariffs, ":accumulated_tariffs"),

                #Increasing food stocks of the town
                (party_get_slot, ":town_food_store", ":cur_ai_object", slot_party_food_store),
                (call_script, "script_center_get_food_store_limit", ":cur_ai_object"),
                (assign, ":food_store_limit", reg0),
                (val_add, ":town_food_store", 1000),
                (val_min, ":town_food_store", ":food_store_limit"),
                (party_set_slot, ":cur_ai_object", slot_party_food_store, ":town_food_store"),

                #Adding 1 to village prosperity
                (assign, ":luck", 5),
                (try_begin),
                    (party_slot_ge, ":home_center", slot_center_has_trader, 1),
                    (val_add, ":luck", 50),
                (try_end),
                (try_begin),
                    (store_random_in_range, ":rand", 0, 100),
                    (lt, ":rand", ":luck"), #was 35
                    (call_script, "script_change_center_prosperity", ":home_center", 1),
                    (val_add, "$newglob_total_prosperity_from_village_trade", 1),
                (try_end),
            (try_end),

            #Moving farmers to their home village
            (party_set_slot, ":party_no", slot_party_ai_object, ":home_center"),
            (party_set_slot, ":party_no", slot_party_ai_state, spai_trading_with_town),
            (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_party),
            (party_set_ai_object, ":party_no", ":home_center"),
        (try_end),
    (try_end),
]),

#Increase castle food stores
(24.0/(number_of_villages),[
    (call_script, "script_execude_debug_message", 67),
    (assign, ":save_reg0", reg0),
    (try_begin),
        (store_random_in_range, ":village_no", villages_begin, villages_end),#we have 216 villages
        (party_slot_eq, ":village_no", slot_village_state, svs_normal),
        (party_get_slot, ":center_no", ":village_no", slot_village_bound_center),
        (is_between, ":center_no", castles_begin, castles_end),

        (assign, ":can_leave", 1),
        (try_begin),
            #siege warfare chief cambia #no villagers in siege
            (this_or_next|party_slot_ge, ":center_no", slot_center_blockaded, 2),    #center blockaded (by player) OR
            (party_slot_ge, ":center_no", slot_center_is_besieged_by, 1), #center besieged by someone else
            #siege warfare
            (neg|party_slot_eq, ":center_no", slot_center_is_besieged_by, -1),
            (assign, ":can_leave", 0),
        (try_end),
        (eq, ":can_leave", 1),

        (party_get_slot, ":center_food_store", ":center_no", slot_party_food_store),
        (party_get_slot, reg0, ":village_no", slot_town_prosperity),
        (val_add, reg0, 75),
        (val_mul, reg0, 100),#base addition is 100
        (val_add, reg0, 62),
        (val_div, reg0, 125),#plus or minus 40%
        (val_add, ":center_food_store", reg0),
        (call_script, "script_center_get_food_store_limit", ":center_no"),
        (assign, ":food_store_limit", reg0),
        (val_min, ":center_food_store", ":food_store_limit"),
        (party_set_slot, ":center_no", slot_party_food_store, ":center_food_store"),
    (try_end),
    (assign, reg0, ":save_reg0"),
]),

# Make heroes running away from someone retreat to friendly centers
(0.5,[
    (call_script, "script_execude_debug_message", 68),
    (try_for_range, ":cur_troop", heroes_begin, heroes_end),
        (troop_slot_eq, ":cur_troop", slot_troop_occupation, slto_kingdom_hero),
        (troop_get_slot, ":cur_party", ":cur_troop", slot_troop_leaded_party),
        (gt, ":cur_party", 0),
        (try_begin),
            (party_is_active, ":cur_party"),
            (try_begin),
                (get_party_ai_current_behavior, ":ai_bhvr", ":cur_party"),
                (eq, ":ai_bhvr", ai_bhvr_avoid_party),
             # #Certain lord personalities will not abandon a battlefield to flee to a fortress
             # (assign, ":continue", 1),
             # (try_begin),
              # (this_or_next|troop_slot_eq, ":cur_troop", slot_lord_reputation_type, lrep_upstanding),
              # (troop_slot_eq, ":cur_troop", slot_lord_reputation_type, lrep_martial),
              # (get_party_ai_current_object, ":ai_object", ":cur_party"),
              # (party_is_active, ":ai_object"),
              # (party_get_battle_opponent, ":battle_opponent", ":ai_object"),
              # (party_is_active, ":battle_opponent"),
              # (assign, ":continue", 0),
             # (try_end),
             # (eq, ":continue", 1),
                (store_faction_of_party, ":party_faction", ":cur_party"),
                (party_get_slot, ":commander_party", ":cur_party", slot_party_commander_party),
                (faction_get_slot, ":faction_marshall", ":party_faction", slot_faction_marshall),
                (neq, ":faction_marshall", ":cur_troop"),
                (assign, ":continue", 1),
                (try_begin),
                    (ge, ":faction_marshall", 0),
                    (try_begin),
                        (troop_get_slot, ":faction_marshall_party", ":faction_marshall", slot_troop_leaded_party),
                        (party_is_active, ":faction_marshall_party", 0),
                        (eq, ":commander_party", ":faction_marshall_party"),
                        (assign, ":continue", 0),
                    (else_try),#is following marshal do not retreat
                        (this_or_next|party_slot_eq, ":cur_party", slot_party_ai_state, spai_engaging_army),
                        (this_or_next|party_slot_eq, ":cur_party", slot_party_ai_state, spai_screening_army),
                        (party_slot_eq, ":cur_party", slot_party_ai_state, spai_accompanying_army),
                        (party_slot_eq, ":cur_party", slot_party_ai_object, ":faction_marshall_party"),
                        (party_is_active, ":faction_marshall_party"),
                        (store_distance_to_party_from_party, ":distance_to_marshal", ":cur_party", ":faction_marshall_party"),
                        (lt, ":distance_to_marshal", 20),
                        (assign, ":continue", 0),
                    (try_end),
                (try_end),
                (eq, ":continue", 1),
                (assign, ":end", walled_centers_end),
                (try_for_range, ":cur_center", walled_centers_begin, ":end"),
                    (party_slot_eq, ":cur_center", slot_center_is_besieged_by, -1),
                    (store_faction_of_party, ":center_faction", ":cur_center"),
                    (store_relation, ":cur_relation", ":center_faction", ":party_faction"),
                    (gt, ":cur_relation", 0),
                    (store_distance_to_party_from_party, ":cur_distance", ":cur_party", ":cur_center"),
                    (lt, ":cur_distance", 20),
                    (party_get_position, pos1, ":cur_party"),
                    (party_get_position, pos2, ":cur_center"),
                    (neg|position_is_behind_position, pos2, pos1),
                    (call_script, "script_party_set_ai_state", ":cur_party", spai_retreating_to_center, ":cur_center"),
                    (assign, ":end", -1),
                (try_end),
            (try_end),
        (else_try),
            (troop_set_slot, ":cur_troop", slot_troop_leaded_party, -1),
        (try_end),
    (try_end),
]),

# Centers give alarm if the player is around
(0.5,[
    (call_script, "script_execude_debug_message", 69),
    (store_current_hours, ":cur_hours"),
    (store_mod, ":cur_hours_mod", ":cur_hours", 11),
    (store_sub, ":hour_limit", ":cur_hours", 5),
    (party_get_num_companions, ":num_men", "p_main_party"),
    (party_get_num_prisoners, ":num_prisoners", "p_main_party"),
    (val_add, ":num_men", ":num_prisoners"),
    (convert_to_fixed_point, ":num_men"),
    (store_sqrt, ":num_men_effect", ":num_men"),
    (convert_from_fixed_point, ":num_men_effect"),
    (try_begin),
        (eq, ":cur_hours_mod", 0),
        #Reduce alarm by 2 in every 11 hours.
        (try_for_range, ":cur_faction", kingdoms_begin, kingdoms_end),
            (faction_get_slot, ":player_alarm", ":cur_faction", slot_faction_player_alarm),
            (val_sub, ":player_alarm", 1),
            (val_max, ":player_alarm", 0),
            (faction_set_slot, ":cur_faction", slot_faction_player_alarm, ":player_alarm"),
        (try_end),
    (try_end),
    (eq, "$g_player_is_captive", 0),
    (try_for_range, ":cur_center", centers_begin, centers_end),
        (store_faction_of_party, ":cur_faction", ":cur_center"),
        (store_relation, ":reln", ":cur_faction", "fac_player_supporters_faction"),
        (lt, ":reln", 0),
        (store_distance_to_party_from_party, ":dist", "p_main_party", ":cur_center"),
        (lt, ":dist", 5),
        (store_mul, ":dist_sqr", ":dist", ":dist"),
        (store_sub, ":dist_effect", 20, ":dist_sqr"),
        (store_sub, ":reln_effect", 20, ":reln"),
        (store_mul, ":total_effect", ":dist_effect", ":reln_effect"),
        (val_mul, ":total_effect", ":num_men_effect"),
        (store_div, ":spot_chance", ":total_effect", 10),
        (store_random_in_range, ":random_spot", 0, 1000),
        (lt, ":random_spot", ":spot_chance"),
        (faction_get_slot, ":player_alarm", ":cur_faction", slot_faction_player_alarm),
        (val_add, ":player_alarm", 1),
        (val_min, ":player_alarm", 100),
        (faction_set_slot, ":cur_faction", slot_faction_player_alarm, ":player_alarm"),
        (try_begin),
            (party_is_active, "p_main_party"),#not during freelancer
            (neg|party_slot_ge, ":cur_center", slot_center_last_player_alarm_hour, ":hour_limit"),
            (str_store_party_name_link, s1, ":cur_center"),
            (display_message, "@Your party is spotted by {s1}."),
            (party_set_slot, ":cur_center", slot_center_last_player_alarm_hour, ":cur_hours"),
        (try_end),
    (try_end),
]),

# Consuming food at every 14 hours
(24,[
    (call_script, "script_execude_debug_message", 70),
    (eq, "$g_player_is_captive", 0),

    # event
    (try_begin),
        (check_quest_active, "qst_player_treason"),
        (quest_slot_eq, "qst_player_treason", slot_quest_current_state, 1),
        (try_begin),
            (quest_get_slot, ":giver", "qst_player_treason", slot_quest_giver_troop),
            (store_faction_of_troop, ":giver_faction", ":giver"),
            (eq, ":giver_faction", "$players_kingdom"),
            (quest_get_slot, ":timer", "qst_player_treason", slot_quest_timer),
            (neq, ":timer", -1),
            (store_current_day, ":cur_day"),
            (val_sub, ":cur_day", ":timer"),
            (ge, ":cur_day", 10), ## 10 days
            (try_begin),
                (troop_slot_ge, ":giver", slot_troop_player_relation, 0),
                (dialog_box, "@Rumors reach you that the secret trial had no outcome.", "@Secret trial ends"),
                (call_script, "script_fail_quest", "qst_player_treason"),
                (call_script, "script_end_quest", "qst_player_treason"),
            (else_try),
                (call_script, "script_add_notification_menu", "mnu_treason", 0, 0),
            (try_end),
        (else_try),
            (neq, ":giver_faction", "$players_kingdom"),
            (str_store_faction_name, s22, ":giver_faction"),
            (dialog_box, "@The secret trial had no outcome as you left {s22}. Though you are now a wanted-criminal in {s22}.", "@Secret trial ends"),
            (call_script, "script_fail_quest", "qst_player_treason"),
            (call_script, "script_end_quest", "qst_player_treason"),
            (call_script, "script_change_player_relation_with_faction", ":giver_faction", -200),
        (try_end),
    (try_end),

    #event: preparations done for battle against vitellius/otho
    (try_begin),
        (check_quest_active, "qst_four_emperors"),
        (quest_slot_eq, "qst_four_emperors", slot_quest_current_state, 11),
        (this_or_next|quest_slot_eq, "qst_four_emperors", slot_quest_target_troop, "trp_senator_2"),
        (quest_slot_eq, "qst_four_emperors", slot_quest_target_troop, "trp_statthalter_9"),
        (quest_get_slot, ":timer", "qst_four_emperors", slot_quest_timer),
        (neq, ":timer", -1),
        (store_current_day, ":cur_day"),
        (val_sub, ":cur_day", ":timer"),
        (ge, ":cur_day", 30), ## 10 days
        (call_script, "script_add_notification_menu", "mnu_message_travel_to_rome", -1, -1),
    (try_end),

    # event about death of Galba
    (try_begin),
        (check_quest_active, "qst_four_emperors"),
        (quest_slot_eq, "qst_four_emperors", slot_quest_current_state, 7),
        (quest_slot_eq, "qst_four_emperors", slot_quest_target_troop, "trp_legatus_11"),
        (quest_get_slot, ":timer", "qst_four_emperors", slot_quest_timer),
        (neq, ":timer", -1),
        (store_current_day, ":cur_day"),
        (val_sub, ":cur_day", ":timer"),
        (ge, ":cur_day", 10), ## 10 days
        (faction_slot_eq, "fac_kingdom_7", slot_faction_leader, "trp_senator_1"),
        (call_script, "script_add_notification_menu", "mnu_goy_purge", "trp_statthalter_9", "trp_senator_1"),
    (try_end),

    # Aulus Alienus Caecina switches to Vitellius, if not already
    (try_begin),
        (check_quest_active, "qst_four_emperors"),
        (quest_slot_eq, "qst_four_emperors", slot_quest_current_state, 7),
        (faction_slot_eq, "fac_kingdom_7", slot_faction_leader, "trp_senator_2"),
        (store_faction_of_troop, ":faction_1", "trp_senator_2"),
        (store_faction_of_troop, ":faction_2", "trp_legatus_4"),
        (neq, ":faction_1", ":faction_2"),
        (call_script, "script_change_troop_faction", "trp_legatus_4", ":faction_1"),
        (call_script, "script_add_notification_menu", "mnu_notification_troop_left_players_faction", "trp_legatus_4", ":faction_1"),
        # handle offices
        (try_begin),
            (troop_get_slot, ":auxiliar", "trp_legatus_4", slot_troop_aux),
            (ge, ":auxiliar", 1),
            (call_script, "script_find_new_commander_for_aux", ":auxiliar", ":faction_2"),
        (try_end),
        (try_begin),
            (troop_get_slot, ":legion", "trp_legatus_4", slot_troop_legion),
            (ge, ":legion", 1),
            (call_script, "script_find_new_commander_for_legion", ":legion", ":faction_2"),
        (try_end),
    (try_end),

    # event about death of Otho
    (try_begin),
        (check_quest_active, "qst_four_emperors"),
        (quest_slot_eq, "qst_four_emperors", slot_quest_current_state, 7),
        (quest_slot_eq, "qst_four_emperors", slot_quest_target_troop, "trp_legatus_11"),
        (quest_get_slot, ":timer", "qst_four_emperors", slot_quest_timer),
        (neq, ":timer", -1),
        (store_current_day, ":cur_day"),
        (val_sub, ":cur_day", ":timer"),
        (ge, ":cur_day", 25), ## 25 days
        (faction_slot_eq, "fac_kingdom_7", slot_faction_leader, "trp_statthalter_9"),
        (call_script, "script_add_notification_menu", "mnu_goy_purge", "trp_senator_2", "trp_statthalter_9"),
    (try_end),

    #message to go to Alexandria
    (try_begin),
        (check_quest_active, "qst_four_emperors"),
        (quest_slot_eq, "qst_four_emperors", slot_quest_current_state, 7),
        (quest_slot_eq, "qst_four_emperors", slot_quest_target_troop, "trp_legatus_11"),
        (eq, "$g_player_is_captive", 0),
        (quest_get_slot, ":timer", "qst_four_emperors", slot_quest_timer),
        (neq, ":timer", -1),
        (store_current_day, ":cur_day"),
        (val_sub, ":cur_day", ":timer"),
        (ge, ":cur_day", 30), ## 25 days
        (quest_set_slot, "qst_four_emperors", slot_quest_timer, -1),
        (call_script, "script_add_notification_menu", "mnu_the_fleet_message", 0, 0),
    (try_end),

    # message to meet antonia in Alexandria
    (try_begin),
        (check_quest_active, "qst_four_emperors"),
        (quest_slot_eq, "qst_four_emperors", slot_quest_current_state, 5),
        (quest_slot_eq, "qst_four_emperors", slot_quest_target_troop, "trp_legatus_11"),
        (eq, "$g_player_is_captive", 0),
        (quest_get_slot, ":timer", "qst_four_emperors", slot_quest_timer),
        (neq, ":timer", -1),
        (store_current_day, ":cur_day"),
        (val_sub, ":cur_day", ":timer"),
        (ge, ":cur_day", 10), ## 10 days past at least
        (store_troop_gold, ":gold", "trp_player"),
        (ge, ":gold", 500000),
        (troop_slot_ge, "trp_player", slot_troop_influence, 1500),
        (quest_set_slot, "qst_four_emperors", slot_quest_timer, -1),
        (call_script, "script_add_notification_menu", "mnu_antonia_meeting_before_alexandria", 0, 0),
    (try_end),

    (try_begin),# consume food
        (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
        (assign, ":num_men", 0),
        (try_for_range, ":i_stack", 0, ":num_stacks"),
            (party_stack_get_size, ":stack_size","p_main_party",":i_stack"),
            (val_add, ":num_men", ":stack_size"),
        (try_end),
        (val_max, ":num_men", 1),
        (try_begin),
            (eq, "$g_stance", 1),
            (val_mul, ":num_men", 2),
        (try_end),
        (assign, ":consumption_amount", ":num_men"),

        (assign, ":no_food_displayed", 0),
        (try_for_range, ":unused", 0, ":consumption_amount"),
            (assign, ":available_food", 0),
            (try_for_range, ":cur_food", itm_raw_date_fruit, food_end),
                (neq, ":cur_food", "itm_furs"),
                (item_slot_eq, ":cur_food", slot_item_edible, 1),
                (item_set_slot, ":cur_food", slot_item_is_checked, 0),
                (call_script, "script_cf_player_has_item_without_modifier", ":cur_food", imod_rotten),
                (this_or_next|neq, ":cur_food", "itm_wine"),
                (this_or_next|neq, ":cur_food", "itm_tea"),
                (neq, ":cur_food", "itm_ale"),
                (val_add, ":available_food", 1),
            (try_end),
            (try_begin),
                (gt, ":available_food", 0),
                (store_random_in_range, ":selected_food", 0, ":available_food"),
                (call_script, "script_consume_food", ":selected_food"),
            (else_try),
                (eq, ":no_food_displayed", 0),
                (try_begin),
                    (eq, "$enlisted_party", -1),#freelancer, if player has no food he gets one from his lord
                    (display_message, "@Party has nothing to eat!", message_defeated), #SB : same colour const
                    (call_script, "script_change_player_party_morale", -8),
                    (call_script, "script_change_troop_health", "trp_player", 5),
                    (assign, ":no_food_displayed", 1),
                    (try_begin),
                        (gt, ":num_men", 1), #SB : easier check
                        (call_script, "script_objectionable_action", tmt_egalitarian, "str_men_hungry"),
                    (try_end),
                (else_try),
                    (troop_add_item, "trp_player", "itm_bread"),
                    (display_message, "@You recieve your rations."),
                (try_end),
            (try_end),
        (try_end),
        (call_script, "script_food_consumption_display_message", ":num_men"),
    (try_end),
]),

(72,[
    (call_script, "script_execude_debug_message", 71),
    (neq, "$g_election_date", 45),
    (display_message, "@re-initializing banner info"),
    (call_script, "script_initialize_banner_info"),
    (assign, "$g_custom_banner_new_game", 0),
]),

# Updating player icon in every frame
(0,[
    (call_script, "script_execude_debug_message", 72),
    (troop_get_inventory_slot, ":cur_horse", "trp_player", 8), #horse slot
    (assign, ":new_icon", -1),
    (try_begin),
        (eq, "$g_player_icon_state", pis_normal),
        (try_begin),
            (ge, ":cur_horse", 0),
            (try_begin),
                (eq, "$g_is_emperor", 1),
                (assign, ":new_icon", "icon_pretorian_eques"),
            (else_try),
                (ge, "$g_rank", 1),
                (assign, ":new_icon", "icon_legat"),
            (else_try),
                (troop_slot_ge, "trp_player", slot_troop_renown, 50),
                (assign, ":new_icon", "icon_flagbearer_a"),
            (else_try),
                (assign, ":new_icon", "icon_player_horseman"),
            (try_end),
        (else_try),
            (try_begin),
                (this_or_next|eq, "$g_is_emperor", 1),
                (ge, "$g_rank", 1),
                (assign, ":new_icon", "icon_gray_knight"),
            (else_try),
                (troop_slot_ge, "trp_player", slot_troop_renown, 50),
                (assign, ":new_icon", "icon_vaegir_knight"),
            (else_try),
                (assign, ":new_icon", "icon_player"),
            (try_end),
        (try_end),
    (else_try),
        (troop_slot_eq, "trp_global_variables", g_player_trench, 1),
        (eq, "$g_player_icon_state", pis_camping),
        (assign, ":new_icon", "icon_camp_fort"),
    (else_try),
        (eq, "$g_player_icon_state", pis_camping),
        (assign, ":new_icon", "icon_camp"),
    (else_try),
        (eq, "$g_player_icon_state", pis_ship),
        (assign, ":new_icon", "icon_ship"),
    (try_end),
    (neq, ":new_icon", "$g_player_party_icon"),
    (assign, "$g_player_party_icon", ":new_icon"),
    (party_set_icon, "p_main_party", ":new_icon"),
]),

#Update how good a target player is for bandits
(12,[
    (call_script, "script_execude_debug_message", 73),
    (store_troop_gold, ":total_value", "trp_player"),
    (troop_get_inventory_capacity, ":inv_size", "trp_player"),
    (try_for_range, ":i_slot", 0, ":inv_size"),
        (troop_get_inventory_slot, ":item_id", "trp_player", ":i_slot"),
        (ge, ":item_id", 0),
        (try_begin),
            (is_between, ":item_id", trade_goods_begin, trade_goods_end),
            (store_item_value, ":item_value", ":item_id"),
            (val_add, ":total_value", ":item_value"),
        (try_end),
    (try_end),
    (store_div, ":bandit_attraction", ":total_value", 1000), #100000 gold = excellent_target

    (store_party_size_wo_prisoners, ":size", "p_main_party"),
    (try_begin),
        (le, ":size", 5),
        (val_add, ":bandit_attraction", 15),
    (else_try),
        (le, ":size", 10),
        (val_add, ":bandit_attraction", 10),
    (else_try),
        (le, ":size", 15),
        (val_add, ":bandit_attraction", 5),
    (else_try),
        (le, ":size", 30),
    (else_try),
        (le, ":size", 50),
        (val_sub, ":bandit_attraction", 5),
    (else_try),
        (le, ":size", 100),
        (val_sub, ":bandit_attraction", 10),
    (else_try),
        (le, ":size", 150),
        (val_sub, ":bandit_attraction", 25),
    (else_try),
        (le, ":size", 200),
        (val_sub, ":bandit_attraction", 50),
    (else_try),
        (val_sub, ":bandit_attraction", 60),
    (try_end),

    (get_player_agent_kill_count, ":kills", 0),
    (val_div, ":kills", 15),
    (val_clamp, ":kills", 0, 75),
    (val_sub, ":bandit_attraction", ":kills"),
    (val_clamp, ":bandit_attraction", 0, 100),

    (party_set_bandit_attraction, "p_main_party", ":bandit_attraction"),
]),
#This is a backup script to activate the player faction if it doesn't happen automatically, for whatever reason
(3,[
    (call_script, "script_execude_debug_message", 74),
    (try_begin),
        (faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_inactive),
        (assign, ":end", walled_centers_end),
        (try_for_range, ":center", walled_centers_begin, ":end"),
            (store_faction_of_party, ":center_faction", ":center"),
            (eq, ":center_faction", "fac_player_supporters_faction"),
            (call_script, "script_activate_player_faction", "trp_player"),
            (assign, ":end", -1),#break loop
        (try_end),
    (try_end),
    (try_begin),
        (is_between, "$players_kingdom", kingdoms_begin, kingdoms_end),
        (le, "$g_player_minister", 0),
        (faction_get_slot, ":faction_leader", "$players_kingdom", slot_faction_leader),
        (ge, ":faction_leader", 0),
        (try_begin),
            (this_or_next|eq, ":faction_leader", "trp_player"),
            (troop_slot_eq, "trp_player", slot_troop_spouse, ":faction_leader"),
            (assign, "$g_player_minister", "trp_temporary_minister"),
            (troop_set_faction, "trp_temporary_minister", "fac_player_supporters_faction"),
        (else_try),
            (is_between, ":faction_leader", heroes_begin, heroes_end),
            (troop_slot_eq, ":faction_leader", slot_troop_spouse, "trp_player"),
            (assign, "$g_player_minister", "trp_temporary_minister"),
            (troop_set_faction, "trp_temporary_minister", "fac_player_supporters_faction"),
        (try_end),
    (try_end),
]),

# Checking escape chances of prisoners that joined the party recently.
(6,[
    (call_script, "script_execude_debug_message", 75),
    (gt, "$g_prisoner_recruit_troop_id", 0),
    (gt, "$g_prisoner_recruit_size", 0),
    (gt, "$g_prisoner_recruit_last_time", 0),
    (is_currently_night),
    (try_begin),
        (store_skill_level, ":leadership", "skl_leadership", "trp_player"),
        (val_mul, ":leadership", 5),
        (store_sub, ":chance", 66, ":leadership"),
        (gt, ":chance", 0),
        (party_get_morale,":cur_morale","p_main_party"),#JuJu70
        (assign, ":num_escaped", 0),
        (try_for_range, ":unused", 0, "$g_prisoner_recruit_size"),
            (store_random_in_range, ":random_no", 0, ":cur_morale"), # JuJu70 adjustment to make it more prevalent for lower morale party
            (lt, ":random_no", ":chance"),
            (val_add, ":num_escaped", 1),
        (try_end),
        (party_remove_members, "p_main_party", "$g_prisoner_recruit_troop_id", ":num_escaped"),
        (assign, ":num_escaped", reg0),
        (gt, ":num_escaped", 0),
        (try_begin),
            (gt, ":num_escaped", 1),
            (assign, reg2, 1),
        (else_try),
            (assign, reg2, 0),
        (try_end),
        (assign, reg1, ":num_escaped"),
        (str_store_troop_name_by_count, s1, "$g_prisoner_recruit_troop_id", ":num_escaped"),
        (display_log_message, "@{reg1} {s1} {reg2?have:has} escaped from your party during the night.", color_bad_news), #moto chief
    (try_end),
    (assign, "$g_prisoner_recruit_troop_id", 0),
    (assign, "$g_prisoner_recruit_size", 0),
]),

# Offering ransom fees for player's prisoner heroes
(24,[
    (call_script, "script_execude_debug_message", 76),
    (try_begin),#maintain costs of domus augusti in Rome
        (eq, "$g_is_emperor", 1),
        (party_slot_eq, "p_town_6", slot_town_lord, "trp_player"),
        (troop_add_gold, "trp_housholder", 2600),
        (try_begin),
            (eq, "$g_dancers",1),
            (troop_add_gold, "trp_housholder", 1000),
        (try_end),
    (try_end),
    (try_begin),
        (neq, "$g_ransom_offer_rejected", 1),
        (call_script, "script_offer_ransom_amount_to_player_for_prisoners_in_party", "p_main_party"),
        (eq, reg0, 0),#no prisoners offered
        (assign, ":end_cond", walled_centers_end),
        #SB : TODO also offer ransom for spouse/co-ruler's owned centers
        (try_for_range, ":center_no", walled_centers_begin, ":end_cond"),
            (party_slot_eq, ":center_no", slot_town_lord, "trp_player"),
            (call_script, "script_offer_ransom_amount_to_player_for_prisoners_in_party", ":center_no"),
            (eq, reg0, 1),#a prisoner is offered
            (assign, ":end_cond", 0),#break
        (try_end),
	  (try_end),
]),

# Exchanging hero prisoners between factions and clearing old ransom offers
(72.0/(number_of_walled_centers),[
    (call_script, "script_execude_debug_message", 77),
    (assign, "$g_ransom_offer_rejected", 0),
    (store_random_in_range, ":center_no", walled_centers_begin, walled_centers_end),
    (party_get_slot, ":town_lord", ":center_no", slot_town_lord),
    (gt, ":town_lord", 0),
    (party_get_num_prisoner_stacks, ":num_stacks", ":center_no"),
    #SB : moved to top
    (store_troop_faction, ":faction_no", ":town_lord"),
    (troop_get_slot, ":wealth", ":town_lord", slot_troop_wealth),
    (str_store_faction_name, s2, ":faction_no"),
    (try_for_range_backwards, ":i_stack", 0, ":num_stacks"),
        (party_prisoner_stack_get_troop_id, ":stack_troop", ":center_no", ":i_stack"),
        (troop_is_hero, ":stack_troop"),
        (troop_slot_eq, ":stack_troop", slot_troop_occupation, slto_kingdom_hero),
        (store_random_in_range, ":random_no", 0, 100),
        (try_begin),# main story, ensure legates are released from prison
            (check_quest_active, "qst_blank_quest_19"),
            (check_quest_active, "qst_four_emperors"),
            (this_or_next|quest_slot_eq, "qst_four_emperors", slot_quest_current_state, 8),
            (quest_slot_eq, "qst_four_emperors", slot_quest_current_state, 7),
            (store_troop_faction, ":troop_faction", ":stack_troop"),
            (this_or_next|faction_slot_eq, ":troop_faction", slot_faction_leader, ":stack_troop"),
            (this_or_next|troop_slot_ge, ":stack_troop", slot_troop_legion, 1),
            (troop_slot_ge, ":stack_troop", slot_troop_aux, 1),
            (faction_slot_eq, ":troop_faction", slot_faction_culture, "fac_culture_7"),
            (assign, ":random_no", -1),
        (try_end),
        (try_begin),
            (le, ":random_no", 10),
            (call_script, "script_calculate_ransom_amount_for_troop", ":stack_troop"),
            (assign, ":ransom_amount", reg0),
            ##diplomacy start+ Remove the wealth from the stack troop
            (call_script, "script_dplmc_remove_gold_from_lord_and_holdings", ":ransom_amount", ":stack_troop"),
            ##diplomacy end+
            (val_add, ":wealth", ":ransom_amount"),

            (party_remove_prisoners, ":center_no", ":stack_troop", 1),
            (call_script, "script_remove_troop_from_prison", ":stack_troop"),

            (store_troop_faction, ":troop_faction", ":stack_troop"),
            (str_store_troop_name_link, s1, ":stack_troop"),
            (str_store_faction_name_link, s2, ":faction_no"),
            (str_store_faction_name_link, s3, ":troop_faction"),
            #SB : colorize faction, add s2 for imprisoning faction
            (faction_get_color, ":color", ":troop_faction"),
            (display_log_message, "@{s1} of {s3} has been released from captivity by {s2}.", ":color"),
        (try_end),
        #SB : moved to bottom
        (troop_set_slot, ":town_lord", slot_troop_wealth, ":wealth"),
    (try_end),
]),

# Adding mercenary troops to the towns
(12,[
    (call_script, "script_execude_debug_message", 78),
    (store_random_in_range, ":switch", 0, 8),
    (try_begin),
        (eq, ":switch", 0),
        (call_script, "script_update_mercenary_units_of_towns"),
    (else_try),
        (eq, ":switch", 1),
        (call_script, "script_update_ransom_brokers"),
    (else_try),
        (eq, ":switch", 2),
        (call_script, "script_update_tavern_travellers"),
    (else_try),
        (eq, ":switch", 3),
        (call_script, "script_update_tavern_minstrels"),
    (else_try),
        (eq, ":switch", 4),
        (call_script, "script_update_booksellers"),
    (else_try),
        (call_script, "script_update_other_taverngoers"), #happens once a day ON AVERAGE
    (try_end),
]),

#villages tri-daily ON AVERAGE
(72.0/(number_of_villages),[
    (call_script, "script_execude_debug_message", 79),
    (store_random_in_range, ":village_no", villages_begin, villages_end),
    # this are normal volunteers, used for player if he is poor guy
    (call_script, "script_update_volunteer_troops_in_village", ":village_no"),

    (call_script, "script_get_volunteer_limits", ":village_no"),
    (assign, ":peasants_limit", reg1),
    (party_get_slot, ":peasants", ":village_no", slot_center_peasant_troop_amount),
    (try_begin),
        (gt, ":peasants", ":peasants_limit"),
        (store_random_in_range, ":change", 1, 3),##more negative effects now possible
        (val_mul, ":change", -1),
        (val_add, ":peasants", ":change"),
        (party_set_slot, ":village_no", slot_center_peasant_troop_amount, ":peasants"),
    (else_try),
        (lt, ":peasants", ":peasants_limit"),
        (store_random_in_range, ":change", 1, 3),
        (try_begin),
            (party_slot_ge, ":village_no", slot_center_has_training_grounds, 1),
            (val_mul, ":change", 2),
        (try_end),
        (try_begin),
            (is_between, "$g_constable_training_center", walled_centers_begin, walled_centers_end),
            (party_get_slot, ":province", "$g_constable_training_center", slot_center_province),
            (party_slot_eq, ":village_no", slot_center_province, ":province"),
            (val_mul, ":change", 2),
        (try_end),
        (val_add, ":peasants", ":change"),
        (party_set_slot, ":village_no", slot_center_peasant_troop_amount, ":peasants"),
    (try_end),
    # (str_store_party_name, s10, ":village_no"),
    # (assign, reg10, ":change"),
    # (assign, reg11, ":peasants"),
    # (display_message, "@{s10} changed peasants: {reg10}, {reg11}"),
]),

(72.0/(number_of_villages),[
    (call_script, "script_execude_debug_message", 80),
    (store_random_in_range, ":village_no", villages_begin, villages_end),
    (call_script, "script_update_villages_infested_by_bandits", ":village_no"),
]),

(72.0/(number_of_walled_centers),[
    (call_script, "script_execude_debug_message", 81),
    (store_random_in_range, ":walled_center", walled_centers_begin, walled_centers_end),
    (party_slot_eq, ":walled_center", slot_center_is_besieged_by, -1),#no siege is in progress

    (call_script, "script_get_volunteer_limits", ":walled_center"),
    (assign, ":peasants_limit", reg1),
    (assign, ":nobles_limit", reg2),
    (assign, ":mercenaries_limit", reg3),
    (party_get_slot, ":peasants", ":walled_center", slot_center_peasant_troop_amount),
    (try_begin),
        (gt, ":peasants", ":peasants_limit"),
        (store_random_in_range, ":change", 1, 3),##more negative effects now possible
        (val_mul, ":change", -1),
        (val_add, ":peasants", ":change"),
        (party_set_slot, ":walled_center", slot_center_peasant_troop_amount, ":peasants"),
    (else_try),
        (lt, ":peasants", ":peasants_limit"),
        (store_random_in_range, ":change", 1, 3),
        (try_begin),
            (party_slot_ge, ":walled_center", slot_center_has_training_grounds, 1),
            (val_mul, ":change", 2),
        (try_end),
        (try_begin),
            (is_between, "$g_constable_training_center", walled_centers_begin, walled_centers_end),
            (party_get_slot, ":province", "$g_constable_training_center", slot_center_province),
            (party_slot_eq, ":walled_center", slot_center_province, ":province"),
            (val_mul, ":change", 2),
        (try_end),
        (val_add, ":peasants", ":change"),
        (party_set_slot, ":walled_center", slot_center_peasant_troop_amount, ":peasants"),
    (try_end),
    # (str_store_party_name, s10, ":walled_center"),
    # (assign, reg10, ":change"),
    # (assign, reg11, ":peasants"),
    # (display_message, "@{s10} changed peasants: {reg10}, {reg11}"),

    (party_get_slot, ":nobles", ":walled_center", slot_center_volunteer_noble_troop_amount),
    (try_begin),
        (gt, ":nobles", ":nobles_limit"),
        (store_random_in_range, ":change", 1, 3),##more negative effects now possible
        (val_mul, ":change", -1),
        (val_add, ":nobles", ":change"),
        (party_set_slot, ":walled_center", slot_center_volunteer_noble_troop_amount, ":nobles"),
    (else_try),
        (lt, ":nobles", ":nobles_limit"),
        (store_random_in_range, ":change", 1, 3),
        (try_begin),
            (party_slot_ge, ":walled_center", slot_center_has_training_grounds, 1),
            (val_mul, ":change", 2),
        (try_end),
        (try_begin),
            (is_between, "$g_constable_training_center", walled_centers_begin, walled_centers_end),
            (party_get_slot, ":province", "$g_constable_training_center", slot_center_province),
            (party_slot_eq, ":walled_center", slot_center_province, ":province"),
            (val_mul, ":change", 2),
        (try_end),
        (val_add, ":nobles", ":change"),
        (party_set_slot, ":walled_center", slot_center_volunteer_noble_troop_amount, ":nobles"),
    (try_end),
    # (str_store_party_name, s10, ":walled_center"),
    # (assign, reg10, ":change"),
    # (assign, reg11, ":nobles"),
    # (display_message, "@{s10} changed nobles: {reg10}, {reg11}"),

    (party_get_slot, ":mercenaries", ":walled_center", slot_center_mercenary_troop_amount),
    (try_begin),
        (gt, ":mercenaries", ":mercenaries_limit"),
        (store_random_in_range, ":change", 1, 3),##more negative effects now possible
        (val_mul, ":change", -1),
        (val_add, ":mercenaries", ":change"),
        (party_set_slot, ":walled_center", slot_center_mercenary_troop_amount, ":mercenaries"),
    (else_try),
        (lt, ":mercenaries", ":mercenaries_limit"),
        (store_random_in_range, ":change", 1, 3),
        (try_begin),
            (party_slot_ge, ":walled_center", slot_center_has_training_grounds, 1),
            (val_mul, ":change", 2),
        (try_end),
        (try_begin),
            (is_between, "$g_constable_training_center", walled_centers_begin, walled_centers_end),
            (party_get_slot, ":province", "$g_constable_training_center", slot_center_province),
            (party_slot_eq, ":walled_center", slot_center_province, ":province"),
            (val_mul, ":change", 2),
        (try_end),
        (val_add, ":mercenaries", ":change"),
        (party_set_slot, ":walled_center", slot_center_mercenary_troop_amount, ":mercenaries"),
    (try_end),
    # (str_store_party_name, s10, ":walled_center"),
    # (assign, reg10, ":change"),
    # (assign, reg11, ":mercenaries"),
    # (display_message, "@{s10} changed mercenaries: {reg10}, {reg11}"),
]),

# Setting random walker types
(48.0/(number_of_centers),[
    (call_script, "script_execude_debug_message", 82),
    (store_random_in_range, ":center_no", centers_begin, centers_end),
    (neg|party_slot_ge, ":center_no", slot_party_looted_left_days, 1),
    (call_script, "script_center_remove_walker_type_from_walkers", ":center_no", walkert_needs_money),
    (call_script, "script_center_remove_walker_type_from_walkers", ":center_no", walkert_needs_money_helped),
    (store_random_in_range, ":rand", 0, 100),
    (try_begin),
        (lt, ":rand", 70),
        (neg|party_slot_ge, ":center_no", slot_town_prosperity, 60),
        (call_script, "script_cf_center_get_free_walker", ":center_no"),
        (call_script, "script_center_set_walker_to_type", ":center_no", reg0, walkert_needs_money),
    (try_end),
]),

# Checking center upgrades
(12.0/(number_of_centers),[
    (call_script, "script_execude_debug_message", 83),
    (try_begin),
        (lt, "$g_set_center_upgrades", centers_begin),
        (assign, "$g_set_center_upgrades", centers_begin),
    (try_end),

    (try_begin),
        (ge, "$g_set_center_upgrades", centers_end),
        (assign, "$g_set_center_upgrades", centers_begin),
    (try_end),

    (try_begin),
        (party_get_slot, ":latifundium", "$g_set_center_upgrades",slot_center_has_latifundium),
        (gt, ":latifundium", 0),
        (try_for_range, ":building", slot_lat_silk, slot_lat_building_end),
            (party_get_slot, ":time", ":latifundium",":building"),
            (try_begin),
                (lt, ":time", -1),
                (val_add, ":time", 1),
                (party_set_slot, ":latifundium",":building", ":time"),
            (else_try),
                (eq, ":time", -1),
                (party_set_slot, ":latifundium",":building", 1),
                (str_store_party_name, s19, ":latifundium"),
                (call_script, "script_get_building_details_lat", ":building"),
                (display_message, "@Building of {s20} has been finsihed in {s19}"),
                (try_begin),
                    (eq, ":building", slot_lat_guards),
                    (party_add_members, ":latifundium", "trp_vigilia", 10),
                (else_try),
                    (eq, ":building", slot_lat_temple),
                    (party_get_slot, ":diety", ":latifundium", slot_lat_deity),
                    (call_script, "script_add_piety_culture_effect", 10, ":diety"),
                (try_end),
                (add_xp_as_reward, 75),
            (try_end),
        (try_end),
    (try_end),
    (try_begin),
        (party_get_slot, ":timer2", "$g_set_center_upgrades", slot_party_time_service),
        (val_sub, ":timer2", 1),
        (val_max, ":timer2", 0),
        (party_set_slot, "$g_set_center_upgrades", slot_party_time_service, ":timer2"),
    (try_end),
    (try_begin),
        (neg|party_slot_ge, "$g_set_center_upgrades", slot_party_looted_left_days, 1),#is not looted
        (try_for_range, ":slot", 0, 2),
            (try_begin),
                (eq, ":slot", 0),
                (assign, ":improvement_slot", slot_center_current_improvement),
                (assign, ":improvement_time_slot", slot_center_improvement_end_hour),
            (else_try),
                (assign, ":improvement_slot", slot_center_current_improvement_2),
                (assign, ":improvement_time_slot", slot_center_improvement_2_end_hour),
            (try_end),
            (call_script, "script_cf_check_building_finished", ":improvement_slot", ":improvement_time_slot"),
        (try_end),
    (try_end),
    (val_add, "$g_set_center_upgrades", 1),
]),

# Adding tournaments to towns
(24,[
    (call_script, "script_execude_debug_message", 84),
    (assign, ":num_active_tournaments", 0),
    (try_for_range, ":center_no", towns_begin, towns_end),
      ##fixe a bug were the icon still exists
        (try_begin),
            (neg|party_slot_eq, ":center_no", slot_center_pursue, 1),##no christians are killed
            (party_get_slot, ":slave_icon", ":center_no", slot_crucified_slave_icon),
            (gt, ":slave_icon", 0),#but here is still icon
            (remove_party, ":slave_icon"),#remove it
            (str_store_party_name, s55, ":center_no"),
            (display_message, "@Error: {s55} still has slave icon, removed it. Report this bug", message_negative),
            (party_set_slot, ":center_no", slot_crucified_slave_icon, -1),##this is for the spawn of crux icon near the city with the persecution
        (try_end),
        (party_get_slot, ":has_tournament", ":center_no", slot_town_has_tournament),
        (try_begin),
            (eq, ":has_tournament", 1),#tournament ended, simulate
            (call_script, "script_fill_tournament_participants_troop", ":center_no", 0),
            (call_script, "script_sort_tournament_participant_troops"),#may not be needed
            (call_script, "script_get_num_tournament_participants"),
            (store_sub, ":needed_to_remove_randomly", reg0, 1),
            (call_script, "script_remove_tournament_participants_randomly", ":needed_to_remove_randomly"),
            (call_script, "script_sort_tournament_participant_troops"),
            (troop_get_slot, ":winner_troop", "trp_tournament_participants", 0),
            (try_begin),
                (is_between, ":winner_troop", active_npcs_begin, active_npcs_end),
                (str_store_troop_name_link, s1, ":winner_troop"),
                (str_store_party_name_link, s2, ":center_no"),
                #SB : log message, change color
                (display_log_message, "@{s1} has won the competition at {s2}.", message_alert),
                (call_script, "script_change_troop_renown", ":winner_troop", 35),
                (call_script, "script_dplmc_distribute_gold_to_lord_and_holdings", 5000, ":winner_troop"), #add some wealth
            (try_end),
        (try_end),
        (val_sub, ":has_tournament", 1),
        (val_max, ":has_tournament", 0),
        (party_set_slot, ":center_no", slot_town_has_tournament, ":has_tournament"),
        (try_begin),
            (gt, ":has_tournament", 0),
            (val_add, ":num_active_tournaments", 1),
        (try_end),
    (try_end),

    (try_for_range, ":faction_no", kingdoms_begin, kingdoms_end),
        (faction_slot_eq, ":faction_no", slot_faction_ai_state, sfai_feast),
        (faction_get_slot, ":faction_object", ":faction_no", slot_faction_ai_object),
        (is_between, ":faction_object", towns_begin, towns_end),
      #(party_slot_ge, ":faction_object", slot_town_has_tournament, 1), #dckplmc - ?
      #continue holding tournaments during the feast
        (party_set_slot, ":faction_object", slot_town_has_tournament, 1), #dckplmc - was 2
    (try_end),

    (try_begin),
        (lt, ":num_active_tournaments", 3),
        (store_random_in_range, ":random_no", 0, 100),
        #Add new tournaments with a 30% chance if there are less than 3 tournaments going on
        (lt, ":random_no", 30),
        (store_random_in_range, ":random_town", towns_begin, towns_end),
        (store_random_in_range, ":random_days", 12, 15),
        (party_set_slot, ":random_town", slot_town_has_tournament, ":random_days"),
    (try_end),
]),

(3,[
    (call_script, "script_execude_debug_message", 85),
    (assign, "$g_peace_ask", 0),
    (assign, "$g_empieza_discurso", 0), #for tactic menu in combats
    (assign, "$g_empieza_campeon", 0), # for tactic menu
    (assign,"$player_ambushed",0), # for ambushes, only one every day
    (assign, "$g_player_tournament_placement", 0),
]),

# Taking denars from player while resting in not owned centers
(1,[
    (call_script, "script_execude_debug_message", 86),
    (neg|map_free),
    (is_currently_night),
    (this_or_next|is_between, "$g_last_rest_center", centers_begin, centers_end),
    (is_between, "$g_last_rest_center", minor_towns_begin, minor_towns_end),

    (neg|party_slot_eq, "$g_last_rest_center", slot_town_lord, "trp_player"),
    (assign, reg0, 0),
    (try_begin),
        (eq, "$g_last_rest_center", "p_town_6"),
        (this_or_next|quest_slot_eq, "qst_town_trade_2", slot_quest_current_state, 11),
        (eq, "$g_do_one_more_meeting_with_merchant", 5),
        (assign, reg0, 1),
        (display_message, "@You spend the night in your villa and don't have to pay for accommodation."),
    (else_try),
        (eq, "$g_last_rest_center", "p_town_34"),
        (troop_slot_eq, "trp_global_variables", g_player_villa, 2),
        (assign, reg0, 1),
        (display_message, "@You spend the night in your villa and don't have to pay for accommodation."),
    (try_end),
    (eq, reg0, 0),
    (party_get_slot, ":town_lord", "$g_last_rest_center", slot_town_lord),
    (assign, reg0, 0),
    (try_begin),
        (is_between, ":town_lord", lords_begin, kingdom_ladies_end),
        (call_script, "script_dplmc_is_affiliated_family_member", ":town_lord"),
        (try_begin),
            (neq, reg0, 0),
            (display_message, "@You are within the walls of an affiliated family member and don't have to pay for accommodation."),
        (try_end),
    (try_end),
    (eq, reg0, 0),

    (store_faction_of_party, ":last_rest_center_faction", "$g_last_rest_center"),
    (neq, ":last_rest_center_faction", "fac_player_supporters_faction"),
    (store_current_hours, ":cur_hours"),
    (ge, ":cur_hours", "$g_last_rest_payment_until"),
    (store_add, "$g_last_rest_payment_until", ":cur_hours", 24),
    (store_troop_gold, ":gold", "trp_player"),
    (party_get_num_companions, ":num_men", "p_main_party"),
    (store_div, ":total_cost", ":num_men", 4),
    (val_add, ":total_cost", 1),
    (try_begin),
        (ge, ":gold", ":total_cost"),
        (display_message, "@You pay for accommodation."),
        (troop_remove_gold, "trp_player", ":total_cost"),
        (try_begin), #SB : faction troop morale
            (party_get_slot, ":old_faction", "$g_last_rest_center", slot_center_original_faction),
            (party_get_slot, ":relation", "$g_last_rest_center", slot_center_player_relation),
            (store_random_in_range, ":relation", ":relation", 1100), #spread of 1200 or 1000
            (ge, ":relation", 900),
            (val_sub, ":relation", ":total_cost"), #around 800
            (val_div, ":relation", 100),
            (val_max, ":relation", 1),
            (call_script, "script_change_faction_troop_morale", ":old_faction", ":relation", 0),
        (try_end),
    (else_try),
        (gt, ":gold", 0),
        (troop_remove_gold, "trp_player", ":gold"),
        #SB : stop resting
        (display_message, "@You are unable to pay for accommodation!", message_alert),
        (play_sound, "snd_encounter_nobleman"),
        # (val_mul, ":total_cost", -1),
        # (call_script, "script_change_player_party_morale", ":total_cost"),
        (val_div, ":total_cost", -10),
        (call_script, "script_change_player_relation_with_center", "$g_last_rest_center", ":total_cost"),
        (rest_for_hours, 0, 0, 0),
    (try_end),
]),

# Spawn some bandits.
(24*3,[
    (call_script, "script_execude_debug_message", 87),
    (call_script, "script_spawn_bandits"),
]),

# Check if a faction is defeated every day
(24*2,[
    (call_script, "script_execude_debug_message", 88),
    (try_for_range, ":cur_kingdom", kingdoms_begin, kingdoms_end),
        (faction_set_slot, ":cur_kingdom", slot_faction_number_of_parties, 0),
    (try_end),
    (assign, ":num_active_factions", 0),
    (assign, ":num_roman_factions", 0),
    (try_for_parties, ":cur_party"),
        (this_or_next|is_between, ":cur_party", walled_centers_begin, walled_centers_end),
        (party_slot_eq, ":cur_party", slot_party_type, spt_kingdom_hero_party),
        (store_faction_of_party, ":party_faction", ":cur_party"),
        (is_between, ":party_faction", kingdoms_begin, kingdoms_end),
        (faction_get_slot, ":kingdom_num_parties", ":party_faction", slot_faction_number_of_parties),
        (val_add, ":kingdom_num_parties", 1),
        (faction_set_slot, ":party_faction", slot_faction_number_of_parties, ":kingdom_num_parties"),
    (try_end),
    (try_for_range, ":cur_kingdom", kingdoms_begin, kingdoms_end),
        #(try_begin),
        #(eq, "$cheat_mode", 1),
        #(str_store_faction_name, s1, ":cur_kingdom"),
        #(faction_get_slot, reg1, ":cur_kingdom", slot_faction_number_of_parties),
        #(display_message, "@{!}Number of parties belonging to {s1}: {reg1}"),
        #(try_end),
        (faction_slot_eq, ":cur_kingdom", slot_faction_state, sfs_active),
        (val_add, ":num_active_factions", 1),
        (try_begin),
            (faction_slot_ge, ":cur_kingdom", slot_faction_number_of_parties, 1),
            (faction_slot_eq, ":cur_kingdom", slot_faction_culture, "fac_culture_7"),
            (val_add, ":num_roman_factions", 1),
        (try_end),
        (faction_slot_eq, ":cur_kingdom", slot_faction_number_of_parties, 0),
        (assign, ":faction_removed", 0),
        (try_begin),
            (eq, ":cur_kingdom", "fac_player_supporters_faction"),
        # (try_begin),
          # (le, "$supported_pretender", 0),
          # (faction_set_slot, ":cur_kingdom", slot_faction_state, sfs_inactive),
          # (assign, ":faction_removed", 1),
        # (try_end),
        (else_try),
            (neq, "$players_kingdom", ":cur_kingdom"),
            (faction_set_slot, ":cur_kingdom", slot_faction_state, sfs_defeated),
            (faction_set_slot, ":cur_kingdom", slot_faction_ai_object, -1),
            ##if faction is defeated, declare a truce with all other factions of same culture
            ## that should help, e.g. germans to prevent german kingdoms raising from the dead and then being at war with everyone else

            (faction_get_slot, ":cur_culture", ":cur_kingdom", slot_faction_culture),
            (try_for_range, ":active_kingdoms", kingdoms_begin, kingdoms_end),
                (neq, ":active_kingdoms", ":cur_kingdom"),#not the same!
                (faction_slot_eq, ":active_kingdoms", slot_faction_culture, ":cur_culture"),
                (call_script, "script_diplomacy_start_peace_between_kingdoms", ":active_kingdoms", ":cur_kingdom", 0),
            (try_end),
            (try_for_parties, ":cur_party"),
                (party_is_active, ":cur_party"),
                (store_faction_of_party, ":party_faction", ":cur_party"),
                (eq, ":party_faction", ":cur_kingdom"),
                (party_get_slot, ":home_center", ":cur_party", slot_party_home_center),
                (is_between, ":home_center", centers_begin, centers_end),
                (store_faction_of_party, ":home_center_faction", ":home_center"),
                (party_set_faction, ":cur_party", ":home_center_faction"),
            (try_end),
            # (assign, ":kingdom_pretender", -1),
            # (try_for_range, ":cur_pretender", pretenders_begin, pretenders_end),
              # (troop_slot_eq, ":cur_pretender", slot_troop_original_faction, ":cur_kingdom"),
              # (assign, ":kingdom_pretender", ":cur_pretender"),
            # (try_end),
            # (try_begin),
              # (is_between, ":kingdom_pretender", pretenders_begin, pretenders_end),
              # (neq, ":kingdom_pretender", "$supported_pretender"),
              # (troop_set_slot, ":kingdom_pretender", slot_troop_cur_center, 0), #remove pretender from the world
            # (try_end),
            (assign, ":faction_removed", 1),
            (try_begin),
                (eq, "$players_oath_renounced_against_kingdom", ":cur_kingdom"),
                (assign, "$players_oath_renounced_against_kingdom", 0),
                (assign, "$players_oath_renounced_given_center", 0),
                (assign, "$players_oath_renounced_begin_time", 0),
                (call_script, "script_add_notification_menu", "mnu_notification_oath_renounced_faction_defeated", ":cur_kingdom", 0),
            (try_end),
            #This menu must be at the end because faction banner will change after this menu if the player's supported pretender's original faction is cur_kingdom
            (call_script, "script_add_notification_menu", "mnu_notification_faction_defeated", ":cur_kingdom", 0),
        (try_end),
        (try_begin),
            (eq, ":faction_removed", 1),
            (val_sub, ":num_active_factions", 1),
            #(call_script, "script_store_average_center_value_per_faction"),
        (try_end),
        (try_for_range, ":cur_kingdom_2", kingdoms_begin, kingdoms_end),
            (call_script, "script_update_faction_notes", ":cur_kingdom_2"),
        (try_end),
    (else_try),
        ###Nero Claudius: falls eine rebellion stattfindet bei einer besiegten faction, dann muss diese wieder auferstehen
        (faction_slot_eq, ":cur_kingdom", slot_faction_state, sfs_defeated),
        (faction_slot_ge, ":cur_kingdom", slot_faction_number_of_parties, 1),
        (neq, "$players_kingdom", ":cur_kingdom"),
        (call_script, "script_reactivate_kingdom", ":cur_kingdom", -1, -1),
    (try_end),
    (try_begin),
        (eq, ":num_roman_factions", 1),
        (ge, "$g_civil_war", 1),
        (assign, ":last_roman_faction", -1),
        (assign, reg0, kingdoms_end),
        (try_for_range, ":faction", kingdoms_begin, reg0),
            (faction_slot_eq, ":faction", slot_faction_state, sfs_active),
            (faction_slot_eq, ":faction", slot_faction_culture, "fac_culture_7"),
            (assign, ":last_roman_faction", ":faction"),
            (assign, reg0, -1),
        (try_end),
        (gt, ":last_roman_faction", -1),
        (call_script, "script_add_notification_menu", "mnu_end_civil_war", ":last_roman_faction", 0),
    (try_end),
    (try_begin),
        (eq, ":num_active_factions", 1),
        (eq, "$g_one_faction_left_notification_shown", 0),
        (assign, "$g_one_faction_left_notification_shown", 1),
        (try_for_range, ":cur_kingdom", kingdoms_begin, kingdoms_end),
            (faction_slot_eq, ":cur_kingdom", slot_faction_state, sfs_active),
            (call_script, "script_add_notification_menu", "mnu_notification_one_faction_left", ":cur_kingdom", 0),
        (try_end),
    (try_end),
]),

##possible spawns: p_town_7, p_town_25, p_town_26, p_village_37,
(24,[
    (call_script, "script_execude_debug_message", 89),
    (assign, ":save_reg0", reg0),
    (store_num_parties_of_template, ":siraken", "pt_hord_siraken"),
    (store_num_parties_of_template, ":roxolanen", "pt_hord_roxolanen"),
    (try_begin),
        (lt, ":siraken", 3),
        (call_script, "script_spawn_party", "p_town_26", "pt_hord_siraken"),
        (assign, ":party", reg0),
        (party_set_ai_behavior, ":party", ai_bhvr_patrol_location),
        (party_set_ai_object, ":party", "p_town_26"),
        (party_set_ai_patrol_radius, ":party", 25),
        (party_set_slot, ":party", slot_center_culture, "fac_culture_3"),
        (party_set_slot, ":party", slot_town_prosperity, 50),
    (try_end),
    (try_begin),
        (lt, ":roxolanen", 3),
        (call_script, "script_spawn_party", "p_town_25", "pt_hord_roxolanen"),
        (assign, ":party", reg0),
        (party_set_ai_behavior, ":party", ai_bhvr_patrol_location),
        (party_set_ai_object, ":party", "p_town_25"),
        (party_set_ai_patrol_radius, ":party", 20),
        (party_set_slot, ":party", slot_center_culture, "fac_culture_3"),
        (party_set_slot, ":party", slot_town_prosperity, 50),
    (try_end),
    (assign, reg0, ":save_reg0"),
]),

(24*7,[
    (call_script, "script_execude_debug_message", 90),
    ##parthian expedition trigger
    (try_begin),
        (faction_slot_eq, "fac_kingdom_6", slot_faction_state, sfs_defeated),
        (faction_slot_eq, "fac_kingdom_6", slot_faction_parthian_expedition, 0),
        (store_random_in_range, ":r", 0, 6),
        (eq, ":r", 1),
        (call_script, "script_add_notification_menu", "mnu_parthian_expedition",0,0),
    (try_end),

    ##refresh minor faction town garrisons
    (try_for_range, ":party", minor_towns_begin, minor_towns_end),
        (neg|party_slot_ge, ":party", slot_party_looted_left_days, 1),
        (store_party_size_wo_prisoners, ":garrison", ":party"),
        (lt, ":garrison", 1100),
        (store_faction_of_party, ":fac", ":party"),
        (faction_get_slot, ":template", ":fac", slot_faction_reinforcements_a),
        (party_add_template, ":party", ":template"),
        (party_set_slot, ":party", slot_center_volunteer_troop_type, 0),
        (call_script, "script_update_volunteer_troops_in_minor_town", ":party"),
    (try_end),

    #refresh volunteers for lombards
    (party_set_slot,"p_langobard_landing",slot_center_volunteer_troop_type,0),

    ##icon_castle_a fuer camp von horden
    (try_begin),
        (store_num_parties_of_template, ":siraken", "pt_hord_siraken"),
        (store_num_parties_of_template, ":roxolanen", "pt_hord_roxolanen"),
        (try_begin),
            (ge, ":siraken", 1),
            (store_random_party_of_template, ":scythen_horde", "pt_hord_siraken"),
            (party_get_icon, ":icon", ":scythen_horde"),
            (try_begin),
                (neq, ":icon", "icon_castle_a"),
                (party_set_icon, ":scythen_horde", "icon_castle_a"),
                # (display_message, "@A hord starts to settle."),
            (else_try),
                (eq, ":icon", "icon_castle_a"),
                (party_set_icon, ":scythen_horde", "icon_hord"),
                # (display_message, "@A hord starts to move."),
                # (else_try),
                # (party_set_icon, ":scythen_horde", "icon_hord"),
                # (display_message, "@Error with horde, wrong icon, reset icon"),
            (try_end),
            (call_script, "script_game_get_party_speed_multiplier", ":scythen_horde"),
        (try_end),
        (try_begin),
            (ge, ":roxolanen", 1),
            (store_random_party_of_template, ":scythen_horde", "pt_hord_roxolanen"),
            (party_get_icon, ":icon", ":scythen_horde"),
            (try_begin),
                (neq, ":icon", "icon_castle_a"),
                (party_set_icon, ":scythen_horde", "icon_castle_a"),
                #(display_message, "@A hord starts to settle."),
            (else_try),
                (eq, ":icon", "icon_castle_a"),
                (party_set_icon, ":scythen_horde", "icon_hord"),
                # (display_message, "@A hord starts to move."),
                # (else_try),
                # (party_set_icon, ":scythen_horde", "icon_hord"),
                # (display_message, "@Error with horde, wrong icon, reset icon"),
            (try_end),
            (call_script, "script_game_get_party_speed_multiplier", ":scythen_horde"),
        (try_end),
    (try_end),

    #indictment for player
    (try_begin),
        #There must be a valid faction leader.  The faction leader won't defect from his own kingdom.
        #To avoid certain potential complications, also skip the defection/indictment check for the
        #spouse of the faction leader.  (Code to make that possible can be added elsewhere if
        #necessary.)
        (eq, "$g_player_is_captive", 0),
        (is_between, "$players_kingdom", kingdoms_begin, kingdoms_end),
        (faction_get_slot, ":faction_leader", "$players_kingdom", slot_faction_leader),
        (gt, ":faction_leader", -1),
        (neq, "trp_player", ":faction_leader"),
        (neg|troop_slot_eq, "trp_player", slot_troop_spouse, ":faction_leader"),
        (neg|troop_slot_eq, ":faction_leader", slot_troop_spouse, "trp_player"),

        (call_script, "script_troop_get_relation_with_troop", "trp_player", ":faction_leader"),
        (le, reg0, -75), #was -50

        #The more centralized the faction, the greater the chance the liege will indict
        #the lord before he defects.
        (faction_get_slot, reg0, "$players_kingdom", dplmc_slot_faction_centralization),
        (val_clamp, reg0, -3, 4),
        (val_add, reg0, 10),#7 minimum, 13 maximum
        (store_random_in_range, ":random", 0, reg0),
        #Random  < 5: The lord defects
        #Random >= 5: The liege indicts the lord for treason


        (lt, ":random", 5),
        # (faction_slot_eq, "$players_kingdom", slot_faction_government_type, gov_imperial),
        (str_store_troop_name, s22, ":faction_leader"),
        (dialog_box, "@Rumors reach you that you have been indicted for treason! A secret trial is taking place under {s22} chairmanship.", "@Treason"),
        (call_script, "script_change_player_relation_with_troop", ":faction_leader", -5),
        (str_store_string, s2, "@Rumors reach you that you have been indicted for treason! A secret trial is taking place under {s22} chairmanship."),
        (call_script, "script_start_quest", "qst_player_treason", ":faction_leader"),
        (quest_set_slot, "qst_player_treason", slot_quest_current_state, 1),
        (store_current_day, ":day"),
        (val_max, ":day", 1),
        (quest_set_slot, "qst_player_treason", slot_quest_timer, ":day"),
    (try_end),
]),

(33,[
    (call_script, "script_execude_debug_message", 91),
    (call_script, "script_map_sea_ai_1"),
]),

(8,[
    (call_script, "script_execude_debug_message", 92),
    (try_for_parties, ":party_no"),
        (gt, ":party_no", last_static_party),
        (party_get_template_id, ":party_template", ":party_no"),
        (this_or_next|eq, ":party_template", "pt_traveller_ship"),
        (eq, ":party_template", "pt_slave_trader_ship"),
        (party_get_cur_town, ":cur_attached_town", ":party_no"),
        (is_between, ":cur_attached_town", walled_centers_begin, walled_centers_end),

        (party_get_slot, ":tariffs", ":cur_attached_town", slot_center_accumulated_tariffs),
        (store_random_in_range, ":random", 40, 110),
        (try_begin),
            (eq, ":party_template", "pt_slave_trader_ship"),
            (val_add, ":random", 100),
        (try_end),
        (try_begin),
            (eq, ":party_template", "pt_slave_trader_ship"),
            (party_slot_ge, ":cur_attached_town", slot_center_has_slave_market, 1),
            (val_add, ":random", 100),
        (try_end),
        (try_begin),
            (party_slot_ge, ":cur_attached_town", slot_center_decree_control, 1),
            (val_mul, ":random", 6),
            (val_div, ":random", 5),
        (try_end),
        (try_begin),
            (party_slot_ge, ":cur_attached_town", slot_center_has_port, 1),
            (val_mul, ":random", 3),
            (val_div, ":random", 2),
        (try_end),
        (try_begin),
            (party_slot_ge, ":cur_attached_town", slot_center_has_roads, 1),
            (val_mul, ":random", 5),
            (val_div, ":random", 4),
        (try_end),
        (val_add, ":tariffs", ":random"),
        (party_set_slot, ":cur_attached_town", slot_center_accumulated_tariffs, ":tariffs"),
        # (str_store_party_name, s0, ":cur_attached_town"),
        (party_detach, ":party_no"),
        (neq, ":party_no", "p_main_party"),
        (remove_party, ":party_no"),
    (try_end),
]),

(8,[
    (call_script, "script_execude_debug_message", 93),
    (try_for_parties, ":party_no"),
        (gt, ":party_no", last_static_party),
        (party_get_template_id, ":party_template", ":party_no"),
        # (this_or_next|eq, ":party_template", "pt_center_reinforcements"),
        (eq, ":party_template", "pt_routed_warriors"),
        (party_get_cur_town, ":cur_attached_town", ":party_no"),
        # (try_begin),
            # (eq, ":party_template", "pt_center_reinforcements"),
            # (party_get_slot, ":destination", ":party_no", slot_party_ai_object),
            # (neq, ":cur_attached_town", ":destination"),
            # (assign, ":cur_attached_town", -1),
            # (party_detach, ":party_no"),  # stop and detach
            # (party_set_ai_behavior,":party_no",ai_bhvr_travel_to_party),
            # (party_set_ai_object,":party_no", ":destination"),
            # (party_set_flags, ":party_no", pf_default_behavior, 0),
        # (try_end),
        (is_between, ":cur_attached_town", walled_centers_begin, walled_centers_end),

        (party_get_num_companion_stacks, ":num_stacks", ":party_no"),
        (store_faction_of_party, ":cur_faction", ":cur_attached_town"),

        (try_for_range_backwards, ":stack_no", 0, ":num_stacks"),
            (party_stack_get_troop_id, ":troop_no", ":party_no", ":stack_no"),
            (neg|troop_is_hero, ":troop_no"),
            (assign, ":cur_relation", 100),
            (try_begin), #routed parties sometimes contain extraneous units, players may also give random stuff to reinforcements
                (store_faction_of_troop, ":faction_no", ":troop_no"),
                (this_or_next|is_between, ":faction_no", kingdoms_begin, kingdoms_end),
                (this_or_next|is_between, ":faction_no", minor_kingdoms_begin, minor_kingdoms_end),
                (this_or_next|is_between, ":faction_no", "fac_black_khergits", "fac_undeads"),
                (this_or_next|eq, ":faction_no", "fac_picton"),
                (this_or_next|eq, ":faction_no", "fac_gladiators"),
                (eq, ":faction_no", "fac_outlaws"),
                (store_relation, ":cur_relation", ":cur_faction", ":faction_no"),
            (try_end),
            (party_stack_get_size, ":stack_size", ":party_no", ":stack_no"),
            (try_begin),
                (is_between, ":faction_no", cultures_begin, cultures_end),# if its a faction troop they just desert
                (party_remove_members, ":party_no", ":troop_no", ":stack_size"),
            (else_try),# otherwise either enslave them or keep them
                (this_or_next|is_between, ":troop_no", bandits_begin, bandits_end), #looters are easy to route, don't let them rejoin
                (this_or_next|is_between, ":troop_no", follower_troops_begin, follower_troops_end), #enslave women anyway
                (lt, ":cur_relation", 0),
                (party_remove_members, ":party_no", ":troop_no", ":stack_size"),
                (try_begin),
                    (call_script, "script_dplmc_store_troop_is_female", ":troop_no"),
                    (eq, reg0, 1),
                    (party_add_prisoners, ":party_no", "trp_slave_female", ":stack_size"),
                (else_try),
                    (party_add_prisoners, ":party_no", "trp_slave", ":stack_size"),
                (try_end),
            (try_end),
        (try_end),
        (call_script, "script_party_add_party", ":cur_attached_town", ":party_no"),
        # (try_begin), #unset slot before deallocating party
            # (eq, ":party_template", "pt_center_reinforcements"),
            # (party_get_slot, ":village", ":party_no", slot_party_home_center),
            # (party_set_slot, ":village", slot_village_reinforcement_party, -1),
        # (try_end),
        (party_detach, ":party_no"),
        (neq, ":party_no", "p_main_party"),
        (remove_party, ":party_no"),
    (try_end),
]),

 #check to see if player's court has been captured
(3,[
    (call_script, "script_execude_debug_message", 94),
    ##diplomacy start+ The player might be the ruler of another kingdom
    (assign, ":save_reg0", reg0),
    (assign, ":alt_led_faction", "fac_player_supporters_faction"),
    (try_begin),
        (is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
        (call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
        (ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
        (assign, ":alt_led_faction", "$players_kingdom"),
    (try_end),
    ##diplomacy end+
    (try_begin), #The old court has been lost
        ##diplomacy begin
        (is_between, "$g_player_court", centers_begin, centers_end),
        (party_slot_eq, "$g_player_court", slot_village_infested_by_bandits, "trp_peasant_woman"),
        (call_script, "script_add_notification_menu", "mnu_notification_court_lost", 0, 0),
    (else_try),
        ##diplomacy end
        (is_between, "$g_player_court", centers_begin, centers_end),
        (store_faction_of_party, ":court_faction", "$g_player_court"),
        (neq, ":court_faction", "fac_player_supporters_faction"),
        ##diplomacy start+ The player might be ruler of a faction other than fac_player_supporters_faction
        (neq, ":court_faction", ":alt_led_faction"),
        ##diplomacy end+
        (call_script, "script_add_notification_menu", "mnu_notification_court_lost", 0, 0),
    (else_try),	#At least one new court has been found
        (lt, "$g_player_court", centers_begin),
        #Will by definition not active until a center is taken by the player faction
        #Player minister must have been appointed at some point
        (this_or_next|faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
        (gt, "$g_player_minister", 0),

        (assign, ":center_found", 0),
        (try_for_range, ":walled_center", walled_centers_begin, walled_centers_end),
            (eq, ":center_found", 0),
            (store_faction_of_party, ":court_faction", ":walled_center"),
            ##diplomacy start+ The player might be ruler of a faction other than fac_player_supporters_faction
            (this_or_next|eq, ":court_faction", ":alt_led_faction"),
            ##diplomacy end+
            (eq, ":court_faction", "fac_player_supporters_faction"),
            (assign, ":center_found", ":walled_center"),
        (try_end),
        (ge, ":center_found", 1),
        (call_script, "script_add_notification_menu", "mnu_notification_court_lost", 0, 0),
    (try_end),

    #Piggybacking on trigger:
    (call_script, "script_map_sea_ai_3"),

    #Piggybacking on trigger:
    (try_begin),
        (troop_get_slot, ":betrothed", "trp_player", slot_troop_betrothed),
        (gt, ":betrothed", 0),
        (neg|check_quest_active, "qst_wed_betrothed"),
        (neg|check_quest_active, "qst_wed_betrothed_female"),
        (str_store_troop_name, s5, ":betrothed"),
        (display_message, "@Betrothal to {s5} expires"),
        (troop_set_slot, "trp_player", slot_troop_betrothed, -1),
        (troop_set_slot, ":betrothed", slot_troop_betrothed, -1),
    (try_end),
    ##diplomacy start+
    (assign, reg0, ":save_reg0"),#revert register
    ##diplomacy end+
]),


# Read books if player is resting.
(1,[
    (call_script, "script_execude_debug_message", 95),
    (neg|map_free),
    (gt, "$g_player_reading_book", 0),
    (player_has_item, "$g_player_reading_book"),
    (store_attribute_level, ":int", "trp_player", ca_intelligence),
    (item_get_slot, ":int_req", "$g_player_reading_book", slot_item_intelligence_requirement),
    (le, ":int_req", ":int"),
    (item_get_slot, ":book_reading_progress", "$g_player_reading_book", slot_item_book_reading_progress),
    (item_get_slot, ":book_read", "$g_player_reading_book", slot_item_book_read),
    (eq, ":book_read", 0),
    (val_add, ":book_reading_progress", 7),
    (item_set_slot, "$g_player_reading_book", slot_item_book_reading_progress, ":book_reading_progress"),
    (ge, ":book_reading_progress", 1000),
    (item_set_slot, "$g_player_reading_book", slot_item_book_read, 1),
    (str_store_item_name, s1, "$g_player_reading_book"),
    (str_clear, s2),
    (try_begin),
        (eq, "$g_player_reading_book", "itm_book_tactics"),
        (troop_raise_skill, "trp_player", "skl_tactics", 1),
        (str_store_string, s2, "@ Your tactics skill has increased by 1."),
    (else_try),
        (eq, "$g_player_reading_book", "itm_book_gallic_wars"),
        (troop_raise_skill, "trp_player", "skl_tactics", 1),
        (str_store_string, s2, "@ Your tactics skill has increased by 1."),
    (else_try),
        (eq, "$g_player_reading_book", "itm_book_love"),
        (troop_raise_attribute, "trp_player", ca_charisma, 1),
        (str_store_string, s2, "@ Your charisma has increased by 1."),
    (else_try),
        (eq, "$g_player_reading_book", "itm_book_sorrows"),
        (store_random_in_range, ":r",0, 3),
        (try_begin),
            (eq, ":r", 0),
            (troop_raise_attribute, "trp_player", ca_intelligence, 1),
            (str_store_string, s2, "@ Your intelligence has increased by 1."),
        (else_try),
            (troop_raise_attribute, "trp_player", ca_charisma, 1),
            (str_store_string, s2, "@ Your charisma has increased by 1."),
        (try_end),
    (else_try),
        (eq, "$g_player_reading_book", "itm_book_economy"),
        (troop_raise_skill, "trp_player", "skl_prisoner_management", 1),
        (str_store_string, s2, "@ Your prisoner management skill has increased by 1."),
    (else_try),
        (eq, "$g_player_reading_book", "itm_book_persuasion"),
        (troop_raise_skill, "trp_player", "skl_persuasion", 1),
        (str_store_string, s2, "@ Your persuasion skill has increased by 1."),
    (else_try),
        (eq, "$g_player_reading_book", "itm_book_leadership"),
        (troop_raise_skill, "trp_player", "skl_leadership", 1),
        (str_store_string, s2, "@ Your leadership skill has increased by 1."),
    (else_try),
        (eq, "$g_player_reading_book", "itm_book_intelligence"),
        (troop_raise_attribute, "trp_player", ca_intelligence, 1),
        (str_store_string, s2, "@ Your intelligence has increased by 1."),
    (else_try),
        (eq, "$g_player_reading_book", "itm_book_odysseus"),
        (troop_raise_attribute, "trp_player", ca_intelligence, 1),
        (str_store_string, s2, "@ Your intelligence has increased by 1."),
    (else_try),
        (eq, "$g_player_reading_book", "itm_book_poop"),
        (add_xp_as_reward, 10000),
        (str_store_string, s2, "@ The art of poop increases your experience."),
    (else_try),
        (eq, "$g_player_reading_book", "itm_book_trade"),
        (troop_raise_skill, "trp_player", "skl_trade", 1),
        (str_store_string, s2, "@ Your trade skill has increased by 1."),
    (else_try),
        (eq, "$g_player_reading_book", "itm_book_weapon_mastery"),
        (troop_raise_skill, "trp_player", "skl_weapon_master", 1),
        (str_store_string, s2, "@ Your weapon master skill has increased by 1."),
    (else_try),
        (eq, "$g_player_reading_book", "itm_book_engineering"),
        (troop_raise_skill, "trp_player", "skl_engineer", 1),
        (str_store_string, s2, "@ Your engineer skill has increased by 1."),
    (try_end),
    (try_begin),
        (eq, "$g_infinite_camping", 0),
        (dialog_box, "@You have finished reading {s1}.{s2}", "@Book Read"),
    (try_end),
    (assign, "$g_player_reading_book", 0),
]),

# Removing cattle herds if they are way out of range
(24, [
    (call_script, "script_execude_debug_message", 96),
    (party_slot_eq, "p_main_party", slot_party_on_water, 0),	#VC-2184
    (try_for_parties, ":cur_party"),
        (party_slot_eq, ":cur_party", slot_party_type, spt_cattle_herd),
        (store_distance_to_party_from_party, ":dist",":cur_party", "p_main_party"),
        (try_begin),
            (gt, ":dist", 30),
            (neq, ":cur_party", "p_main_party"),
            (remove_party, ":cur_party"),
            (try_begin),
                #Fail quest if the party is the quest party
                (check_quest_active, "qst_move_cattle_herd"),
                (neg|check_quest_concluded, "qst_move_cattle_herd"),
                (quest_slot_eq, "qst_move_cattle_herd", slot_quest_target_party, ":cur_party"),
                (call_script, "script_fail_quest", "qst_move_cattle_herd"),
            (try_end),
        (else_try),
            (gt, ":dist", 10),
            (party_set_slot, ":cur_party", slot_cattle_driven_by_player, 0),
            (party_set_ai_behavior, ":cur_party", ai_bhvr_hold),
        (try_end),
    (try_end),
]),

#####!!!!!
# Village upgrade triggers
# School ##laut compiler ist das trigger number 93
##once a week on average
(24.0*7.0/(number_of_villages),[
    (call_script, "script_execude_debug_message", 97),
    (try_begin),
        (lt, "$cur_village_weekly_on_average", villages_begin),
        (assign, "$cur_village_weekly_on_average", villages_begin),
    (try_end),

    (try_begin),
        (ge, "$cur_village_weekly_on_average", villages_end),
        (assign, "$cur_village_weekly_on_average", villages_begin),
    (try_end),

    (assign, ":safe_reg0", reg0),
    (assign, ":safe_reg20", reg20),
    (assign, ":safe_reg21", reg21),
    (assign, ":safe_reg22", reg22),
    (assign, reg20, 0),
    (assign, reg21, 0),
    (assign, reg22, 0),
    (try_begin),
        (party_get_num_prisoners, reg20, "$cur_village_weekly_on_average"),
        (ge, reg20, 1),
        (try_begin),
            (ge, reg20, 80),
            (store_random_in_range, ":r", 0, 10),
            (lt, ":r", 6),
            (party_get_num_prisoner_stacks, ":num_stacks", "$cur_village_weekly_on_average"),
            (assign, reg22, 0),
            (try_for_range_backwards, ":troop_iterator", 0, ":num_stacks"),
                (party_prisoner_stack_get_troop_id, ":cur_troop_id", "$cur_village_weekly_on_average", ":troop_iterator"),
                (party_prisoner_stack_get_size, reg21, "$cur_village_weekly_on_average", ":troop_iterator"),
                (val_mul, reg21, 2),
                (val_div, reg21, 3),
                (val_add, reg22, reg21),
                (party_remove_prisoners, "$cur_village_weekly_on_average", ":cur_troop_id", reg21),
            (try_end),
            (ge, reg22, 1),
            (set_spawn_radius, 4),
            (call_script, "script_spawn_party","$cur_village_weekly_on_average","pt_looters_2"),
            (assign, ":rebel_party", reg0),
            (party_add_members, ":rebel_party", "trp_slave_warrior", reg22),
            (party_slot_eq, "$cur_village_weekly_on_average", slot_town_lord, "trp_player"),
            (str_store_party_name, s40, "$cur_village_weekly_on_average"),
            (display_message, "@{reg22} of your prisoners escaped from {s40}!", color_bad_news),
        (try_end),

        (assign, ":wealth", 25),
      # (try_begin),
          # (lt, "$player_honor", -20),
          # (val_mul, ":wealth", 3),
          # (val_div, ":wealth", 2),
        # (try_end),
        (try_begin),
            (party_slot_ge, "$cur_village_weekly_on_average", slot_center_has_silver_mine, 1),
            (val_add, ":wealth", 65),
        (try_end),
        (try_begin),
            (party_slot_ge, "$cur_village_weekly_on_average", slot_center_has_iron_mine, 1),
            (val_add, ":wealth", 30),
        (try_end),
        (try_begin),
            (party_slot_ge, "$cur_village_weekly_on_average", slot_center_has_farms, 1),
            (val_add, ":wealth", 5),
        (try_end),
        (try_begin),
            (party_slot_ge, "$cur_village_weekly_on_average", slot_center_has_irigation, 1),
            (val_add, ":wealth", 5),
        (try_end),
        (try_begin),
            (party_slot_ge, "$cur_village_weekly_on_average", slot_center_has_cattle, 1),
            (val_add, ":wealth", 5),
        (try_end),
        (try_begin),
            (party_slot_ge, "$cur_village_weekly_on_average", slot_center_iron_deposits, 1),
            (val_add, ":wealth", 5),
        (try_end),
        (try_begin),
            (party_slot_ge, "$cur_village_weekly_on_average", slot_center_has_quarry, 1),
            (val_add, ":wealth", 35),
        (try_end),

        (try_begin),
            (party_slot_ge, "$cur_village_weekly_on_average", slot_center_silver_deposits, 1),
            (val_add, ":wealth", 10),
        (try_end),
        (val_mul, reg20, ":wealth"),

        (call_script, "script_get_honor_factor"),
        (store_add, ":factor", 100, reg0),
        (val_mul, reg20,  ":factor"),
        (val_div, reg20, 100),

        (party_get_slot, ":rents", "$cur_village_weekly_on_average", slot_center_accumulated_rents),
        (val_add, ":rents", reg20),
        (party_set_slot, "$cur_village_weekly_on_average", slot_center_accumulated_rents, ":rents"),
        (try_begin),
            (party_slot_eq, "$cur_village_weekly_on_average", slot_town_lord, "trp_player"),
            (str_store_party_name, s40, "$cur_village_weekly_on_average"),
            (display_message, "@Your slaves in {s40} have generated {reg20} denars"),
        (try_end),
        # manu tax
        (try_begin),
            (party_slot_eq, "$cur_village_weekly_on_average", slot_village_state, svs_normal),
            (troop_slot_eq, "trp_player", slot_troop_culture, "fac_culture_7"),
            (ge, "$edict11", 1),
            (store_mul, ":manu_tax", "$g_slave_manu", 10),
            (val_mul, ":manu_tax", reg20),
            (val_div, ":manu_tax", 10),
            (val_add, "$edict11", ":manu_tax"),
        (try_end),
    (try_end),

  #(store_random_in_range, "$cur_village_weekly_on_average", villages_begin, villages_end),
    (try_begin),
        (party_get_slot, ":town_lord", "$cur_village_weekly_on_average", slot_town_lord),
        #SB : also handle the case where player hands out villages
        (store_faction_of_party, ":faction_no", "$cur_village_weekly_on_average"),
        (try_begin),
            (eq, ":faction_no", "$players_kingdom"),
            (call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", ":faction_no"),
            (ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
            (assign, ":town_lord", "trp_player"),
        (try_end),
        (eq, ":town_lord", "trp_player"),
        (party_slot_ge, "$cur_village_weekly_on_average", slot_center_has_school, 1),
        (party_get_slot, ":cur_relation", "$cur_village_weekly_on_average", slot_center_player_relation),
        (val_add, ":cur_relation", 1),
        (val_min, ":cur_relation", 100),
        (party_set_slot, "$cur_village_weekly_on_average", slot_center_player_relation, ":cur_relation"),
    (try_end),
    (try_begin),
        (party_slot_ge, "$cur_village_weekly_on_average", slot_center_has_silver_mine, 1),
        (party_slot_eq, "$cur_village_weekly_on_average", slot_village_state, svs_normal),

        (try_begin),
            (party_slot_eq, "$cur_village_weekly_on_average", slot_town_lord, "trp_player"),
            (store_random_in_range, ":goldmine_rent",1000,4000),
            (call_script, "script_get_honor_factor"),
            (store_add, ":factor", 100, reg0),
            (val_mul, ":goldmine_rent",  ":factor"),
            (val_div, ":goldmine_rent", 100),
            (party_set_slot, "$cur_village_weekly_on_average", slot_village_give_goldcoin, ":goldmine_rent"),
        (else_try),
            (party_slot_ge, "$cur_village_weekly_on_average", slot_town_lord, 1),
            (store_random_in_range, ":goldmine_rent",1000,4000),
            (party_get_slot, ":rent", "$cur_village_weekly_on_average", slot_center_accumulated_rents),
            (val_add, ":rent", ":goldmine_rent"),
            (party_set_slot, "$cur_village_weekly_on_average", slot_center_accumulated_rents, ":rent"),
        (try_end),
    (try_end),

    (assign, reg0, ":safe_reg0"),
    (assign, reg20, ":safe_reg20"),
    (assign, reg21, ":safe_reg21"),
    (assign, reg22, ":safe_reg22"),
    (val_add, "$cur_village_weekly_on_average", 1),
]),

# Quest triggers:
# Remaining days text update
(24, [
    (call_script, "script_execude_debug_message", 98),
    (try_for_range, ":cur_quest", all_quests_begin, all_quests_end),
        (check_quest_active, ":cur_quest"),
        (try_begin),
            (eq, ":cur_quest", "qst_become_pharao"),
            (quest_slot_ge, ":cur_quest", slot_quest_dont_give_again_remaining_days, 1),
            (quest_get_slot, ":value", ":cur_quest", slot_quest_dont_give_again_remaining_days),
            (val_sub, ":value", 1),
            (quest_set_slot, ":cur_quest", slot_quest_dont_give_again_remaining_days, ":value"),
        (try_end),
        (try_begin),#freelancing quest, promotion and payement
            (neg|check_quest_concluded, ":cur_quest"),
            (eq, ":cur_quest", "qst_freelancing"),
            (quest_get_slot, ":service_length", "qst_freelancing", slot_quest_freelancer_service_length),
            (val_add, ":service_length", 1),
            (quest_set_slot, "qst_freelancing", slot_quest_freelancer_service_length, ":service_length"),
            (quest_get_slot, ":progresse", "qst_freelancing", slot_quest_freelancer_progress),
            (val_add, ":progresse", 1),
            (quest_set_slot, "qst_freelancing", slot_quest_freelancer_progress, ":progresse"),

            (quest_get_slot, ":rank", "qst_freelancing", slot_quest_freelancer_rank),
            # do payment
            (store_mul, ":payment", ":rank", 10),
            (try_begin),
                (quest_slot_ge, "qst_freelancing", slot_quest_freelancer_pretorian, 2),
                (val_mul, ":payment", 2),
            (try_end),
            (quest_get_slot, ":current_payment", "qst_freelancing", slot_quest_freelancer_payment),
            (val_add, ":current_payment", ":payment"),
            (quest_set_slot,"qst_freelancing", slot_quest_freelancer_payment, ":current_payment"),

            # do promotion
            (try_begin),
                (quest_get_slot, ":limit", "qst_freelancing", slot_quest_freelancer_progress_limit),
                (ge,  ":progresse", ":limit"),
                (call_script, "script_freelancer_get_event", 1000, 50),
                (store_sub, ":last_event", reg21, 1),
                (call_script, "script_freelancer_event_required_for_progess", ":last_event"),

                (try_begin),
                    (lt, ":last_event", reg0),
                    (val_add, ":limit", 75),
                    (val_min, ":progresse", ":limit"),# limit progress otherwise
                    (quest_set_slot, "qst_freelancing", slot_quest_freelancer_progress, ":progresse"),
                (try_end),
                (ge, ":last_event", reg0),
                (jump_to_menu, "mnu_promotion_freelancer"),
            (else_try),# event
                (ge, "$enlisted_party", 1),
                (party_slot_eq, "$enlisted_party", slot_party_on_water, 0),
                (party_get_battle_opponent, ":opponent", "$enlisted_party"),
                (lt, ":opponent", 0),#not during battle
                (try_begin),
                    (neg|quest_slot_ge, "qst_freelancing", slot_quest_freelancer_pretorian, 2),#not part of the guard
                    (party_stack_get_troop_id, ":leader", "$enlisted_party", 0),
                    (eq, ":leader","trp_legatus_12"),
                    (quest_set_slot, "qst_freelancing", slot_quest_freelancer_pretorian, 2),
                    (display_message, "@Set freelancer praetorian slot properly."),
                (try_end),
                (call_script, "script_freelancer_get_event", ":service_length", ":rank"),
                (neq, reg20, -1),
                (jump_to_menu, reg20),
            (try_end),
        (try_end),
        (try_begin),
            (neg|check_quest_concluded, ":cur_quest"),
            (quest_slot_ge, ":cur_quest", slot_quest_expiration_days, 1),
            (quest_get_slot, ":exp_days", ":cur_quest", slot_quest_expiration_days),
            (val_sub, ":exp_days", 1),
            (try_begin),
                (eq, ":exp_days", 0),
                (eq, ":cur_quest", "qst_slave_revolt"),
                (call_script, "script_fail_quest", ":cur_quest"),
                (call_script, "script_end_quest", ":cur_quest"),
                (call_script, "script_add_notification_menu", "mnu_slave_revlot_failed", 0, 0),
            (else_try),
                (eq, ":exp_days", 0),
                (eq, ":cur_quest", "qst_amor_quest"),
                (call_script, "script_fail_quest", ":cur_quest"),
                (call_script, "script_end_quest", ":cur_quest"),
                (call_script, "script_add_notification_menu", "mnu_tristitia_goat", 0, 0),
            (else_try),
                (eq, ":exp_days", 0),
                (eq, ":cur_quest", "qst_olympic_games"),
                (call_script, "script_fail_quest", ":cur_quest"),
                (call_script, "script_end_quest", ":cur_quest"),
                (call_script, "script_fill_participants_list"),
                (call_script, "script_games_over"),
            (else_try),
                (eq, ":exp_days", 0),
                (eq, ":cur_quest", "qst_widow"),
                (call_script, "script_fail_quest", ":cur_quest"),
                (call_script, "script_end_quest", ":cur_quest"),
                (display_message, "@The widow has died and all her wealth goes to the state treasure."),
            (else_try),
                (eq, ":exp_days", 0),
                (eq, ":cur_quest", "qst_nero_special_quest"),
                (call_script, "script_fail_quest", ":cur_quest"),
                (call_script, "script_end_quest", ":cur_quest"),
                (call_script, "script_change_player_relation_with_troop", "trp_kingdom_7_lord", -50),
                (display_message, "@You disobeyed Caesar's orders! Nero is angry..."),
            (else_try),
                (eq, ":exp_days", 0),
                (eq, ":cur_quest", "qst_blank_quest_21"),
                (call_script, "script_fail_quest", ":cur_quest"),
                (call_script, "script_end_quest", ":cur_quest"),
                (quest_get_slot, ":center", ":cur_quest", slot_quest_target_center),
                (quest_get_slot, ":lord", ":cur_quest", slot_quest_target_troop),
                (call_script, "script_change_player_relation_with_troop", ":lord", 5),
                (call_script, "script_change_player_relation_with_center", ":center", -25),
            (else_try),
                (eq, ":exp_days", 0),
                (eq, ":cur_quest", "qst_money_stinks"),
                (call_script, "script_fail_quest", ":cur_quest"),
                (call_script, "script_end_quest", ":cur_quest"),
                (display_message, "@As you still haven't helped Pupienus with his request, he asks other people for support."),
            (else_try),
                (eq, ":exp_days", 0),
                (eq, ":cur_quest", "qst_philosopher"),
                (call_script, "script_fail_quest", ":cur_quest"),
                (call_script, "script_end_quest", ":cur_quest"),
                (display_message, "@The philosopher is angry that you still haven't reached Ctesiphon and leaves your party."),
                (remove_member_from_party,"trp_solus", "p_main_party"),
            (else_try),
                (eq, ":exp_days", 0),
                (eq, ":cur_quest", "qst_new_hope"),
                (call_script, "script_fail_quest", ":cur_quest"),
                (call_script, "script_end_quest", ":cur_quest"),
                (display_message, "@Life punishes those who come too late. Now it is too late to negotiate with the Parthian king."),
            (else_try),
                (eq, ":exp_days", 0),
                (eq, ":cur_quest", "qst_grain_supply"),
                (call_script, "script_fail_quest", ":cur_quest"),
                (call_script, "script_end_quest", ":cur_quest"),
                (display_message, "@You didn't managed to bring the grain in the given time."),
                (call_script, "script_change_player_relation_with_center", "p_town_6", -10),
                (call_script, "script_change_senate_support", -5, 0),
            (else_try),
                (eq, ":exp_days", 0),
                (eq, ":cur_quest", "qst_investment"),
                (call_script, "script_fail_quest", ":cur_quest"),
                (call_script, "script_end_quest", ":cur_quest"),
                (display_message, "@You are too late, the merchant has found another person for a loan."),

                (quest_set_slot, "qst_investment", slot_quest_target_dna, 0),
                (quest_set_slot, "qst_investment", slot_quest_target_center, 0),
                (quest_set_slot, "qst_investment", slot_quest_target_amount, 0),
                (quest_set_slot, "qst_investment", slot_quest_convince_value, 0),
                (quest_set_slot, "qst_investment", slot_quest_failure_consequence, 0),
                (quest_set_slot, "qst_investment", slot_quest_current_state, 0),
            (else_try),
                (eq, ":exp_days", 0),
                (eq, ":cur_quest", "qst_talk_with_the_emperor"),
                (call_script, "script_fail_quest", ":cur_quest"),
                (call_script, "script_end_quest", ":cur_quest"),
                (display_message, "@You didn't managed to convince the Princeps."),
                (call_script, "script_change_player_relation_with_center", "p_town_6", -4),
                (call_script, "script_change_senate_support", -4, 0),
            (else_try),
                (eq, ":exp_days", 0),
                (call_script, "script_abort_quest", ":cur_quest", 1),
            (else_try),
                (quest_set_slot, ":cur_quest", slot_quest_expiration_days, ":exp_days"),
                (assign, reg0, ":exp_days"),
                (add_quest_note_from_sreg, ":cur_quest", 7, "@You have {reg0} days to finish this quest.", 0),
            (try_end),
        (try_end),
    (else_try),
        (quest_slot_ge, ":cur_quest", slot_quest_dont_give_again_remaining_days, 1),
        (quest_get_slot, ":value", ":cur_quest", slot_quest_dont_give_again_remaining_days),
        (val_sub, ":value", 1),
        (quest_set_slot, ":cur_quest", slot_quest_dont_give_again_remaining_days, ":value"),
    (try_end),
]),

# Report to army quest
(2,[
    (call_script, "script_execude_debug_message", 99),
    (eq, "$g_infinite_camping", 0),
    (is_between, "$players_kingdom", kingdoms_begin, kingdoms_end),
    (eq, "$g_player_is_captive", 0),

    (try_begin),
        (check_quest_active, "qst_report_to_army"),
        (faction_slot_eq, "$players_kingdom", slot_faction_marshall, -1),
        (call_script, "script_abort_quest", "qst_report_to_army", 0),
    (try_end),

    (faction_get_slot, ":faction_object", "$players_kingdom", slot_faction_ai_object),

    (neg|faction_slot_eq, "$players_kingdom", slot_faction_ai_state, sfai_default),
    (neg|faction_slot_eq, "$players_kingdom", slot_faction_ai_state, sfai_feast),

    (assign, ":continue", 1),
    (try_begin),
        (this_or_next|faction_slot_eq, "$players_kingdom", slot_faction_ai_state, sfai_attacking_enemies_around_center),
        (this_or_next|faction_slot_eq, "$players_kingdom", slot_faction_ai_state, sfai_attacking_center),
        (faction_slot_eq, "$players_kingdom", slot_faction_ai_state, sfai_raiding_village),
        (neg|is_between, ":faction_object", walled_centers_begin, walled_centers_end),
        (assign, ":continue", 0),
    (try_end),
    (eq, ":continue", 1),

    (assign, ":kingdom_is_at_war", 0),
    (try_for_range, ":faction", kingdoms_begin, kingdoms_end),
        (neq, ":faction", "$players_kingdom"),
        (store_relation, ":relation", ":faction", "$players_kingdom"),
        (lt, ":relation", 0),
        (assign, ":kingdom_is_at_war", 1),
    (try_end),
    (eq, ":kingdom_is_at_war", 1),

    (neg|check_quest_active, "qst_report_to_army"),
    (neg|check_quest_active, "qst_follow_army"),

    (neg|quest_slot_ge, "qst_report_to_army", slot_quest_dont_give_again_remaining_days, 1),
    (faction_get_slot, ":faction_marshall", "$players_kingdom", slot_faction_marshall),
    (gt, ":faction_marshall", 0),
    (troop_get_slot, ":faction_marshall_party", ":faction_marshall", slot_troop_leaded_party),
    (gt, ":faction_marshall_party", 0),
    (party_is_active, ":faction_marshall_party"),

    (store_distance_to_party_from_party, ":distance_to_marshal", ":faction_marshall_party", "p_main_party"),
    (le, ":distance_to_marshal", 96),

    (assign, ":has_no_quests", 1),
    (try_for_range, ":cur_quest", lord_quests_begin, lord_quests_end),
        (check_quest_active, ":cur_quest"),
        (quest_slot_eq, ":cur_quest", slot_quest_giver_troop, ":faction_marshall"),
        (assign, ":has_no_quests", 0),
    (try_end),
    (eq, ":has_no_quests", 1),

    (try_for_range, ":cur_quest", lord_quests_begin_2, lord_quests_end_2),
        (check_quest_active, ":cur_quest"),
        (quest_slot_eq, ":cur_quest", slot_quest_giver_troop, ":faction_marshall"),
        (assign, ":has_no_quests", 0),
    (try_end),
    (eq, ":has_no_quests", 1),

    (try_for_range, ":cur_quest", army_quests_begin, army_quests_end),
        (check_quest_active, ":cur_quest"),
        (assign, ":has_no_quests", 0),
    (try_end),
    (eq, ":has_no_quests", 1),

    (store_character_level, ":level", "trp_player"),
    (ge, ":level", 10),
    (assign, ":cur_target_amount", 2),
    (try_for_range, ":cur_center", centers_begin, centers_end),
        (party_slot_eq, ":cur_center", slot_town_lord, "trp_player"),
        (try_begin),
            (party_slot_eq, ":cur_center", slot_party_type, spt_town),
            (val_add, ":cur_target_amount", 3),
        (else_try),
            (party_slot_eq, ":cur_center", slot_party_type, spt_castle),
            (val_add, ":cur_target_amount", 1),
        (else_try),
            (val_add, ":cur_target_amount", 1),
        (try_end),
    (try_end),
    (assign, ":block", 0),
    (try_begin),
        (faction_slot_eq, "$players_kingdom", slot_faction_culture, "fac_culture_7"),
        (eq, "$g_rank", 0),
        (neg|faction_slot_eq, "$players_kingdom", slot_faction_leader, "trp_player"),
        (assign, ":block", 1),
    (try_end),
    (eq, ":block", 0),
    (val_mul, ":cur_target_amount", 4),
    (val_min, ":cur_target_amount", 60),
    (quest_set_slot, "qst_report_to_army", slot_quest_giver_troop, ":faction_marshall"),
    (quest_set_slot, "qst_report_to_army", slot_quest_target_troop, ":faction_marshall"),
    (quest_set_slot, "qst_report_to_army", slot_quest_target_amount, ":cur_target_amount"),
    (quest_set_slot, "qst_report_to_army", slot_quest_expiration_days, 7),
    (quest_set_slot, "qst_report_to_army", slot_quest_dont_give_again_period, 22),
    (jump_to_menu, "mnu_kingdom_army_quest_report_to_army"),
]),

(3,[
    (call_script, "script_execude_debug_message", 100),
    (assign, "$g_random_army_quest", -1),
    (check_quest_active, "qst_follow_army", 1),
    (is_between, "$players_kingdom", kingdoms_begin, kingdoms_end),
    (neg|faction_slot_eq, "$players_kingdom", slot_faction_ai_state, sfai_default),
    (faction_get_slot, ":faction_marshall", "$players_kingdom", slot_faction_marshall),
    (neq, ":faction_marshall", "trp_player"),
    (gt, ":faction_marshall", 0),
    (troop_get_slot, ":faction_marshall_party", ":faction_marshall", slot_troop_leaded_party),
    (gt, ":faction_marshall_party", 0),
    (party_is_active, ":faction_marshall_party"),
    (store_distance_to_party_from_party, ":dist", ":faction_marshall_party", "p_main_party"),
    (try_begin),
        (lt, ":dist", 15),
        (assign, "$g_player_follow_army_warnings", 0),
        (store_current_hours, ":cur_hours"),
        (faction_get_slot, ":last_offensive_time", "$players_kingdom", slot_faction_last_offensive_concluded),
        (store_sub, ":passed_time", ":cur_hours", ":last_offensive_time"),

        (assign, ":result", -1),
        (try_begin),
            (store_random_in_range, ":random_no", 0, 100),
            (lt, ":random_no", 30),
            (troop_slot_eq, ":faction_marshall", slot_troop_does_not_give_quest, 0),
            (try_for_range, ":unused", 0, 20), #Repeat trial twenty times
                (eq, ":result", -1),
                (store_random_in_range, ":quest_no", army_quests_begin, army_quests_end),
                (neg|quest_slot_ge, ":quest_no", slot_quest_dont_give_again_remaining_days, 1),
                (try_begin),
                    (eq, ":quest_no", "qst_deliver_cattle_to_army"),
              # (eq, 1, 0), #disables temporarily
                    (try_begin),
                        (faction_slot_eq, "$players_kingdom", slot_faction_ai_state, sfai_attacking_center),
                        (gt, ":passed_time", 120),#5 days
                        (store_random_in_range, ":quest_target_amount", 5, 10),
                        (assign, ":result","qst_deliver_cattle_to_army"),
                        (quest_set_slot, ":result", slot_quest_target_amount, ":quest_target_amount"),
                        (quest_set_slot, ":result", slot_quest_expiration_days, 10),
                        (quest_set_slot, ":result", slot_quest_dont_give_again_period, 30),
                    (try_end),
                (else_try),
                    (eq, ":quest_no", "qst_join_siege_with_army"),
                    (eq, 1, 0),
                    (try_begin),
                        (faction_slot_eq, "$players_kingdom", slot_faction_ai_state, sfai_attacking_center),
                        (faction_get_slot, ":ai_object", "$players_kingdom", slot_faction_ai_object),
                        (is_between, ":ai_object", walled_centers_begin, walled_centers_end),
                        (party_get_battle_opponent, ":besieged_center", ":faction_marshall_party"),
                        (eq, ":besieged_center", ":ai_object"),
                        #army is assaulting the center
                        (assign, ":result", ":quest_no"),
                        (quest_set_slot, ":result", slot_quest_target_center, ":ai_object"),
                        (quest_set_slot, ":result", slot_quest_expiration_days, 2),
                        (quest_set_slot, ":result", slot_quest_dont_give_again_period, 15),
                    (try_end),
                (else_try),
                    (eq, ":quest_no", "qst_scout_waypoints"),
                    (try_begin),
                        (assign, ":end_cond", 100),
                        (assign, "$qst_scout_waypoints_wp_1", -1),
                        (assign, "$qst_scout_waypoints_wp_2", -1),
                        (assign, "$qst_scout_waypoints_wp_3", -1),
                        (assign, ":continue", 0),
                        (try_for_range, ":unused", 0, ":end_cond"),
                            (try_begin),
                                (lt, "$qst_scout_waypoints_wp_1", 0),
                                (call_script, "script_cf_get_random_enemy_center_within_range", ":faction_marshall_party", 50),
                                (assign, "$qst_scout_waypoints_wp_1", reg0),
                            (try_end),
                            (try_begin),
                                (lt, "$qst_scout_waypoints_wp_2", 0),
                                (call_script, "script_cf_get_random_enemy_center_within_range", ":faction_marshall_party", 50),
                                (neq, "$qst_scout_waypoints_wp_1", reg0),
                                (assign, "$qst_scout_waypoints_wp_2", reg0),
                            (try_end),
                            (try_begin),
                                (lt, "$qst_scout_waypoints_wp_3", 0),
                                (call_script, "script_cf_get_random_enemy_center_within_range", ":faction_marshall_party", 50),
                                (neq, "$qst_scout_waypoints_wp_1", reg0),
                                (neq, "$qst_scout_waypoints_wp_2", reg0),
                                (assign, "$qst_scout_waypoints_wp_3", reg0),
                            (try_end),
                            (neq, "$qst_scout_waypoints_wp_1", "$qst_scout_waypoints_wp_2"),
                            (neq, "$qst_scout_waypoints_wp_1", "$qst_scout_waypoints_wp_2"),
                            (neq, "$qst_scout_waypoints_wp_2", "$qst_scout_waypoints_wp_3"),
                            (ge, "$qst_scout_waypoints_wp_1", 0),
                            (ge, "$qst_scout_waypoints_wp_2", 0),
                            (ge, "$qst_scout_waypoints_wp_3", 0),
                            (assign, ":end_cond", 0),
                            (assign, ":continue", 1),
                        (try_end),
                        (eq, ":continue", 1),
                        (assign, "$qst_scout_waypoints_wp_1_visited", 0),
                        (assign, "$qst_scout_waypoints_wp_2_visited", 0),
                        (assign, "$qst_scout_waypoints_wp_3_visited", 0),
                        (assign, ":result", "qst_scout_waypoints"),
                        (quest_set_slot, ":result", slot_quest_expiration_days, 7),
                        (quest_set_slot, ":result", slot_quest_dont_give_again_period, 25),
                    (try_end),
                (try_end),
            (try_end),
            (try_begin),
                (neq, ":result", -1),
                (quest_set_slot, ":result", slot_quest_current_state, 0),
                (quest_set_slot, ":result", slot_quest_giver_troop, ":faction_marshall"),
                (try_begin),
                    (eq, ":result", "qst_join_siege_with_army"),
                    (jump_to_menu, "mnu_kingdom_army_quest_join_siege_order"),
                (else_try),
                    (assign, "$g_random_army_quest", ":result"),
                    (quest_set_slot, "$g_random_army_quest", slot_quest_giver_troop, ":faction_marshall"),
                    (jump_to_menu, "mnu_kingdom_army_quest_messenger"),
                (try_end),
            (try_end),
        (try_end),
    (else_try),
        (val_add, "$g_player_follow_army_warnings", 1),
        (try_begin),
            (lt, "$g_player_follow_army_warnings", 15),
            (try_begin),
                (store_mod, ":follow_mod", "$g_player_follow_army_warnings", 3),
                (eq, ":follow_mod", 0),
                (str_store_troop_name_link, s1, ":faction_marshall"),
                (try_begin),
                    (lt, "$g_player_follow_army_warnings", 8),
                    #(display_message, "str_marshal_warning"),
                (else_try),
                    (display_message, "str_marshal_warning"),
                (try_end),
            (try_end),
        (else_try),
            (jump_to_menu, "mnu_kingdom_army_follow_failed"),
        (try_end),
    (try_end),
]),

# Move cattle herd
(0.5,[
    (call_script, "script_execude_debug_message", 101),
    (check_quest_active,"qst_move_cattle_herd"),
    (party_slot_eq, "p_main_party", slot_party_on_water, 0),	#VC-2184
    (neg|check_quest_concluded,"qst_move_cattle_herd"),
    (quest_get_slot, ":target_party", "qst_move_cattle_herd", slot_quest_target_party),
    (quest_get_slot, ":target_center", "qst_move_cattle_herd", slot_quest_target_center),
    (store_distance_to_party_from_party, ":dist",":target_party", ":target_center"),
    (lt, ":dist", 3),
    (neq, ":target_party", "p_main_party"),
    (remove_party, ":target_party"),
    (call_script, "script_succeed_quest", "qst_move_cattle_herd"),
]),

# Deliver cattle and deliver cattle to army
(0.5,[
    (call_script, "script_execude_debug_message", 102),
    (try_begin),
        (check_quest_active,"qst_deliver_cattle"),
        (neg|check_quest_succeeded, "qst_deliver_cattle"),
        (quest_get_slot, ":target_center", "qst_deliver_cattle", slot_quest_target_center),
        (quest_get_slot, ":target_amount", "qst_deliver_cattle", slot_quest_target_amount),
        (quest_get_slot, ":cur_amount", "qst_deliver_cattle", slot_quest_current_state),
        (store_sub, ":left_amount", ":target_amount", ":cur_amount"),
        (call_script, "script_remove_cattles_if_herd_is_close_to_party", ":target_center", ":left_amount"),
        (val_add, ":cur_amount", reg0),
        (quest_set_slot, "qst_deliver_cattle", slot_quest_current_state, ":cur_amount"),
        (le, ":target_amount", ":cur_amount"),
        (call_script, "script_succeed_quest", "qst_deliver_cattle"),
    (try_end),
    (try_begin),
        (check_quest_active, "qst_deliver_cattle_to_army"),
        (neg|check_quest_succeeded, "qst_deliver_cattle_to_army"),
        (quest_get_slot, ":giver_troop", "qst_deliver_cattle_to_army", slot_quest_giver_troop),
        (troop_get_slot, ":target_party", ":giver_troop", slot_troop_leaded_party),
        (try_begin),
            (gt, ":target_party", 0),
            (quest_get_slot, ":target_amount", "qst_deliver_cattle_to_army", slot_quest_target_amount),
            (quest_get_slot, ":cur_amount", "qst_deliver_cattle_to_army", slot_quest_current_state),
            (store_sub, ":left_amount", ":target_amount", ":cur_amount"),
            (call_script, "script_remove_cattles_if_herd_is_close_to_party", ":target_party", ":left_amount"),
            (val_add, ":cur_amount", reg0),
            (quest_set_slot, "qst_deliver_cattle_to_army", slot_quest_current_state, ":cur_amount"),
            (try_begin),
                (le, ":target_amount", ":cur_amount"),
                (call_script, "script_succeed_quest", "qst_deliver_cattle_to_army"),
            (try_end),
        (else_try),
            (call_script, "script_abort_quest", "qst_deliver_cattle_to_army", 0),
        (try_end),
    (try_end),
]),

# Train peasants against bandits
(1,[
    (call_script, "script_execude_debug_message", 103),
    (neg|map_free),
    (check_quest_active, "qst_train_peasants_against_bandits"),
    (neg|check_quest_concluded, "qst_train_peasants_against_bandits"),
    (eq, "$qst_train_peasants_against_bandits_currently_training", 1),
    (val_add, "$qst_train_peasants_against_bandits_num_hours_trained", 1),
    (call_script, "script_get_max_skill_of_player_party", "skl_trainer"),
    (assign, ":trainer_skill", reg0),
    (store_sub, ":needed_hours", 20, ":trainer_skill"),
    (val_mul, ":needed_hours", 3),
    (val_div, ":needed_hours", 5),
    (ge, "$qst_train_peasants_against_bandits_num_hours_trained", ":needed_hours"),
    (assign, "$qst_train_peasants_against_bandits_num_hours_trained", 0),
    (rest_for_hours, 0, 0, 0), #stop resting
    (jump_to_menu, "mnu_train_peasants_against_bandits_ready"),
]),

# Scout waypoints
(1,[
    (call_script, "script_execude_debug_message", 104),
    (check_quest_active,"qst_scout_waypoints"),
    (neg|check_quest_succeeded, "qst_scout_waypoints"),
    (try_begin),
        (eq, "$qst_scout_waypoints_wp_1_visited", 0),
        (store_distance_to_party_from_party, ":distance", "$qst_scout_waypoints_wp_1", "p_main_party"),
        (le, ":distance", 3),
        (assign, "$qst_scout_waypoints_wp_1_visited", 1),
        (str_store_party_name_link, s1, "$qst_scout_waypoints_wp_1"),
        (display_message, "@{s1} is scouted."),
    (try_end),
    (try_begin),
        (eq, "$qst_scout_waypoints_wp_2_visited", 0),
        (store_distance_to_party_from_party, ":distance", "$qst_scout_waypoints_wp_2", "p_main_party"),
        (le, ":distance", 3),
        (assign, "$qst_scout_waypoints_wp_2_visited", 1),
        (str_store_party_name_link, s1, "$qst_scout_waypoints_wp_2"),
        (display_message, "@{s1} is scouted."),
    (try_end),
    (try_begin),
        (eq, "$qst_scout_waypoints_wp_3_visited", 0),
        (store_distance_to_party_from_party, ":distance", "$qst_scout_waypoints_wp_3", "p_main_party"),
        (le, ":distance", 3),
        (assign, "$qst_scout_waypoints_wp_3_visited", 1),
        (str_store_party_name_link, s1, "$qst_scout_waypoints_wp_3"),
        (display_message, "@{s1} is scouted."),
    (try_end),
    (eq, "$qst_scout_waypoints_wp_1_visited", 1),
    (eq, "$qst_scout_waypoints_wp_2_visited", 1),
    (eq, "$qst_scout_waypoints_wp_3_visited", 1),
    (call_script, "script_succeed_quest", "qst_scout_waypoints"),
]),

# Kill local merchant
(3,[
    (call_script, "script_execude_debug_message", 105),
    (neg|map_free),
    (check_quest_active, "qst_kill_local_merchant"),
    (quest_slot_eq, "qst_kill_local_merchant", slot_quest_current_state, 0),
    (quest_set_slot, "qst_kill_local_merchant", slot_quest_current_state, 1),
    (rest_for_hours, 0, 0, 0), #stop resting
    (assign, "$auto_enter_town", "$qst_kill_local_merchant_center"),
    (assign, "$quest_auto_menu", "mnu_kill_local_merchant_begin"),
]),

# Collect taxes
(1,[
    (call_script, "script_execude_debug_message", 106),
    (neg|map_free),
    (check_quest_active, "qst_collect_taxes"),
    (eq, "$g_player_is_captive", 0),
    (eq, "$qst_collect_taxes_currently_collecting", 1),
    (quest_get_slot, ":quest_current_state", "qst_collect_taxes", slot_quest_current_state),
    (this_or_next|eq, ":quest_current_state", 1),
    (this_or_next|eq, ":quest_current_state", 2),
    (eq, ":quest_current_state", 3),
    (quest_get_slot, ":left_hours", "qst_collect_taxes", slot_quest_target_amount),
    (val_sub, ":left_hours", 1),
    (quest_set_slot, "qst_collect_taxes", slot_quest_target_amount, ":left_hours"),
    (call_script, "script_get_max_skill_of_player_party", "skl_trade"),

    (try_begin),
        (lt, ":left_hours", 0),
        (assign, ":quest_current_state", 4),
        (quest_set_slot, "qst_collect_taxes", slot_quest_current_state, 4),
        (rest_for_hours, 0, 0, 0), #stop resting
        (jump_to_menu, "mnu_collect_taxes_complete"),
    (else_try),
        #Continue collecting taxes
        (assign, ":max_collected_tax", "$qst_collect_taxes_hourly_income"),
        (party_get_slot, ":prosperity", "$g_encountered_party", slot_town_prosperity),
        (store_add, ":multiplier", 30, ":prosperity"),
        (val_mul, ":max_collected_tax", ":multiplier"),
        (val_div, ":max_collected_tax", 80),#Prosperity of 50 gives the default values

        (try_begin),
            (eq, "$qst_collect_taxes_halve_taxes", 1),
            (val_div, ":max_collected_tax", 2),
        (try_end),
        (val_max, ":max_collected_tax", 2),
        (store_random_in_range, ":collected_tax", 1, ":max_collected_tax"),
        (quest_get_slot, ":cur_collected", "qst_collect_taxes", slot_quest_gold_reward),
        (val_add, ":cur_collected", ":collected_tax"),
        (quest_set_slot, "qst_collect_taxes", slot_quest_gold_reward, ":cur_collected"),
        (call_script, "script_troop_add_gold", "trp_player", ":collected_tax"),
    (try_end),
    (try_begin),
        (eq, ":quest_current_state", 1),
        (val_sub, "$qst_collect_taxes_menu_counter", 1),
        (le, "$qst_collect_taxes_menu_counter", 0),
        (quest_set_slot, "qst_collect_taxes", slot_quest_current_state, 2),
        (jump_to_menu, "mnu_collect_taxes_revolt_warning"),
    (else_try), #Chance of revolt against player
        (eq, ":quest_current_state", 2),
        (val_sub, "$qst_collect_taxes_unrest_counter", 1),
        (le, "$qst_collect_taxes_unrest_counter", 0),
        (eq, "$qst_collect_taxes_halve_taxes", 0),
        (quest_set_slot, "qst_collect_taxes", slot_quest_current_state, 3),

        (store_div, ":unrest_chance", 10000, "$qst_collect_taxes_total_hours"),
        (val_add, ":unrest_chance",30),

        (store_random_in_range, ":unrest_roll", 0, 1000),
        (try_begin),
            (lt, ":unrest_roll", ":unrest_chance"),
            (jump_to_menu, "mnu_collect_taxes_revolt"),
        (try_end),
    (try_end),
]),

#persuade_lords_to_make_peace begin
(72,[
    (call_script, "script_execude_debug_message", 107),
    (gt, "$g_force_peace_faction_1", 0),
    (gt, "$g_force_peace_faction_2", 0),
    (try_begin),
        (store_relation, ":relation", "$g_force_peace_faction_1", "$g_force_peace_faction_2"),
        (lt, ":relation", 0),
        (call_script, "script_diplomacy_start_peace_between_kingdoms", "$g_force_peace_faction_1", "$g_force_peace_faction_2", 1),
    (try_end),
    (assign, "$g_force_peace_faction_1", 0),
    (assign, "$g_force_peace_faction_2", 0),
]),

#Resolve one issue each hour
(1,[
    (call_script, "script_execude_debug_message", 108),
		(str_store_string, s51, "str_no_trigger_noted"),
  # Rejoining party
    (try_begin),
        (gt, "$npc_to_rejoin_party", 0),
        (eq, "$g_infinite_camping", 0),
        (try_begin), #SB : allow hired blade to pass
            (this_or_next|eq, "$npc_to_rejoin_party", "trp_hired_blade"),
            (this_or_next|is_between, "$npc_to_rejoin_party", town_walkers_begin, town_walkers_end),
            (neg|main_party_has_troop, "$npc_to_rejoin_party"),
            (neq, "$g_player_is_captive", 1),
            ##this is for companions leading troops begins
            (assign, ":continue", 1),
            (troop_get_slot, ":party", "$npc_to_rejoin_party", slot_troop_leaded_party),
            (try_begin),
                (party_is_active, ":party"),
                (party_slot_eq, ":party", slot_party_type, spt_companion_raider),
                (assign, ":continue", 0),
            (try_end),
            (eq, ":continue", 1),
            ##this is for companions leading troops ends
            (str_store_string, s51, "str_triggered_by_npc_to_rejoin_party"),
            (assign, "$npc_map_talk_context", slot_troop_days_on_mission),
            (start_map_conversation, "$npc_to_rejoin_party", -1),
        (else_try),
            (is_between, "$npc_to_rejoin_party", companions_begin, companions_end),
            (troop_set_slot, "$npc_to_rejoin_party", slot_troop_current_mission, npc_mission_rejoin_when_possible),
            (assign, "$npc_to_rejoin_party", 0),
        (try_end),
    # Here do NPC that is quitting
    (else_try),
        (eq, "$disable_companions_leaving", 0),
        (gt, "$npc_is_quitting", 0),
        (neq, "$npc_is_quitting", "trp_mathildiz"), # not mathildize
        (neq, "$npc_is_quitting", "trp_turakina"), # not eamane
        (neq, "$npc_is_quitting", "trp_npc35"), # not ursus
        (eq, "$g_infinite_camping", 0),
        (try_begin),
            (main_party_has_troop, "$npc_is_quitting"),
            (neq, "$g_player_is_captive", 1),
            ##diplomacy start+ disable spouse quitting to avoid problems
            (neg|troop_slot_eq, "trp_player", slot_troop_spouse, "$npc_is_quitting"),
            (neg|troop_slot_eq, "$npc_is_quitting", slot_troop_spouse, "trp_player"),
            ##diplomacy end+
            (str_store_string, s51, "str_triggered_by_npc_is_quitting"),
            (start_map_conversation, "$npc_is_quitting", -1),
        (else_try),
            (assign, "$npc_is_quitting", 0),
       (try_end),
    #NPC with grievance
    (else_try), #### Grievance
        (gt, "$npc_with_grievance", 0),
        (eq, "$g_infinite_camping", 0),
        (eq, "$disable_npc_complaints", 0),
        (try_begin),
            (main_party_has_troop, "$npc_with_grievance"),
            (neq, "$g_player_is_captive", 1),
            (str_store_string, s51, "str_triggered_by_npc_has_grievance"),
            (assign, "$npc_map_talk_context", slot_troop_morality_state),
            (start_map_conversation, "$npc_with_grievance", -1),
        (else_try),
            (assign, "$npc_with_grievance", 0),
        (try_end),
    (else_try),
        (gt, "$npc_with_personality_clash", 0),
        (eq, "$g_infinite_camping", 0),
        (eq, "$disable_npc_complaints", 0),
        (troop_get_slot, ":object", "$npc_with_personality_clash", slot_troop_personalityclash_object),
        (try_begin),
            (main_party_has_troop, "$npc_with_personality_clash"),
            (main_party_has_troop, ":object"),
            (neq, "$g_player_is_captive", 1),
            (assign, "$npc_map_talk_context", slot_troop_personalityclash_state),
            (str_store_string, s51, "str_triggered_by_npc_has_personality_clash"),
            (start_map_conversation, "$npc_with_personality_clash", -1),
        (else_try),
            (assign, "$npc_with_personality_clash", 0),
        (try_end),
    (else_try), #### Political issue
        (gt, "$npc_with_political_grievance", 0),
        (eq, "$g_infinite_camping", 0),
        (eq, "$disable_npc_complaints", 0),
        (try_begin),
            (main_party_has_troop, "$npc_with_political_grievance"),
            (neq, "$g_player_is_captive", 1),

            (str_store_string, s51, "str_triggered_by_npc_has_political_grievance"),
            (assign, "$npc_map_talk_context", slot_troop_kingsupport_objection_state),
            (start_map_conversation, "$npc_with_political_grievance", -1),
        (else_try),
            (assign, "$npc_with_political_grievance", 0),
        (try_end),
    (else_try),##female stuff
        (eq, "$disable_sisterly_advice", 0),
        (eq, "$g_infinite_camping", 0),
        (gt, "$npc_with_sisterly_advice", 0),
        (try_begin),
            (main_party_has_troop, "$npc_with_sisterly_advice"),
            (neq, "$g_player_is_captive", 1),

            ##diplomacy start+
            (troop_slot_ge, "$npc_with_sisterly_advice", slot_troop_woman_to_woman_string, 1),
            ##diplomacy end+
            (assign, "$npc_map_talk_context", slot_troop_woman_to_woman_string), #was npc_with_sisterly advice
            (start_map_conversation, "$npc_with_sisterly_advice", -1),
        (else_try),
            (assign, "$npc_with_sisterly_advice", 0),
        (try_end),
    (else_try), #check for regional background
        (eq, "$disable_local_histories", 0),
        (eq, "$g_infinite_camping", 0),
        (try_for_range, ":npc", companions_begin, companions_end),
            (main_party_has_troop, ":npc"),
            (troop_slot_eq, ":npc", slot_troop_home_speech_delivered, 0),
            (troop_get_slot, ":home", ":npc", slot_troop_home),
            (gt, ":home", 0),
            (store_distance_to_party_from_party, ":distance", ":home", "p_main_party"),
            (lt, ":distance", 7),
            (assign, "$npc_map_talk_context", slot_troop_home),
            (str_store_string, s51, "str_triggered_by_local_histories"),
            (start_map_conversation, ":npc", -1),
        (try_end),
    (try_end),
]),

(24*7,[
    (call_script, "script_execude_debug_message", 109),
    (try_for_range, ":troop_no", heroes_begin, heroes_end),
        (neg|troop_slot_eq, ":troop_no", slot_troop_occupation, dplmc_slto_dead),#is not dead already
        (troop_set_slot, ":troop_no", slot_troop_recently_blamed, 0),
        (troop_slot_ge, ":troop_no", slot_troop_change_to_faction, 1),
        (store_troop_faction, ":faction_no", ":troop_no"),
        (troop_get_slot, ":new_faction_no", ":troop_no", slot_troop_change_to_faction),
        (try_begin),
            (troop_get_slot, ":party_no", ":troop_no", slot_troop_leaded_party),
            (assign, ":continue", 0),
            (try_begin),
                (this_or_next|troop_slot_ge, ":troop_no", slot_troop_legion, 1),
                (this_or_next|troop_slot_ge, ":troop_no", slot_troop_aux, 1),
                (troop_slot_ge, ":troop_no", slot_troop_govern, 1),
                (faction_get_slot, ":culture", ":new_faction_no", slot_faction_culture),
                (faction_slot_eq, ":faction_no", slot_faction_culture, ":culture"),
                (assign, ":continue", 1),
            (else_try),
                (eq, ":new_faction_no", "fac_commoners"),#block it if the old faction is active again!
                (faction_slot_eq, ":faction_no", slot_faction_state, sfs_active),
                (assign, ":continue", 0),
                (troop_set_slot, ":troop_no", slot_troop_change_to_faction, 0),
            (else_try),
                (le, ":party_no", 0),
                #(troop_slot_eq, ":troop_no", slot_troop_is_prisoner, 0),
                (neg|troop_slot_ge, ":troop_no", slot_troop_prisoner_of_party, 0),
                (assign, ":continue", 1),
            (else_try),
                (gt, ":party_no", 0),
                #checking if the party is outside the centers
                (party_get_attached_to, ":cur_center_no", ":party_no"),
                (try_begin),
                    (lt, ":cur_center_no", 0),
                    (party_get_cur_town, ":cur_center_no", ":party_no"),
                (try_end),
                (this_or_next|neg|is_between, ":cur_center_no", centers_begin, centers_end),
                (party_slot_eq, ":cur_center_no", slot_town_lord, ":troop_no"),

                #checking if the party is away from his original faction parties
                ##diplomacy start+
                ##Add support for promoted kingdom lades.
                ##OLD:
                #(assign, ":end_cond", active_npcs_end),
                ##NEW:
                (assign, ":end_cond", heroes_end),
                ##diplomacy end+
                (try_for_range, ":enemy_troop_no", heroes_begin, ":end_cond"),
                    #SB : self-check prevention
                    (neq, ":enemy_troop_no", ":troop_no"),
                    (troop_slot_eq, ":enemy_troop_no", slot_troop_occupation, slto_kingdom_hero),
                    (troop_get_slot, ":enemy_party_no", ":enemy_troop_no", slot_troop_leaded_party),
                    (party_is_active, ":enemy_party_no"),
                    (store_faction_of_party, ":enemy_faction_no", ":enemy_party_no"),
                    (eq, ":enemy_faction_no", ":faction_no"),
                    (store_distance_to_party_from_party, ":dist", ":party_no", ":enemy_party_no"),
                    (lt, ":dist", 4),
                    (assign, ":end_cond", 0),
                (try_end),
                (neq, ":end_cond", 0),
                (assign, ":continue", 1),
            (try_end),
            (eq, ":continue", 1),

            (try_begin),
                (ge, "$cheat_mode", 1),
                (str_store_troop_name, s4, ":troop_no"),
                (display_message, "@{!}DEBUG - {s4} faction changed from slot_troop_change_to_faction"),
            (try_end),

            (call_script, "script_change_troop_faction", ":troop_no", ":new_faction_no"),
            (troop_set_slot, ":troop_no", slot_troop_change_to_faction, 0),
            (try_begin),
                (is_between, ":new_faction_no", kingdoms_begin, kingdoms_end),
                (str_store_troop_name_link, s1, ":troop_no"),
                (str_store_faction_name_link, s2, ":faction_no"),
                (str_store_faction_name_link, s3, ":new_faction_no"),
                (faction_get_color, ":color", ":new_faction_no"),
                (display_log_message, "@{s1} has switched from {s2} to {s3}.", ":color"), #SB : colorize
                (try_begin),
                    (eq, ":faction_no", "$players_kingdom"),
                    (call_script, "script_add_notification_menu", "mnu_notification_troop_left_players_faction", ":troop_no", ":new_faction_no"),
                (else_try),
                    (eq, ":new_faction_no", "$players_kingdom"),
                    (call_script, "script_add_notification_menu", "mnu_notification_troop_joined_players_faction", ":troop_no", ":faction_no"),
                (try_end),
            (try_end),
        (try_end),
    (try_end),
]),

(1,[
    (call_script, "script_execude_debug_message", 110),
    (store_current_day, ":cur_day"),
    (gt, ":cur_day", "$g_last_report_control_day"),
    (store_time_of_day, ":cur_hour"),
    (ge, ":cur_hour", 18),

    (store_random_in_range, ":rand_no", 0, 4),
    (this_or_next|ge, ":cur_hour", 22),
    (eq, ":rand_no", 0),

    (assign, "$g_last_report_control_day", ":cur_day"),

    (store_troop_gold, ":gold", "trp_player"),

    (try_begin),
        (lt, ":gold", 0),
        (store_sub, ":gold_difference", 0, ":gold"),
        (troop_add_gold, "trp_player", ":gold_difference"),
    (try_end),

    (party_get_morale, ":main_party_morale", "p_main_party"),

    (try_begin),
        (str_store_string, s1, "str_party_morale_is_low"),
        (str_clear, s2),

        (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
        (assign, ":num_deserters_total", 0),
        (try_for_range_backwards, ":i_stack", 0, ":num_stacks"),
            (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":i_stack"),
            (neg|troop_is_hero, ":stack_troop"),
            (party_stack_get_size, ":stack_size", "p_main_party", ":i_stack"),

            (store_troop_faction, ":faction_no", ":stack_troop"),

            (assign, ":troop_morale", ":main_party_morale"),
            (try_begin),
                (ge, ":faction_no", npc_kingdoms_begin),
                (lt, ":faction_no", npc_kingdoms_end),

                (faction_get_slot, ":troop_morale_addition", ":faction_no",  slot_faction_morale_of_player_troops),
                (val_div, ":troop_morale_addition", 100),
                (val_add, ":troop_morale", ":troop_morale_addition"),
            (try_end),

            (lt, ":troop_morale", 32),
            (store_sub, ":desert_prob", 36, ":troop_morale"),
            (val_div, ":desert_prob", 4),

            (assign, ":num_deserters_from_that_troop", 0),
            (try_for_range, ":unused", 0, ":stack_size"),
                (store_random_in_range, ":rand_no", 0, 100),
                (lt, ":rand_no", ":desert_prob"),
                (val_add, ":num_deserters_from_that_troop", 1),
                (party_slot_eq, "p_main_party", slot_party_on_water, 0),		#quick fix: no deserters on water (phaiak) #Maybe adding chance for mutiny later
                #p.remove_members_from_stack(i_stack,cur_deserters, &main_party_instances);
                (remove_member_from_party, ":stack_troop", "p_main_party"),
            (try_end),
            (try_begin),
                (ge, ":num_deserters_from_that_troop", 1),
                (str_store_troop_name, s2, ":stack_troop"),
                (assign, reg0, ":num_deserters_from_that_troop"),
                (try_begin),
                    (ge, ":num_deserters_total", 1),
                    (str_store_string, s1, "str_s1_reg0_s2"),
                (else_try),
                    (str_store_string, s3, s1),
                    (str_store_string, s1, "str_s3_reg0_s2"),
                (try_end),
                (val_add, ":num_deserters_total", ":num_deserters_from_that_troop"),
            (try_end),
        (try_end),
        (try_begin),
            (store_div, ":desert_prob", "$g_player_party_morale_modifier_debt", pcamp_desertion_divisor),
            (gt, ":desert_prob", 0),

            (try_for_range, ":chest", pcamp_chests_begin, pcamp_chests_end),
                (troop_get_slot, ":party", ":chest", slot_pcamp_chest_party),
                (gt, ":party", 0),
                (party_is_active, ":party"),
                (call_script, "script_party_inflict_attrition", ":party", ":desert_prob", 1),
                (party_get_num_companions, ":num_deserters_from_camp", "p_temp_casualties"),
                (try_begin),
                    (gt, ":num_deserters_from_camp", 0),
                    (str_store_party_name, s3, ":party"),
                    (str_store_string, s2, "str_pcamp_soldiers_from_s3"),
                    (assign, reg0, ":num_deserters_from_camp"),
                    (try_begin),
                        (ge, ":num_deserters_total", 1),
                        (str_store_string, s1, "str_s1_reg0_s2"),
                    (else_try),
                        (str_store_string, s3, s1),
                        (str_store_string, s1, "str_s3_reg0_s2"),
                    (try_end),
                    (val_add, ":num_deserters_total", ":num_deserters_from_camp"),
                (try_end),
            (try_end),
        (try_end),
        (try_begin),
            (ge, ":num_deserters_total", 1),
            (try_begin),
                (ge, ":num_deserters_total", 2),
                (str_store_string, s2, "str_have_deserted_the_party"),
            (else_try),
                (str_store_string, s2, "str_has_deserted_the_party"),
            (try_end),
            (str_store_string, s1, "str_s1_s2"),
            (eq, "$g_infinite_camping", 0),
            (party_slot_eq, "p_main_party", slot_party_on_water, 0),
            (tutorial_box, s1, "str_weekly_report"),
        (try_end),
    (try_end),
]),

(1,[
    (call_script, "script_execude_debug_message", 111),
    (try_begin),
        (eq, "$g_player_is_captive", 1),
        (neg|party_is_active, "$capturer_party"),
        (rest_for_hours, 0, 0, 0),
    (try_end),
    (is_between, "$next_center_will_be_fired", villages_begin, villages_end),
    (assign, ":village_no", "$next_center_will_be_fired"),
    (party_get_slot, ":is_there_already_fire", ":village_no", slot_village_smoke_added),
    (eq, ":is_there_already_fire", 0),
    (try_begin),
        (party_get_slot, ":bound_center", ":village_no", slot_village_bound_center),
        (party_get_slot, ":last_nearby_fire_time", ":bound_center", slot_town_last_nearby_fire_time),
        (store_current_hours, ":cur_hours"),
        (try_begin),
            (eq, "$cheat_mode", 1),
            (is_between, ":village_no", centers_begin, centers_end),
            (is_between, ":bound_center", centers_begin, centers_end),
            (str_store_party_name, s4, ":village_no"),
            (str_store_party_name, s5, ":bound_center"),
            (store_current_hours, reg3),
            (party_get_slot, reg4, ":bound_center", slot_town_last_nearby_fire_time),
            (display_message, "@{!}DEBUG - Checking fire at {s4} for {s5} - current time {reg3}, last nearby fire {reg4}"),
        (try_end),
        (eq, ":cur_hours", ":last_nearby_fire_time"),
        (party_add_particle_system, ":village_no", "psys_map_village_fire"),
        (party_add_particle_system, ":village_no", "psys_map_village_fire_smoke"),
    (else_try),
        (store_add, ":last_nearby_fire_finish_time", ":last_nearby_fire_time", fire_duration),
        (eq, ":last_nearby_fire_finish_time", ":cur_hours"),
        (party_clear_particle_systems, ":village_no"),
    (try_end),
]),

(24,[
    (call_script, "script_execude_debug_message", 112),
    (try_begin),
        (neg|check_quest_active, "qst_olympic_games"),
        (quest_slot_eq, "qst_olympic_games", slot_quest_dont_give_again_remaining_days, 0),
        (call_script,"script_add_notification_menu","mnu_olympic_games",0,0),
    (try_end),
    (val_sub, "$g_dont_give_fief_to_player_days", 1),
    (val_max, "$g_dont_give_fief_to_player_days", -1),
    (val_sub, "$g_dont_give_marshalship_to_player_days", 1),
    (val_max, "$g_dont_give_marshalship_to_player_days", -1),

    #Ensure $character_gender is set correctly
    (try_begin),
        (call_script, "script_cf_dplmc_troop_is_female", "trp_player"),
        (assign, "$character_gender", 1),
    (else_try),
        (assign, "$character_gender", 0),
    (try_end),
   #The following scripts are to end quests which should have cancelled, but did not because of a bug
    (try_begin),
        (check_quest_active, "qst_formal_marriage_proposal"),
        (check_quest_failed, "qst_formal_marriage_proposal"),
        (call_script, "script_end_quest", "qst_formal_marriage_proposal"),
    (try_end),

    (try_begin),
        (check_quest_active, "qst_lend_companion"),
        (quest_get_slot, ":giver_troop", "qst_lend_companion", slot_quest_giver_troop),
        (store_faction_of_troop, ":giver_troop_faction", ":giver_troop"),
        (store_relation, ":faction_relation", ":giver_troop_faction", "$players_kingdom"),
        (this_or_next|lt, ":faction_relation", 0),
        (neg|is_between, ":giver_troop_faction", kingdoms_begin, kingdoms_end),
        (call_script, "script_abort_quest", "qst_lend_companion", 0),
    (try_end),

    (try_begin),
        (is_between, "$players_kingdom", kingdoms_begin, kingdoms_end),
        (neq, "$players_kingdom", "fac_player_supporters_faction"),
        (faction_slot_eq, "$players_kingdom", slot_faction_marshall, "trp_player"),
        (val_add, "$g_player_days_as_marshal", 1),
    (else_try),
        (assign, "$g_player_days_as_marshal", 0),
    (try_end),

    (try_for_range, ":town", towns_begin, towns_end),
        (party_get_slot, ":days_to_completion", ":town", slot_center_player_enterprise_days_until_complete),
        (ge, ":days_to_completion", 1),
        (val_sub, ":days_to_completion", 1),
        (party_set_slot, ":town", slot_center_player_enterprise_days_until_complete, ":days_to_completion"),
    (try_end),
]),

(24,[
    (call_script, "script_execude_debug_message", 113),
    (eq, "$g_player_banner_granted", 1),
    (neq, "$g_custom_banner_new_game", 1),
    (assign, "$g_custom_banner_new_game", 1),
    (le,"$auto_menu",0),
    (troop_get_slot, ":flag_spr", "trp_player", slot_troop_custom_banner_flag_type),
    (lt, ":flag_spr", 0),
    (assign, "$g_edit_banner_troop", "trp_player"),
    (assign, "$g_presentation_next_presentation", -1),
    (jump_to_menu, "mnu_choose_banner"),
]),

(24,[
    (call_script, "script_execude_debug_message", 114),
    #Staples
    (item_set_slot, "itm_bread", slot_item_food_bonus, 8), #brought up from 4
    (item_set_slot, "itm_grain", slot_item_food_bonus, 2), #new - can be boiled as porridge

    #Fat sources - preserved
    (item_set_slot, "itm_smoked_fish", slot_item_food_bonus, 4),
    (item_set_slot, "itm_dried_meat", slot_item_food_bonus, 5),
    (item_set_slot, "itm_cheese", slot_item_food_bonus, 5),
    (item_set_slot, "itm_sausages", slot_item_food_bonus, 5),
    (item_set_slot, "itm_butter", slot_item_food_bonus, 4), #brought down from 8

    #Fat sources - perishable
    (item_set_slot, "itm_chicken", slot_item_food_bonus, 9), #brought up from 7
    (item_set_slot, "itm_cattle_meat", slot_item_food_bonus, 7), #brought down from 7
    (item_set_slot, "itm_horse_meat2", slot_item_food_bonus, 5), #brought down from 7
    (item_set_slot, "itm_pork", slot_item_food_bonus, 9), #brought down from 6

    #Produce
    (item_set_slot, "itm_raw_olives", slot_item_food_bonus, 1),
    (item_set_slot, "itm_cabbages", slot_item_food_bonus, 2),
    (item_set_slot, "itm_raw_grapes", slot_item_food_bonus, 3),
    (item_set_slot, "itm_apples", slot_item_food_bonus, 4), #brought down from 5

    #Sweet items
    (item_set_slot, "itm_raw_date_fruit", slot_item_food_bonus, 4), #brought down from 8
    (item_set_slot, "itm_honey", slot_item_food_bonus, 6), #brought down from 12

    (item_set_slot, "itm_wine", slot_item_food_bonus, 5),
    (item_set_slot, "itm_ale", slot_item_food_bonus, 4),
    (item_set_slot, "itm_tea", slot_item_food_bonus, 3),
]),

(1,[
    (call_script, "script_execude_debug_message", 115),
    (try_for_parties, ":party_no"),
        (gt, ":party_no", last_static_party),
        (party_get_template_id, ":party_template", ":party_no"),
        (this_or_next|eq, ":party_template", "pt_slave_hideout"),
        (this_or_next|eq, ":party_template", "pt_grove"),
        (is_between, ":party_template", "pt_steppe_bandit_lair", "pt_looter_lair"),
        # (eq, ":party_no", "p_kurgan"),

        (store_distance_to_party_from_party, ":distance", "p_main_party", ":party_no"),
        (le, ":distance", 6),
        (party_set_flags, ":party_no", pf_disabled, 0),
        (party_set_flags, ":party_no", pf_always_visible, 1),
        #Removing old hideouts:
        (try_begin),
            (eq, ":party_template", "pt_slave_hideout"),
            (this_or_next|neg|check_quest_active, "qst_blank_quest_7"),
            (neg|quest_slot_eq, "qst_blank_quest_7", slot_quest_target_party, ":party_no"),
            (neq, ":party_no", "p_main_party"),
            (remove_party, ":party_no"),
        (try_end),
    (try_end),
]),

#process gift_carvans
(0.5,[
    (call_script, "script_execude_debug_message", 116),
    (eq, "$g_player_chancellor", "trp_dplmc_chancellor"),
    ##nested diplomacy start+
    #These gifts are far too efficient.  To be balanced with Native, they
    #should not (at the best case) exceed an efficiency of 1000 gold per point.
    (assign, ":save_reg0", reg0),
    (assign, ":save_reg1", reg1),

    ##nested diplomacy end+
    (try_for_parties, ":party_no"),
        (gt, ":party_no", last_static_party),
        (party_slot_eq,":party_no", slot_party_type, dplmc_spt_gift_caravan),
        (party_is_active, ":party_no"),
        (party_get_slot, ":target_party", ":party_no", slot_party_ai_object),
        (party_get_slot, ":target_troop", ":party_no", slot_party_orders_object),
        (try_begin),
            (party_is_active, ":target_party"),
            (store_distance_to_party_from_party, ":distance_to_target", ":party_no", ":target_party"),
            (str_store_party_name, s14, ":party_no"),
            (str_store_party_name, s15,":target_party"),

            (try_begin), #debug
                (eq, "$cheat_mode", 1),
                (assign, reg0, ":distance_to_target"),
                (display_message, "@Distance between {s14} and {s15}: {reg0}"),
            (try_end),

            (try_begin),
                (le, ":distance_to_target", 1),

                (party_get_slot, ":gift", ":party_no", dplmc_slot_party_mission_diplomacy),
                (str_store_item_name, s12, ":gift"),

                (try_begin),
                    (gt, ":target_troop", 0),
                    (str_store_troop_name, s13, ":target_troop"),
                (else_try),
                    (str_store_party_name, s13, ":target_party"),
                (try_end),
                (display_log_message, "@Your caravan has brought {s12} to {s13}.", 0x00FF00),

                (assign, ":relation_boost", 0),
                (store_faction_of_party, ":target_faction", ":target_party"),

                (try_begin),
                    (gt, ":target_troop", 0),
                    (faction_slot_eq,":target_faction",slot_faction_leader,":target_troop"),
                    (try_begin),
                        (eq, ":gift", "itm_wine"),
                        (assign, ":relation_boost", 1),
                    (else_try),
                        (eq, ":gift", "itm_oil"),
                        (assign, ":relation_boost", 2),
                    (try_end),
                (else_try),
                    (store_random_in_range, ":random", 1, 3),
                    (try_begin),
                        (eq, ":gift", "itm_ale"),
                        (val_add, ":relation_boost", ":random"),
                    (else_try),
                        (eq, ":gift", "itm_wine"),
                        (store_add, ":relation_boost", 1, ":random"),
                    (else_try),
                        (eq, ":gift", "itm_oil"),
                        (store_add, ":relation_boost", 2, ":random"),
                    (else_try),
                        (eq, ":gift", "itm_raw_dyes"),
                        (val_add, ":relation_boost", 1),
                    (else_try),
                        (eq, ":gift", "itm_raw_silk"),
                        (val_add, ":relation_boost", 2),
                    (else_try),
                        (eq, ":gift", "itm_velvet"),
                        (val_add, ":relation_boost", 4),
                    (else_try),
                        (eq, ":gift", "itm_smoked_fish"),
                        (try_begin),
                            (party_slot_eq, ":target_party", slot_party_type, spt_village),
                            (val_add, ":relation_boost", 1),
                        (try_end),
                    (else_try),
                        (eq, ":gift", "itm_cheese"),
                        (val_add, ":relation_boost", 1),
                        (try_begin),
                            (party_slot_eq, ":target_party", slot_party_type, spt_village),
                            (val_add, ":relation_boost", 1),
                        (try_end),
                    (else_try),
                        (eq, ":gift", "itm_honey"),
                        (val_add, ":relation_boost", 2),
                        (try_begin),
                            (party_slot_eq, ":target_party", slot_party_type, spt_village),
                            (val_add, ":relation_boost", 2),
                        (try_end),
                    (try_end),
                (try_end),

                (try_begin),
                    (this_or_next|eq, ":target_faction", "fac_player_supporters_faction"),
                    (eq, ":target_faction", "$players_kingdom"),
                    (val_add, ":relation_boost", 1),
                (try_end),
                #Determine the gold cost of the gifts.
                (store_item_value, ":gift_value", ":gift"),
                #Determine how many copies of the gift are used
                (party_get_slot, ":gift_value_factor", ":party_no", dplmc_slot_party_mission_parameter_1),
                (try_begin),
                    #This should only fail if the game was saved using an old version while
                    #a caravan was en route.
                    (gt, ":gift_value_factor", 0),
                    (val_mul, ":gift_value", ":gift_value_factor"),
                (else_try),
                    #Gifts to ladies had no multiplier.
                    #Also, don't do anything for non-trade-goods.
                    (this_or_next|is_between, ":target_troop", kingdom_ladies_begin, kingdom_ladies_end),
                    (neg|is_between, ":gift", trade_goods_begin, trade_goods_end),
                (else_try),
                    #Gifts to lords used 150 copies of an item
                    (is_between, ":target_troop", active_npcs_begin, active_npcs_end),
                    (val_mul, ":gift_value", 150),
                (else_try),
                    #Gifts to centers used 300 copies of an item
                    (is_between, ":target_party", centers_begin, centers_end),
                    (val_mul, ":gift_value", 300),
                (try_end),
                (assign, ":gift_value_factor", 100),
                (try_begin),
                    #Gift isn't a trade good: this should never happen
                    (neg|is_between, ":gift", trade_goods_begin, trade_goods_end),
                    (try_begin),
                        (this_or_next|gt, ":target_troop", 0),
                        (party_slot_eq, ":target_party", slot_party_type, spt_town),
                        (assign, ":gift_value_factor", 115),
                    (else_try),
                        (assign, ":gift_value_factor", 130),
                    (try_end),
                (else_try),
                    #Given to a lord.
                    (gt, ":target_troop", 0),
                    (assign, ":global_price_factor", 0),
                    (assign, ":faction_price_factor", 0),
                    (assign, ":faction_markets", 0),
                    (assign, ":personal_price_factor", 0),
                    (assign, ":personal_markets", 0),

                    (try_for_range, ":center_no", towns_begin, towns_end),
                        (call_script, "script_dplmc_get_item_buy_price_factor", ":gift", ":center_no", -2, -2),
                        (val_add, ":global_price_factor", reg0),

                        (store_faction_of_party, ":center_faction", ":center_no"),
                        (eq, ":center_faction", ":target_faction"),
                        (val_add, ":faction_price_factor", reg0),
                        (val_add, ":faction_markets", 1),

                        (party_slot_eq, ":center_no", slot_town_lord, ":target_troop"),
                        (val_add, ":personal_price_factor", reg0),
                        (val_add, ":personal_markets", 1),
                    (try_end),
                    (try_begin),
                        (eq, ":personal_markets", 0),
                        (try_for_range, ":center_no", villages_begin, villages_end),
                            (try_begin),
                                (party_slot_eq, ":center_no", slot_town_lord, ":target_troop"),
                                (call_script, "script_dplmc_get_item_buy_price_factor", ":gift", ":center_no", -2, -2),
                                (val_add, ":faction_markets", reg0),
                                (val_add, ":personal_markets", 1),
                            (try_end),
                            #Check for castles (deliberately allow multiple-counting)
                            (try_begin),
                                (party_get_slot, reg1, ":center_no", slot_village_bound_center),
                                (gt, reg1, 0),
                                (party_slot_eq, reg1, slot_party_type, spt_castle),
                                (party_slot_eq, reg1, slot_town_lord, ":target_troop"),
                                (call_script, "script_dplmc_get_item_buy_price_factor", ":gift", ":center_no", -2, -2),
                                (val_add, ":faction_markets", reg0),
                                (val_add, ":personal_markets", 1),
                            (try_end),
                        (try_end),
                    (try_end),
                    (try_begin),
                        #First use any markets at or near the target's fiefs
                        (gt, ":personal_markets", 0),
                        (store_div, ":gift_value_factor", ":personal_price_factor", ":personal_markets"),
                    (else_try),
                        #Alternately use any faction markets
                        (gt, ":faction_markets", 0),
                        (val_mul, ":faction_price_factor", 130),#Convert trade penalty from 115% to 130%
                        (val_div, ":faction_price_factor", 115),
                        (store_div, ":gift_value_factor", ":faction_price_factor", ":faction_markets"),
                    (else_try),
                        #As a final option use the global average price
                        (gt, towns_end, towns_begin),#should always be true (if not, then the gift price factor stays average)
                        (store_sub, reg1, towns_end, towns_begin),
                        (val_mul, ":global_price_factor", 130),#Convert trade penalty from 115% to 130%
                        (val_div, ":global_price_factor", 115),
                        (store_div, ":gift_value_factor", ":global_price_factor", reg1),
                    (try_end),
                (else_try),
                    #Given to a town or village
                    (gt, ":target_party", 0),
                    (call_script, "script_dplmc_get_item_buy_price_factor", ":gift", ":center_no", -2, -2),
                    (assign, ":gift_value_factor", reg0),
                (else_try),
                    #This should never happen
                    (assign, ":gift_value_factor", 115),
                (try_end),
                (try_begin),
                    (ge, "$cheat_mode", 1),
                    (assign, reg0, ":gift_value_factor"),
                    (store_mul, reg1, ":gift_value", ":gift_value_factor"),
                    (val_add, reg1, 50),
                    (val_div, reg1, 100),
                    (val_add, reg1, 50),
                    (display_message, "@{!} Gift price factor {reg0}/100, effective value {reg1}"),
                (try_end),
                (val_mul, ":gift_value", ":gift_value_factor"),
                (val_add, ":gift_value", 50),
                (val_div, ":gift_value", 100),

                (val_add, ":gift_value", 50),#the cost of the messenger
                (store_random_in_range, ":random", 0, 1000),#randomly round up or down later, when dividing by 1000
                (assign, reg0, ":gift_value"),#<-- see (1) below, store gold value of gift
                (val_add, ":gift_value", ":random"),
                (val_div, ":gift_value", 1000),
                (options_get_campaign_ai, ":reduce_campaign_ai"),#store for use below
                (try_begin),
                    (eq, ":reduce_campaign_ai", 0), #hard: do not exceed 1/1000 efficiency
                    (val_min, ":relation_boost", ":gift_value"),
                    (try_begin),
                        (eq, ":relation_boost", 0),
                        (store_random_in_range, ":random", 0, 1000),
                        (lt, ":random", reg0),#<-- (1) see above, has gold value of gift
                        (assign, ":relation_boost", 1),
                    (try_end),
                (else_try),
                    (eq, ":reduce_campaign_ai", 1), #medium: use a blend of the two
                    (lt, ":gift_value", ":relation_boost"),
                    (val_add, ":relation_boost", ":gift_value"),
                    (val_add, ":relation_boost", 1),
                    (val_div, ":relation_boost", 2),
                (else_try),
                    (eq, ":reduce_campaign_ai", 2), #easy: do not use
                (try_end),
                (val_max, ":gift_value", 1),
                (val_min, ":relation_boost", ":gift_value"),

                (try_begin),
                    (lt, ":relation_boost", 1),
                    (try_begin),
                        (gt, ":target_troop", 0),
                        (display_message, "@{s13} is unimpressed by your paltry gift."),
                    (else_try),
                        (display_message, "@The people of {s13} are unimpressed by your paltry gift."),
                    (try_end),
                (else_try),
                    (gt, ":target_troop", 0),
                    (call_script, "script_change_player_relation_with_troop", ":target_troop", ":relation_boost"),
                (else_try),
                    (call_script, "script_change_player_relation_with_center", ":target_party", ":relation_boost"),
                (try_end),
                (neq, ":party_no", "p_main_party"),
                (remove_party, ":party_no"),
            (try_end),
        (else_try),
            (display_log_message, "@Your caravan has lost it's way and gave up your mission!", 0xFF0000),
            (neq, ":party_no", "p_main_party"),
            (remove_party, ":party_no"),
        (try_end),
    (try_end),
    ##nested diplomacy start+
    (assign, reg0, ":save_reg0"),
    (assign, reg1, ":save_reg1"),
    ##nested diplomacy start+
]),

#process messengers
(0.5,[
    (call_script, "script_execude_debug_message", 117),
    (try_for_parties, ":party_no"),
        (gt, ":party_no", last_static_party),
        (party_slot_eq,":party_no", slot_party_type, spt_messenger),
        (party_get_slot, ":target_party", ":party_no", slot_party_ai_object),
        (party_get_slot, ":orders_object", ":party_no", slot_party_orders_object),
        (try_begin),
            (party_is_active, ":target_party"),
            (store_distance_to_party_from_party, ":distance_to_target", ":party_no", ":target_party"),
            (str_store_party_name, s14, ":party_no"),
            (str_store_party_name, s15,":target_party"),
            (try_begin), #debug
                (eq, "$cheat_mode", 1),
                (assign, reg0, ":distance_to_target"),
                (display_message, "@Distance between {s14} and {s15}: {reg0}"),
            (try_end),
            (try_begin),
                (le, ":distance_to_target", 1),
                (try_begin), # returning to p_main_party
                    (eq, ":target_party", "p_main_party"),
                    (party_get_slot, ":party_leader", ":party_no", slot_party_orders_object),
                    (party_get_slot, ":success", ":party_no", dplmc_slot_party_mission_diplomacy),
                    (call_script, "script_add_notification_menu", "mnu_dplmc_messenger", ":party_leader", ":success"),
                    (neq, ":party_no", "p_main_party"),
                    (remove_party, ":party_no"),
                (else_try), # patrols
                    (party_slot_eq, ":target_party", slot_party_type, spt_patrol),
                    (party_get_slot, ":message", ":party_no", dplmc_slot_party_mission_diplomacy),
                    (try_begin),
                        (eq, ":message", spai_undefined),
                        (neq, ":target_party", "p_main_party"),
                        (party_get_slot, ":home_town", ":target_party", slot_party_home_center),
                        (party_set_slot, ":home_town", slot_town_patrol_party, 0),
                        (remove_party, ":target_party"),
                    (else_try),
                        (eq, ":message", spai_retreating_to_center),
                        (str_store_party_name, s5, ":orders_object"),
                        (party_set_name, ":target_party", "str_s5_transfer"),
                        (party_set_ai_behavior, ":target_party", ai_bhvr_travel_to_party),
                        (party_set_ai_object, ":target_party", ":orders_object"),
                        (party_set_slot, ":target_party", slot_party_ai_object, ":orders_object"),
                        (party_set_slot, ":target_party", slot_party_ai_state, spai_retreating_to_center),
                        (party_set_aggressiveness, ":target_party", 0),
                        (party_set_courage, ":target_party", 3),
                        (party_set_ai_initiative, ":target_party", 100),
                    (else_try),
                        (str_store_party_name, s5, ":orders_object"),
                        (party_set_name, ":target_party", "str_s5_patrol"),
                        (party_set_ai_behavior, ":target_party", ai_bhvr_travel_to_party),
                        (party_set_ai_object, ":target_party", ":orders_object"),
                        (party_set_slot, ":target_party", slot_party_ai_object, ":orders_object"),
                        (party_set_slot, ":target_party", slot_party_orders_type, ":message"),
                    (try_end),
                    (neq, ":party_no", "p_main_party"),
                    (remove_party, ":party_no"),
                (else_try), # SB : reached a center (waypoint) as target troop has not yet spawned
                    (is_between, ":target_party", walled_centers_begin, walled_centers_end),
                    (party_get_slot, ":target_troop", ":party_no", dplmc_slot_party_origin),
                    (try_begin), #retarget
                        (troop_get_slot, ":leaded_party", ":target_troop", slot_troop_leaded_party),
                        (gt, ":leaded_party", 0),
                        (party_is_active, ":leaded_party"),
                        (neg|party_is_in_town, ":leaded_party", ":target_party"), #camping for some reason
                        (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_party),
                        (party_set_ai_object, ":party_no", ":leaded_party"),
                        (party_set_slot, ":party_no", slot_party_ai_object, ":leaded_party"), #drop down to the condition below
                    (try_end),
                (else_try), # reached any other target
                    (party_stack_get_troop_id, ":party_leader", ":target_party", 0),
                    (str_store_troop_name, s13, ":party_leader"),
                    (try_begin), #debug
                        (eq, "$cheat_mode", 1),
                        (display_log_message, "@Your messenger reached {s13}.", 0x00FF00),
                        (assign, "$g_talk_troop", ":party_leader"), #debug
                    (try_end),
                    (party_get_slot, ":message", ":party_no", dplmc_slot_party_mission_diplomacy),
                    (assign, ":success", 0),
                    (try_begin),
                        (party_set_slot, ":target_party", slot_party_commander_party, "p_main_party"),
                        (store_current_hours, ":hours"),
                        (party_set_slot, ":target_party", slot_party_following_orders_of_troop, "trp_kingdom_heroes_including_player_begin"),
                        (party_set_slot, ":target_party", slot_party_orders_object, ":orders_object"),
                        (party_set_slot, ":target_party", slot_party_orders_type, ":message"),

                        (party_set_slot, ":target_party", slot_party_orders_time, ":hours"),
                        (call_script, "script_npc_decision_checklist_party_ai", ":party_leader"), #This handles AI for both marshal and other parties
                        (try_begin), #debug
                            (eq, "$cheat_mode", 1),
                            (display_message, "@{s14}"), #debug
                        (try_end),
                        (try_begin),
                            (eq, reg0, ":message"),
                            (eq, reg1, ":orders_object"),
                            (assign, ":success", 1),
                        (try_end),
                        (call_script, "script_party_set_ai_state", ":target_party", reg0, reg1),
                    (try_end),
                    (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_party),
                    (party_set_ai_object, ":party_no", "p_main_party"),
                    (party_set_slot, ":party_no", slot_party_ai_object, "p_main_party"),
                    (party_set_slot, ":party_no", slot_party_orders_object, ":party_leader"),
                    (party_set_slot, ":party_no", dplmc_slot_party_mission_diplomacy, ":success"),
                (try_end),
            (try_end),
        (else_try),
            #SB : it's to its
            (display_log_message, "@Your messenger has lost its way and gave up your mission!", message_defeated),
            (neq, ":party_no", "p_main_party"),
            (remove_party, ":party_no"),
        (try_end),
    (try_end),
]),

# Constable training
(24,[
    (call_script, "script_execude_debug_message", 118),
    (eq, "$g_player_constable", "trp_dplmc_constable"),
    (is_between, "$g_constable_training_center", walled_centers_begin, walled_centers_end),
    (party_slot_eq, "$g_constable_training_center", slot_town_lord, "trp_player"),

    (store_skill_level, ":trainer_level", skl_trainer, "trp_player"),
    (val_add, ":trainer_level", 4),
    (store_div, ":xp_gain", ":trainer_level", 2),    #MOTO xp_gain is actually limit of upgrades, so 2-7 here

    # (store_party_size_wo_prisoners, ":size", "$g_constable_training_center"),
    # (val_mul, ":xp_gain", ":size"),
    # (val_mul, ":xp_gain", 2),
    # (val_add, ":xp_gain", 7500),

    # (store_mul, ":percentage", "$g_constable_training_improved", 20),
    # (val_add, ":percentage", 100),
    # (val_mul, ":xp_gain", ":percentage"),
    # (val_div, ":xp_gain", 100),

    # (store_troop_gold, ":gold", "trp_household_possessions"),
    # (try_begin),
    #     (store_div, ":costs", ":xp_gain", 4),
    #     (lt, ":gold", ":costs"),
    #     (str_store_party_name, s19, "$g_constable_training_center"),
    #     (display_message, "@Not enough money in treasury to upgrade troops in {s19}."),
    # (else_try),
    #     (call_script, "script_dplmc_withdraw_from_treasury", ":costs"),
    #     (party_upgrade_with_xp, "$g_constable_training_improved", ":xp_gain", "$g_constable_training_type"),
    #     (assign, reg5, ":xp_gain"),
    #     (str_store_party_name, s8, "$g_constable_training_center"),
    #     (display_message, "@Your Custos Publicus upgraded troops in {s8} ({reg5} exp)."),
    # (try_end),
    (store_character_level, ":troop_limit", "trp_player"),
    (try_begin),
        (ge, "$g_constable_training_improved", 1),
        (store_mul, ":addition", "$g_constable_training_improved", 3),
        (val_add, ":xp_gain", ":addition"),
        (val_add, ":troop_limit", 4),
        (val_add, ":troop_limit", "$g_constable_training_improved"),
    (try_end),
    (party_get_num_companion_stacks, ":num_stacks", "$g_constable_training_center"),
    (try_for_range_backwards, ":i_stack", 0, ":num_stacks"),    #MOTO go from bottom of stack (which player can easily manipulate)
        (party_stack_get_troop_id, ":troop_id", "$g_constable_training_center", ":i_stack"),
        (neg|troop_is_hero, ":troop_id"),
        (try_begin),
            (eq, "$g_constable_training_type", -1),
            (store_random_in_range, ":path", 0, 2),
        (else_try),
            (assign, ":path", "$g_constable_training_type"),
        (try_end),
        (troop_get_upgrade_troop, ":upgrade_troop", ":troop_id" , ":path"),
        (try_begin),
            (le, ":upgrade_troop", 0),
            (troop_get_upgrade_troop, ":upgrade_troop", ":troop_id", 0),
        (try_end),
        #only proceed if troop is upgradable
        (gt, ":upgrade_troop", 0),
        (neg|troop_is_hero, ":upgrade_troop"),
        (store_character_level, ":troop_level", ":troop_id"),
        (le, ":troop_level", ":troop_limit"),
        (party_count_members_of_type,":cur_number","$g_constable_training_center",":troop_id"),
        (val_min, ":xp_gain", ":cur_number"),
        (call_script, "script_game_get_upgrade_cost", ":troop_id"),

        (try_begin),
            (ge, "$g_constable_training_improved", 1),
            (store_mul, ":addition", "$g_constable_training_improved", 10),
            (val_add, reg0, ":addition"),
        (try_end),

        (store_mul, ":upgrade_cost", ":xp_gain", reg0),    #MOTO make PER upgrade

        (store_troop_gold, ":gold", "trp_household_possessions"),
        (try_begin),
            (lt, ":gold", ":upgrade_cost"),
            (store_div, ":money_limit", ":gold", reg0),
            (val_min, ":xp_gain", ":money_limit"),
            (store_mul, ":upgrade_cost", ":xp_gain", reg0),
            (display_message, "@Not enough money in treasury to upgrade troops."),
        (try_end),
        (gt, ":xp_gain", 0),    #MOTO avoid needless processing
        (party_remove_members,"$g_constable_training_center",":troop_id",":xp_gain"),
        (party_add_members, "$g_constable_training_center", ":upgrade_troop", ":xp_gain"),
        (call_script, "script_dplmc_withdraw_from_treasury", ":upgrade_cost"),
        (assign, reg5, ":xp_gain"),
        (str_store_troop_name, s6, ":troop_id"),
        (str_store_troop_name, s7, ":upgrade_troop"),
        (str_store_party_name, s8, "$g_constable_training_center"),
        (display_message, "@Your Custos Publicus upgraded {reg5} {s6} to {s7} in {s8}"),
        (assign, ":num_stacks", -1),
    (try_end),
]),

#send AI patrols
(24.0*2.0/(number_of_towns),[
    (call_script, "script_execude_debug_message", 119),
    (store_random_in_range, ":center", towns_begin, towns_end),
    (party_slot_ge, ":center", slot_town_lord, 1),#not a player fief
    (neg|party_slot_ge, ":center", slot_party_looted_left_days, 1),#not looted
    (party_slot_eq, ":center", slot_center_is_besieged_by, -1),#not under siege
    (party_slot_eq, ":center", slot_center_ongoing_rebellion, 0),#no rebellion
    (party_get_slot,":patrol", ":center", slot_town_patrol_party),
    (try_begin),
        (ge, ":patrol", 1),
        (neg|party_is_active, ":patrol"),
        (assign, ":patrol", 0),
        (party_set_slot, ":center", slot_town_patrol_party, 0),
    (try_end),
    (try_begin),
        (ge, ":patrol", 1),
        (le, ":patrol", last_static_party),
        (assign, ":patrol", 0),
        (party_set_slot, ":center", slot_town_patrol_party, 0),
    (try_end),
    (eq, ":patrol", 0),
    (assign, ":size", -1),
    (try_begin),
        (party_slot_ge, ":center", slot_town_wealth, 18000),
        (assign, ":size", 2),
    (else_try),
        (party_slot_ge, ":center", slot_town_wealth, 12000),
        (assign, ":size", 1),
    (else_try),
        (party_slot_ge, ":center", slot_town_wealth, 6000),
        (assign, ":size", 0),
    (try_end),
    (ge, ":size", 0),
    (store_faction_of_party, ":kingdom", ":center"),
    (is_between, ":kingdom", kingdoms_begin, kingdoms_end),
    (party_get_slot, ":town_lord", ":center", slot_town_lord),
    (is_between, ":town_lord", active_npcs_begin, active_npcs_end),
    (call_script, "script_dplmc_send_patrol", ":center", ":center", ":size",":kingdom", ":town_lord"),
]),

(12,[
    (call_script, "script_execude_debug_message", 120),
    (try_for_parties, ":party_no"),
        (gt, ":party_no", last_static_party),
        (party_is_active, ":party_no"),
        (party_slot_eq, ":party_no", slot_party_type, spt_prisoner_train),
        (party_is_in_any_town, ":party_no"),
        (party_get_cur_town, ":cur_center", ":party_no"),
        (assign, "$g_move_heroes", 1),
        (party_detach, ":party_no"),
        (call_script, "script_party_prisoners_add_party_prisoners", ":cur_center", ":party_no"),
        (remove_party, ":party_no"),
    (try_end),##patrol ai
]),

##Remove rebellions
(3,[
    (call_script, "script_execude_debug_message", 121),
    (try_for_parties, ":party_no"),
        (gt, ":party_no", last_static_party),
        (party_is_active, ":party_no"),
        (party_slot_eq, ":party_no", slot_party_type, spt_rebellion),
        (party_get_slot, ":target", ":party_no", slot_rebellion_target),
        (store_faction_of_party, ":faction1", ":party_no"),
        (store_faction_of_party, ":faction2", ":target"),
        (eq, ":faction1", ":faction2"),
        (party_slot_eq, ":target", slot_center_ongoing_rebellion, 0),
        (remove_party, ":party_no"),
        (faction_set_slot, ":faction1", slot_faction_rebelling_against, 0), # rebellion has end
    (try_end),##patrol ai
]),

#Patrol ai
(2.0/(number_of_towns),[
    (call_script, "script_execude_debug_message", 122),
    (store_random_in_range, ":town", towns_begin,towns_end),
    # (str_store_party_name, s0, ":town"),
    # (display_message, "@Check for {s0}"),
    (try_begin),
        (party_get_slot, ":party_no", ":town", slot_town_patrol_party),
        (gt, ":party_no", last_static_party),
        (party_is_active, ":party_no"),
        (party_slot_eq,":party_no", slot_party_type, spt_patrol),

        # (str_store_party_name, s0, ":party_no"),
        # (display_message, "@Check for {s0}"),

        (try_begin),
            (store_faction_of_party, ":party_faction", ":party_no"),
            (store_faction_of_party, ":town_faction", ":town"),
            (neq, ":town_faction", ":party_faction"),
            (party_get_battle_opponent, ":opponent", ":party_no"),
            (le, ":opponent", -1),
            (remove_party, ":party_no"),
            (party_set_slot, ":town", slot_town_patrol_party, 0),
            # (display_message, "@Remove party, wrong faction"),
        (else_try),

            # (call_script, "script_party_remove_all_prisoners", ":party_no"), #SB : retain prisoners
            (party_get_slot, ":target_party", ":party_no", slot_party_ai_object),
            (party_get_slot, ":home_town", ":party_no", slot_party_home_center),
            (try_begin),
                (neg|party_is_active, ":target_party"),
                (assign, ":target_party", ":home_town"),
                (party_set_slot, ":party_no", slot_party_ai_object, ":target_party"),
                # (display_message, "@Target not active"),
            (try_end),

            (try_begin),
                (is_between, ":home_town", centers_begin,centers_end),
                (try_begin),#stuck in port
                    (get_party_ai_object, ":ai_object", ":party_no"),
                    (gt, ":ai_object", -1),
                    (party_slot_eq, ":party_no", slot_party_on_water, 1),
                    (party_get_template_id, ":party_template_id", ":ai_object"),
                    (eq, ":party_template_id", "pt_port"),
                    (party_slot_eq, ":party_no", slot_party_ai_object_backup, -1),
                    (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_party),
                    (party_set_ai_object, ":party_no", ":home_town"),
                    (party_set_slot, ":party_no", slot_party_ai_object, ":home_town"),

                    # (display_message, "@Stuck in port"),
                (else_try),
                    # (get_party_ai_object, ":ai_object", ":party_no"),
                    # (gt, ":ai_object", -1),
                    # (eq, ":target_party", ":ai_object"),#they are the same
                    # (party_get_template_id, ":party_template_id", ":ai_object"),
                    # (eq, ":party_template_id", "pt_port"),#its a port
                    # (party_slot_eq, ":party_no", slot_party_on_water, 0),#they are on land
                    # (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_party),
                    # (party_set_ai_object, ":party_no", ":home_town"),
                    # (party_set_slot, ":party_no", slot_party_ai_object, ":home_town"),
                    # (str_store_party_name, s1, ":party_no"),
                    # (display_message, "@{s1} is travelling to port although its on land"),
                    # (else_try),
                    (get_party_ai_behavior, ":ai_behavior", ":party_no"),
                    (eq, ":ai_behavior", ai_bhvr_patrol_location),

                    # (display_message, "@Patrol location I"),
                    (try_begin),#if they wandered onto water let them return to their target
                        (party_slot_eq, ":party_no", slot_party_on_water, 1),
                        (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_party),
                        (party_set_ai_object, ":party_no", ":target_party"),
                        (party_set_slot, ":party_no", slot_party_ai_object, ":target_party"),
                    (else_try),
                        (party_get_num_prisoners, ":prisoners", ":party_no"),
                        (store_party_size_wo_prisoners,":size", ":party_no"),
                        (store_distance_to_party_from_party, ":distance_to_target", ":party_no", ":target_party"),

                        (this_or_next|gt, ":prisoners", 30),##drop prisoners
                        (this_or_next|is_between, ":size", 0, 10),##too small
                        (gt, ":distance_to_target", 15),##too far away
                        (try_begin),
                            (lt, ":size", 10),
                            # (str_store_party_name, s5, ":home_town"),
                            # (party_set_name, ":party_no", "str_s5_transfer"),
                            (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_party),
                            (party_set_ai_object, ":party_no", ":home_town"),
                            (party_set_slot, ":party_no", slot_party_ai_object, ":home_town"),
                            (party_set_slot, ":party_no", slot_party_ai_state, spai_retreating_to_center),
                            (party_set_aggressiveness, ":party_no", 0),
                            (party_set_courage, ":party_no", 3),
                            (party_set_ai_initiative, ":party_no", 100),
                        (else_try),
                            (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_party),
                            (party_set_ai_object, ":party_no", ":home_town"),
                            (party_set_slot, ":party_no", slot_party_ai_object, ":home_town"),
                        (try_end),
                    (try_end),
                    # (display_message, "@Patrol location II"),
                (else_try),
                    (eq, ":ai_behavior", ai_bhvr_travel_to_party),
                    (store_distance_to_party_from_party, ":distance_to_target", ":party_no", ":target_party"),
                    (le, ":distance_to_target", 3),
                    # (display_message, "@Travel to party I"),
                    (try_begin), #SB : drop off prisoners
                        (is_between, ":target_party", walled_centers_begin, walled_centers_end),
                        (call_script, "script_party_prisoners_add_party_prisoners", ":target_party", ":party_no"),
                        (call_script, "script_party_remove_all_prisoners", ":party_no"),
                    (try_end),
                    (try_begin),#if retreating check if the reached the center
                        (party_get_slot, ":ai_state", ":party_no", slot_party_ai_state),
                        (eq, ":ai_state", spai_retreating_to_center),
                        (try_begin),#refresh and start patrolling again
                            (le, ":distance_to_target", 1),
                            (party_get_slot, ":party_template", ":party_no", slot_cohort_1),
                            (call_script, "script_cohort_describe_strength_to_s5_and_refil", ":party_no", ":party_template", slot_cohort_1, -1, -1, 1),
                            (party_set_slot, ":party_no", slot_party_ai_state, spai_patrolling_around_center),
                            (party_get_position, pos1, ":target_party"),
                            (party_set_ai_behavior,":party_no", ai_bhvr_patrol_location),
                            (party_set_ai_patrol_radius, ":party_no", 1),
                            (party_set_ai_target_position, ":party_no", pos1),
                            # (str_store_party_name, s5, ":target_party"),
                            # (party_set_name, ":party_no", "str_s5_patrol"),
                        (try_end),
                    (else_try),
                        (party_get_position, pos1, ":target_party"),
                        (party_set_ai_behavior,":party_no", ai_bhvr_patrol_location),
                        (party_set_ai_patrol_radius, ":party_no", 1),
                        (party_set_ai_target_position, ":party_no", pos1),
                        (party_set_slot, ":party_no", slot_party_ai_state, spai_patrolling_around_center),
                    (try_end),
                    # (display_mesvsage, "@Travel to party II"),
                (try_end),
            (else_try),
                (str_store_party_name, s1, ":party_no"),
                (str_store_party_name, s2, ":target_party"),
                (assign, reg0, ":home_town"),
                (display_message, "@{s1} has invalid home town slot. Target: {s2}. Slot: {reg0}"),
            (try_end),
        (try_end),
    (try_end),
]),

# Scout ai
(0.2,[
    (call_script, "script_execude_debug_message", 123),
    (try_for_parties, ":party_no"),
        (gt, ":party_no", last_static_party),
        (party_is_active, ":party_no"),
        (party_slot_eq,":party_no", slot_party_type, spt_scout),

        (try_begin),
            (get_party_ai_behavior, ":ai_behavior", ":party_no"),
            (this_or_next|eq, ":ai_behavior", ai_bhvr_travel_to_point),
            (eq, ":ai_behavior", ai_bhvr_travel_to_party),

            (party_get_slot, ":target_party", ":party_no", slot_party_ai_object),
            (store_distance_to_party_from_party, ":distance_to_target", ":party_no", ":target_party"),
            (le, ":distance_to_target", 1),

            (try_begin),
                (eq, ":target_party", "p_main_party"),
                (party_get_slot, ":mission_target", ":party_no", dplmc_slot_party_mission_diplomacy),
                (call_script, "script_add_notification_menu", "mnu_dplmc_scout", ":mission_target", 0),
                (remove_party, ":party_no"),
            (else_try),
                (neq, ":target_party", "p_main_party"),
                (party_get_slot, ":hours", ":party_no", dplmc_slot_party_mission_diplomacy),

                (try_begin),
                    (le, ":hours", 100),
                    (disable_party, ":party_no"),
                    (val_add, ":hours", 1),
                    (party_set_slot, ":party_no", dplmc_slot_party_mission_diplomacy, ":hours"),
                    (try_begin),
                        (store_random_in_range, ":random", 0, 1000),
                        (eq, ":random", 0),
                        (str_store_party_name, s11, ":target_party"),
                        (display_log_message, "@It is rumoured that a spy has been caught in {s11}.", 0xFF0000),
                        (remove_party, ":party_no"),
                    (try_end),
                (else_try),
                    (enable_party, ":party_no"),
                    (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_party),
                    (party_set_ai_object, ":party_no", "p_main_party"),
                    (party_set_slot, ":party_no", slot_party_ai_object, "p_main_party"),
                    (party_set_slot, ":party_no", dplmc_slot_party_mission_diplomacy, ":target_party"),
                (try_end),
            (try_end),
        (try_end),
    (try_end),
]),

(30 * 24,[
    (call_script, "script_execude_debug_message", 124),
    (try_for_range, ":kingdom", kingdoms_begin, kingdoms_end),
        (faction_slot_eq, ":kingdom", slot_faction_state, sfs_active),
        (faction_get_slot, ":centralization", ":kingdom", dplmc_slot_faction_centralization),
        (faction_get_slot, ":aristocracy", ":kingdom", dplmc_slot_faction_aristocracy),
        # (faction_get_slot, ":quality", ":kingdom", dplmc_slot_faction_quality),
        (faction_get_slot, ":serfdom", ":kingdom", dplmc_slot_faction_serfdom),
        (store_sub, ":relation_change", ":aristocracy", ":centralization"),
        ##custodian (merchant) lords like plutocracy, unlike ordinary lords
        (store_mul, ":custodian_change", ":aristocracy", -1),
        (val_sub, ":custodian_change", ":centralization"),
        #benefactor lords like freedom and dislike serfdom
        (store_mul, ":benefactor_change", ":serfdom", -1),
        (val_sub, ":custodian_change", ":centralization"),
        ##nested diplomacy end+
        (try_begin),
            ##nested diplomacy start+
            (this_or_next|neq, ":benefactor_change", 0),
            (this_or_next|neq, ":custodian_change", 0),
            ##nested diplomacy end+
            (neq, ":relation_change", 0),

            ##diplomacy start+ also include kingdom ladies who are kingdom heroes
            #(try_for_range, ":troop_no", active_npcs_begin, active_npcs_end),
            (try_for_range, ":troop_no", heroes_begin, heroes_end),
                ##diplomacy end+
                (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
                (store_troop_faction, ":faction_no", ":troop_no"),
                (eq, ":kingdom", ":faction_no"),
                (faction_get_slot, ":faction_leader", ":kingdom", slot_faction_leader),
                ##diplomacy start+
                (neq, ":troop_no", ":faction_leader"),
                (assign, ":change_for_troop", ":relation_change"),
                (try_begin),
                    (troop_slot_eq, ":troop_no", slot_lord_reputation_type, lrep_custodian),
                    (assign, ":change_for_troop", ":custodian_change"),
                (else_try),
                    (troop_slot_eq, ":troop_no", slot_lord_reputation_type, lrep_benefactor),
                    (assign, ":change_for_troop", ":benefactor_change"),
                (try_end),
                ##Extra penalty for going back on a promise, extra bonus for keeping it
                (assign, ":promise_mod", 0),
                (try_begin),
                    ##Following are only relevant for companions
                    (is_between, ":troop_no", companions_begin, companions_end),
                    (troop_slot_eq, ":troop_no", slot_troop_kingsupport_state, 1),
                    (try_begin),
                        #Argument: Lords
                        (troop_slot_eq, ":troop_no", slot_troop_kingsupport_argument, argument_lords),
                        (try_begin),
                            #If more than slightly centralized, or more than slightly balanced against aristocrats
                            (this_or_next|neg|faction_slot_ge, ":faction_no", dplmc_slot_faction_aristocracy, -1),
                            (faction_slot_ge, ":faction_no", dplmc_slot_faction_centralization, 2),
                            (val_sub, ":promise_mod", 1),
                        (else_try),
                            #If more than slightly decentralized or more than slightly balanced in favor of aristocrats
                            (this_or_next|faction_slot_ge, ":faction_no", dplmc_slot_faction_aristocracy, 2),
                            (neg|faction_slot_ge, ":faction_no", dplmc_slot_faction_centralization, -2),
                            (faction_slot_ge, ":faction_no", dplmc_slot_faction_aristocracy, -1),#redundant
                            (val_add, ":promise_mod", 1),
                        (try_end),
                    (else_try),
                        #Argument: Commons
                        (troop_slot_eq, ":troop_no", slot_troop_kingsupport_argument, argument_commons),
                        (try_begin),
                            (faction_slot_ge, ":faction_no", dplmc_slot_faction_serfdom, 2),
                            (val_sub, ":promise_mod", 1),
                        (else_try),
                            (neg|faction_slot_ge, ":faction_no", dplmc_slot_faction_serfdom, 0),
                            (store_add, ":local_temp", ":serfdom", ":aristocracy"),
                            (lt, ":local_temp", 0),
                            (val_add, ":promise_mod", 1),
                        (try_end),
                    (try_end),
                (try_end),
            #Check other broken promises
                (try_begin),
                    (troop_slot_eq, ":troop_no", slot_lord_recruitment_argument, argument_lords),
                    (this_or_next|neg|faction_slot_ge, ":faction_no", dplmc_slot_faction_aristocracy, -1),
                    (faction_slot_ge, ":faction_no", dplmc_slot_faction_centralization, 2),
                    #Lord must actually have cared about argument
                    (neg|troop_slot_eq, ":troop_no", slot_lord_reputation_type, lrep_debauched),
                    (neg|troop_slot_eq, ":troop_no", slot_lord_reputation_type, lrep_upstanding),
                    (val_sub, ":promise_mod", 1),
                (else_try),
                    (troop_slot_eq, ":troop_no", slot_lord_recruitment_argument, argument_commons),
                    (faction_slot_ge, ":faction_no", dplmc_slot_faction_serfdom, 2),
                    #Lord must actually have cared about argument
                    (neg|troop_slot_eq, ":troop_no", slot_lord_reputation_type, lrep_quarrelsome),
                    (neg|troop_slot_eq, ":troop_no", slot_lord_reputation_type, lrep_selfrighteous),
                    (neg|troop_slot_eq, ":troop_no", slot_lord_reputation_type, lrep_debauched),
                    (val_sub, ":promise_mod", 1),
                (try_end),
                (val_clamp, ":promise_mod", -1, 2),#-1, 0, or 1
                (val_add, ":change_for_troop", ":promise_mod"),
                (neq, ":change_for_troop", 0),

                (try_begin),
                    (eq, "$cheat_mode", 1),
                    (str_store_faction_name, s9, ":kingdom"),
                    (assign, reg1, ":change_for_troop"),
                    (display_message, "@{!}DEBUG - change_for_troop =  {reg1} for {s9}"),
                (try_end),

                (faction_get_slot, ":leader", ":kingdom", slot_faction_leader),
                (call_script, "script_troop_get_relation_with_troop", ":leader", ":troop_no"),
                (is_between, reg0, -41, 41),
                (call_script, "script_troop_change_relation_with_troop",":leader", ":troop_no", ":change_for_troop"),
                ##diplomacy end+
            (try_end),
        (try_end),
    (try_end),
]),

(24 * 7,[
    (call_script, "script_execude_debug_message", 125),
    ##nested diplomacy start+ (piggyback on this trigger) allow lords to return from exile
    (assign, ":save_reg0", reg0),
    (assign, ":save_reg1", reg1),
    (assign, ":save_reg4", reg4),
    (try_begin),
        #only proceed if setting is enabled
        (ge, "$g_dplmc_lord_recycling", 1),
        #(display_message, "@Check"),
        #Kings/pretenders do not return in this manner (it should be different if it does happen).
        #Companions have a separate mechanism for return.
        (assign, ":chosen_lord", -1),
        (assign, ":best_score", -101),
        (assign, ":num_exiles", 0),
        #iterate over lords from a random start point, wrapping back to zero
        (store_random_in_range, ":rand_no", lords_begin, lords_end),
        (try_for_range, ":index", lords_begin, lords_end),
            (store_add, ":troop_no", ":rand_no", ":index"),
            (try_begin),
              #wrap back around when you go off the end
                (ge, ":troop_no", lords_end),
                (val_sub, ":troop_no", lords_end),
                (val_add, ":troop_no", lords_begin),
            (try_end),
            #Elsewhere we do the bookkeeping of ensuring that when a lord gets exiled
            #his occupation changes to dplmc_slto_exile, and when loading a Native
            #saved gamed with diplomacy we make this change for any lords required.
            (troop_slot_eq, ":troop_no", slot_troop_occupation, dplmc_slto_exile),

            (store_troop_faction, ":faction_no", ":troop_no"),
            (this_or_next|eq, ":faction_no", -1),
            (this_or_next|eq, ":faction_no", "fac_commoners"),
            (eq, ":faction_no", "fac_outlaws"),
            (val_add, ":num_exiles", 1),
            (try_begin),
                #Pick the lord with the best relation with his original liege.
                #In most cases this will be the lord that has been in exile
                #the longest.
                (troop_get_slot, ":new_faction", ":troop_no", slot_troop_original_faction),
                (is_between, ":new_faction", kingdoms_begin, kingdoms_end),
                (faction_get_slot, ":faction_leader", ":new_faction", slot_faction_leader),
                (gt, ":faction_leader", 0),
                (call_script, "script_troop_get_relation_with_troop", ":troop_no", ":faction_leader"),
                (this_or_next|eq, ":chosen_lord", -1),
                (gt, reg0, ":best_score"),
                (assign, ":chosen_lord", ":troop_no"),
                (assign, ":best_score", reg0),
            (else_try),
                (eq, ":chosen_lord", -1),
                (assign, ":chosen_lord", ":troop_no"),
            (try_end),
        (try_end),
        #search is done
        (try_begin),
            #no lord found
            (eq, ":chosen_lord", -1),
            (try_begin),
                (ge, "$cheat_mode", 1),
                (display_message, "@{!}DEBUG - no eligible lords in exile"),
            (try_end),
        (else_try),
            #If there were fewer than 3 lords in exile, random chance that none will return.
            (lt, ":num_exiles", 3),
            (store_random_in_range, ":random", 0, 256),
            (ge, ":random", 128),
            (try_begin),
                (ge, "$cheat_mode", 1),
                (assign, reg0, ":num_exiles"),
                (display_message, "@{!}DEBUG - {reg0} lords found in exile; randomly decided not to try to return anyone."),
            (try_end),
        (else_try),
            #found a lord
            (neq, ":chosen_lord", -1),
            (try_begin),
                (ge, "$cheat_mode", 1),
                (str_store_troop_name, s4, ":chosen_lord"),
                (assign, reg0, ":best_score"),
                (assign, reg1, ":num_exiles"),
                (display_message, "@{!}DEBUG - {reg1} lords found in exile; {s4} chosen to return, score was {reg0}"),
            (try_end),
            #To decrease the displeasing fragmentation of lord cultures, bias towards assigning
            #the lord back to his original faction if possible.
            (troop_get_slot, ":new_faction", ":chosen_lord", slot_troop_original_faction),
            (try_begin),
                #If the original faction is not active, or the lord's relation is too low, use a different faction
                (this_or_next|lt, ":best_score", -50),
                (this_or_next|neg|is_between, ":new_faction", kingdoms_begin, kingdoms_end),
                (neg|faction_slot_eq, ":new_faction", slot_faction_state, sfs_active),
                (call_script, "script_lord_find_alternative_faction", ":chosen_lord"),
                (assign, ":new_faction", reg0),
            (try_end),
            (try_begin),
                (neg|is_between, ":new_faction", kingdoms_begin, kingdoms_end),
                (ge, "$cheat_mode", 1),
                (str_store_troop_name, s4, ":chosen_lord"),
                (display_message, "@{!}DEBUG - {s4} found no faction to return to!"),
            (try_end),
            (is_between, ":new_faction", kingdoms_begin, kingdoms_end),
            (assign, ":num_inactive", 0),
            (try_begin),
                (eq, ":new_faction", "$players_kingdom"),
                (call_script, "script_dplmc_get_troop_standing_in_faction", "trp_player", "$players_kingdom"),
                (ge, reg0, DPLMC_FACTION_STANDING_LEADER_SPOUSE),
                (assign, ":num_inactive", 0),
                (try_for_range, ":other_lord", lords_begin, lords_end),
                    (store_troop_faction, ":other_lord_faction", ":other_lord"),
                    (this_or_next|eq, ":other_lord_faction", "fac_player_supporters_faction"),
                    (eq, ":other_lord_faction", "$players_kingdom"),
                    (troop_slot_eq, ":other_lord", slot_troop_occupation, slto_inactive),
                    (val_add, ":num_inactive", 1),
                (try_end),
                (gt, ":num_inactive", 1),
                (try_begin),
                    (ge, "$cheat_mode", 1),
                    (assign, reg0, ":num_inactive"),
                    (display_message, "@{!}DEBUG - Not returning a lord to the player's kingdom, since there are already {reg0} lords waiting for their petitions to be heard."),
                (try_end),
            (else_try),
                (call_script, "script_dplmc_lord_return_from_exile", ":chosen_lord", ":new_faction"),
            (try_end),
        (try_end),
    (try_end),
    (is_between, "$g_player_affiliated_troop", lords_begin, kingdom_ladies_end),
    ##nested diplomacy start+
    (assign, ":best_relation", -101),
    (assign, ":worst_relation", 101),

    (assign, ":num_at_least_20", 0),
    (assign, ":num_below_0", 0),

    (assign, ":good_relation", 0),
    (assign, ":bad_relation", 0),
    # (display_message, "@Doing g_player_affiliated_troop stuff"),
    (try_for_range, ":family_member", lords_begin, kingdom_ladies_end),
        (call_script, "script_dplmc_is_affiliated_family_member", ":family_member"),
        (gt, reg0, 0),
        (call_script, "script_troop_get_player_relation", ":family_member"),
        (try_begin),
            (lt, reg0, 0),
            (val_add, ":num_below_0", 1),
            (le, reg0, ":worst_relation"),
            (assign, ":bad_relation", ":family_member"),
        (else_try),
            (ge, reg0, 20),
            (val_add, ":num_at_least_20", 1),
            (gt, reg0, ":best_relation"),
            (assign, ":good_relation", ":family_member"),
        (try_end),
        (val_max, ":best_relation", reg0),
        (val_min, ":worst_relation", reg0),
        ##nested diplomacy end+
    (try_end),
    (try_begin),
        (gt, ":worst_relation", -15),
        (assign, ":bad_relation", 0),#suppress with no message
        # (display_message, "@Doing g_player_affiliated_troop stuff nothing happens"),
    (else_try),
        (gt, ":worst_relation", -20),
        (str_store_troop_name_link, s0, ":bad_relation"),  #SB : link message, no colours
        (display_message, "@{s0} is grumbling against you.  Your affiliation could be jeopardized if this continues."),
        (str_clear, s0),
    (else_try),
        (neq, ":bad_relation", 0),
        (ge, ":num_at_least_20", ":num_below_0"),
        (store_add, reg0, ":worst_relation", ":best_relation"),
        (ge, reg0, 0),
        (str_store_troop_name_link, s0, ":bad_relation"),
        (str_store_troop_name_link, s1, ":good_relation"),  #SB : link message
        (display_message, "@{s0} is grumbling against you, but with {s1}'s support you remain affiliated for now."),
        (str_clear, s0),
        (str_clear, s1),
        (assign, ":bad_relation", 0),
    (try_end),
    (try_begin),
        (eq, ":bad_relation", 0),
        # (display_message, "@Doing g_player_affiliated_troop stuff nothing happens two"),
        (try_for_range, ":family_member", lords_begin, kingdom_ladies_end),
            (call_script, "script_dplmc_is_affiliated_family_member", ":family_member"),
            (gt, reg0, 0),
            (try_begin),
                (troop_slot_ge, ":family_member", slot_troop_prisoner_of_party, 0),
                ##diplomacy start+ skip relationship decay for imprisonment when the player himself is imprisoned or wounded
                (neg|troop_slot_ge, "trp_player", slot_troop_prisoner_of_party, 1),
                (neg|troop_is_wounded, "trp_player"),
                ##diplomacy end+
                (call_script, "script_change_player_relation_with_troop", ":family_member", -1),
            (else_try),
                (call_script, "script_change_player_relation_with_troop", ":family_member", 1),
            (try_end),
        (try_end),
    (else_try),
        (call_script, "script_add_notification_menu", "mnu_dplmc_affiliate_end", ":bad_relation", 0),
        (call_script, "script_dplmc_affiliate_end", 1),
    (try_end),
    ##nested diplomacy start+
    (assign, reg0, ":save_reg0"),
    (assign, reg1, ":save_reg1"),
    (assign, reg4, ":save_reg4"),
]),

(24,[
    (call_script, "script_execude_debug_message", 126),
    (assign, ":has_walled_center", 0),
    (assign, ":has_fief", 0),
    (try_for_range, ":center_no", centers_begin, centers_end),
        (try_begin),
            (party_slot_eq, ":center_no", slot_town_lord, "trp_player"),
            (try_begin),
                (is_between, ":center_no", walled_centers_begin, walled_centers_end),
                (assign, ":has_walled_center", 1),
            (try_end),
            (assign, ":has_fief", 1),
        (else_try),
            (party_get_slot, ":latifundium", ":center_no",slot_center_has_latifundium),
            (gt, ":latifundium", 0),
            (party_is_active, ":latifundium"),
            (assign, ":has_fief", 1),
        (try_end),
    (try_end),
    (try_begin),
        (eq, ":has_walled_center", 0),
        (this_or_next|neq, "$g_player_constable", 0),
        (neq, "$g_player_chancellor", 0),
        (assign, "$g_player_constable", 0),
        (assign, "$g_player_chancellor", 0),
    (try_end),
    (try_begin),
        (eq, ":has_fief", 0),
        (try_begin),
            (neq, "$g_player_chamberlain", 0),
            (assign, "$g_player_chamberlain", 0),
            (store_troop_gold, ":cur_gold", "trp_household_possessions"),
            (try_begin),
                (gt, ":cur_gold", 0),
                (assign, reg11, ":cur_gold"),
                (val_mul, reg10, ":cur_gold", 800),
                (val_div, reg10, 1000),
                (store_sub, reg12, reg11, reg10),
                (display_message, "@Your last estate was captured and {reg10} denars of {reg11} are transfered to you. {reg12} denars have been lost!", message_negative),
                (call_script, "script_dplmc_withdraw_from_treasury", reg11),
                (call_script, "script_troop_add_gold", "trp_player", reg10),
            (try_end),
        (try_end),
    (try_end),
]),

(24,[
    (call_script, "script_execude_debug_message", 127),
    (store_random_in_range, ":r", 0, 100),
    (try_begin),
        (this_or_next|is_between, "$g_cur_month", 1, 3),
        (eq, "$g_cur_month", 12),
        (try_begin),
            (le, ":r", 15),
            (store_random_in_range, ":random", 0, 5),
            (set_global_cloud_amount, ":random"),
            (set_global_haze_amount, ":random"),
            (assign, "$wind_power", 0),
        (else_try),
            (le, ":r", 45),
            (store_random_in_range, ":random", 20, 35),
            (set_global_cloud_amount, ":random"),
            (set_global_haze_amount, ":random"),
            (assign, "$wind_power", 1),
        (else_try),
            (le, ":r", 65),
            (store_random_in_range, ":random", 50, 70),
            (set_global_cloud_amount, ":random"),
            (set_global_haze_amount, ":random"),
            (assign, "$wind_power", 2),
        (else_try),
            (le, ":r", 80),
            (store_random_in_range, ":random", 70, 80),
            (set_global_cloud_amount, ":random"),
            (set_global_haze_amount, ":random"),
            (assign, "$wind_power", 3),
        (else_try),
            (store_random_in_range, ":random", 80, 100),
            (set_global_cloud_amount, ":random"),
            (set_global_haze_amount, ":random"),
            (assign, "$wind_power", 4),
        (try_end),
    (else_try),
        (is_between, "$g_cur_month", 3, 6),
        (try_begin),
            (le, ":r", 15),
            (store_random_in_range, ":random1", 0, 5),
            (store_random_in_range, ":random2", 0, 5),
            (set_global_cloud_amount, ":random1"),
            (set_global_haze_amount, ":random2"),
            (assign, "$wind_power", 0),
        (else_try),
            (le, ":r", 45),
            (store_random_in_range, ":random1", 60, 90),
            (store_random_in_range, ":random2", 20, 30),
            (set_global_cloud_amount, ":random1"),
            (set_global_haze_amount, ":random2"),
            (assign, "$wind_power", 1),
        (else_try),
            (le, ":r", 65),
            (store_random_in_range, ":random1", 20, 25),
            (store_random_in_range, ":random2", 10, 15),
            (set_global_cloud_amount, ":random1"),
            (set_global_haze_amount, ":random2"),
            (assign, "$wind_power", 2),
        (else_try),
            (le, ":r", 80),
            (store_random_in_range, ":random1", 90, 101),
            (store_random_in_range, ":random2", 0, 50),
            (set_global_cloud_amount, ":random1"),
            (set_global_haze_amount, ":random2"),
            (assign, "$wind_power", 3),
        (else_try),
            (store_random_in_range, ":random1", 0, 50),
            (store_random_in_range, ":random2", 0, 5),
            (set_global_cloud_amount, ":random1"),
            (set_global_haze_amount, ":random2"),
            (assign, "$wind_power", 4),
        (try_end),
    (else_try),
        (is_between, "$g_cur_month", 6, 9),
        (try_begin),
            (le, ":r", 35),
            (store_random_in_range, ":random1", 0, 5),
            (store_random_in_range, ":random2", 0, 3),
            (set_global_cloud_amount, ":random1"),
            (set_global_haze_amount, ":random2"),
            (assign, "$wind_power", 0),
        (else_try),
            (le, ":r", 65),
            (store_random_in_range, ":random1", 0, 14),
            (store_random_in_range, ":random2", 0, 3),
            (set_global_cloud_amount, ":random1"),
            (set_global_haze_amount, ":random2"),
            (assign, "$wind_power", 1),
        (else_try),
            (le, ":r", 80),
            (store_random_in_range, ":random1", 30, 55),
            (store_random_in_range, ":random2", 0, 5),
            (set_global_cloud_amount, ":random1"),
            (set_global_haze_amount, ":random2"),
            (assign, "$wind_power", 2),
        (else_try),
            (le, ":r", 90),
            (store_random_in_range, ":random1", 0, 50),
            (store_random_in_range, ":random2", 0, 5),
            (set_global_cloud_amount, ":random1"),
            (set_global_haze_amount, ":random2"),
            (assign, "$wind_power", 3),
        (else_try),
            (store_random_in_range, ":random1", 80, 101),
            (store_random_in_range, ":random2", 30, 40),
            (set_global_cloud_amount, ":random1"),
            (set_global_haze_amount, ":random2"),
            (assign, "$wind_power", 4),
        (try_end),
    (else_try),
        (is_between, "$g_cur_month", 9, 12),
        (try_begin),
            (le, ":r", 10),
            (store_random_in_range, ":random1", 0, 5),
            (store_random_in_range, ":random2", 0, 5),
            (set_global_cloud_amount, ":random1"),
            (set_global_haze_amount, ":random2"),
            (assign, "$wind_power", 0),
        (else_try),
            (le, ":r", 65),
            (store_random_in_range, ":random1", 0, 14),
            (store_random_in_range, ":random2", 70, 101),
            (set_global_cloud_amount, ":random1"),
            (set_global_haze_amount, ":random2"),
            (assign, "$wind_power", 1),
        (else_try),
            (le, ":r", 80),
            (store_random_in_range, ":random1", 30, 55),
            (store_random_in_range, ":random2", 90, 101),
            (set_global_cloud_amount, ":random1"),
            (set_global_haze_amount, ":random2"),
            (assign, "$wind_power", 2),
        (else_try),
            (le, ":r", 90),
            (store_random_in_range, ":random1", 50, 65),
            (store_random_in_range, ":random2", 20, 55),
            (set_global_cloud_amount, ":random1"),
            (set_global_haze_amount, ":random2"),
            (assign, "$wind_power", 3),
        (else_try),
            (store_random_in_range, ":random1", 90, 101),
            (store_random_in_range, ":random2", 90, 101),
            (set_global_cloud_amount, ":random1"),
            (set_global_haze_amount, ":random2"),
            (assign, "$wind_power", 4),
        (try_end),
    (try_end),

    #shader
    (set_fixed_point_multiplier,1),
    (set_shader_param_float, "@vWindStrength", "$wind_power"),

    (try_begin),
        (party_slot_eq, "p_main_party", slot_party_on_water, 1),
        (try_begin),
            (eq, "$wind_power", 0),
            # (store_random_in_range, "$beaufort", 0, 3),
            (display_message, "@The weather changed to: 'Calm'."),
        (else_try),
            (eq, "$wind_power", 1),
            # (store_random_in_range, "$beaufort", 3, 5),
            (display_message, "@The weather changed to: 'light breeze'."),
        (else_try),
            (eq, "$wind_power", 2),
            # (store_random_in_range, "$beaufort", 5, 8),
            (display_message, "@The weather changed to: 'moderate breeze'."),
        (else_try),
            (eq, "$wind_power", 3),
            # (store_random_in_range, "$beaufort", 8, 10),
            (display_message, "@The weather changed to: 'Gale'."),
        (else_try),
            # (store_random_in_range, "$beaufort", 10, 13),
            (display_message, "@The weather changed to: 'Storm'.", color_bad_news),
        (try_end),
        (assign, "$beaufort", "$wind_power"),
        (val_min, "$beaufort", 3),
    (try_end),
]),

(49,[
    (call_script, "script_execude_debug_message", 128),

    (store_random_in_range, ":r", -5, 350),
    (ge, ":r", "$g_player_luck"),

    (try_begin),
        (troop_slot_ge, "trp_player", slot_troop_renown, 200),
        (eq, "$enlisted_party", -1),
        (call_script, "script_get_piety_impact"),
        (neq, reg56, 0),
        (display_message, "@Your pietas effects your renown.", message_alert),
        (call_script, "script_change_troop_renown", "trp_player", reg56),
    (try_end),

    (eq, "$g_is_emperor", 1),
    (try_begin),
        (lt, "$player_right_to_rule", 50),
        (lt, "$g_unrest", 101),
        (val_add, "$g_unrest", 1),
        (display_message, "@Stability of the Empire decreases, due to your low right to rule.", color_bad_news),
    (try_end),
    (troop_get_slot, ":support", "trp_senator_dummy", slot_senate_support),
    (try_begin),
        (lt, ":support", 50),
        (lt, "$g_unrest", 41),
        (val_add, "$g_unrest", 1),
        (display_message, "@Stability of the Empire decreases, due to your low support in the senate.", color_bad_news),
    (else_try),
        (lt, ":support", 40),
        (lt, "$g_unrest", 51),
        (val_add, "$g_unrest", 1),
        (display_message, "@Stability of the Empire decreases, due to your low support in the senate.", color_bad_news),
    (else_try),
        (lt, ":support", 30),
        (lt, "$g_unrest", 61),
        (val_add, "$g_unrest", 1),
        (display_message, "@Stability of the Empire decreases, due to your low support in the senate.", color_bad_news),
    (else_try),
        (lt, ":support", 20),
        (lt, "$g_unrest", 71),
        (val_add, "$g_unrest", 1),
        (display_message, "@Stability of the Empire decreases, due to your low support in the senate.", color_bad_news),
    (else_try),
        (lt, ":support", 10),
        (lt, "$g_unrest", 81),
        (val_add, "$g_unrest", 1),
        (display_message, "@Stability of the Empire decreases, due to your low support in the senate.", color_bad_news),
    (else_try),
        (ge, ":support", 50),
        (gt, "$g_unrest", 30),
        (val_sub, "$g_unrest", 1),
        (val_max, "$g_unrest", 0),
        (display_message, "@Stability of the Empire increases, due to your support in the senate.", color_good_news),
        (call_script, "script_change_player_right_to_rule", 1),
    (try_end),
]),

(48,[
    (call_script, "script_execude_debug_message", 129),
    (try_begin),
        (ge, "$player_piety", 0),
        (call_script, "script_add_piety", -1, 0),
    (try_end),
    (try_begin),
        (ge, "$g_civil_war", 1),
        (lt, "$g_unrest", 101),
        (store_random_in_range, ":r", 0, 4),
        (eq, ":r", 1),
        (val_add, "$g_unrest", 1),
        (display_message, "@The fires of civil war weaken the unity of the Empire. Stability decreases", color_bad_news),
    (try_end),
]),

(24*7,[
    (call_script, "script_execude_debug_message", 130),
    (try_begin),
        (eq, "$g_is_emperor", 1),
        (try_begin),
            (lt, "$player_honor", 0),
            (lt, "$g_unrest", 10),
            (val_add, "$g_unrest", 1),
            (display_message, "@Stability of the Empire decreases, due to your bad reputation.", color_bad_news),
        (else_try),
            (lt, "$player_honor", -10),
            (lt, "$g_unrest", 20),
            (val_add, "$g_unrest", 1),
            (display_message, "@Stability of the Empire decreases, due to your bad reputation.", color_bad_news),
        (else_try),
            (lt, "$player_honor", -20),
            (lt, "$g_unrest", 30),
            (val_add, "$g_unrest", 1),
            (display_message, "@Stability of the Empire decreases, due to your bad reputation.", color_bad_news),
        (else_try),
            (lt, "$player_honor", -30),
            (lt, "$g_unrest", 40),
            (val_add, "$g_unrest", 1),
            (display_message, "@Stability of the Empire decreases, due to your bad reputation.", color_bad_news),
        (else_try),
            (lt, "$player_honor", -40),
            (lt, "$g_unrest", 50),
            (val_add, "$g_unrest", 1),
            (display_message, "@Stability of the Empire decreases, due to your bad reputation.", color_bad_news),
        (else_try),
            (lt, "$player_honor", -50),
            (lt, "$g_unrest", 60),
            (val_add, "$g_unrest", 1),
            (display_message, "@Stability of the Empire decreases, due to your bad reputation.", color_bad_news),
        (else_try),
            (lt, "$player_honor", -70),
            (lt, "$g_unrest", 100),
            (val_add, "$g_unrest", 1),
            (display_message, "@Stability of the Empire decreases, due to your bad reputation.", color_bad_news),
        (try_end),
    (try_end),
    (try_begin),
        (ge, "$g_unrest", 20),
        (store_random_in_range, ":r", 0, 100),
        (le, ":r", 6),
        (val_sub, "$g_unrest", 1),
        (val_max, "$g_unrest", 0),
        (display_message, "@May the gods give us a worthwhile future. Stability increases", color_good_news),
    (try_end),
]),

##new location based events:
(24,[
    (call_script, "script_execude_debug_message", 131),
    (eq, "$enlisted_party", -1),#not freelancing
    (map_free), #en mapa
    (neq, "$g_player_is_captive", 1),
    (store_party_size_wo_prisoners, ":size", "p_main_party"),
    (ge, ":size", 30),
    (set_fixed_point_multiplier, 1),
    (try_begin),
        (troop_slot_eq, "trp_global_variables", g_alesia, 0),#each one is unique
        (store_distance_to_party_from_party, ":distance", "p_main_party", "p_village_77"),
        (le, ":distance", 20),
        (jump_to_menu, "mnu_event_alesia"),
        (troop_set_slot, "trp_global_variables", g_alesia, 1),
    (else_try),
        (troop_slot_eq, "trp_global_variables", g_dova, 0),#each one is unique
        (store_distance_to_party_from_party, ":distance", "p_main_party", "p_castle_23"),
        (le, ":distance", 20),
        (eq, "$g_is_emperor", 1),
        (le, "$g_civil_war", 0),
        (jump_to_menu, "mnu_event_dova"),
        (troop_set_slot, "trp_global_variables", g_dova, 1),
    (else_try),
        (troop_slot_eq, "trp_global_variables", g_rubicon, 0),#each one is unique
        (store_distance_to_party_from_party, ":distance", "p_main_party", "p_village_60"),
        (le, ":distance", 20),
        (jump_to_menu, "mnu_event_rubicon"),
        (troop_set_slot, "trp_global_variables", g_rubicon, 1),
    (else_try),
        (troop_slot_eq, "trp_global_variables", g_famous_battle_1, 0),#each one is unique
        (store_distance_to_party_from_party, ":distance", "p_main_party", "p_town_33"),
        (le, ":distance", 20),
        (assign, "$temp3", 0),
        (jump_to_menu, "mnu_event_famous_battle"),
        (troop_set_slot, "trp_global_variables", g_famous_battle_1, 1),
    (else_try),
        (troop_slot_eq, "trp_global_variables", g_famous_battle_2, 0),#each one is unique
        (store_distance_to_party_from_party, ":distance", "p_main_party", "p_castle_6"),
        (le, ":distance", 20),
        (assign, "$temp3", 1),
        (jump_to_menu, "mnu_event_famous_battle"),
        (troop_set_slot, "trp_global_variables", g_famous_battle_2, 1),
    (else_try),
        (troop_slot_eq, "trp_global_variables", g_famous_battle_3, 0),#each one is unique
        (store_distance_to_party_from_party, ":distance", "p_main_party", "p_village_57"),
        (le, ":distance", 20),
        (assign, "$temp3", 2),
        (jump_to_menu, "mnu_event_famous_battle"),
        (troop_set_slot, "trp_global_variables", g_famous_battle_3, 1),
    (else_try),
        (troop_slot_eq, "trp_global_variables", g_famous_battle_4, 0),#each one is unique
        (store_distance_to_party_from_party, ":distance", "p_main_party", "p_castle_49"),
        (le, ":distance", 20),
        (assign, "$temp3", 3),
        (jump_to_menu, "mnu_event_famous_battle"),
        (troop_set_slot, "trp_global_variables", g_famous_battle_4, 1),
    (else_try),
        (troop_slot_eq, "trp_global_variables", g_pillars_of_hercules, 0),#each one is unique
        (store_distance_to_party_from_party, ":distance", "p_main_party", "p_village_138"),
        (le, ":distance", 35),
        (party_slot_eq, "p_main_party", slot_party_on_water, 1),#is on water
        (jump_to_menu, "mnu_event_pillars_of_hercules"),
        (troop_set_slot, "trp_global_variables", g_pillars_of_hercules, 1),
    (try_end),
]),

###normal random events
(24 * 4,[
    (call_script, "script_execude_debug_message", 132),
    (eq, "$enlisted_party", -1),#not freelancing
    (map_free), #en mapa
    (neq, "$g_player_is_captive", 1),
    (neg|troop_slot_ge, "trp_player", slot_troop_prisoner_of_party, 0),
    (try_begin),
        (party_slot_eq, "p_main_party", slot_party_on_water, 0),#not on water
        (troop_get_slot, ":player_renown", "trp_player", slot_troop_renown),
        (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
        (assign, ":num_men", 0),
        (try_for_range, ":i_stack", 0, ":num_stacks"),
            (party_stack_get_size, ":stack_size","p_main_party",":i_stack"),
            (val_add, ":num_men", ":stack_size"),
        (try_end),

        (try_begin),##events if you are famous
            (ge, ":player_renown", 200),
            (gt, ":num_men", 40),
            (store_random_in_range, ":rand", 0, 35),
            (try_begin),
                (this_or_next|eq, ":rand", 0),
                (eq, ":rand", 1),
                (jump_to_menu,"mnu_event_01_normal"),
            (else_try),
                (eq, ":rand", 2),
                (jump_to_menu,"mnu_event_18_normal"),
            (else_try),
                (eq, ":rand", 3),
                (jump_to_menu,"mnu_event_04_normal"),
            (else_try),
                (le, ":rand", 9),
                (ge, ":rand", 4),
                #no repitable
                (try_begin),
                    (eq, "$g_random_eventnorepit", 0),  #no repit some random events
                    (jump_to_menu,"mnu_event_23_normal"),
                    (val_add, "$g_random_eventnorepit", 1),  #no repit some random events
                (else_try),
                    (eq, "$g_random_eventnorepit", 1),  #no repit some random events
                    (jump_to_menu,"mnu_event_08_normal"),
                    (val_add, "$g_random_eventnorepit", 1),  #no repit some random events
                (else_try),
                    (eq, "$g_random_eventnorepit", 2),  #no repit some random events
                    (jump_to_menu,"mnu_event_11_normal"),
                    (val_add, "$g_random_eventnorepit", 1),  #no repit some random events
                (else_try),
                    (eq, "$g_random_eventnorepit", 3),  #no repit some random events
                    (jump_to_menu,"mnu_event_17_normal"),
                    (val_add, "$g_random_eventnorepit", 1),  #no repit some random events
                (else_try),
                    (eq, "$g_random_eventnorepit", 4),  #no repit some random events
                    (jump_to_menu,"mnu_event_02_normal"),
                    (val_add, "$g_random_eventnorepit", 1),  #no repit some random events
                (else_try),
                    (eq, "$g_random_eventnorepit", 5),  #no repit some random events
                    (jump_to_menu,"mnu_event_24_normal"),
                    (val_add, "$g_random_eventnorepit", 1),  #no repit some random events
                (else_try),
                    (this_or_next|eq, "$g_is_emperor", 1),
                    (faction_slot_eq, "$players_kingdom", slot_faction_culture, "fac_culture_7"),
                    (troop_slot_eq, "trp_player", slot_troop_culture, "fac_culture_7"),
                    (eq, "$g_random_eventnorepit", 6),  #no repit some random events
                    (jump_to_menu, "mnu_event_26_normal"),
                    (val_add, "$g_random_eventnorepit", 1),  #no repit some random events
                (else_try),
                    (this_or_next|eq, "$g_is_emperor", 1),
                    (faction_slot_eq, "$players_kingdom", slot_faction_culture, "fac_culture_7"),
                    (troop_slot_eq, "trp_player", slot_troop_culture, "fac_culture_7"),
                    (eq, "$g_random_eventnorepit", 7),  #no repit some random events
                    (jump_to_menu, "mnu_event_25_normal"),
                    (val_add, "$g_random_eventnorepit", 1),  #no repit some random events
                (else_try),#nothing
                    (display_message, "@Gods, have mercy!"),
                (try_end),
            (else_try),
                (eq, ":rand", 10),
                (jump_to_menu,"mnu_event_05_normal"),
            (else_try),
                (eq, ":rand", 11),
                (jump_to_menu,"mnu_event_06_normal"),
            (else_try),
                (eq, ":rand", 12),
                (jump_to_menu,"mnu_event_07_normal"),
            (else_try),
                (eq, ":rand", 13),
                (jump_to_menu,"mnu_event_19_normal"),
            (else_try),
                (eq, ":rand", 14),
                (jump_to_menu,"mnu_event_09_normal"),
            (else_try),
                (eq, ":rand", 15),
                (is_between, "$g_cur_month", 6, 10),#harvest season
                (jump_to_menu,"mnu_event_10_normal"),
            (else_try),
                (eq, ":rand", 16),
                (jump_to_menu,"mnu_event_20_normal"),
            (else_try),
                (eq, ":rand", 17),
                (jump_to_menu,"mnu_event_12_normal"),
            (else_try),
                (eq, ":rand", 18),
                (party_get_current_terrain, ":terrain", "p_main_party"),
                (neq, ":terrain", rt_desert),
                (neq, ":terrain", rt_desert_forest),
                (jump_to_menu,"mnu_event_13_normal"),#mushrooms
            (else_try),
                (eq, ":rand", 19),
                (party_get_current_terrain, ":terrain", "p_main_party"),
                (neq, ":terrain", rt_desert),
                (neq, ":terrain", rt_desert_forest),
                (jump_to_menu,"mnu_event_14_normal"),   #mushrooms
            (else_try),
                (eq, ":rand", 20),
                (party_get_current_terrain, ":terrain", "p_main_party"),
                (neq, ":terrain", rt_desert),
                (neq, ":terrain", rt_desert_forest),
                (jump_to_menu,"mnu_event_15_normal"),	#mushrooms
            (else_try),
                (eq, ":rand", 21),
                (jump_to_menu,"mnu_event_16_normal"),
            (else_try),
                (eq, ":rand", 22),
                (jump_to_menu,"mnu_event_05_normal_1"),
            (else_try),
                (this_or_next|eq, ":rand", 23),
                (this_or_next|eq, ":rand", 24),
                (eq, ":rand", 25),
                (party_get_current_terrain, ":terrain", "p_main_party"),
                (this_or_next|eq, ":terrain", rt_desert),
                (eq, ":terrain", rt_desert_forest),
                (jump_to_menu,"mnu_event_01_desert"),
            (else_try),
                (this_or_next|eq, ":rand", 26),
                (this_or_next|eq, ":rand", 27),
                (eq, ":rand", 28),
                (party_get_current_terrain, ":terrain", "p_main_party"),
                (this_or_next|eq, ":terrain", rt_desert),
                (eq, ":terrain", rt_desert_forest),
                (jump_to_menu,"mnu_event_02_desert"),
            (else_try),
                (eq, "$g_is_emperor", 1),
                (this_or_next|eq, ":rand", 29),
                (eq, ":rand", 30),
                (party_get_current_terrain, ":terrain", "p_main_party"),
                (this_or_next|eq, ":terrain", rt_steppe_forest),
                (this_or_next|eq, ":terrain", rt_mountain_forest),
                (this_or_next|eq, ":terrain", rt_snow_forest),
                (eq, ":terrain", rt_forest),
                (jump_to_menu,"mnu_event_27_normal"),
            (else_try),
                (eq, ":rand", 31),
                (party_get_current_terrain, ":terrain", "p_main_party"),
                (this_or_next|eq, ":terrain", rt_steppe_forest),
                (this_or_next|eq, ":terrain", rt_mountain_forest),
                (this_or_next|eq, ":terrain", rt_snow_forest),
                (eq, ":terrain", rt_forest),
                (jump_to_menu,"mnu_event_werewolf"),
            (else_try),
                (eq, ":rand", 32),
                (party_get_current_terrain, ":terrain", "p_main_party"),
                (this_or_next|eq, ":terrain", rt_steppe_forest),
                (this_or_next|eq, ":terrain", rt_mountain_forest),
                (this_or_next|eq, ":terrain", rt_snow_forest),
                (eq, ":terrain", rt_forest),
                (jump_to_menu,"mnu_event_witch"),
            (else_try),
                (ge, "$player_piety", 150),
                (jump_to_menu,"mnu_event_good_omen"),
            (else_try),
                (le, "$player_piety", 75),
                (jump_to_menu, "mnu_event_bad_omen"),
            (try_end),
        (else_try),##events if you are no one
            (store_random_in_range, ":rand", 0, 31),
            (try_begin),
                (eq, ":rand", 1),
                (jump_to_menu, "mnu_event_16_normal"),
            (else_try),
                (eq, ":rand", 2),
                (jump_to_menu, "mnu_event_16_normal"),
            (else_try),
                (eq, ":rand", 10),
                (jump_to_menu,"mnu_event_13_normal"),
            (else_try),
                (eq, ":rand", 15),
                (jump_to_menu,"mnu_event_14_normal"),
            (else_try),
                (eq, ":rand", 20),
                (jump_to_menu,"mnu_event_15_normal"),
            (else_try),
                (eq, ":rand", 21),
                (jump_to_menu,"mnu_event_21_normal"),
            (else_try),
                (eq, ":rand", 22),
                (jump_to_menu,"mnu_event_22_normal"),
            (else_try),
                (eq, ":rand", 3),
                (jump_to_menu,"mnu_event_03_normal"),
            (try_end),
        (try_end),
    (else_try),
        (party_slot_eq, "p_main_party", slot_party_on_water, 1),#not on water
        (store_random_in_range, ":rand", 1, 16),
        (try_begin),
            (eq, ":rand", 1),
            (jump_to_menu,"mnu_event_1_sea"),
        (else_try),
            (eq, ":rand", 2),
            (jump_to_menu,"mnu_event_2_sea"),
        (else_try),
            (eq, ":rand", 3),
            (jump_to_menu,"mnu_event_3_sea"),
        (else_try),
            (eq, ":rand", 4),
            (jump_to_menu,"mnu_event_4_sea"),
        (try_end),
    (try_end),
]),

#stability for the ai emperor nero claudius
## replaced with several unique events, telling some interesting storys about the life of the emperor
(75,[
    (call_script, "script_execude_debug_message", 133),
    (neq, "$g_player_is_captive", 1),
    (store_current_hours, ":hours"),
    (ge, ":hours", 120),
    (troop_slot_eq, "trp_kingdom_7_lord", slot_troop_occupation, slto_kingdom_hero),
    (faction_slot_eq, "fac_kingdom_7", slot_faction_leader, "trp_kingdom_7_lord"),
    (party_slot_eq, "p_town_6", slot_town_lord, "trp_kingdom_7_lord"),
    (store_random_in_range, ":rand", 0, 100),
    (lt, ":rand", 10),
    (try_begin),
        (eq, "$nero_events", 0),
        (jump_to_menu, "mnu_event_1"),
        (val_add, "$nero_events", 1),
    (else_try),
        (eq, "$nero_events", 1),
        (jump_to_menu, "mnu_event_6"),
        (val_add, "$nero_events", 1),
    (else_try),
        (eq, "$nero_events", 2),
        (jump_to_menu, "mnu_event_3"),
        (val_add, "$nero_events", 1),
    (else_try),
        (eq, "$nero_events", 3),
        (jump_to_menu, "mnu_event_4"),
        (val_add, "$nero_events", 1),
    (else_try),
        (eq, "$nero_events", 4),
        (jump_to_menu, "mnu_event_5"),
        (val_add, "$nero_events", 1),
    (else_try),
        (eq, "$nero_events", 5),
        (ge, "$g_fire", 1),
        (jump_to_menu, "mnu_event_2"),
        (val_add, "$nero_events", 1),
    (else_try),
        (eq, "$nero_events", 6),
        (jump_to_menu, "mnu_event_7"),
        (val_add, "$nero_events", 1),
    (else_try),
        (eq, "$nero_events", 7),
        (jump_to_menu, "mnu_event_8"),
        (val_add, "$nero_events", 1),
    (try_end),
]),

(24,[
    (call_script, "script_execude_debug_message", 134),
    ###Jewish rebellion events
    (try_begin),
        (this_or_next|eq, "$g_campaign_type", g_campaign_king),
        (this_or_next|eq, "$g_campaign_type", g_campaign_lord),
        (eq, "$g_campaign_type", g_campaign_sandbox),
        (neq, "$jewish_revolt", 1),
        (store_faction_of_party, ":fac", "p_town_19"),
        (neq, ":fac", "fac_kingdom_17"),
        (neg|faction_slot_eq, "fac_kingdom_17", slot_faction_state, sfs_active),
        (party_get_slot, ":lord", "p_town_19", slot_town_lord),
        (ge, ":lord", 1),
        (try_begin),
            (store_current_hours, ":hours"),
            (call_script, "script_game_get_date_text", 0, ":hours"),
            (ge, reg2, 68),
            ##(faction_slot_eq, "$players_kingdom", slot_faction_culture, "fac_culture_7"),# player is roman
            (call_script, "script_add_notification_menu", "mnu_event_jerusalem_4",0,0),
        (else_try),
            (gt, "$g_civil_war", 1),
            (call_script, "script_add_notification_menu", "mnu_event_jerusalem_4",0,0),
        (try_end),
    (try_end),
]),

(50,[
    (call_script, "script_execude_debug_message", 135),
    (neq, "$g_player_is_captive", 1),
    (store_current_hours, ":hours"),
    (ge, ":hours", 120),
    (store_faction_of_party, ":fac", "p_town_19"),
    (neq, ":fac", "fac_kingdom_17"),
    (neq, "$jewish_revolt", 1),
    (assign, ":revolt_chance", 6),
    (try_begin),
        (eq, "$edict5", 2),
        (assign, ":revolt_chance", 1),
    (try_end),
    (party_get_slot, ":lord", "p_town_19", slot_town_lord),
    (ge, ":lord", 1),
    (store_random_in_range, ":rand", 0, 101),
    (try_begin),
        (lt, ":rand", ":revolt_chance"),
        (store_random_in_range, ":r", 0, 3),
        (try_begin),
            (eq, ":r", 0),
            (call_script, "script_add_notification_menu", "mnu_event_jerusalem_1",0,0),
        (else_try),
            (eq, ":r", 1),
            (call_script, "script_add_notification_menu", "mnu_event_jerusalem_2",0,0),
        (else_try),
            (eq, ":r", 2),
            (call_script, "script_add_notification_menu", "mnu_event_jerusalem_3",0,0),
        (try_end),
    (try_end),
]),

(ti_on_switch_to_map,[
    (call_script, "script_execude_debug_message", 136),
    (try_begin),
        (faction_slot_eq, "fac_kingdom_7", slot_faction_icon, 0),
        (call_script, "script_set_faction_icons"),
    (try_end),
    (try_begin),
        (neq, "$g_corruption_check", ACAN_CORRUPT_SAVE_CHECK),
        (jump_to_menu, "mnu_save_file_corrupted"),
    # (else_try),
    #     (neg|troop_slot_eq, "trp_global_variables", g_corruption_check, ACAN_CORRUPT_SAVE_CHECK),
    #     (jump_to_menu, "mnu_save_file_corrupted"),
    (try_end),
    (try_begin),
        (neq, "$players_kingdom", "fac_kingdom_7"),
        (ge, "$g_rank", 1),
        (assign, "$g_rank", 0),#player is part of Roman faction as Lord
        (display_log_message, "@You are no longer part of Rome and lost your rank."),
    (try_end),
    #(faction_set_note_available, "fac_neutral", 0),##some bug which I don't know why it happens
    (stop_all_sounds, 0), #to fix looping sounds not stopping
    ##seasonal shader START
    #shader
    (set_fixed_point_multiplier, 1),
    (set_shader_param_float, "@vSeason", "$shader_season"),
    (try_begin),
        (ge, "$cheat_mode", 1),
        (display_message, "@Shaders set"),
    (try_end),

    (try_for_range, ":item", legendary_items_begin, legendary_items_end),
        (item_slot_eq, ":item", slot_item_discovered, -1),
        (this_or_next|troop_has_item_equipped, "trp_player",  ":item"),
        (player_has_item, ":item"),
        (store_current_hours, ":hours"),
        (item_set_slot, ":item", slot_item_discovered, ":hours"),
    (try_end),

    (try_begin),
        (party_get_num_prisoners, ":prisoners", "p_main_party"),
        (call_script, "script_game_get_party_prisoner_limit", "p_main_party"),
        (assign, ":limit", reg0),
        (store_sub, ":too_many_prisoners", ":prisoners", ":limit"),
        # (assign, reg22, ":prisoners"),
        # (assign, reg23, ":limit"),
        # (assign, reg24, ":too_many_prisoners"),
        # (display_message, "@prisoners {reg22},limit {reg23},too_many_prisoners {reg24}"),
        (gt, ":too_many_prisoners", 0),

        (set_spawn_radius, 2),
        (call_script, "script_spawn_party","p_main_party","pt_looters_2"),
        (assign, ":rebel_party", reg0),
        (party_add_members, ":rebel_party", "trp_slave_warrior", ":too_many_prisoners"),
        (assign, reg22, ":too_many_prisoners"),
        (display_message, "@{reg22} of your prisoners escaped from your party!", color_bad_news),
        (call_script, "script_set_parties_around_player_ignore_player", 4, 12),

        (party_get_num_prisoner_stacks, ":num_prisoner_stacks","p_main_party"),
        (try_for_range_backwards, ":stack_no", 0, ":num_prisoner_stacks"),
            (party_prisoner_stack_get_troop_id, ":stack_troop","p_main_party",":stack_no"),
            (neg|troop_is_hero, ":stack_troop"),
            (party_remove_prisoners, "p_main_party", ":stack_troop", ":too_many_prisoners"),
            (assign, ":guys_removed", reg0),
            (val_sub, ":too_many_prisoners", ":guys_removed"),
            (le, ":too_many_prisoners", 0),
            (assign, ":num_prisoner_stacks", -1),#break loop
        (try_end),
    (try_end),

    (try_begin),#to fix an issue where parties are attached to main party after battle
        (party_get_num_attached_parties, ":num_attached_parties",  "p_main_party"),
        (ge, ":num_attached_parties", 1),
        (try_for_range_backwards, ":attached_party_rank", 0, ":num_attached_parties"),
            (party_get_attached_party_with_rank, ":attached_party", "p_main_party", ":attached_party_rank"),
            (neg|party_slot_ge,":attached_party",slot_party_time_service,1),#not following player orders
            #check for quests
            (assign, ":c",0),
            (try_begin),
                (check_quest_active, "qst_grain_supply"),
                (quest_slot_eq, "qst_grain_supply", slot_quest_current_state, 1),
                (quest_slot_eq, "qst_grain_supply", slot_quest_target_party, ":attached_party"),
                (assign, ":c",1),
            (else_try),
                (check_quest_active, "qst_escort_merchant_caravan"),
                (quest_slot_eq, "qst_escort_merchant_caravan", slot_quest_current_state, 1),
                (quest_slot_eq, "qst_escort_merchant_caravan", slot_quest_target_party, ":attached_party"),
                (assign, ":c",1),
            (else_try),#is companion raider party
                (party_slot_eq, ":attached_party", slot_party_type, spt_companion_raider),
                (assign, ":c",1),
            (try_end),
            (eq, ":c",0),
            (party_detach, ":attached_party"),
            (party_relocate_near_party, ":attached_party", "p_main_party", 1),
            (party_set_slot,":attached_party",slot_party_time_service, -1),
            (str_store_party_name, s22, ":attached_party"),
            (display_message, "@{s22} has left your force.",message_alert),
        (try_end),
    (try_end),

    (try_begin),#freelancer
        # (check_quest_active, "qst_freelancing"),
        (quest_slot_ge, "qst_freelancing", slot_quest_freelancer_event_2, 1),
        (quest_set_slot, "qst_freelancing", slot_quest_freelancer_event_2, 0),
    (try_end),
    (try_begin),#freelancer
        #(check_quest_active, "qst_freelancing"),
        (quest_slot_ge, "qst_freelancing", slot_quest_freelancer_kill, 1),
        (quest_set_slot, "qst_freelancing", slot_quest_freelancer_kill, 0),
    (try_end),
    (try_begin),##freelancer camera fix
        (ge, "$enlisted_party", 1),
        (set_camera_follow_party, "$enlisted_party"),
        # (enable_party, "p_main_party"),
        # (party_relocate_near_party, "p_main_party","$enlisted_party", 1),
        # (disable_party, "p_main_party"),
        #(assign, "$g_infinite_camping", 1),
        (rest_for_hours_interactive, 24 * 365, 5, 1),
        #(display_message, "@Hello"),
        (party_is_active, "$enlisted_party"),
        (assign, "$g_move_heroes", 1),
        (call_script, "script_party_prisoners_add_party_prisoners", "$enlisted_party", "p_main_party"),
        (call_script, "script_party_remove_all_prisoners", "p_main_party"),
    (try_end),

    ##seasonal shader END
    ##costum legion
    (try_begin),
        # (map_free),
        (troop_get_inventory_slot, ":item", "trp_custom_troops_end", 10),
        (eq,":item","itm_velvet"),
        (call_script, "script_reload_custom_troops"),
        (troop_clear_inventory, "trp_custom_troops_end"),
        #(display_message, "@Load custom troops"),
    (try_end),
    ##fix player culture:
    (try_begin),
        (eq, "$g_is_emperor", 1),
        (neg|troop_slot_eq, "trp_player", slot_troop_culture, "fac_culture_7"),
        (troop_set_slot, "trp_player", slot_troop_culture, "fac_culture_7"),
        (display_message, "@As you are now Caesar Augustus, Princeps of Rome, you change your culture to Roman."),
    (try_end),
    ##honory titles for player faction Rome
    (try_begin),
        (eq, "$g_is_emperor", 1),
        (neg|faction_slot_eq, "fac_player_supporters_faction", slot_faction_has_nor_titles, 1),
        (faction_set_slot, "fac_player_supporters_faction", slot_faction_has_nor_titles, 1),
    (try_end),
    #set player faction to be imperial
    (try_begin),
        (eq, "$g_is_emperor", 1),
        (neg|faction_slot_eq, "fac_player_supporters_faction", slot_faction_government_type, gov_imperial),
        (faction_set_slot, "fac_player_supporters_faction", slot_faction_government_type, gov_imperial),
    (try_end),

    ##fix banners from players faction
    (try_begin),
        (faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
        (faction_get_slot, ":banner_mesh", "fac_player_supporters_faction", slot_faction_banner),
        (neq, ":banner_mesh", -1),#custom
        (neg|is_between, ":banner_mesh", banner_meshes_begin, banner_meshes_end_minus_one),
        (troop_get_slot, ":banner_mesh", "trp_player", slot_troop_banner_scene_prop),
        (gt, ":banner_mesh", 0),
        (val_add, ":banner_mesh", banner_meshes_begin),
        (val_sub, ":banner_mesh", banner_scene_props_begin),
        (faction_set_slot, "fac_player_faction", slot_faction_banner, ":banner_mesh"),
        (faction_set_slot, "fac_player_supporters_faction", slot_faction_banner, ":banner_mesh"),
        (display_message, "@Set Player kingdoms banner"),
    (try_end),

    ##fix banners for lords, if they got corrupted somehow
    (try_for_range, ":lord", active_npcs_begin, active_npcs_end),
        (store_troop_faction, ":kingdom_hero_faction", ":lord"),
        (is_between, ":kingdom_hero_faction", kingdoms_begin, kingdoms_end),
        (faction_slot_eq, ":kingdom_hero_faction", slot_faction_state, sfs_active),

        (troop_get_slot, ":banner_mesh", ":lord", slot_troop_banner_scene_prop),
        (try_begin),
            (eq, ":banner_mesh", -1),
            (troop_get_slot, ":banner_mesh_test", ":lord", slot_troop_custom_banner_map_flag_type),
            (ge, ":banner_mesh_test", 0),
            (val_add, ":banner_mesh_test", custom_banner_map_icons_begin),
        (else_try),
            (store_sub, ":banner_mesh_test", ":banner_mesh", banner_scene_props_begin),
            (val_add, ":banner_mesh_test", banner_map_icons_begin),
        (try_end),
        (neg|is_between, ":banner_mesh_test", "icon_custom_banner_01", "icon_banners_end"),

        (str_store_troop_name, s20, ":lord"),
        (assign, reg1, ":banner_mesh"),
        (display_log_message, "@Error: strange banner for {s20}, reset it. org: {reg1}"),
        (call_script, "script_set_troop_banner_according_to_faction", ":lord", ":kingdom_hero_faction"),
    (try_end),

    (troop_set_slot, "trp_global_variables", g_controlled, 0),##some
    #viking conquest stolen lyre quest
    (try_begin),
        (check_quest_active, "qst_blank_quest_10"),
        (quest_get_slot, ":target_troop", "qst_blank_quest_10", slot_quest_target_troop),
        (le, ":target_troop", 0),
        (quest_get_slot, ":center", "qst_blank_quest_10", slot_quest_target_center),
        (store_faction_of_party, ":faction", ":center"),
        (faction_get_slot, ":target_troop", ":faction", slot_faction_deserter_troop),
        (quest_set_slot, "qst_blank_quest_10", slot_quest_target_troop, ":target_troop"),
    (try_end),
    (try_for_parties, ":party_no"),
        (gt, ":party_no", last_static_party),
        ## fix latifundium not changing factions properly
        (party_slot_eq, ":party_no", slot_party_type, spt_latifundium),
        (party_get_slot, ":village", ":party_no", slot_village_bound_center),
        (store_faction_of_party, ":fac1", ":party_no"),
        (store_faction_of_party, ":fac2", ":village"),
        (try_begin),
            (party_is_active, ":party_no"),
            (neq, ":fac1", ":fac2"),
            (party_set_faction, ":party_no", ":fac2"),
        (else_try),
            (is_between, ":party_no", "p_temp_party", last_static_party),
            (str_store_party_name, s1, ":village"),
            (assign, reg1, ":party_no"),
            (display_message, "@{s1} has a bugged slot_center_has_latifundium ({reg1}), reset it to 0"),
            (party_set_slot, ":village", slot_center_has_latifundium, 0),
        (try_end),
    # piggyback: fixing some slots of port_parties:
    (else_try),
        (party_get_template_id, ":party_template_id", ":party_no"),
        (eq, ":party_template_id", "pt_port"),
        (party_set_slot, ":party_no", slot_party_on_water, 1),
        (neg|party_slot_eq, ":party_no", slot_village_state, 0), #for VC-2085
        (call_script, "script_village_set_state", ":party_no", 0),
    (try_end),
]),

(24,[
    (call_script, "script_execude_debug_message", 137),
    (try_begin),  #senate system
        (troop_get_slot, ":days", "trp_senator_dummy", slot_senate_next_meeting),
        (val_sub, ":days", 1),
        (troop_set_slot, "trp_senator_dummy",slot_senate_next_meeting, ":days"),
        (try_begin),
            (eq, ":days", 3),
            (eq, "$g_show_senate_meeting", 1),
            (eq, "$enlisted_party", -1),#no freelancer
            (store_faction_of_party, ":fac", "p_town_6"),
            (eq, ":fac", "$players_kingdom"),
            (neg|party_slot_ge, "p_town_6", slot_party_looted_left_days, 1),
            (call_script, "script_add_notification_menu", "mnu_notification_senate_meeting", 0, 0),
        (else_try),
            (eq, ":days", 0),
            (store_faction_of_party, ":fac", "p_town_6"),
            (eq, ":fac", "$players_kingdom"),
            (neg|party_slot_ge, "p_town_6", slot_party_looted_left_days, 1),
            (try_begin),
                (eq, "$g_show_senate_meeting", 1),
                (eq, "$enlisted_party", -1),#no freelancer
                (display_message, "@The senate meeting has started"),
            (try_end),
            (store_random_in_range, ":topic", 0, 5),#1,2,3
            (try_begin),
                (neg|party_slot_ge, "p_town_6", slot_town_prosperity, 50),
                (assign, ":topic", topic_grain),
            (try_end),
            (troop_set_slot, "trp_senator_dummy", slot_senate_topic, ":topic"),
            (troop_set_slot, "trp_senator_dummy", slot_senate_topic_opinion, -11),
            ##decide which opinion the senate has
            (try_begin),
                (this_or_next|eq, ":topic", topic_slaves),
                (eq, ":topic", topic_nobles),
                (store_faction_of_party, ":fac", "p_town_6"),
                (assign, ":policy", dplmc_slot_faction_aristocracy),
                (try_begin),
                    (eq, ":topic", topic_slaves),
                    (assign, ":policy", dplmc_slot_faction_serfdom),
                (try_end),
                (faction_get_slot, ":level", ":fac", ":policy"),
                (try_begin),
                    (eq, ":level", 3),
                    (store_random_in_range, ":r", 0, 6),
                    (try_begin),
                        (lt, ":r", 4),
                        (troop_set_slot, "trp_senator_dummy", slot_senate_topic_opinion, -1),
                    (else_try),
                        (troop_set_slot, "trp_senator_dummy", slot_senate_topic_opinion, 0),
                    (try_end),
                (else_try),
                    (eq, ":level", -3),
                    (store_random_in_range, ":r", 0, 6),
                    (try_begin),
                        (lt, ":r", 4),
                        (troop_set_slot, "trp_senator_dummy", slot_senate_topic_opinion, 1),
                    (else_try),
                        (troop_set_slot, "trp_senator_dummy", slot_senate_topic_opinion, 0),
                    (try_end),
                (else_try),
                    (store_random_in_range, ":r", 0, 10),
                    (try_begin),
                        (lt, ":r", 4),
                        (troop_set_slot, "trp_senator_dummy", slot_senate_topic_opinion, -1),
                    (else_try),
                        (lt, ":r", 8),
                        (troop_set_slot, "trp_senator_dummy", slot_senate_topic_opinion, 1),
                    (else_try),
                        (troop_set_slot, "trp_senator_dummy", slot_senate_topic_opinion, 0),
                    (try_end),
                (try_end),
            (else_try),
                (eq, ":topic", topic_grain),
                (try_begin),
                    (neg|party_slot_ge, "p_town_6", slot_town_prosperity, 40),
                    (troop_set_slot, "trp_senator_dummy", slot_senate_topic_opinion, 1),
                (else_try),
                    (store_random_in_range, ":r", 0, 6),
                    (lt, ":r", 4),
                    (troop_set_slot, "trp_senator_dummy", slot_senate_topic_opinion, 1),
                (try_end),
            (try_end),
        (else_try),
            (lt, ":days", 0),
            (store_random_in_range, ":r", 6, 12),
            (troop_set_slot, "trp_senator_dummy",slot_senate_next_meeting, ":r"),
            (neg|party_slot_ge, "p_town_6", slot_party_looted_left_days, 1),
            (try_begin),
                (eq, "$g_show_senate_meeting", 1),
                (eq, "$enlisted_party", -1),#no freelancer
                (display_message, "str_senate_meeting_over"),
            (try_end),
        (try_end),
    (try_end),
    #towns, forts
    (try_for_range, ":curr_center", walled_centers_begin, walled_centers_end),

        (try_begin),#update rebel slot
            (party_get_slot, ":left_days", ":curr_center", slot_center_has_recently_rebelled),
            # (try_begin),
            (gt, ":left_days", 0),
            (val_sub, ":left_days", 1),
            (party_set_slot, ":curr_center", slot_center_has_recently_rebelled, ":left_days"),
            # (else_try),
            # (eq, ":left_days", 0),
            # (party_slot_ge, ":curr_center", slot_center_ongoing_rebellion, 1),#if the slot is not properly cleared
            # (party_set_slot, ":curr_center", slot_center_ongoing_rebellion, 0),
            # (try_end),
        (try_end),

        (try_begin),
            (party_get_slot, ":left_days", ":curr_center", slot_party_looted_left_days),
            (gt, ":left_days", 0),
            (val_sub, ":left_days", 1),
            (party_set_slot, ":curr_center", slot_party_looted_left_days, ":left_days"),
            (eq, ":left_days", 0),
            # (call_script, "script_change_party_icon_loot_state", ":curr_center", 0),
            (party_clear_particle_systems, ":curr_center"),
            # (party_get_slot, ":faction", ":curr_center", slot_center_ex_faction),
            # (party_set_faction, ":curr_center", ":faction"),
            # (call_script, "script_give_center_to_faction_aux", ":curr_center", ":faction"),
            # (party_get_slot, ":lord", ":curr_center", slot_center_old_lord_rebell),
            # (try_begin),
                # (eq, ":lord", "trp_player"),#not for the player since the player is always part of the player faction
                # (assign, ":lord_faction", "$players_kingdom"),
            # (else_try),
                # (ge, ":lord", 1),##if there is a lotd
                # (store_faction_of_troop, ":lord_faction", ":lord"),
            # (else_try),#if there is no lord
                # (assign, ":lord_faction", ":faction"),
            # (try_end),
            # (try_begin),
                # (neq, ":lord_faction", ":faction"),
                # (party_set_faction, ":curr_center", ":lord_faction"),
                # (str_store_party_name, s0, ":curr_center"),
                # (str_store_troop_name, s1, ":lord"),
                # (display_message, "@{s0}, with lord {s1} recovers. Lord and center faction do not match. Set to lord faction!!", color_bad_news),
            # (try_end),
            # (party_set_slot, ":curr_center", slot_town_lord, ":lord"),
            #(call_script, "script_give_center_to_lord_after_looted", ":curr_center",  ":lord", 1),
            (party_set_flags, ":curr_center", pf_hide_defenders, 0),
            (party_set_flags, ":curr_center", pf_show_faction, 1),
            (try_for_range, ":party_template_slot", slot_cohort_town_begin, slot_cohort_town_4+1),
                (party_get_slot, ":party_template", ":curr_center", ":party_template_slot"),
                (ge, ":party_template", 1),
                (call_script, "script_cohort_refil_garrison", ":curr_center", ":party_template", ":party_template_slot",0),
            (try_end),
            # (eq, "$cheat_mode", 1),
            (str_store_party_name, s0, ":curr_center"),
            # (store_faction_of_party, ":faction", ":curr_center"),#there is still this towns switching faction bug
            # (str_store_faction_name, s1, ":faction"),
            (display_log_message, "@{s0} has recovered from being raided."),

            (store_faction_of_party, ":fac_curr_center", ":curr_center"),
            (call_script, "script_faction_recalculate_strength", ":fac_curr_center"),
        (try_end),
    (try_end),
    #temples
    (try_for_range, ":curr_center", "p_german_temple_1", "p_end_temple"),
        (party_get_slot, ":left_days", ":curr_center", slot_party_looted_left_days),
        (gt, ":left_days", 0),
        (val_sub, ":left_days", 1),
        (party_set_slot, ":curr_center", slot_party_looted_left_days, ":left_days"),
        (eq, ":left_days", 0),
        (try_begin),
            (party_slot_ge, ":curr_center", slot_village_smoke_added, 1),
            (party_set_slot, ":curr_center", slot_village_smoke_added, 0),
            (party_clear_particle_systems, ":curr_center"),
        (try_end),
        # (eq, "$cheat_mode", 1),
        (str_store_party_name, s0, ":curr_center"),
        (display_message, "@{s0} has recovered from being raided."),
    (try_end),
    ##desert towns
    (try_for_range, ":desert_town", minor_towns_begin, minor_towns_end),
        (party_get_slot, ":left_days", ":desert_town", slot_party_looted_left_days),
        (gt, ":left_days", 0),
        (val_sub, ":left_days", 1),
        (party_set_slot, ":desert_town", slot_party_looted_left_days, ":left_days"),
        (eq, ":left_days", 0),
        (party_clear_particle_systems, ":desert_town"),
        # (party_get_slot, ":faction", ":desert_town", slot_center_ex_faction),
        # (party_set_faction, ":desert_town", ":faction"),
        # # (call_script, "script_give_center_to_faction_aux", ":curr_center", ":faction"),
        # (party_get_slot, ":lord", ":desert_town", slot_center_old_lord_rebell),
        # (try_begin),
            # (eq, ":lord", "trp_player"),#not for the player since the player is always part of the player faction
            # (assign, ":lord_faction", "$players_kingdom"),
        # (else_try),
            # (ge, ":lord", 1),##if there is a lotd
            # (store_faction_of_troop, ":lord_faction", ":lord"),
        # (else_try),#if there is no lord
            # (assign, ":lord_faction", ":faction"),
        # (try_end),
        # (try_begin),
            # (neq, ":lord_faction", ":faction"),
            # (party_set_faction, ":desert_town", ":lord_faction"),
            # (str_store_party_name, s0, ":desert_town"),
            # (str_store_troop_name, s1, ":lord"),
            # (display_message, "@{s0}, with lord {s1} recovers. Lord and center faction do not match. Set to lord faction!!", color_bad_news),
        # (try_end),
        # (party_set_slot, ":desert_town", slot_town_lord, ":lord"),
        #(call_script, "script_give_center_to_lord_after_looted", ":curr_center",  ":lord", 1),
        (party_set_flags, ":desert_town", pf_hide_defenders, 0),
        (party_set_flags, ":desert_town", pf_show_faction, 1),
        # # (eq, "$cheat_mode", 1),
        # (str_store_party_name, s0, ":desert_town"),
        # (store_faction_of_party, ":faction", ":desert_town"),#there is still this towns switching faction bug
        # (str_store_faction_name, s1, ":faction"),
        (display_log_message, "@{s0} has recovered from being raided."),
        (party_set_slot, ":desert_town", slot_center_capital, 35000),
    (try_end),
    ##germanic
    (try_begin),
        (troop_get_slot,":val","trp_norse_priest",slot_troop_days_on_mission),
        (neq,":val",0),#0 = can ask to sing about player
        (val_sub,":val",1),
        (val_max,":val",0),#to clear negative values (errors)
        (troop_set_slot,"trp_norse_priest",slot_troop_days_on_mission,":val"),
    (try_end),
    (try_begin),
        (troop_get_slot,":val","trp_celtic_druid",slot_troop_days_on_mission),
        (neq,":val",0),#0 = can ask to sing about player
        (val_sub,":val",1),
        (val_max,":val",0),#to clear negative values (errors)
        (troop_set_slot,"trp_celtic_druid",slot_troop_days_on_mission,":val"),
    (try_end),
    ##christian priests
    (try_begin),##praying with memercius (in the roman underground chapel)
        (troop_get_slot,":val","trp_memercius",slot_troop_days_on_mission),
        (neq,":val",0),#0 = can ask to sing about player
        (val_sub,":val",1),
        (val_max,":val",0),#to clear negative values (errors)
        (troop_set_slot,"trp_memercius",slot_troop_days_on_mission,":val"),
    (try_end),
]),
#siege warfare chief
(96,[
    (call_script, "script_execude_debug_message", 138),
	  (try_begin),
        (eq, "$g_empieza_asedio", 1),
        (try_begin),
            (eq, "$g_traicion_interna", 1),
            (assign, "$g_traicion_interna", 2),
        (try_end),
        (try_begin),
            (eq, "$g_infiltracion_interna", 1),
            (assign, "$g_infiltracion_interna", 2),
        (try_end),
		(try_end),
    #pig backing
    (troop_set_slot, "trp_global_variables", g_financ_event, 0),
    (troop_set_slot, "trp_global_variables", g_province_event,0),
    (troop_set_slot, "trp_global_variables", g_lord_event_possible, 0),
]),

#pillage and burn nearby farms and events for senate and if player is center lord
(48,[
    (call_script, "script_execude_debug_message", 139),
    (troop_set_slot, "trp_global_variables", g_senate_event_possible, 0),
    (try_begin),
        (eq, "$g_campos_cercanos", 1),
        (assign, "$g_campos_cercanos", 2),
    (try_end),
    (try_begin),#pig backing
        (check_quest_active, "qst_money_stinks"),
        (quest_get_slot, ":state", "qst_money_stinks", slot_quest_current_state),
        (ge, ":state", 2),
        (val_add, ":state", 1),
        (quest_set_slot, "qst_money_stinks", slot_quest_current_state, ":state"),
        (ge, ":state", 4),
        (jump_to_menu, "mnu_poop_message"),
    (try_end),
]),

(60,[
    (call_script, "script_execude_debug_message", 140),
    (eq, "$g_empieza_asedio", 1),
    (neq, "$g_siege_saneamiento", 2),
    (neq, "$g_player_is_captive", 1),
    (neg|troop_slot_ge, "trp_player", slot_troop_prisoner_of_party, 0),
    (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
    (assign, ":num_men", 0),
    (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_size, ":stack_size","p_main_party",":i_stack"),
        (val_add, ":num_men", ":stack_size"),
    (try_end),
    (gt, ":num_men", 30),
    (store_random_in_range, ":rand", 0, 6),
    (try_begin),
        (eq, ":rand", 0),
        (jump_to_menu,"mnu_event_siege_01"),
    (else_try),
        (eq, ":rand", 1),
        (jump_to_menu,"mnu_event_siege_02"),
    (else_try),
        (eq, ":rand", 2),
        (jump_to_menu,"mnu_event_siege_03"),
    (try_end),
]),

#eventos de guerrilla e infiltracion normales y rutina
(24,[
    (call_script, "script_execude_debug_message", 141),
    (eq, "$g_empieza_asedio", 1),
    (neq, "$g_player_is_captive", 1),
    (neg|troop_slot_ge, "trp_player", slot_troop_prisoner_of_party, 0),
    (call_script, "script_party_count_fit_for_battle", "p_main_party"),
    (gt, reg0, 40),
    (store_random_in_range, ":rand", 0, 40),
    (try_begin),
        (eq, ":rand", 0),
        (jump_to_menu,"mnu_event_siege_04"),
    (else_try),
        (eq, ":rand", 1),
        (jump_to_menu,"mnu_event_siege_05"),
    (else_try),
        (eq, ":rand", 2),
        (neg|party_slot_eq,"$g_encountered_party",slot_center_blockaded,2), #con block is no.
        (jump_to_menu,"mnu_event_siege_06"),
    (else_try),
        (eq, ":rand", 3),
        (jump_to_menu,"mnu_event_siege_07"),
    (else_try),
        (eq, ":rand", 4),
        (jump_to_menu,"mnu_event_siege_08"),
    (else_try),
        (eq, ":rand", 5),
        (jump_to_menu,"mnu_event_siege_09"),
    (else_try),
        (eq, ":rand", 6),
        (jump_to_menu,"mnu_event_siege_10"),
    (else_try),
        (eq, ":rand", 7),
        (jump_to_menu,"mnu_event_siege_12"),
    (else_try),
        (eq, ":rand", 8),
        (neg|party_slot_eq,"$g_encountered_party",slot_center_blockaded,2), #con block is no.
        (jump_to_menu,"mnu_event_siege_13"),
    (else_try),
        (eq, ":rand", 9),
        (neg|party_slot_eq,"$g_encountered_party",slot_center_blockaded,2), #con block is no.
        (jump_to_menu,"mnu_event_siege_14"),
    (else_try),
        (eq, ":rand", 10),
        (neg|party_slot_eq,"$g_encountered_party",slot_center_blockaded,2), #con block is no.
        (jump_to_menu,"mnu_event_siege_15"),
    (else_try),
        (eq, ":rand", 11),
        (neg|party_slot_eq,"$g_encountered_party",slot_center_blockaded,2), #con block is no.
        (jump_to_menu,"mnu_event_siege_16"),
    (else_try),
        (eq, ":rand", 12),
        (neg|party_slot_eq,"$g_encountered_party",slot_center_blockaded,2), #con block is no.
        (jump_to_menu,"mnu_event_siege_17"),
    (else_try),
        (eq, ":rand", 13),
        (jump_to_menu,"mnu_event_siege_18"),
    (else_try),
        (eq, ":rand", 14),
        (jump_to_menu,"mnu_event_siege_22"),
    (else_try),
        (eq, ":rand", 15),
        (jump_to_menu,"mnu_event_siege_24"),
    (else_try),
        (eq, ":rand", 16),
        (jump_to_menu,"mnu_event_siege_25"),
    (else_try),
        (eq, ":rand", 17),
        (jump_to_menu,"mnu_event_siege_26"),
    (try_end),
]),

(48,[
    (call_script, "script_execude_debug_message", 142),
    (ge, "$g_empieza_asedio", 1),
    (neq, "$g_player_is_captive", 1),
    (this_or_next|eq, "$g_cur_month", 12),
    (this_or_next|eq, "$g_cur_month", 1),
    (eq, "$g_cur_month", 2),
    (neg|troop_slot_ge, "trp_player", slot_troop_prisoner_of_party, 0),
    (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
    (assign, ":num_men", 0),
    (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_size, ":stack_size","p_main_party",":i_stack"),
        (val_add, ":num_men", ":stack_size"),
    (try_end),
    (gt, ":num_men", 30),
    (store_random_in_range, ":rand", 0, 6),
    (try_begin),
        (eq, ":rand", 0),
        (jump_to_menu,"mnu_event_siege_11"),
    (try_end),
]),

(24,[
    (call_script, "script_execude_debug_message", 143),
    (eq, "$g_empieza_asedio", 1),
    (neq, "$g_player_is_captive", 1),
    (neg|troop_slot_ge, "trp_player", slot_troop_prisoner_of_party, 0),
    (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
    (assign, ":num_men", 0),
    (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_size, ":stack_size","p_main_party",":i_stack"),
        (val_add, ":num_men", ":stack_size"),
    (try_end),
    (gt, ":num_men", 50),
    (store_random_in_range, ":rand", 0, 18),
    (try_begin),
        (eq, ":rand", 0),
        (neg|party_slot_eq,"$g_encountered_party",slot_center_blockaded,0), #con block yes.
        (jump_to_menu,"mnu_event_siege_19"),
    (else_try),
        (eq, ":rand", 1),
        (neg|party_slot_eq,"$g_encountered_party",slot_center_blockaded,0), #con block yes.
        (jump_to_menu,"mnu_event_siege_21"),
    (else_try),
        (eq, ":rand", 2),
        (neg|party_slot_eq,"$g_encountered_party",slot_center_blockaded,0), #con block yes.
        (jump_to_menu,"mnu_event_siege_23"),
    (else_try),
        (eq, ":rand", 3),
        (neg|party_slot_eq,"$g_encountered_party",slot_center_blockaded,0), #con block yes.
        (jump_to_menu,"mnu_event_siege_27"),
    (else_try),
        (eq, ":rand", 4),
        (neq, "$g_siege_method", 0),
        (jump_to_menu,"mnu_event_siege_20"),
    (else_try),
        (eq, ":rand", 5),
        (neg|party_slot_eq,"$g_encountered_party",slot_center_blockaded,0), #con block yes.
        (jump_to_menu,"mnu_event_siege_28"),
    (else_try),
        (eq, ":rand", 6),
        (neg|party_slot_eq,"$g_encountered_party",slot_center_blockaded,0), #con block yes.
        (jump_to_menu,"mnu_event_siege_29"),
    (try_end),
]),

###anadido Siege warfare, if player take far place, then break siege
(0.2,[
    (call_script, "script_execude_debug_message", 144),
    (eq, "$g_empieza_asedio", 1),
    #(gt,"$auto_besiege_town",0),
    (ge,"$g_player_besiege_town", 0),
    # (ge, "$g_siege_method", 1),
    (str_clear, s10),
    (store_distance_to_party_from_party, ":distance", "$g_player_besiege_town", "p_main_party"),
    (try_begin),
        (ge, ":distance", 2),
        (str_store_party_name_link, s10, "$g_player_besiege_town"),
        (display_message, "str_your_men_break_off_the_siege_of_s10_to_follow_you"),
        (call_script, "script_lift_siege", "$g_player_besiege_town", 0),
        (assign, "$g_player_besiege_town", -1),
    (else_try),
        (ge, ":distance", 1),
        (str_store_party_name_link, s10, "$g_player_besiege_town"),
        (display_message, "str_if_you_get_too_far_from_s10_your_siege_will_end"),
    (try_end),
]),

(24,[
    (call_script, "script_execude_debug_message", 145),
    (try_begin),
        (eq, "$g_cur_month", 12),
        (troop_slot_eq, "trp_global_variables", g_age, 0),
        (store_current_hours, ":hours"),
        (call_script, "script_game_get_date_text", 0, ":hours"),
        (eq, reg1, 7),
        (jump_to_menu, "mnu_age"),
    (try_end),
    (try_begin),
        (neq, "$g_cur_month", 12),
        (troop_slot_eq, "trp_global_variables", g_age, 1),
        (troop_set_slot, "trp_global_variables", g_age, 0),
    (try_end),
]),

(24*7,[
    (call_script, "script_execude_debug_message", 146),
    (try_begin),
        (eq, "$g_is_emperor", 0),
        (troop_slot_eq, "trp_kingdom_7_lord", slot_troop_occupation, slto_kingdom_hero),#he is active
        (troop_get_slot, ":neros_gold", "trp_kingdom_7_lord", slot_troop_wealth),
        (gt, ":neros_gold", 125000),
        (try_for_range, ":troop", active_npcs_begin, active_npcs_end),
            (troop_slot_eq, ":troop", slot_troop_occupation, slto_kingdom_hero),
            (store_faction_of_troop, ":faction", ":troop"),
            (eq, ":faction", "fac_kingdom_7"),
            (this_or_next|troop_slot_ge, ":troop", slot_troop_legion, 1),
            (troop_slot_ge, ":troop", slot_troop_aux, 1),
            (troop_get_slot, ":gold", ":troop", slot_troop_wealth),
            (lt, ":gold", 40000),
            (val_add, ":gold", 25000),
            (val_sub, ":neros_gold", 25000),
            # (try_begin),
            # (troop_slot_ge, "trp_player", slot_troop_renown, 200),
            # (assign, reg0, ":r"),
            # (display_message, "@The Emperor has given {reg0} denars for campagin."),
            # (try_end),
            (troop_set_slot, "trp_kingdom_7_lord", slot_troop_wealth, ":neros_gold"),
            (troop_set_slot, ":troop", slot_troop_wealth, ":gold"),
            (call_script, "script_troop_change_relation_with_troop", ":troop", "trp_kingdom_7_lord", 5),
        (try_end),
    (try_end),
]),

### random attack town garrison
(4.0*24.0/(number_of_walled_centers),[
    (call_script, "script_execude_debug_message", 147),
    (store_random_in_range, ":center", walled_centers_begin, walled_centers_end),
    ##pig bagging:
    (try_begin),
        (store_num_parties_of_template, reg22, "pt_slave_trader_ship"),
        (lt, reg22, 10),
        (party_slot_ge, ":center", slot_center_has_slave_market, 1),
        (set_spawn_radius, 0),
        (call_script, "script_spawn_party",":center", "pt_slave_trader_ship"),
        (assign, ":new_party", reg0),
        (party_set_slot, ":new_party", slot_party_home_center, ":center"),
        (party_set_slot, ":new_party", slot_party_ai_state, spai_trading_with_town),
        (call_script, "script_get_closest_town", ":center"),
        (assign, ":target_port_town", reg0),
        (party_set_slot, ":new_party", slot_party_ai_object, ":target_port_town"),
        (party_set_ai_behavior, ":new_party", ai_bhvr_travel_to_party),
        (party_set_ai_object, ":new_party", ":target_port_town"),
        # (str_store_party_name, s1, ":center"),
        # (display_message, "@Slavetrader created at {s1}."),
        (party_get_num_companions, ":number", ":new_party"),
        (store_random_in_range, ":rand", 0, 270),
        (val_mul, ":number", ":rand"),
        (val_div, ":number", 100),
        (val_div, ":number", 2),
        (party_add_prisoners,":new_party", "trp_slave" , ":number"),
        (party_add_prisoners,":new_party", "trp_slave_female" , ":number"),
    (try_end),

    (try_begin),
        (store_num_parties_of_template, reg22, "pt_traveller_ship"),
        (le,reg22, 10),
        (neg|party_slot_eq, ":center", slot_center_decree_control, 1),
        (set_spawn_radius, 0),
        (call_script, "script_spawn_party",":center", "pt_traveller_ship"),
        (assign, ":new_party", reg0),
        (party_set_slot, ":new_party", slot_party_home_center, ":center"),
        (party_set_slot, ":new_party", slot_party_ai_state, spai_trading_with_town),

        #(str_store_party_name, s1, ":center"),
        #(display_message, "@Traveler created at {s1}."),
        (call_script, "script_get_closest_town", ":center"),
        (assign, ":target_port_town", reg0),
        (party_set_slot, ":new_party", slot_party_ai_object, ":target_port_town"),
        (party_set_ai_behavior, ":new_party", ai_bhvr_travel_to_party),
        (party_set_ai_object, ":new_party", ":target_port_town"),
    (try_end),

    (try_begin),
        (neg|party_slot_ge, ":center", slot_party_looted_left_days, 1),
        (party_slot_eq, ":center", slot_center_can_rebell, 1),
        (neg|party_slot_ge, ":center", slot_center_has_recently_rebelled, 40),
        (party_slot_eq, ":center", slot_center_is_besieged_by, -1),
        (store_faction_of_party, ":f", ":center"),
        (party_get_slot, ":f2", ":center", slot_center_original_faction),
        (neq, ":f", ":f2"),
        (neq, ":f", "fac_neutral"),
        (faction_get_slot, ":culture", ":f", slot_faction_culture),
        (neg|party_slot_eq, ":center",slot_center_culture, ":culture"),
        (assign, ":chance", 40),
        #(display_message, "@1"),
        ##decrees help
        (try_begin),
            (party_slot_eq, ":center", slot_center_decree_curfew, 1),
            (val_sub, ":chance", 6),
        (try_end),
        (try_begin),
            (party_slot_eq, ":center", slot_center_decree_law_enforcement, 1),
            (val_sub, ":chance", 6),
        (try_end),

        (try_begin),
            (party_slot_eq, ":center", slot_center_decree_control, 1),
            (val_sub, ":chance", 6),
        (try_end),

        (try_begin),
            (party_get_slot, ":lord", ":center", slot_town_lord),
            (ge, ":lord", 0),
            (troop_get_slot, ":lord_culture", ":lord", slot_troop_culture),
            (party_slot_eq, ":center", slot_center_culture, ":lord_culture"),
            (val_sub, ":chance", 10),
        (try_end),

        (store_random_in_range, ":rand_number", 0, 100),
        # (assign, reg40, ":rand_number"),
        # (assign, reg41, ":chance"),
        # (str_store_party_name, s20, ":center"),
        # (display_message, "@{s20}, rand: {reg40}, chance: {reg41}"),
        (le, ":rand_number", ":chance"),

        (try_begin),
            (store_random_in_range, ":str", 6, 11),
            #(call_script, "script_inflict_casualties_to_party", ":center", ":str"),
            (call_script, "script_party_inflict_attrition", ":center", ":str"),
            (str_store_party_name, s40, ":center"),
            (display_message, "@ The garrison of {s40} was attacked by groups of rebels!", message_negative),
        (try_end),
    (try_end),
]),

(4.0*24.0/(number_of_walled_centers),[
    (call_script, "script_execude_debug_message", 148),
    (store_random_in_range, ":center", walled_centers_begin, walled_centers_end),

    (party_slot_eq, ":center", slot_center_can_rebell, 1),
    (party_slot_ge, ":center", slot_town_lord, 0),

    (party_slot_eq, ":center", slot_center_ongoing_rebellion, 0),

    (neg|party_slot_ge, ":center", slot_center_has_recently_rebelled, 1),
    (neg|party_slot_ge, ":center", slot_party_looted_left_days, 1),
    (party_slot_eq, ":center", slot_center_is_besieged_by, -1),

    (store_faction_of_party, ":faction", ":center"),
    (party_get_slot, ":faction_org", ":center", slot_center_original_faction),
    (neq, ":faction", ":faction_org"),
    # (faction_get_slot, ":culture", ":faction_org", slot_faction_culture),
    (faction_get_slot, ":culture_overlord", ":faction", slot_faction_culture),
    (neg|party_slot_eq, ":center", slot_center_culture, ":culture_overlord"),
    (store_party_size, ":size", ":center"),
    #(display_message, "@Check1"),
    (try_begin),
        (party_slot_eq, ":center", slot_party_type, spt_castle),
        (try_begin),
            (is_between, ":size", 0, 51),
            (assign, ":chance", 50),
        (else_try),
            (is_between, ":size", 51, 120),
            (assign, ":chance", 25),
        (else_try),
            (is_between, ":size", 120, 220),
            (assign, ":chance", 16),
        (else_try),
            (is_between, ":size", 220, 400),
            (assign, ":chance", 10),
        (else_try),
            (assign, ":chance", 5),
        (try_end),
    (else_try),
        (try_begin),
            (is_between, ":size", 0, 51),
            (assign, ":chance", 50),
        (else_try),
            (is_between, ":size", 51, 120),
            (assign, ":chance", 35),
        (else_try),
            (is_between, ":size", 120, 220),
            (assign, ":chance", 25),
        (else_try),
            (is_between, ":size", 220, 400),
            (assign, ":chance", 18),
        (else_try),
            (is_between, ":size", 400, 700),
            (assign, ":chance", 10),
        (else_try),
            (is_between, ":size", 700, 850),
            (assign, ":chance", 7),
        (else_try),
            (assign, ":chance", 4),
        (try_end),
    (try_end),
    ###lord culture is the same as town culture helps
    (try_begin),
        (party_get_slot, ":lord", ":center", slot_town_lord),
        (ge, ":lord", 0),
        (troop_get_slot, ":lord_culture", ":lord", slot_troop_culture),
        (party_slot_eq, ":center", slot_center_culture, ":lord_culture"),
        (val_sub, ":chance", 4),
    (try_end),
    ###decrees
    (try_begin),
        (party_slot_eq, ":center", slot_center_decree_curfew, 1),
        (val_sub, ":chance", 1),
    (try_end),
    (try_begin),
        (party_slot_eq, ":center", slot_center_decree_law_enforcement, 1),
        (val_sub, ":chance", 1),
    (try_end),
    (try_begin),
        (party_slot_eq, ":center", slot_center_decree_control, 1),
        (val_sub, ":chance", 1),
    (try_end),
    ###end decrees
    (gt, ":chance", 0),
    (store_random_in_range, ":rand", 0, 105),
    (try_begin),
        (le, ":rand", ":chance"),
        (try_begin),
            (faction_slot_eq, ":faction_org", slot_faction_culture, "fac_culture_1"),
            (assign, ":rebel_party_tem", "pt_dacians"),
        (else_try),
            (faction_slot_eq, ":faction_org", slot_faction_culture, "fac_culture_2"),
            (assign, ":rebel_party_tem", "pt_brits"),
        (else_try),
            (faction_slot_eq, ":faction_org", slot_faction_culture, "fac_culture_2_1"),
            (assign, ":rebel_party_tem", "pt_cals"),
        (else_try),
            (faction_slot_eq, ":faction_org", slot_faction_culture, "fac_culture_3"),
            (assign, ":rebel_party_tem", "pt_nomads"),
        (else_try),
            (faction_slot_eq, ":faction_org", slot_faction_culture, "fac_culture_4"),
            (assign, ":rebel_party_tem", "pt_germans"),
        (else_try),
            (display_log_message, "@Error on Rebellion simple trigger", message_negative),
            (assign, ":rebel_party_tem", "pt_nomads"),
        (try_end),
        (gt, ":rebel_party_tem", -1),
        (store_num_parties_of_template, ":num", ":rebel_party_tem"),
        (try_begin),
            (eq, ":num", 0),
            (store_relation, ":relation", ":faction", ":faction_org"),
            (assign, ":block", 0),
            (try_begin),
                (ge, ":relation", 0),
                (try_begin),
                    (faction_slot_eq, ":faction_org", slot_faction_state, sfs_active),
                    (call_script, "script_diplomacy_start_war_between_kingdoms", ":faction_org", ":faction", logent_faction_declares_war_to_declare_independence),
                (else_try),
                    (set_relation, ":faction", ":faction_org", -50),##they are hostile now
                (try_end),
            (else_try),
                (faction_slot_eq, ":faction_org", slot_faction_state, sfs_active),
                (store_add, ":war_damage_suffered_slot", ":faction_org", slot_faction_war_damage_inflicted_on_factions_begin),
                (val_sub, ":war_damage_suffered_slot", kingdoms_begin),
                (faction_get_slot, ":war_damage_suffered", ":faction", ":war_damage_suffered_slot"),
                (ge, ":war_damage_suffered", 500),
                (assign, ":block", 1),
            (try_end),
            (eq, ":block", 0),

            (set_spawn_radius, 2),
            (call_script, "script_spawn_party", ":center", ":rebel_party_tem"),
            (assign, ":rebel_party", reg0),
            (try_begin),
                (le, ":rebel_party", last_static_party),
                (display_log_message, "@ERROR ERROR ERROR: Wrong barbarian revolt party", message_negative),
            (try_end),
            (party_set_faction, ":rebel_party", ":faction_org"),

            # (party_set_ai_behavior, ":rebel_party", ai_bhvr_attack_party),
            # (party_set_ai_object, ":rebel_party", ":center"),
            (call_script, "script_party_set_ai_state", ":rebel_party", spai_besieging_center, ":center"),

            (faction_set_slot, ":faction_org", slot_faction_rebelling_against, ":faction"),

            (party_set_ai_behavior, ":rebel_party", ai_bhvr_attack_party),
            (party_set_ai_object, ":rebel_party", ":center"),
            (party_set_flags, ":rebel_party", pf_default_behavior, 1),
            (party_set_slot, ":rebel_party", slot_party_ai_substate, 1),

            (party_set_slot, ":rebel_party", slot_party_type, spt_rebellion),
            (party_set_slot, ":rebel_party", slot_rebellion_target, ":center"),
            (party_set_slot, ":center", slot_center_has_recently_rebelled, 65),
            (party_set_slot, ":center", slot_center_ongoing_rebellion, 1),
            (party_set_slot, ":center", slot_center_is_besieged_by, ":rebel_party"),
            (str_store_faction_name, s66, ":faction"),
            (str_store_party_name, s67, ":center"),

            (try_begin),
                (eq, ":faction", "$players_kingdom"),
                (dialog_box, "@A messenger informs you that a rebellion has started in {s67}", "@Rebellion"),
            (else_try),
                (display_log_message, "@The people of {s67} rise up against their overlords from {s66}!", message_negative),
            (try_end),
        (try_end),
    (try_end),
]),

(24.0*7.0, [
    (call_script, "script_execude_debug_message", 149),
    (neq, "$g_player_is_captive", 1),
    (eq, "$g_is_emperor", 1),
    (this_or_next|troop_slot_eq, "trp_avaritia", slot_troop_spouse, 4),
    (troop_slot_eq, "trp_avaritia", slot_troop_spouse, 5),
    (troop_slot_eq, "trp_avaritia", slot_troop_lover, 1),
    (try_begin),
        (troop_slot_eq, "trp_avaritia", slot_troop_father, 0),
        (troop_set_slot, "trp_avaritia", slot_troop_father, 1),
        (call_script, "script_add_notification_menu", "mnu_notification_event_emperor_avaritia", 0, 0),
    (else_try),
        (troop_slot_eq, "trp_avaritia", slot_troop_father, 2),
        (troop_slot_eq, "trp_avaritia", slot_troop_mother, 0),
        (call_script, "script_add_notification_menu", "mnu_criminal_activities_rome", 0, 0),
    (try_end),
]),

(275,[
    (call_script, "script_execude_debug_message", 150),
    (try_begin),
        #(party_slot_eq, "p_main_party", slot_party_on_water, 0),
        (neq, "$g_player_is_captive", 1),
        # (eq, "$g_is_emperor", 1),
        (faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
        (faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
        (neg|quest_slot_eq, "qst_become_pharao", slot_quest_object_state, 1),#only trigger once
        (store_faction_of_party, ":fac", "p_town_20"),#Alexandria
        (eq, ":fac", "$players_kingdom"),
        (store_faction_of_party, ":fac", "p_town_48"),#Thebae
        (eq, ":fac", "$players_kingdom"),
        (jump_to_menu, "mnu_emperor_event_pharaoh"),
    (else_try),
        (neq, "$g_player_is_captive", 1),
        (eq, "$g_is_emperor", 1),
        (troop_slot_ge, "trp_kingdom_7_lord", slot_troop_occupation, dplmc_slto_exile), # is dead or exile
        (neq, "$g_campaign_type", g_campaign_king),
        (quest_slot_eq, "qst_nero_reborn", slot_quest_current_state, 0),
        (call_script, "script_add_notification_menu", "mnu_emperor_event_fake_nero", 0, 0),#new
    (else_try),
        #(party_slot_eq, "p_main_party", slot_party_on_water, 0),
        (neq, "$g_player_is_captive", 1),
        (eq, "$g_is_emperor", 1),
        (le, "$g_civil_war", 0),
        (try_begin),##intro event of india trade
            (troop_slot_eq, "trp_diplomat_india", slot_india_event_displayed, 0),
            (troop_slot_eq, "trp_diplomat_india", slot_india_routes_intro_started, 0),
            (store_troop_gold,":g", "trp_player"),
            (ge, ":g", 200000),
            (jump_to_menu, "mnu_india_event_1"),
            (troop_set_slot, "trp_diplomat_india", slot_india_event_displayed, 1),
        (else_try),
            (troop_slot_eq, "trp_diplomat_india", slot_special_event_1, 0),# A new way to count if I have the event or not
            (store_troop_gold,":g", "trp_player"),
            (gt, ":g", 500000),
            (jump_to_menu, "mnu_emperor_event_purge_nero"),
        (else_try),
            (troop_slot_eq, "trp_diplomat_india", slot_special_event_2, 0),# A new way to count if I have the event or not
            (store_troop_gold,":g", "trp_player"),
            (gt, ":g", 50000),
            (store_distance_to_party_from_party, ":distance", "p_main_party", "p_town_6"),
            (le, ":distance", 20),
            (jump_to_menu, "mnu_emperor_event_latrones"),
        (else_try),
            (eq, "$g_judicio", 0),
            (jump_to_menu, "mnu_emperor_event_22"),#new
            (val_add, "$g_judicio", 1),
        (else_try),
            (eq, "$g_judicio", 1),
            (jump_to_menu, "mnu_emperor_event_00"),
            (val_add, "$g_judicio", 1),
        (else_try),
            (eq, "$g_judicio", 2),
            (jump_to_menu, "mnu_emperor_event_02"),
            (val_add, "$g_judicio", 1),
        (else_try),
            (eq, "$g_judicio", 3),
            (jump_to_menu, "mnu_emperor_event_21"),#new
            (val_add, "$g_judicio", 1),
        (else_try),
            (eq, "$g_judicio", 4),
            (jump_to_menu, "mnu_emperor_event_04"),
            (val_add, "$g_judicio", 1),
        (else_try),
            (eq, "$g_judicio", 5),
            (jump_to_menu, "mnu_emperor_event_05_coins"),
            (val_add, "$g_judicio", 1),
        (else_try),
            (eq, "$g_judicio", 6),
            (jump_to_menu, "mnu_emperor_event_01"),
            (val_add, "$g_judicio", 1),
        (else_try),
            (eq, "$g_judicio", 7),
            (jump_to_menu, "mnu_emperor_event_05"),
            (val_add, "$g_judicio", 1),
        (else_try),
            (eq, "$g_judicio", 8),
            (jump_to_menu, "mnu_emperor_event_06"),
            (val_add, "$g_judicio", 1),
        (else_try),
            (eq, "$g_judicio", 9),
            (jump_to_menu, "mnu_emperor_event_03"),
            (val_add, "$g_judicio", 1),
        (else_try),
            (eq, "$g_judicio", 10),
            (jump_to_menu, "mnu_emperor_event_24"),
            (val_add, "$g_judicio", 1),
        (else_try),
            (eq, "$g_judicio", 11),
            (jump_to_menu, "mnu_emperor_event_25"),
            (val_add, "$g_judicio", 1),
        (else_try),
            (eq, "$g_judicio", 12),
            (jump_to_menu, "mnu_emperor_event_26"),
            (val_add, "$g_judicio", 1),
        (else_try),
            (eq, "$g_judicio", 13),
            (jump_to_menu, "mnu_emperor_event_comet"),
            (val_add, "$g_judicio", 1),
        (try_end),
    (try_end),
    (try_begin),
        (lt, "$player_honor", -20),
        (store_random_in_range, ":r", 0, 100),
        (lt, ":r", 40),
        (display_message, "@It hurts Fortuna how dishonorable you are.", color_bad_news),
        (troop_get_slot, ":relation", "trp_fortuna", slot_troop_player_relation),
        (val_sub, ":relation", 1),
        (troop_set_slot, "trp_fortuna", slot_troop_player_relation, ":relation"),
    (else_try),
        (ge, "$player_honor", 20),
        (store_random_in_range, ":r", 0, 100),
        (lt, ":r", 40),
        (display_message, "@Fortuna is pleased seeing you being a honorable man.", color_good_news),
        (troop_get_slot, ":relation", "trp_fortuna", slot_troop_player_relation),
        (val_add, ":relation", 1),
        (troop_set_slot, "trp_fortuna", slot_troop_player_relation, ":relation"),
    (try_end),
]),

(24*7,[
    (call_script, "script_execude_debug_message", 151),
    (party_slot_eq, "p_main_party", slot_party_on_water, 0),
    (neq, "$g_player_is_captive", 1),

    (try_begin),
        (neq, "$g_campaign_type", g_campaign_king),
        (quest_slot_eq, "qst_nero_reborn", slot_quest_current_state, 1),
        (call_script, "script_add_notification_menu", "mnu_emperor_event_fake_nero_2", 0, 0),
    (try_end),

    (try_begin),
        (eq, "$g_is_emperor", 1),
        (troop_slot_ge, "trp_player", slot_troop_spouse, 1),
        (store_random_in_range, ":rand", 0, 100),
        (lt, ":rand", 8),
        (jump_to_menu, "mnu_nero_event_06"),
    (try_end),
    (try_begin),
        (troop_slot_eq, "trp_kingdom_7_lord", slot_troop_occupation, slto_kingdom_hero),
        (faction_slot_eq, "fac_kingdom_7", slot_faction_leader, "trp_kingdom_7_lord"),
        (neq, "$g_is_emperor", 1),
        (eq, "$players_kingdom", "fac_kingdom_7"),
        (store_random_in_range, ":rand", 0, 100),
        (gt, ":rand", 58),
        (store_random_in_range, reg37, 1, 8),
        (try_begin),
            (eq, reg37, 1),
            (jump_to_menu, "mnu_nero_event_01"),
        (else_try),
            (eq, reg37, 2),
            (jump_to_menu, "mnu_nero_event_02"),
        (else_try),
            (eq, reg37, 3),
            (jump_to_menu, "mnu_nero_event_06"),
        (else_try),
            (eq, reg37, 4),
            (jump_to_menu, "mnu_nero_event_04"),
        (else_try),
            (eq, reg37, 5),
            (jump_to_menu, "mnu_nero_event_05"),
        (else_try),
            (jump_to_menu, "mnu_nero_event_03"),
        (try_end),
    (try_end),
]),

(50,[
    (call_script, "script_execude_debug_message", 152),
    (party_slot_eq, "p_main_party", slot_party_on_water, 0),
    (neq, "$g_player_is_captive", 1),
    (eq, "$g_is_emperor", 1),
    (le, "$g_civil_war", 0),
    (neg|check_quest_active, "qst_blank_quest_21"),
    (try_begin),
        (eq, "$edict1", 0),
        (faction_get_slot, ":chance", "$players_kingdom", slot_faction_tax_rate),
        (val_mul, ":chance", ":chance"),
        (try_begin),
            (eq, "$control_tax", 1),  #tax control active
            (val_mul, ":chance", 2),
            (val_div, ":chance", 3),
        (try_end),
        (val_add, ":chance", "$g_unrest"),
        (store_random_in_range, ":rand", 0, 10250),
        (val_sub, ":rand", "$g_unrest"),
        (lt, ":rand", ":chance"),
        (store_random_in_range, ":center", towns_begin, towns_end),
        (try_begin),
            (store_faction_of_party, ":fac", ":center"),
            (eq, ":fac", "$players_kingdom"),
            (party_get_slot, ":lord", ":center", slot_town_lord),
            (gt, ":lord", 0),
            (neg|troop_slot_eq, ":lord", slot_troop_recently_blamed, 1),
            (store_random_in_range, ":r", 0, 6),
            (party_get_slot, ":province", ":center", slot_center_province),
            (store_add, ":slot", ":province", slot_province_senatorial_begin),
            (troop_get_slot, ":is_senatorial", "trp_province_array", ":slot"),
            (try_begin),
                (lt, ":r", 4),#0,1,2,3
                (this_or_next|troop_slot_eq, ":lord", slot_lord_reputation_type, lrep_quarrelsome),
                (this_or_next|troop_slot_eq, ":lord", slot_lord_reputation_type, lrep_cunning),
                (this_or_next|troop_slot_eq, ":lord", slot_lord_reputation_type, lrep_selfrighteous),
                (this_or_next|troop_slot_eq, ":lord", slot_lord_reputation_type, lrep_roguish),
                (troop_slot_eq, ":lord", slot_lord_reputation_type, lrep_debauched),
                (try_begin),
                    (lt, ":is_senatorial", 1),
                    (str_store_party_name, s40, ":center"),
                    (str_store_troop_name, s44, ":lord"),
                    (setup_quest_text,"qst_blank_quest_21"),
                    (quest_set_slot, "qst_blank_quest_21", slot_quest_target_center, ":center"),
                    (quest_set_slot, "qst_blank_quest_21", slot_quest_target_troop, ":lord"),
                    (quest_set_slot, "qst_blank_quest_21", slot_quest_target_dna, 0),
                    (quest_set_slot, "qst_blank_quest_21", slot_quest_expiration_days, 40),
                    (str_store_string, s2, "@Rumors say that {s44} has evaded taxes of {s40}."),
                    (call_script, "script_start_quest", "qst_blank_quest_21", "trp_player"),
                    (dialog_box, "@Rumors say that {s44} has evaded taxes of {s40}.", "@Rumors"),
                (else_try),
                    (call_script, "script_add_to_faction_bugdet", slot_faction_taxes_govern, "$players_kingdom", -10000),
                (try_end),
            (else_try),
                (store_skill_level, ":trade","skl_trade", ":lord"),
                (le, ":trade", 6),
                (call_script, "script_add_notification_menu", "mnu_miss_managment", ":center", ":lord"),
            (try_end),
            (troop_set_slot, ":lord", slot_troop_recently_blamed, 1),
        (try_end),
    (else_try),
        (faction_get_slot, ":probability", "$players_kingdom", slot_faction_emperors_bocket),
        (val_mul, ":probability", -1),
        (val_max, ":probability", 0),
        (val_div, ":probability", 5000),
        (val_add, ":probability", 100),
        (assign, reg10, ":probability"),
        # (display_message, "@probability = {reg10}"),
        (store_random_in_range, ":rand", 0, 10000),
        (le, ":rand", ":probability"),
        (call_script, "script_cf_select_random_walled_center_with_faction", "$players_kingdom", -1),
        (assign, ":center", reg0),
        (call_script, "script_add_notification_menu", "mnu_corrupt_provincial", ":center", 0),
    (try_end),
]),

###when player makes provincial tax to high, govenors will raise taxes too, which leads to unrest
(24*7,[
    (call_script, "script_execude_debug_message", 153),
    (neq, "$g_player_is_captive", 1),
    (eq, "$g_is_emperor", 1),
    # (le, "$g_civil_war", 0),
    (faction_get_slot, ":chance", "$players_kingdom", slot_faction_tax_rate),
    (val_mul, ":chance", ":chance"),
    (val_add, ":chance", "$g_unrest"),
    (try_begin),
        (eq, "$control_tax", 1),  #tax control active
        (val_mul, ":chance", 2),
        (val_div, ":chance", 3),
    (try_end),
    (store_random_in_range, reg34, 0, 11010),
    (lt, reg34, ":chance"),
    (call_script, "script_add_notification_menu", "mnu_event_tax_to_high",0,0),
]),

(48,[
    (call_script, "script_execude_debug_message", 154),
    (party_slot_eq, "p_main_party", slot_party_on_water, 0),
    (neq, "$g_player_is_captive", 1),
    (check_quest_active, "qst_blank_quest_19"),
    (quest_slot_eq, "qst_blank_quest_19", slot_quest_current_state, 100),
    (eq, "$g_is_emperor", 1),
    (eq, "$g_civil_war", -1),
    (eq, "$edict3", 0),
    (call_script, "script_add_notification_menu", "mnu_remember",0,0),
]),

(24,[
    (call_script, "script_execude_debug_message", 155),
    (party_slot_eq, "p_main_party", slot_party_on_water, 0),
    (neq, "$g_player_is_captive", 1),
    (check_quest_active, "qst_blank_quest_19"),
    (quest_slot_ge, "qst_blank_quest_19", slot_quest_current_state, 200),
    (eq, "$g_is_emperor", 1),
    (eq, "$g_civil_war", -1),
    (eq, "$edict3", 0),
    (quest_get_slot, ":time", "qst_blank_quest_19", slot_quest_current_state),
    (try_begin),
        (ge, ":time", 280),
        (call_script, "script_add_notification_menu", "mnu_remember2",0,0),
    (else_try),
        (val_add, ":time", 1),
    (try_end),
]),

(50,[
    (party_slot_eq, "p_main_party", slot_party_on_water, 0),
    (neq, "$g_player_is_captive", 1),
    (eq, "$g_is_emperor", 1),
    (le, "$g_civil_war", 0),
    (check_quest_active, "qst_blank_quest_21"),
    (neg|quest_slot_eq, "qst_blank_quest_21", slot_quest_target_dna, 200),
    (call_script, "script_add_notification_menu", "mnu_event_corruption",0,0),
]),

(24,[
    (call_script, "script_execude_debug_message", 156),
    (try_for_range,":hof","p_german_temple_1","p_end_temple"),
        (party_get_slot,":val",":hof",slot_center_volunteer_troop_type),
        (neq,":val",0),#0 = can recruit
        (val_sub,":val",1),
        (val_max,":val",0),#to clear negative values (errors)
        (party_set_slot,":hof",slot_center_volunteer_troop_type,":val"),
    (try_end),
    (try_begin),
        (party_get_slot,":val","p_delphi",slot_center_volunteer_troop_type),
        (neq,":val",0),#0 = can recruit
        (val_sub,":val",1),
        (val_max,":val",0),#to clear negative values (errors)
        (party_set_slot,"p_delphi",slot_center_volunteer_troop_type,":val"),
    (try_end),
    (try_begin),
        (party_get_slot,":val","p_olympia",slot_center_volunteer_troop_type),
        (neq,":val",0),#0 = can recruit
        (val_sub,":val",1),
        (val_max,":val",0),#to clear negative values (errors)
        (party_set_slot,"p_olympia",slot_center_volunteer_troop_type,":val"),
    (try_end),
    (try_begin),
        (party_get_slot,":val","p_stone_henge",slot_center_volunteer_troop_type),
        (neq,":val",0),#0 = can recruit
        (val_sub,":val",1),
        (val_max,":val",0),#to clear negative values (errors)
        (party_set_slot,"p_stone_henge",slot_center_volunteer_troop_type,":val"),
    (try_end),
	(try_for_range, ":troop", active_npcs_begin, active_npcs_end),
		(troop_slot_eq, ":troop", slot_troop_occupation, slto_kingdom_hero),
		(this_or_next|troop_slot_eq, ":troop", slot_troop_culture, "fac_culture_5"),
		(this_or_next|troop_slot_eq, ":troop", slot_troop_culture, "fac_culture_6"),
		(this_or_next|troop_slot_eq, ":troop", slot_troop_culture, "fac_culture_7"),
		(this_or_next|troop_slot_eq, ":troop", slot_troop_culture, "fac_culture_8"),
		(troop_slot_eq, ":troop", slot_troop_culture, "fac_culture_9"),
		(troop_get_slot, ":party", ":troop", slot_troop_leaded_party),
		(party_is_active, ":party"),
		(gt, ":party", 0),
		(party_slot_eq, ":party", slot_party_type, spt_kingdom_hero_party),
		(store_faction_of_party, ":faction", ":party"),
		(call_script, "script_get_closest_walled_center_of_faction", ":party", ":faction"),
		(assign, ":target", reg0),
        (is_between, ":target", walled_centers_begin, walled_centers_end),
		(party_get_num_prisoners, ":slaves", ":party"),
		(try_begin),
			(ge, ":slaves", 50),
			(set_spawn_radius, 1),
			(call_script, "script_spawn_party", ":party", "pt_prisoner_train_party"),
			(assign, ":slave_train", reg0),
            (try_begin),
                (is_between, ":slave_train", centers_begin, centers_end),#maybe this fixes centers changing factions
                (display_message, "@Error at the slave train spawn trigger!! YOU MUST REPORT THIS BUG", color_bad_news),
            (try_end),
			(party_set_slot, ":slave_train", slot_party_type, spt_prisoner_train),

            (try_begin),
                (le, ":slave_train", last_static_party),
                (display_log_message, "@ERROR ERROR ERROR: Wrong slave train party", message_negative),
            (else_try),
                (le, ":party", last_static_party),
                (display_log_message, "@ERROR ERROR ERROR: Wrong kingdom hero party", message_negative),
            (try_end),

			(party_set_faction, ":slave_train", ":faction"),
            (assign, "$g_move_heroes", 0),
			(call_script, "script_party_prisoners_add_party_prisoners", ":slave_train", ":party"),
            (call_script, "script_party_remove_all_prisoners", ":party"),

            (party_set_ai_object, ":slave_train", ":target"),
            (party_set_ai_behavior, ":slave_train", ai_bhvr_travel_to_party),
            (party_set_flags, ":slave_train", pf_default_behavior, 1),
            (party_set_bandit_attraction, ":slave_train", 75), ##ADDED THIS LINE
            (party_set_slot, ":slave_train", slot_party_ai_state, spai_retreating_to_center),
            (party_set_slot, ":slave_train", slot_party_ai_object, ":target"),
        (try_end),
    (try_end),
]),

(24.0*2.0*7.0/(number_of_walled_centers), [##means every two weeks on average
    (call_script, "script_execude_debug_message", 193),
	(store_random_in_range, ":center", walled_centers_begin, walled_centers_end),
    (neg|party_slot_ge, ":center", slot_party_looted_left_days, 1),
	##includes effects of new bildings
	#(store_random_in_range, ":r", 0, 100),
	(try_begin),
		#(ge, ":r", 50),
		(party_slot_ge, ":center", slot_center_rome_rebuild, 1),#colusseum maximum
		(party_get_slot, ":lord", ":center", slot_town_lord),
		(call_script, "script_change_center_prosperity",  ":center", 2),
		(call_script, "script_change_troop_renown", ":lord", 5),
		(try_begin),
			(eq, ":lord", "trp_player"),
			(str_store_party_name, s50, ":center"),
            (call_script, "script_get_improvement_details", slot_center_has_forum, ":center"),
			(display_message, "@Your {s0} adds prosperity to {s50} and fame to you.", message_positive),
			(call_script, "script_change_player_relation_with_center", ":center", 1),
		(try_end),
	(try_end),
	(try_begin),
		#(ge, ":r", 50),
		(party_slot_ge, ":center", slot_center_has_forum, 1),#forum
		(party_get_slot, ":lord", ":center", slot_town_lord),
		(call_script, "script_change_center_prosperity",  ":center", 1),
		(call_script, "script_change_troop_renown", ":lord", 3),
		(try_begin),
			(eq, ":lord", "trp_player"),
			(str_store_party_name, s50, ":center"),
            (call_script, "script_get_improvement_details", slot_center_has_forum, ":center"),
			(display_message, "@Your {s0} adds prosperity to {s50} and fame to you.", message_positive),
			(call_script, "script_change_player_relation_with_center", ":center", 1),
		(try_end),
	(try_end),
	(try_begin),
		#(ge, ":r", 50),
		(party_slot_ge, ":center", slot_center_has_theatre, 1),#theater
		(party_get_slot, ":lord", ":center", slot_town_lord),
		(call_script, "script_change_center_prosperity",  ":center", 1),
		(call_script, "script_change_troop_renown",":lord", 3),
		(try_begin),
			(eq, ":lord", "trp_player"),
			(str_store_party_name, s50, ":center"),
            (call_script, "script_get_improvement_details", slot_center_has_theatre, ":center"),
			(display_message, "@Your {s0} adds prosperity to {s50} and fame to you.", message_positive),
			(call_script, "script_change_player_relation_with_center", ":center", 2),
		(try_end),
	(try_end),

	(try_begin),
		(party_slot_ge, ":center", slot_center_decree_housing, 1),
		(party_get_slot, ":lord", ":center", slot_town_lord),
		(eq, ":lord", "trp_player"),
		(party_get_slot, ":cur_relation", ":center", slot_center_player_relation),
		(lt, ":cur_relation", 50),
		(call_script, "script_change_player_relation_with_center", ":center", 2),
        (str_store_party_name, s50, ":center"),
        (display_message, "@The social housing decree increases your relation with {s50}."),
	(try_end),
	(try_begin),
		(party_slot_ge, ":center", slot_center_decree_curfew, 1),
		(party_get_slot, ":lord", ":center", slot_town_lord),
		(eq, ":lord", "trp_player"),
		(party_get_slot, ":cur_relation", ":center", slot_center_player_relation),
		(ge, ":cur_relation", -25),
		(call_script, "script_change_player_relation_with_center", ":center", -1),
        (str_store_party_name, s50, ":center"),
        (display_message, "@The nightly curfew lowers your relation with {s50}."),
	(try_end),
	(try_begin),
		(party_slot_ge, ":center", slot_center_decree_control, 1),
		(party_get_slot, ":lord", ":center", slot_town_lord),
		(eq, ":lord", "trp_player"),
		(party_get_slot, ":cur_relation", ":center", slot_center_player_relation),
		(ge, ":cur_relation", -35),
		(call_script, "script_change_player_relation_with_center", ":center", -1),
        (str_store_party_name, s50, ":center"),
        (display_message, "@The decree about entry controls lowers your relation with {s50}."),
	(try_end),
	(try_begin),
		(party_slot_ge, ":center", slot_center_decree_law_enforcement, 1),
		(party_get_slot, ":lord", ":center", slot_town_lord),
		(eq, ":lord", "trp_player"),
		(party_get_slot, ":cur_relation", ":center", slot_center_player_relation),
		(ge, ":cur_relation", -70),
		(call_script, "script_change_player_relation_with_center", ":center", -3),
        (str_store_party_name, s50, ":center"),
        (display_message, "@The decree about law enforcement lowers your relation with {s50}."),
	(try_end),

	(try_begin),
		#(ge, ":r", 50),
		(party_slot_ge, ":center", slot_center_has_training_grounds, 1),#training ground
		(store_random_in_range, ":xp_addition_for_centers", 75000, 100001),
		(party_upgrade_with_xp, ":center", ":xp_addition_for_centers", 0),
        (party_get_slot, ":lord", ":center", slot_town_lord),
		(try_begin),
			(eq, ":lord", "trp_player"),
			(str_store_party_name, s50, ":center"),
            (call_script, "script_get_improvement_details", slot_center_has_training_grounds, ":center"),
			(display_message, "@Troops gain experience in {s50} due to your {s0}.", message_positive),
		(try_end),
	(try_end),
	(try_begin),
		#(ge, ":r", 50),
		(party_slot_ge, ":center", slot_center_has_triumph, 1),#triumphbogen
		(party_get_slot, ":lord", ":center", slot_town_lord),
		(call_script, "script_change_troop_renown",":lord", 6),
        (eq, ":lord", "trp_player"),
		(str_store_party_name, s50, ":center"),
        (call_script, "script_get_improvement_details", slot_center_has_triumph, ":center"),
		(display_message, "@Your {s0} in {s50} adds fame to you.", message_positive),
	(try_end),
	(try_begin),
		#(ge, ":r", 50),
		(party_slot_ge, ":center", slot_center_has_water, 1),#baths
		(party_get_slot, ":lord", ":center", slot_town_lord),
		(call_script, "script_change_center_prosperity",  ":center", 1),
		(call_script, "script_change_troop_renown",":lord", 3),
		(try_begin),
			(eq, ":lord", "trp_player"),
			(call_script, "script_change_player_relation_with_center", ":center", 1),
			(str_store_party_name, s50, ":center"),
            (call_script, "script_get_improvement_details", slot_center_has_water, ":center"),
			(display_message, "@Your {s0} in {s50} add prosperity and fame.", message_positive),
		(try_end),
	(try_end),
]),

(2.0*24.0*7.0/(number_of_centers), [##every two weeks on average
    (call_script, "script_execude_debug_message", 157),
    (store_random_in_range, ":center", centers_begin, centers_end),
    (party_slot_eq, ":center", slot_center_disease, 0),#hs no disease yet
    #determine disease chances
    (try_begin),
        (this_or_next|is_between, "$g_cur_month", 1, 4),
        (is_between, "$g_cur_month", 10, 13),
        (assign, ":chance", 3),
    (else_try),
        (is_between, "$g_cur_month", 4, 7),
        (assign, ":chance", 2),
    (else_try),
        (assign, ":chance", 1),
    (try_end),

    (party_get_slot, ":prosperity", ":center", slot_town_prosperity),
    (store_sub, ":bound", 200, ":prosperity"),

    (try_begin),
        (party_slot_ge, ":center", slot_center_decree_garbage_collection, 1),
        (val_add, ":bound", 50),
    (try_end),
    (try_begin),
        (party_slot_ge, ":center", slot_center_has_sewers, 1),
        (val_add, ":bound", 100),
    (try_end),
    (try_begin),
        (party_slot_ge, ":center", slot_center_has_hosptial, 1),
        (val_add, ":bound", 50),
    (try_end),
    (store_random_in_range, ":disaster", 0, ":bound"),
    (le, ":disaster", ":chance"),

    (store_random_in_range, ":disease_rand", 0, 15),
    (try_begin),
        (le, ":disease_rand", 2),
        (assign, ":disease", disease_consumption),
        (troop_get_slot,":number","trp_global_variables", g_number_consumption),
        (val_add, ":number", 1),
        (troop_set_slot,"trp_global_variables", g_number_consumption, ":number"),
    (else_try),
        (eq, ":disease_rand", 4),
        (assign, ":disease", disease_slow_fever),
        (troop_get_slot,":number","trp_global_variables", g_number_slow_fever),
        (val_add, ":number", 1),
        (troop_set_slot,"trp_global_variables", g_number_slow_fever, ":number"),
    (else_try),
        (eq, ":disease_rand", 6),
        (assign, ":disease", disease_camp_fever),
        (troop_get_slot,":number","trp_global_variables", g_number_camp_fever),
        (val_add, ":number", 1),
        (troop_set_slot,"trp_global_variables", g_number_camp_fever, ":number"),
    (else_try),
        (eq, ":disease_rand", 7),
        (assign, ":disease", disease_plague),
        (troop_get_slot,":number","trp_global_variables", g_number_plague),
        (val_add, ":number", 1),
        (troop_set_slot,"trp_global_variables", g_number_plague, ":number"),
    (else_try),
        (le, ":disease_rand", 9),
        (assign, ":disease", disease_measles),
        (troop_get_slot,":number","trp_global_variables", g_number_measles),
        (val_add, ":number", 1),
        (troop_set_slot,"trp_global_variables", g_number_measles, ":number"),
    (else_try),
        (le, ":disease_rand", 11),
        (assign, ":disease", disease_smallpox),
        (troop_get_slot,":number","trp_global_variables", g_number_smallpox),
        (val_add, ":number", 1),
        (troop_set_slot,"trp_global_variables", g_number_smallpox, ":number"),
    (else_try),
        (assign, ":disease", disease_greatpoxpox),
        (troop_get_slot,":number","trp_global_variables", g_number_greatpox),
        (val_add, ":number", 1),
        (troop_set_slot,"trp_global_variables", g_number_greatpox, ":number"),
    (try_end),

    (try_begin),
        (party_slot_ge, ":center", slot_center_has_hosptial, 1),
        (party_slot_ge, ":center", slot_center_has_sewers, 1),
        (val_sub, ":disease", 1),
    (try_end),

    (call_script, "script_get_event_details", ":disease"),
    (call_script, "script_change_center_prosperity", ":center", reg1),
    (party_set_slot, ":center", slot_center_disease, ":disease"),
    (try_begin),
        (party_slot_eq, ":center", slot_town_lord, "trp_player"),
        (call_script, "script_add_notification_menu", "mnu_epidemic_outbreak", ":center", 0),
    (try_end),
]),

#EVENT: WINTER
(24.0*7.0/(number_of_centers), [##every two weeks on average
    (call_script, "script_execude_debug_message", 158),
    (eq, "$g_cur_month", 12),# winter
    (store_random_in_range, ":center", centers_begin, centers_end),
    (party_slot_eq, ":center", slot_center_event, 0),#no event yet
    #determine disease chances
    (assign, ":good_chance", 4),
    (assign, ":bad_chance", 96),
    (call_script, "script_get_region_of_pos22", ":center"),
    (assign, ":cur_region", reg1),
    (try_begin),
        (party_get_current_terrain, ":terrain", ":center"),
        (neq, ":terrain", rt_desert_forest),
        (neq, ":terrain", rt_desert),
        (neq, ":cur_region", region_persianhill_desert),
        (neq, ":cur_region", region_north_africa),
        (neq, ":cur_region", region_nile),
        (neq, ":cur_region", region_nile_delta),
        (val_add, ":good_chance", 20),
        (val_add, ":bad_chance", 100),#no harsh winter there
    (else_try),
        (this_or_next|eq, ":cur_region", region_anatolia_central),
        (this_or_next|eq, ":cur_region", region_anatolia_coastal),
        (this_or_next|eq, ":cur_region", region_persianhill_green),
        (eq, ":cur_region", region_syria_palestine),
        (val_add, ":good_chance", 3),
        (val_add, ":bad_chance", 1),
    (else_try),
        (this_or_next|eq, ":cur_region", region_mountain_europe_alps),
        (this_or_next|eq, ":cur_region", region_mountain_europe_spain_france),
        (this_or_next|eq, ":cur_region", region_mountain_europe_bohemia),
        (eq, ":cur_region", region_mountain_europe_romania),
        (val_sub, ":bad_chance", 4),
        (val_sub, ":good_chance", 2),
    (else_try),
        (this_or_next|eq, party_slot_eq, ":center", slot_center_province, p_germ_herc),
        (this_or_next|eq, party_slot_eq, ":center", slot_center_province, p_germ_magna),
        (this_or_next|eq, party_slot_eq, ":center", slot_center_province, p_germ_sueb),
        (this_or_next|eq, party_slot_eq, ":center", slot_center_province, p_brit_brita),
        (eq, party_slot_eq, ":center", slot_center_province, p_brit_cale),
        (val_sub, ":bad_chance", 4),
    (try_end),

    (assign, ":season_event", 0),
    (store_random_in_range, ":random_variable", 0, 100),
    (try_begin),
        (le, ":random_variable", ":good_chance"),
        (assign, ":season_event", event_mild_winter),
    (else_try),
        (ge, ":random_variable", ":bad_chance"),
        (assign, ":season_event", event_harsh_winter),
    (try_end),

    (try_begin),
        (gt, ":season_event", 0),
        (call_script, "script_get_event_details", ":season_event"),
        # (assign, ":modifier", reg0),
        (call_script, "script_change_center_prosperity", ":center", reg1),
        (party_set_slot, ":center", slot_center_event, ":season_event"),

        (party_get_slot, ":accumulated_rents", ":center", slot_center_accumulated_rents),
        (val_mul, ":accumulated_rents", 75),
        (val_div, ":accumulated_rents", 100),
        (party_set_slot, ":center",slot_center_accumulated_rents, ":accumulated_rents"),
        (try_begin),
            (party_slot_eq, ":center", slot_town_lord, "trp_player"),
            (call_script, "script_add_notification_menu", "mnu_disaster_event", ":center", 0),
        (try_end),
        (str_store_party_name, s22, ":center"),
        # (try_begin),
        #     (ge, reg1, 0),
        #     (assign, ":colour", color_good_news),
        # (else_try),
        #     (assign, ":colour", color_bad_news),
        # (try_end),
        # (call_script, "script_get_event_details", ":season_event"),
        # (display_log_message, "@In {s22} has started a {s0}.", ":colour"),
        (try_begin),
            (eq, ":season_event", event_mild_winter),
            (troop_get_slot,":number","trp_global_variables", g_number_mild_winters),
            (val_add, ":number", 1),
            (troop_set_slot,"trp_global_variables", g_number_mild_winters, ":number"),
        (else_try),
            (eq, ":season_event", event_harsh_winter),
            (troop_get_slot,":number","trp_global_variables", g_number_harsh_winters),
            (val_add, ":number", 1),
            (troop_set_slot,"trp_global_variables", g_number_harsh_winters, ":number"),
        (try_end),
    (try_end),
]),

#EVENT: HARVEST
(24.0*7.0/(number_of_villages), [##every two weeks on average
    (call_script, "script_execude_debug_message", 159),
    (is_between, "$g_cur_month", 7, 9),# harvesting season
    (store_random_in_range, ":center", villages_begin, villages_end),
    (party_slot_eq, ":center", slot_center_event, 0),#no event yet
    #determine disease chances
    (assign, ":good_chance", 2),
    (assign, ":bad_chance", 98),
    (try_begin),
        (party_slot_ge, ":center", slot_center_has_irigation, 1),
        (val_add, ":good_chance", 1),
    (try_end),
    (try_begin),
        (party_slot_ge, ":center", slot_center_has_farms, 1),
        (val_add, ":good_chance", 1),
    (try_end),

    (assign, ":harvest_event", 0),
    (store_random_in_range, ":random_variable", 0, 100),
    (try_begin),
        (le, ":random_variable", ":good_chance"),
        (assign, ":harvest_event", event_good_harvest),
    (else_try),
        (ge, ":random_variable", ":bad_chance"),
        (assign, ":harvest_event", event_poor_harvest),
    (try_end),

    (try_begin),
        (gt, ":harvest_event", 0),
        (call_script, "script_get_event_details", ":harvest_event"),
        # (assign, ":modifier", reg0),
        (call_script, "script_change_center_prosperity", ":center", reg1),
        (party_set_slot, ":center", slot_center_event, ":harvest_event"),

        (party_get_slot, ":accumulated_rents", ":center", slot_center_accumulated_rents),
        (val_mul, ":accumulated_rents", 75),
        (val_div, ":accumulated_rents", 100),
        (party_set_slot, ":center",slot_center_accumulated_rents, ":accumulated_rents"),
        (try_begin),
            (party_slot_eq, ":center", slot_town_lord, "trp_player"),
            (call_script, "script_add_notification_menu", "mnu_disaster_event", ":center", 0),
        (try_end),
        (str_store_party_name, s22, ":center"),
        (call_script, "script_get_event_details", ":harvest_event"),
        (try_begin),
            (ge, reg1, 0),
            (assign, ":colour", color_good_news),
        (else_try),
            (assign, ":colour", color_bad_news),
        (try_end),
        (display_log_message, "@In {s22} has started a {s0}.", ":colour"),
        (try_begin),
            (eq, ":harvest_event", event_good_harvest),
            (troop_get_slot,":number","trp_global_variables", g_number_good_harvest),
            (val_add, ":number", 1),
            (troop_set_slot,"trp_global_variables", g_number_good_harvest, ":number"),
        (else_try),
            (eq, ":harvest_event", event_poor_harvest),
            (troop_get_slot,":number","trp_global_variables", g_number_poor_harvest),
            (val_add, ":number", 1),
            (troop_set_slot,"trp_global_variables", g_number_poor_harvest, ":number"),
        (try_end),
    (try_end),
]),

#EVENT: DROUGHT
(24.0*7.0/(number_of_villages), [##every two weeks on average
    (call_script, "script_execude_debug_message", 160),
    (store_random_in_range, ":center", villages_begin, villages_end),
    (party_slot_eq, ":center", slot_center_event, 0),#no event yet
    #determine disease chances
    (try_begin),
        (is_between, "$g_cur_month", 5, 9),
        (assign, ":chance", 3),
        (assign, ":bound", 350),
    (else_try),
        (this_or_next|is_between, "$g_cur_month", 3, 5),
        (is_between, "$g_cur_month", 9, 11),
        (assign, ":chance", 2),
        (assign, ":bound", 375),
    (else_try),
        (assign, ":chance", 1),
        (assign, ":bound", 400),
    (try_end),

    (try_begin),
        (party_slot_ge, ":center", slot_center_has_irigation, 1),
        (val_add, ":bound", 200),
    (try_end),
    (try_begin),
        (party_slot_ge, ":center", slot_center_has_farms, 1),
        (val_sub, ":bound", 50),
    (try_end),
    (store_random_in_range, ":disaster", 0, ":bound"),
    (le, ":disaster", ":chance"),

    (call_script, "script_get_event_details", event_drought),
    # (assign, ":modifier", reg0),
    (call_script, "script_change_center_prosperity", ":center", reg1),
    (party_set_slot, ":center", slot_center_event, event_drought),

    (party_get_slot, ":accumulated_rents", ":center", slot_center_accumulated_rents),
    (val_mul, ":accumulated_rents", 75),
    (val_div, ":accumulated_rents", 100),
    (party_set_slot, ":center",slot_center_accumulated_rents, ":accumulated_rents"),
    (try_begin),
        (party_slot_eq, ":center", slot_town_lord, "trp_player"),
        (call_script, "script_add_notification_menu", "mnu_disaster_event", ":center", 0),
    (try_end),
    # (str_store_party_name, s22, ":center"),
    # (call_script, "script_get_event_details", ":disease"),
    # (display_log_message, "@In {s22} has started a {s0} outbreak.", color_bad_news),
    (troop_get_slot,":number","trp_global_variables", g_number_drought),
    (val_add, ":number", 1),
    (troop_set_slot,"trp_global_variables", g_number_drought, ":number"),
]),

#EVENT: BEETLES INVASION
(24.0*7.0/(number_of_villages), [##every two weeks on average
    (call_script, "script_execude_debug_message", 161),
    (store_random_in_range, ":center", villages_begin, villages_end),
    (party_slot_eq, ":center", slot_center_event, 0),#no event yet
    #determine disease chances
    (try_begin),
        (is_between, "$g_cur_month", 5, 9),
        (assign, ":chance", 3),
        (assign, ":bound", 350),
    (else_try),
        (this_or_next|is_between, "$g_cur_month", 3, 5),
        (is_between, "$g_cur_month", 9, 11),
        (assign, ":chance", 2),
        (assign, ":bound", 375),
    (else_try),
        (assign, ":chance", 0),
        (assign, ":bound", 400),
    (try_end),
    (gt, ":chance", 0),
    # (try_begin),
        # (party_slot_ge, ":center", slot_center_has_irigation, 1),
        # (val_add, ":bound", 200),
    # (try_end),
    # (try_begin),
        # (party_slot_ge, ":center", slot_center_has_farms, 1),
        # (val_sub, ":bound", 50),
    # (try_end),
    (store_random_in_range, ":disaster", 0, ":bound"),
    (le, ":disaster", ":chance"),

    (call_script, "script_get_event_details", event_insects),
    # (assign, ":modifier", reg0),
    (call_script, "script_change_center_prosperity", ":center", reg1),
    (party_set_slot, ":center", slot_center_event, event_insects),

    (party_get_slot, ":accumulated_rents", ":center", slot_center_accumulated_rents),
    (val_mul, ":accumulated_rents", 75),
    (val_div, ":accumulated_rents", 100),
    (party_set_slot, ":center",slot_center_accumulated_rents, ":accumulated_rents"),
    (try_begin),
        (party_slot_eq, ":center", slot_town_lord, "trp_player"),
        (call_script, "script_add_notification_menu", "mnu_disaster_event", ":center", 0),
    (try_end),

    # (str_store_party_name, s22, ":center"),
    # (call_script, "script_get_event_details", ":disease"),
    # (display_log_message, "@In {s22} has started a {s0} outbreak.", color_bad_news),
    (troop_get_slot,":number","trp_global_variables", g_number_insects),
    (val_add, ":number", 1),
    (troop_set_slot,"trp_global_variables", g_number_insects, ":number"),
]),
#EVENT: Earthquake
(2.0*24.0*7.0/(number_of_walled_centers), [##every two weeks on average
    (call_script, "script_execude_debug_message", 162),
    # (store_current_day, ":day"),
    # (ge, ":day", 7),

    (store_random_in_range, ":center", walled_centers_begin, walled_centers_end),
    (party_slot_eq, ":center", slot_center_event, 0),#no event yet
    (store_random_in_range, ":disaster", 0, 650),
    (le, ":disaster", 1),

    (call_script, "script_cf_can_have_earthquake", ":center"),

    (call_script, "script_get_event_details", event_earthquake),
    # (assign, ":modifier", reg0),
    (call_script, "script_change_center_prosperity", ":center", reg1),
    (party_set_slot, ":center", slot_center_event, event_earthquake),

    (party_get_slot, ":accumulated_rents", ":center", slot_center_accumulated_rents),
    (val_mul, ":accumulated_rents", 25),
    (val_div, ":accumulated_rents", 100),
    (party_set_slot, ":center",slot_center_accumulated_rents, ":accumulated_rents"),
    # (try_begin),
        # (party_slot_eq, ":center", slot_town_lord, "trp_player"),
    (call_script, "script_add_notification_menu", "mnu_disaster_event", ":center", 0),
    # (try_end),

    # (str_store_party_name, s22, ":center"),
    # (call_script, "script_get_event_details", ":disease"),
    # (display_log_message, "@In {s22} has started a {s0} outbreak.", color_bad_news),
    (troop_get_slot,":number","trp_global_variables", g_number_earthquake),
    (val_add, ":number", 1),
    (troop_set_slot,"trp_global_variables", g_number_earthquake, ":number"),
]),

##FIRES
(24.0*2.0*7.0/(number_of_walled_centers),[
    (call_script, "script_execude_debug_message", 163),
    (store_random_in_range, ":center", walled_centers_begin, walled_centers_end),
    (party_slot_eq, ":center", slot_center_event, 0),
    (assign, ":bound", 350),

    (try_begin),
        (this_or_next|is_between, "$g_cur_month", 1, 4),
        (is_between, "$g_cur_month", 10, 13),
        (assign, ":chance", 20),
    (else_try),
        (is_between, "$g_cur_month", 4, 7),
        (assign, ":chance", 30),
    (else_try),
        (assign, ":chance", 40),
    (try_end),

    (try_begin),
        (party_slot_ge, ":center",slot_center_has_fire_fighter, 1),
        (val_add, ":bound", 25),
        (val_sub, ":chance", 30),
    (try_end),
    (try_begin),#
        (party_slot_eq, ":center", slot_party_type, spt_village),
        (val_add, ":bound", 50),
        (val_div, ":chance", 3),#fires are less desastrous in rural areas
    (try_end),
    (store_random_in_range, ":disaster", 0, ":bound"),
    (le, ":disaster", ":chance"),

    (try_begin),
        (party_slot_eq, ":center", slot_town_lord, "trp_player"),
        (party_slot_ge, ":center", slot_center_has_fire_fighter, 1),
        (assign, ":count_end", 0),
        (assign, ":loop_end", -1),
    (else_try),
        (party_slot_eq, ":center", slot_town_lord, "trp_player"),
        (assign, ":count_end", 1),
    (else_try),
        (assign, ":count_end", 2),
    (try_end),
    (assign, ":count", 1),
    (assign, ":loop_end", slot_center_has_forum),
    (try_for_range, ":buildings", village_improvements_begin, ":loop_end"),
        (neq, ":buildings", slot_center_has_iron_mine),
        (neq, ":buildings", slot_center_has_silver_mine),
        (neq, ":buildings", slot_center_has_barracks),
        (neq, ":buildings", slot_center_change_culture_village),
        (neq, ":buildings", slot_center_change_culture_town),
        (neq, ":buildings", slot_center_has_farms),
        (neq, ":buildings", slot_center_has_irigation),
        (neq, ":buildings", slot_center_has_cattle),
        (neq, ":buildings", slot_center_has_port),
        (neq, ":buildings", slot_center_has_fishport),
        (neq, ":buildings", slot_center_has_quarry),
        (neq, ":buildings", slot_center_has_fire_fighter),
        (store_random_in_range, ":r", 0, ":bound"),
        (lt, ":r", ":chance"),
        (party_slot_ge, ":center",":buildings", 1),
        (party_set_slot, ":center",":buildings", 0),

        (try_begin),
            (party_slot_eq, ":center", slot_town_lord, "trp_player"),
            (str_store_party_name, s60, ":center"),
            (call_script, "script_get_improvement_details", ":buildings", ":center"),
            (display_log_message, "@The fire in {s60} destroyed ({s0})!", message_negative),
        (try_end),
        (try_begin),
            (eq, ":count", ":count_end"),
            (assign, ":loop_end", -1),
        (else_try),
            (val_add, ":count", 1),
        (try_end),
    (try_end),

    (party_set_slot, ":center", slot_center_event, event_fire),
    (call_script, "script_get_event_details", event_fire),
    (call_script, "script_change_center_prosperity", ":center", reg1),
    (party_get_slot, ":accumulated_rents", ":center", slot_center_accumulated_rents),
    (val_mul, ":accumulated_rents", 75),
    (val_div, ":accumulated_rents", 100),
    (party_set_slot, ":center",slot_center_accumulated_rents, ":accumulated_rents"),

    (try_begin),
        (party_slot_eq, ":center", slot_town_lord, "trp_player"),
        (call_script, "script_add_notification_menu", "mnu_disaster_event", ":center", 0),
    (try_end),
    (troop_get_slot,":number","trp_global_variables", g_number_fire),
    (val_add, ":number", 1),
    (troop_set_slot,"trp_global_variables", g_number_fire, ":number"),
]),

## Monthly change prosperity of villages
(24.0*7.0/(number_of_villages),[
    (call_script, "script_execude_debug_message", 164),
    (store_random_in_range, ":village", villages_begin, villages_end),
    (try_begin),
        (party_slot_ge, ":village", slot_center_has_iron_mine, 1),
        (call_script, "script_change_center_prosperity", ":village", 1),
    (try_end),
    (try_begin),
        (party_slot_ge, ":village", slot_center_has_silver_mine, 1),
        (call_script, "script_change_center_prosperity", ":village", 1),
    (try_end),

    (try_begin),#pigbacking
        (is_between, "$g_player_court", centers_begin, centers_end),
        (faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
        #(eq, "$g_is_emperor", 1),
        (troop_slot_eq, "trp_global_variables", g_nomad_event_triigered, 0),
        (this_or_next|party_slot_eq, ":village", slot_center_province, p_asia_parthia),
        (this_or_next|party_slot_eq, ":village", slot_center_province, p_asia_media),
        (this_or_next|party_slot_eq, ":village", slot_center_province, p_asia_arab),
        (this_or_next|party_slot_eq, ":village", slot_center_province, p_asia_syr),
        (this_or_next|party_slot_eq, ":village", slot_center_province, p_asia_jude),
        (this_or_next|party_slot_eq, ":village", slot_center_province, p_afrc_maur),
        (this_or_next|party_slot_eq, ":village", slot_center_province, p_afrc_afrc),
        (this_or_next|party_slot_eq, ":village", slot_center_province, p_afrc_egyp),
        (party_slot_eq, ":village", slot_center_province, p_afrc_cyre),
        (store_faction_of_party, ":fac", ":village"),
        (eq, ":fac", "$players_kingdom"),
        (try_begin),
            (this_or_next|party_slot_eq, ":village", slot_center_province, p_asia_parthia),
            (party_slot_eq, ":village", slot_center_province, p_asia_media),
            (assign, ":nomad_faction", "fac_dahae"),
        (else_try),
            (this_or_next|party_slot_eq, ":village", slot_center_province, p_asia_arab),
            (this_or_next|party_slot_eq, ":village", slot_center_province, p_asia_syr),
            (party_slot_eq, ":village", slot_center_province, p_asia_jude),
            (assign, ":nomad_faction", "fac_nabataea"),
        (else_try),
            (party_slot_eq, ":village", slot_center_province, p_afrc_cyre),
            (assign, ":nomad_faction", "fac_garamantes"),
        (else_try),
            (party_slot_eq, ":village", slot_center_province, p_afrc_maur),
            (assign, ":nomad_faction", "fac_gaetuli"),
        (else_try),
            (party_slot_eq, ":village", slot_center_province, p_afrc_egyp),
            (assign, ":nomad_faction", "fac_kush"),
        (else_try),
            (store_random_in_range, ":r", 0, 2),
            (try_begin),
                (eq, ":r", 0),
                (assign, ":nomad_faction", "fac_gaetuli"),
            (else_try),
                (assign, ":nomad_faction", "fac_garamantes"),
            (try_end),
        (try_end),
        (try_begin),
            (faction_slot_ge, "$players_kingdom", slot_faction_number_of_parties, 30),
            (assign, ":prob_limit", 1),
        (else_try),
            (faction_slot_ge, "$players_kingdom", slot_faction_number_of_parties, 20),
            (assign, ":prob_limit", 2),
        (else_try),
            (assign, ":prob_limit", 3),
        (try_end),
        (store_random_in_range, ":r1", 0, 126),
        (le, ":r1", ":prob_limit"),
        (store_random_in_range, ":r", 0, 20),
        (store_troop_gold,":g", "trp_player"),
        (troop_set_slot, "trp_global_variables", g_nomad_event_triigered, 1),
        (try_begin),
            (eq, ":r", 0),
            (call_script, "script_add_notification_menu", "mnu_minor_faction_event_1", ":nomad_faction", 0),
        (else_try),
            (is_between, ":r", 1, 3),
            (ge, ":g", 50000),
            (call_script, "script_add_notification_menu", "mnu_minor_faction_event_2", ":nomad_faction", 0),
        (else_try),
            (is_between, ":r", 3, 5),
            (ge, ":g", 25000),
            (call_script, "script_add_notification_menu", "mnu_minor_faction_event_3", ":nomad_faction", 0),
        (else_try),
            (is_between, ":r", 5, 7),
            (call_script, "script_add_notification_menu", "mnu_minor_faction_event_4", ":nomad_faction", 0),
        (else_try),
            (is_between, ":r", 8, 10),
            (call_script, "script_add_notification_menu", "mnu_minor_faction_event_5", ":nomad_faction", 0),
        (else_try),
            (is_between, ":r", 11, 13),
            (call_script, "script_add_notification_menu", "mnu_minor_faction_event_6", ":nomad_faction", 0),
        (else_try),
            (is_between, ":r", 13, 16),
            (call_script, "script_add_notification_menu", "mnu_minor_faction_event_7", ":nomad_faction", 0),
        (else_try),#fall back event
            (call_script, "script_add_notification_menu", "mnu_minor_faction_event_8", ":nomad_faction", 0),
        (try_end),
    (try_end),
]),

(24,[
    (call_script, "script_execude_debug_message", 165),
    (troop_set_slot, "trp_mine_boss", slot_center_inventory, 0),
    (troop_set_slot, "trp_mine_boss", slot_troop_recently_blamed, 0),
    (try_begin),
        (party_get_slot, ":timer22", "p_delphi", slot_donate_party),
        (ge, ":timer22", 1),
        (val_sub, ":timer22", 1),
        (party_set_slot, "p_delphi", slot_donate_party, ":timer22"),
    (try_end),
]),

(24*4,[
    (call_script, "script_execude_debug_message", 166),
    (assign, "$g_speech", 0),##this is for player actions in the senat
    (assign, "$g_triumph", 0),	#this is for holding a triumph
    (troop_set_slot, "trp_global_variables", g_fired_emperor_event, 0),## events with governors seeking advice
    (troop_set_slot, "trp_global_variables", g_nomad_event_triigered, 0),#events with minor factions if player is Emperor
    #steal taxes
    (troop_set_slot, "trp_town_6_seneschal", 51, 0),

    #for donating to centers
    (try_for_range, ":party", centers_begin, centers_end),
        (party_set_slot, ":party", slot_donate_party, 0),
    (try_end),

    # SEASONS (Check all 5 days)
    (try_begin),
        (is_between, "$g_cur_month", 3, 11), # spring
        (eq, "$season", 0),
        (jump_to_menu, "mnu_fruhling"),
        # (assign,"$alt_diffuse_on",0), # es wird sommer, fruhling
    (else_try),
        (this_or_next|eq, "$g_cur_month", 12), # winter
        (is_between, "$g_cur_month", 1, 3), # winter
        (eq, "$season", 1),
        (jump_to_menu, "mnu_winter"),
        # (assign,"$alt_diffuse_on",1), # es wird winter
    (try_end),
]),

(24*14,[
    (call_script, "script_execude_debug_message", 167),
    ##senate system##there are 3 triggers, honor influence is the lowesd => weekly trigger
    (try_begin),
        (troop_slot_eq, "trp_player", slot_troop_culture, "fac_culture_7"),
        (troop_slot_ge, "trp_senator_dummy", slot_senate_support, 10),
        (store_faction_of_party, ":fac", "p_town_6"),
        (eq, ":fac", "$players_kingdom"),
        (neg|party_slot_ge, "p_town_6", slot_party_looted_left_days, 1),

        (store_div, ":chance", "$player_honor", 10),
        (val_clamp, ":chance", -11, 11),
        (val_mul, ":chance", -1),
        (val_add, ":chance", 10),
        (store_random_in_range, ":r", 0, 110),
        (try_begin),
            (lt, ":r", ":chance"),
            (display_message, "@Due to your bad reputation, you lose support in the senate.", color_bad_news),
            (set_show_messages, 0),
            (call_script, "script_change_senate_support", -1, 0),
            (set_show_messages, 1),
        (try_end),
    (try_end),

    (try_begin),
        (party_slot_eq, "p_main_party", slot_party_on_water, 0),
        (neq, "$g_player_is_captive", 1),
        (eq, "$g_is_emperor", 1),
        (try_begin),
            (eq, "$g_libelli", 0),
            (le, "$g_civil_war", 0),
            (eq, "$edict1", 0),
            (try_begin),
                (check_quest_active, "qst_blank_quest_4"),
                (display_message, "@Do your duties and handle the petitions"),
            (else_try),
                (jump_to_menu, "mnu_imperial_duties"),
            (try_end),
        (try_end),
        (try_begin),
            (eq, "$g_libelli", 1),
            (store_random_in_range, ":r", 0, 100),
            (ge, ":r", 90),
            (jump_to_menu, "mnu_libelli_event_1"),
        (try_end),
        (try_begin),
            (eq, "$edict1", 1),
            (store_random_in_range, ":r", 0, 100),
            (lt, ":r", 10),
            (jump_to_menu, "mnu_libelli_event_2"),
        (try_end),
        (try_begin),
            (le, "$g_civil_war", 0),
            (store_random_in_range, ":r", 0, 100),
            (try_begin),
                (ge, ":r", 70),
                (eq, "$g_heir_of_rome", -1),
                (jump_to_menu, "mnu_hire_1"),
            (try_end),
        (try_end),
    (try_end),

    (try_begin),
        (store_faction_of_party, ":rome_faction", "p_town_6"),
        (faction_slot_eq, ":rome_faction", slot_faction_culture, "fac_culture_7"),
        (store_mul, ":probability", "$wind_power", 4),
        (val_add, ":probability", 5),
        (store_random_in_range, ":r", 0, 100),
        (le, ":r", ":probability"),
        (call_script, "script_add_notification_menu", "mnu_emperor_event_grain_supply", ":rome_faction", 0),
    (try_end),
]),

(24,[
    (call_script, "script_execude_debug_message", 168),
    (neq, "$g_is_emperor", 1),
    (store_current_day, ":day"),
    (ge, ":day", 75),
    (eq, "$g_fire", 0),
    (call_script, "script_add_notification_menu", "mnu_fire_of_rome", 0, 0),
]),
###civil war triggers in rome
# (12,[
#     (call_script, "script_execude_debug_message", 169),
#     (try_begin),
#         (faction_slot_eq, "$players_kingdom", slot_faction_leader, "trp_player"),#check that player kingdom is really active
#         (party_slot_eq, "p_town_6", slot_town_lord, "trp_player"),
#         (eq, "$g_is_emperor", 0),
#         (try_begin),
#             (neg|troop_slot_eq, "trp_kingdom_7_lord", slot_troop_occupation, dplmc_slto_dead),#if he is not dead or in exil
#             (assign, "$temp", 20),
#         (else_try),
#             (assign, "$temp", 0),
#         (try_end),
#         (jump_to_menu, "mnu_become_emperor"),
#     (try_end),
# ]),
(24,[
    (call_script, "script_execude_debug_message", 170),
    (try_begin),
        (neq, "$g_player_is_captive", 1),##not captive
        (troop_get_slot, ":spouse", "trp_player", slot_troop_spouse),
        (ge, ":spouse", 1),
        (neq, ":spouse", "trp_gwenhwyfar"),
        (neq, ":spouse", "trp_thestia_tomitia"),
        (neq, ":spouse", "trp_antonia"),
        (main_party_has_troop, ":spouse"),
        (store_troop_health, ":hp", ":spouse"),
        (lt, ":hp", 20),
        (assign,"$talk_context",tc_campaign_talk),
        (start_map_conversation, ":spouse", -1),
    (try_end),

    (try_begin),#random time to new oportunity to childs
        (eq, "$g_spouse_embarazada", 1),
        (assign, "$g_spouse_embarazada", 0),
    (try_end),
]),

(24 * 10,[
    (call_script, "script_execude_debug_message", 171),
    (eq, "$enlisted_party", -1),#freelancer
    (neq,"$g_camp_mode", 1),
    (neq, "$g_empieza_asedio", 1),
    (neq, "$g_town_visit_after_rest", 1),
    (neq, "$g_player_icon_state", pis_ship),
    (neq, "$g_player_is_captive", 1),
    (assign, ":total_events", 11),   # update this when adding/removing events!
    (val_add, ":total_events", 1),   # MnB has weird ideas of ranges
    (store_random_in_range, ":curr_event", 0, ":total_events"),

    (neg|troop_slot_eq, "trp_global_variables", g_last_random_event, ":curr_event"),
    (troop_set_slot, "trp_global_variables", g_last_random_event, ":curr_event"),

    (assign, ":pos", 0),
    (try_begin),
        (val_add,":pos",1),
        (eq,":pos",":curr_event"), # this first line is same for all events
        (display_message, "@During today's training, you were accidently injured. While the wounds aren't severe, it may take some time for them to heal."),
        (call_script, "script_change_troop_hp", "trp_player", -20),
        (add_xp_as_reward, 100),
    (else_try),
        (val_add,":pos",1),
        (eq,":pos",":curr_event"),   # this first line is same for all events
        (display_message, "@Today, you awoke with a horrible toothache and now you can no longer hide the pain."),
        (call_script, "script_change_troop_hp", "trp_player", -5),
        (call_script, "script_change_troop_health", "trp_player", 5),
    (else_try),
        (val_add,":pos",1),
        (eq,":pos",":curr_event"),   # this first line is same for all events
        (display_message, "@You slipped on wet ground, and you were injured."),
        (call_script, "script_change_troop_hp", "trp_player", -5),
    (else_try),
        (val_add,":pos",1),
        (eq,":pos",":curr_event"),   # this first line is same for all events
        (neq, "$g_is_emperor", 1),#not if emperor
        (le, "$g_rank", 1),#not if high rank
        (display_message, "@(While traveling) You happen to find an abandoned house. You found some loot."),
        (troop_add_gold, "trp_player", 50),
        (troop_add_item, "trp_player", "itm_smoked_fish", 0), #
        (troop_add_item, "trp_player", "itm_grain", 0), #
        (add_xp_as_reward, 100),
    (else_try),
        (val_add,":pos",1),
        (eq,":pos",":curr_event"),   # this first line is same for all events
        (display_message, "@The adventure, life in the field, the constant training makes you feel strong and well, you are ready to face any challenge."),
        (call_script, "script_change_troop_hp", "trp_player", 40),
        (add_xp_as_reward, 250),
    (else_try),
        (val_add,":pos",1),
        (eq,":pos",":curr_event"),   # this first line is same for all events
        (neq, "$g_is_emperor", 1),#not if emperor
        (le, "$g_rank", 1),#not if high rank
        (display_message, "@Today you got lucky and found a small bag hidden behind a bush. Inside the bag was 300 denars."),
        (troop_add_gold, "trp_player", 300),
        (add_xp_as_reward, 50),
    (else_try),
        (val_add,":pos",1),
        (eq,":pos",":curr_event"),   # this first line is same for all events
        (neq, "$g_is_emperor", 1),#not if emperor
        (le, "$g_rank", 1),#not if high rank
        (add_xp_as_reward, 50),
        (display_message, "@During a small rest you noticed a shiney object in the ground caught your eye. You tooked a closer look, thinking it may be some denars. Unfortunately it was only a small piece of rusted metal lying on the ground, totally worthless."),
    (else_try),
        (val_add,":pos",1),
        (eq,":pos",":curr_event"),   # this first line is same for all events
        (try_begin),
            (store_party_size_wo_prisoners, ":size", "p_main_party"),
            (ge, ":size", 5),
            (display_message, "@The water reserves have been contaminated and it must be rationed until you reach the next town."),
            (call_script, "script_change_troop_hp", "trp_player", -15),
            (call_script, "script_change_player_party_morale", -15),
        (try_end),
    (else_try),
        (val_add,":pos",1),
        (eq,":pos",":curr_event"),   # this first line is same for all events
        (try_begin),
            (store_party_size_wo_prisoners, ":size", "p_main_party"),
            (ge, ":size", 5),
            (display_message, "@You and your party have come across an abandoned wagon of full of mead, and you gift it to your men."),
            (add_xp_as_reward, 50),
            (call_script, "script_change_player_party_morale", 10),
        (try_end),
    (else_try),
        (val_add,":pos",1),
        (eq,":pos",":curr_event"),   # this first line is same for all events
        (try_begin),
            (store_party_size_wo_prisoners, ":size", "p_main_party"),
            (ge, ":size", 5),
            (display_message, "@Farmes from a nearby village have gathered a bounty of food for your troops."),
            (add_xp_as_reward, 50),
            (call_script, "script_change_player_party_morale", 10),
        (try_end),
    (else_try),
        (val_add,":pos",1),
        (eq,":pos",":curr_event"),   # this first line is same for all events
        (neq, "$g_is_emperor", 1),#not if emperor
        (le, "$g_rank", 1),#not if high rank
        (display_message, "@You have found leftovers of a recent battle. Searching the bodies, you managed to find 200 denars."),
        (troop_add_gold, "trp_player", 200),
        (add_xp_as_reward, 100),
    (try_end),
]),

# VC wound system
(24,[
    (call_script, "script_execude_debug_message", 172),
    (try_begin),
        (gt, "$wounded_today", 0),
        (assign, "$wounded_today", 0),
        (this_or_next|quest_slot_ge, slot_quest_int_penalty_fluid_points, 1),
        (this_or_next|quest_slot_ge, slot_quest_cha_penalty_fluid_points, 1),
        (this_or_next|quest_slot_ge, slot_quest_str_penalty_fluid_points, 1),
        (quest_slot_ge, slot_quest_agi_penalty_fluid_points, 1),
        (tutorial_box, "@Physicians in larger towns can treat the wounds for a price, after which they will heal within a few days. Any negative effects will then be removed.", "@You are wounded"),
    (try_end),

    (party_get_skill_level, ":chance", "p_main_party", "skl_wound_treatment"),
    (val_mul, ":chance", 5),

    (assign, ":num_last_day", 0),
    (assign, ":num_perma", 0),
    (assign, ":num_cured", 0),

    (try_for_range, ":curr_slot", slot_quest_int_penalty_left_days, slot_quest_end_penalty_left_days),
        (quest_get_slot, ":left_days", "qst_vc_wounds", ":curr_slot"),
        (neq, ":left_days", 0),
        (store_add, ":fluid_points_slot", ":curr_slot", 10),
        (quest_get_slot, ":fluid_points", "qst_vc_wounds", ":fluid_points_slot"),
        (store_add, ":perma_points_slot", ":curr_slot", 20),
        (quest_get_slot, ":perma_points", "qst_vc_wounds", ":perma_points_slot"),
        (try_begin),
            (gt, ":left_days", 0),
            # 1. SUFFERING
            (store_random_in_range, ":rand", 1, 101),
            (gt, ":rand", ":chance"),	#wound treat skill can make suffering-time longer
            (val_sub, ":left_days", 1),
            (quest_set_slot, "qst_vc_wounds", ":curr_slot", ":left_days"),
            (try_begin),
                (eq, ":left_days", 1),	#last day
                (val_add, ":num_last_day", ":fluid_points"),
            (else_try),
                (eq, ":left_days", 0),	#perma day
                (val_add, ":num_perma", ":fluid_points"),
                (quest_set_slot, "qst_vc_wounds", ":fluid_points_slot", 0),
                (val_add, ":perma_points", ":fluid_points"),
                (quest_set_slot, "qst_vc_wounds", ":perma_points_slot", ":perma_points"),
            (try_end),
        (else_try),
            (lt, ":left_days", 0),
            # 2. CURING
            (val_add, ":left_days", 1),
            (try_begin),
                (lt, ":left_days", 0),
                (store_random_in_range, ":rand", 1, 101),
                (le, ":rand", ":chance"),	#wound treat skill can make curing-time shorter
                (val_add, ":left_days", 1),
            (try_end),
            (quest_set_slot, "qst_vc_wounds", ":curr_slot", ":left_days"),
            (eq, ":left_days", 0),	#cured
            (val_add, ":num_cured", ":fluid_points"),
            (try_begin),
                (eq, ":fluid_points_slot", slot_quest_int_penalty_fluid_points),
                (troop_raise_attribute, "trp_player", ca_intelligence, ":fluid_points"),
                (assign, reg11, ":fluid_points"),
                (display_message, "@You gained {reg11} intelligence points back!", color_good_news),
            (else_try),
                (eq, ":fluid_points_slot", slot_quest_cha_penalty_fluid_points),
                (troop_raise_attribute, "trp_player", ca_charisma, ":fluid_points"),
                (assign, reg11, ":fluid_points"),
                (display_message, "@You gained {reg11} charisma points back!", color_good_news),
            (else_try),
                (eq, ":fluid_points_slot", slot_quest_str_penalty_fluid_points),
                (troop_raise_attribute, "trp_player", ca_strength, ":fluid_points"),
                (assign, reg11, ":fluid_points"),
                (display_message, "@You gained {reg11} strength points back!", color_good_news),
            (else_try),
                (eq, ":fluid_points_slot", slot_quest_agi_penalty_fluid_points),
                (troop_raise_attribute, "trp_player", ca_agility, ":fluid_points"),
                (assign, reg11, ":fluid_points"),
                (display_message, "@You gained {reg11} agility points back!", color_good_news),
            (try_end),
            (quest_set_slot, "qst_vc_wounds", ":fluid_points_slot", 0),
        (try_end),
    (try_end),
    #(assign, "$wound_system_explained", 0),

    #Info message
    (str_clear, s1),
    (try_begin),
        (gt, ":num_last_day", 0),
        (assign, reg7, ":num_last_day"),
        (assign, reg8, reg7),
        (val_min, reg8, 2),
        (val_sub, reg8, 1),	#so it is 0 or 1
        (str_store_string, s1, "@{s1}You have only one day left to take care of {reg7} of your injuries. Visit a physician in a larger town to do so.^^"),
    (try_end),
    (try_begin),
        (gt, ":num_perma", 0),
        (assign, reg7, ":num_perma"),
        (assign, reg8, reg7),
        (val_min, reg8, 2),
        (val_sub, reg8, 1),	#so it is 0 or 1
        (str_store_string, s1, "@{s1}{reg7} of your injuries {reg8?have:has} become permanent because {reg8?they haven't been:it wasn't} tended.^^"),
    (try_end),
    (try_begin),
        (gt, ":num_cured", 0),
        (assign, reg7, ":num_cured"),
        (assign, reg8, reg7),
        (val_min, reg8, 2),
        (val_sub, reg8, 1),	#so it is 0 or 1
        (str_store_string, s1, "@{s1}{reg7} of your wounds {reg8?are:is} cured, and your related abilities aren't limited any more."),
    (try_end),
    (try_begin),
        (neg|str_is_empty, s1),
        (tutorial_box, "@{s1}", "@Wound Report"),
    (try_end),
]),

##that is for the rank system, the roman empire has 3 ranks, player starts with the first rank
(24*3,[
    (call_script, "script_execude_debug_message", 173),
    (neq, "$g_player_is_captive", 1),##not captive
    (faction_slot_eq, "$players_kingdom", slot_faction_government_type, gov_imperial), # is imperial government
    (faction_get_slot, ":emperor", "$players_kingdom", slot_faction_leader),
    (try_begin),
        (eq, "$g_rank", 1),
        (troop_slot_ge, "trp_player", slot_troop_renown, 300),
        (troop_slot_ge, "trp_player", slot_troop_influence, 250),
        (call_script, "script_troop_get_relation_with_troop", "trp_player", ":emperor"),
        (ge, reg0, 15),##the emperor must like the player for promotion
        (store_character_level, ":level", "trp_player"),
        (ge, ":level", 10),
        (store_random_in_range, ":rand", 0, 100),
        (lt, ":rand", 35),
        (call_script, "script_add_notification_menu", "mnu_promotion",0,0),#make it notification menu
    (else_try),
        (eq, "$g_rank", 2),
        (troop_slot_ge, "trp_player", slot_troop_renown, 450),
        (troop_slot_ge, "trp_player", slot_troop_influence, 500),
        (call_script, "script_troop_get_relation_with_troop", "trp_player", ":emperor"),
        (ge, reg0, 30),##the emperor must like the player for promotion
        (store_character_level, ":level", "trp_player"),
        (ge, ":level", 20),
        (store_random_in_range, ":rand", 0, 100),
        (lt, ":rand", 35),
        (call_script, "script_add_notification_menu", "mnu_promotion",0,0),#make it notification menu
    (try_end),
]),

(24,[
    (call_script, "script_execude_debug_message", 174),
    (neq, "$g_player_is_captive", 1),#not captive
    (eq, "$g_is_emperor", 1),
    (try_begin),
        (check_quest_active, "qst_blank_quest_23"),
        (store_faction_of_party, ":fac", "p_town_27"),
        (eq, ":fac", "$players_kingdom"),
        (store_faction_of_party, ":fac2", "p_town_40"),
        (eq, ":fac2", "$players_kingdom"),
        (store_faction_of_party, ":fac2", "p_town_47"),
        (eq, ":fac2", "$players_kingdom"),
        (store_faction_of_party, ":fac3", "p_castle_40"),
        (eq, ":fac3", "$players_kingdom"),
        (store_faction_of_party, ":fac4", "p_castle_42"),
        (eq, ":fac4", "$players_kingdom"),
        (store_faction_of_party, ":fac5", "p_castle_30"),
        (eq, ":fac5", "$players_kingdom"),
        (store_faction_of_party, ":fac6", "p_castle_55"),
        (eq, ":fac6", "$players_kingdom"),
        (call_script, "script_add_notification_menu", "mnu_mesopotamia_conquered",0,0),
    (try_end),

    (try_begin),
        (check_quest_active, "qst_blank_quest_22"),
        (store_faction_of_party, ":fac", "p_town_45"),
        (eq, ":fac", "$players_kingdom"),
        (store_faction_of_party, ":fac2", "p_town_15"),
        (eq, ":fac2", "$players_kingdom"),
        (store_faction_of_party, ":fac3", "p_castle_8"),
        (eq, ":fac3", "$players_kingdom"),
        (store_faction_of_party, ":fac4", "p_castle_49"),
        (eq, ":fac4", "$players_kingdom"),
        (store_faction_of_party, ":fac5", "p_castle_50"),
        (eq, ":fac5", "$players_kingdom"),
        (store_faction_of_party, ":fac6", "p_castle_53"),
        (eq, ":fac6", "$players_kingdom"),
        (store_faction_of_party, ":fac7", "p_castle_33"),
        (eq, ":fac7", "$players_kingdom"),
        (call_script, "script_add_notification_menu", "mnu_germania_conquered",0,0),
    (try_end),

    (try_begin),
        (check_quest_active, "qst_blank_quest_24"),
        (store_faction_of_party, ":fac", "p_town_11"),
        (eq, ":fac", "$players_kingdom"),
        (store_faction_of_party, ":fac2", "p_town_42"),
        (eq, ":fac2", "$players_kingdom"),
        (store_faction_of_party, ":fac2", "p_town_9"),
        (eq, ":fac2", "$players_kingdom"),
        (store_faction_of_party, ":fac3", "p_castle_19"),
        (eq, ":fac3", "$players_kingdom"),
        (store_faction_of_party, ":fac4", "p_castle_37"),
        (eq, ":fac4", "$players_kingdom"),
        (call_script, "script_add_notification_menu", "mnu_dacia_conquered",0,0),
    (try_end),

    (try_begin),
        (check_quest_active, "qst_blank_quest_25"),
        (store_faction_of_party, ":fac", "p_town_43"),
        (eq, ":fac", "$players_kingdom"),
        (store_faction_of_party, ":fac2", "p_town_1"),
        (eq, ":fac2", "$players_kingdom"),
        (store_faction_of_party, ":fac2", "p_town_44"),
        (eq, ":fac2", "$players_kingdom"),
        (store_faction_of_party, ":fac3", "p_castle_14"),
        (eq, ":fac3", "$players_kingdom"),
        (store_faction_of_party, ":fac4", "p_castle_5"),
        (eq, ":fac4", "$players_kingdom"),
        (store_faction_of_party, ":fac5", "p_castle_23"),
        (eq, ":fac5", "$players_kingdom"),
        (call_script, "script_add_notification_menu", "mnu_britannia_conquered",0,0),
    (try_end),
]),

(24,[
    (call_script, "script_execude_debug_message", 175),
    #buying slaves from them
    (troop_set_slot,"trp_ramun_the_slave_trader",slot_troop_days_on_mission,0),
    (troop_set_slot,"trp_galeas",slot_troop_days_on_mission,0),

    #helping slave
    (troop_set_slot, "trp_christ",slot_troop_days_on_mission, 0),

    #updating minstrel player poem cooldowns
    (try_for_range,":troop",bardo_begin, bardo_end),
        (troop_get_slot,":val",":troop",slot_troop_days_on_mission),
        (neq,":val",0),#0 = can ask to sing about player
        (val_sub,":val",1),
        (val_max,":val",0),#to clear negative values (errors)
        (troop_set_slot,":troop",slot_troop_days_on_mission,":val"),
        (try_begin),
            (eq, ":val", 0),
            (str_store_troop_name, s40, ":troop"),
            (try_begin),
                (troop_slot_eq, ":troop", slot_troop_current_mission, npc_mission_improve_relations),
                (troop_get_slot, ":mission_object", ":troop", slot_troop_mission_object),
                (is_between, ":mission_object", kingdom_ladies_begin, kingdom_ladies_end),
                (troop_get_slot, ":lady_reputation", ":mission_object", slot_lord_reputation_type),
                (call_script, "script_troop_get_player_relation",  ":mission_object"),
                (assign, ":relation", reg0),
                #				(troop_get_slot, ":relation", ":mission_object", slot_troop_player_relation),
                (troop_get_slot, ":player_renown", "trp_player", slot_troop_renown),
                (val_div, ":player_renown", 6),
                (val_sub, ":player_renown", 40),
                (call_script, "script_troop_get_romantic_chemistry_with_troop", ":mission_object", "trp_player"),
                (assign, ":chemistry", reg0),
                (try_begin),
                    (eq, ":lady_reputation", lrep_ambitious),
                    (val_div, ":chemistry", 2),
                    (val_mul, ":player_renown", 2),
                (else_try),
                    (eq, ":lady_reputation", lrep_otherworldly),
                    (val_mul, ":chemistry", 2),
                    (val_div, ":player_renown", 2),
                (else_try),
                    (eq, ":lady_reputation", lrep_adventurous),
                    (val_mul, ":chemistry", 3),
                    (val_div, ":chemistry", 2),
                    (val_div, ":player_renown", 2),
                (else_try),
                    (eq, ":lady_reputation", lrep_moralist),
                    (val_div, ":chemistry", 2),
                    (val_div, ":player_renown", 2),
                (try_end),
                (store_add, ":modifier", ":chemistry", ":player_renown"),
                (val_add, ":modifier", ":relation"),
                (store_random_in_range, ":rand", 2,8),
                (try_begin),
                    (lt, ":modifier", 0),
                    (val_div, ":rand", -2),
                    (str_store_troop_name, s33, ":mission_object"),
                    (display_message, "@The poem {s40} had written for {s33} didn't seem to work very well."),
                    (call_script, "script_change_player_relation_with_troop", ":mission_object", ":rand"),
                    (tutorial_box, "@The poem {s40} had written for {s33} didn't seem to work very well.", "@Poem for a lady"),
                (else_try),
                    (gt, ":modifier", 0),
                    (str_store_troop_name, s33, ":mission_object"),
                    (display_message, "@{s33} seemed to like the poem {s40} had written for her."),
                    (call_script, "script_change_player_relation_with_troop", ":mission_object", ":rand"),
                    (tutorial_box, "@{s33} seemed to like the poem {s40} had written for her.", "@Poem for a lady"),
                (try_end),
            (else_try),
                (troop_slot_eq, ":troop", slot_troop_current_mission, npc_mission_seek_recognition),
                (store_random_in_range, ":rand", 6,12),
                (display_message, "@{s40}'s poem about you seems to be spreading through the land."),
                (tutorial_box, "@{s40}'s poem about you seems to be spreading through the land.", "@Fame spreads"),
                (call_script, "script_change_troop_renown", "trp_player", ":rand"),
            (try_end),
            (troop_set_slot, ":troop", slot_troop_current_mission, -1),
        (try_end),
    (try_end),
    (try_begin),
        (neq, "$g_player_is_captive", 1),
        (neq, "$g_timer", -1),
        (val_sub, "$g_timer", 1),
        (try_begin),
            (eq, "$g_timer", 0),
            (call_script, "script_add_notification_menu", "mnu_census",0,0),
        (try_end),
    (try_end),
    (try_begin),
        (troop_get_slot,":val","trp_whore",slot_troop_days_on_mission),
        (neq,":val",0),#0 = can ask to sing about player
        (val_sub,":val",1),
        (val_max,":val",0),#to clear negative values (errors)
        (troop_set_slot,"trp_whore",slot_troop_days_on_mission,":val"),
    (try_end),

    (try_begin),
        (troop_get_slot,":val","trp_diplomat_africa",slot_troop_days_on_mission),
        (neq,":val",0),#0 = can ask to sing about player
        (val_sub,":val",1),
        (val_max,":val",0),#to clear negative values (errors)
        (try_begin),
            (eq, ":val", 0),
            (neq, "$g_player_is_captive", 1),
            (display_message, "@The promised troops arrive", color_good_news),
            (party_force_add_members, "p_main_party", "trp_sarranid_horseman", 200),
            (party_force_add_members, "p_main_party", "trp_garamantien_noble_horseman", 100),
        (else_try),
            (eq, ":val", 0),
            #(neq, "$g_player_is_captive", 1),
            (display_message, "@The promised troops can't find you, as you are a prisoner, and return home", color_bad_news),
        (try_end),
        (troop_set_slot,"trp_diplomat_africa",slot_troop_days_on_mission,":val"),
    (try_end),
    (try_begin),
        (troop_get_slot,":val","trp_slave_trader",slot_troop_days_on_mission),
        (neq,":val",0),#0 = can ask to sing about player
        (val_sub,":val",1),
        (val_max,":val",0),#to clear negative values (errors)
        (troop_set_slot,"trp_slave_trader",slot_troop_days_on_mission,":val"),
    (try_end),
    (try_begin),
        (ge, "$g_player_chamberlain", 1),
        (troop_get_slot,":val","$g_player_chamberlain",slot_troop_days_on_mission),
        (neq,":val",0),#0
        (val_sub,":val",1),
        (val_max,":val",0),#no negative
        (troop_set_slot,"$g_player_chamberlain",slot_troop_days_on_mission,":val"),
    (try_end),
    (try_begin),
        (troop_get_slot,":val","trp_follower_woman",slot_troop_days_on_mission),
        (neq,":val",0),#0 = can ask to sing about player
        (val_sub,":val",1),
        (val_max,":val",0),#to clear negative values (errors)
        (troop_set_slot,"trp_follower_woman",slot_troop_days_on_mission,":val"),
    (try_end),
    (try_begin),
        (troop_get_slot,":val","trp_hunter_woman",slot_troop_days_on_mission),
        (neq,":val",0),#0 = can ask to sing about player
        (val_sub,":val",1),
        (val_max,":val",0),#to clear negative values (errors)
        (troop_set_slot,"trp_hunter_woman",slot_troop_days_on_mission,":val"),
    (try_end),
    (try_begin),
        (troop_get_slot,":val","trp_fighter_woman",slot_troop_days_on_mission),
        (neq,":val",0),#0 = can ask to sing about player
        (val_sub,":val",1),
        (val_max,":val",0),#to clear negative values (errors)
        (troop_set_slot,"trp_fighter_woman",slot_troop_days_on_mission,":val"),
    (try_end),
    (try_begin),
        (troop_get_slot,":val","trp_sword_sister",slot_troop_days_on_mission),
        (neq,":val",0),#0 = can ask to sing about player
        (val_sub,":val",1),
        (val_max,":val",0),#to clear negative values (errors)
        (troop_set_slot,"trp_sword_sister",slot_troop_days_on_mission,":val"),
    (try_end),
    (try_begin),
        (troop_get_slot,":val","trp_peasant_woman",slot_troop_days_on_mission),
        (neq,":val",0),#0 = can ask to sing about player
        (val_sub,":val",1),
        (val_max,":val",0),#to clear negative values (errors)
        (troop_set_slot,"trp_peasant_woman",slot_troop_days_on_mission,":val"),
    (try_end),
    (try_begin),
        (troop_get_slot,":val","trp_refugee",slot_troop_days_on_mission),
        (neq,":val",0),#0 = can ask to sing about player
        (val_sub,":val",1),
        (val_max,":val",0),#to clear negative values (errors)
        (troop_set_slot,"trp_refugee",slot_troop_days_on_mission,":val"),
    (try_end),
    (try_begin),
        (troop_get_slot,":val","trp_slave_female",slot_troop_days_on_mission),
        (neq,":val",0),#0 = can ask to sing about player
        (val_sub,":val",1),
        (val_max,":val",0),#to clear negative values (errors)
        (troop_set_slot,"trp_slave_female",slot_troop_days_on_mission,":val"),
    (try_end),

    (try_for_range, ":troop", "trp_centurio_west", "trp_aux_cav"),
        (troop_get_slot,":val",":troop",slot_troop_days_on_mission),
        (neq,":val",0),#0 = can ask to sing about player
        (val_sub,":val",1),
        (val_max,":val",0),#to clear negative values (errors)
        (troop_set_slot,":troop",slot_troop_days_on_mission,":val"),
    (try_end),

    (try_begin),
        (neq, "$g_player_is_captive", 1),
        (main_party_has_troop, "trp_gwenhwyfar"),
        (store_party_size_wo_prisoners, ":size", "p_main_party"),
        (ge, ":size", 10),
        (gt, "$gwenny", 0),
        (store_random_in_range, ":r", 0, 100),
        (lt, ":r", 35),
        (try_begin),
            (eq, "$gwenny", 1),
            (call_script, "script_add_notification_menu", "mnu_gwenny_1", 0,0),
            (val_add, "$gwenny", 1),
        (else_try),
            (eq, "$gwenny", 2),
            (call_script, "script_add_notification_menu", "mnu_gwenny_2", 0,0),
            (val_add, "$gwenny", 1),
        (else_try),
            (eq, "$gwenny", 3),
            (call_script, "script_add_notification_menu", "mnu_gwenny_3", 0,0),
            (val_add, "$gwenny", 1),
        (else_try),
            (eq, "$gwenny", 4),
            (call_script, "script_add_notification_menu", "mnu_gwenny_4", 0,0),
            (val_add, "$gwenny", 1),
        (else_try),
            (eq, "$gwenny", 5),
            (call_script, "script_add_notification_menu", "mnu_gwenny_5", 0,0),
            (val_add, "$gwenny", 1),
        (else_try),
            (eq, "$gwenny", 6),
            (call_script, "script_add_notification_menu", "mnu_gwenny_6", 0,0),
            (val_add, "$gwenny", 1),
        (try_end),
    (try_end),
]),

##this trigger handels persecution of christians
(46,[
    (call_script, "script_execude_debug_message", 176),
    (assign, "$g_wait_judgment", 0),

    (store_random_in_range, ":center_no", towns_begin, towns_end),
    (store_faction_of_party, ":faction", ":center_no"),
    (assign, ":happening", 0),

    (try_begin),
        (eq, ":faction", "fac_kingdom_7"),
        (assign, ":happening", 1),
    (else_try),
        (eq, "$g_is_emperor", 1),
        (eq, ":faction", "$players_kingdom"),
        (assign, ":happening", 1),
    (try_end),

    (try_begin),
        (neq, "$g_player_is_captive", 1),
        (eq, ":happening", 1),
        (eq, "$g_is_emperor", 1),
        (troop_slot_eq, "trp_global_variables", g_fired_emperor_event, 0),
        (store_random_in_range, ":random1", 0, 100),
        (le, ":random1", 20),
        (party_get_slot, ":lord", ":center_no", slot_town_lord),
        (gt, ":lord", 0),
        (call_script, "script_troop_get_player_relation", ":lord"),
        (ge, reg0, -10),
        (assign, ":relation", reg0),
        (store_random_in_range, ":random2", 0, 3),#0,1,2
        (try_begin),
            (eq, ":random2", 0),
            (call_script, "script_add_notification_menu", "mnu_governor_event_1", ":center_no", ":lord"),
        (else_try),
            (eq, ":random2", 1),
            (call_script, "script_add_notification_menu", "mnu_governor_event_2", ":center_no", ":lord"),
        (else_try),
            (ge, ":relation", 20),
            (troop_slot_eq, "trp_global_variables", g_firer_event_not, 0),
            (call_script, "script_add_notification_menu", "mnu_governor_event_3", ":center_no", ":lord"),
        (try_end),
        (troop_set_slot, "trp_global_variables", g_fired_emperor_event, 1),
    (try_end),
    (try_begin),
        (eq, ":happening", 1),
        (assign, ":save_rg0", reg0),
        (try_begin),
            (eq, "$edict3", 1),
            (party_get_slot, ":slave_icon", ":center_no", slot_crucified_slave_icon),
            (try_begin),
                (is_between, ":slave_icon", "p_main_party", last_static_party),
                (str_store_party_name, s34, ":center_no"),
                (display_message, "@slot_crucified_slave_icon corrupted at {s34}."),
            (try_end),
            (gt, ":slave_icon",last_static_party),
            (remove_party, ":slave_icon"),
            (party_set_slot, ":center_no", slot_center_pursue, 0),
            (party_set_slot, ":center_no", slot_crucified_slave_icon, -1),##this is for the spawn of crux icon near the city with the persecution
            (str_store_party_name, s34, ":center_no"),
            (display_message, "@You hear rumors about Christians being no longer pursued in {s34}."),
        (try_end),
        (try_begin),
            (party_slot_eq, ":center_no", slot_center_pursue, 1),
            (store_random_in_range, ":r", 0, 100),
            (le, ":r", 75),
            (party_get_slot, ":slave_icon", ":center_no", slot_crucified_slave_icon),
            (try_begin),
                (is_between, ":slave_icon", "p_main_party", last_static_party),
                (str_store_party_name, s34, ":center_no"),
                (display_message, "@slot_crucified_slave_icon corrupted at {s34}."),
            (try_end),
            (gt, ":slave_icon", last_static_party),
            (remove_party, ":slave_icon"),
            (party_set_slot, ":center_no", slot_center_pursue, 0),
            (party_set_slot, ":center_no", slot_crucified_slave_icon, -1),
            (str_store_party_name, s34, ":center_no"),
            (display_message, "@You hear rumors about Christians being no longer pursued in {s34}."),
        (else_try),
            (eq, "$edict4", 1),
            (party_slot_eq, ":center_no", slot_center_pursue, 0),
            (store_random_in_range, ":r", 0, 100),
            (le, ":r", 50),
            (set_spawn_radius, 4),
            (call_script, "script_spawn_party", ":center_no", "pt_crucified_slaves"),
            (party_set_slot, ":center_no", slot_crucified_slave_icon, reg0),
            (party_set_slot, ":center_no", slot_center_pursue, 1),
            (str_store_party_name, s34, ":center_no"),
            (display_message, "@You hear rumors about Christians being pursued in {s34}."),
            (try_begin),
                (store_random_in_range, ":r33", 0, 100),
                (lt, ":r33", 15),
                (lt, "$g_unrest", 100),
                (val_add, "$g_unrest", 1),
                (display_message, "@Stability of the Empire decreases", color_bad_news),
            (try_end),
        (try_end),
        (assign, reg0, ":save_rg0"),
    (try_end),
]),

(24*7,[
    (call_script, "script_execude_debug_message", 177),
    (map_free), #en mapa
    (neq, "$g_player_is_captive", 1),
    (store_party_size_wo_prisoners, ":size", "p_follower_party"),
    (gt, ":size", 0),
    (try_begin),
        (store_party_size_wo_prisoners, ":size", "p_main_party"),
        (lt, ":size", 55),
        (jump_to_menu, "mnu_followers_camp_leave"),
    (else_try),
        (party_get_num_companion_stacks, ":num", "p_follower_party"),
        (assign, ":total", 0),
        (try_for_range, ":stack_no", 0, ":num"),
            (party_stack_get_troop_id, ":party_troop", "p_follower_party", ":stack_no"),
            (is_between,":party_troop","trp_follower_woman","trp_caravan_master"),
            (party_stack_get_size, ":size", "p_follower_party", ":stack_no"),
            (party_stack_get_num_wounded, ":wounded", "p_follower_party", ":stack_no"),
            (val_sub, ":size", ":wounded"),
            (val_min, ":size", 150),
            (val_div, ":size", 10),
            (val_add, ":total", ":size"),
        (try_end),
        (val_min, ":total", 15),
        (call_script, "script_change_player_party_morale", ":total"),
        (display_message, "@Having women in your follower party improves moral.", message_positive),
    (try_end),
]),

(24 * 7,[
    (call_script, "script_execude_debug_message", 178),
    (store_random_in_range, ":random", 0, 10000),
    (troop_set_slot, "trp_player", slot_troop_temp_decision_seed, ":random"),
    #winter = morale penalty
    (try_begin),
        (eq, "$enlisted_party", -1),#no freelancer
        (party_get_current_terrain, ":terrain", "p_main_party"),
        (try_begin),
            (this_or_next|eq, "$g_cur_month", 12),
            (this_or_next|eq, "$g_cur_month", 1),
            (eq, "$g_cur_month", 2),
            (neq, ":terrain", rt_snow),
            (neq, ":terrain", rt_snow_forest),
            (neq, ":terrain", rt_desert),
            (neq, ":terrain", rt_desert_forest),
            (display_message, "@Winter is the worst time for war. It's cold, it rains too much and food is scarce. In winter, men would rather shelter by the fire than campaign. Watch your morale and your food stores."),
            (call_script, "script_change_player_party_morale", -5),
        (else_try),#deserts also have penalty
            (this_or_next|eq, ":terrain", rt_desert_forest),
            (eq, ":terrain", rt_desert),
            (display_message, "@Deserts are relentless places. The heat is unbearable and water is always scarce."),
            (call_script, "script_change_player_party_morale", -5),
        (try_end),
    (try_end),
]),

(24,[
    (call_script, "script_execude_debug_message", 179),
    (map_free), #en mapa
    (neq, "$g_player_is_captive", 1),
    (eq, "$g_stance", 1),
    (party_get_num_companions,":size", "p_main_party"),
    (ge, ":size", 2),
    (display_message, "@Your men are getting tired from the forced march.", color_bad_news),
    (call_script, "script_change_player_party_morale", -5),
]),

(24 * 9,[
    (call_script, "script_execude_debug_message", 180),
    (map_free), #en mapa
    (neq, "$g_player_is_captive", 1),
    (neg|troop_slot_ge, "trp_player", slot_troop_prisoner_of_party, 0),
    (try_begin),
        (troop_get_slot, ":player_renown", "trp_player", slot_troop_renown),
        (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
        (assign, ":num_men", 0),
        (try_for_range, ":i_stack", 0, ":num_stacks"),
            (party_stack_get_size, ":stack_size","p_main_party",":i_stack"),
            (val_add, ":num_men", ":stack_size"),
        (try_end),
        (try_begin),
            (ge, ":player_renown", 200),
            (gt, ":num_men", 100),
            (store_random_in_range, ":rand", 0, 10),
            (try_begin),
                (eq, ":rand", 1),
                (jump_to_menu,"mnu_event_camp_follower_1"),
            (else_try),
                (eq, ":rand", 2),
                (jump_to_menu,"mnu_event_camp_follower_2"),
            (else_try),
                (eq, ":rand", 3),
                (jump_to_menu,"mnu_event_camp_follower_3"),
            (try_end),
        (try_end),
    (try_end),
]),

(0.7,[
    (call_script, "script_execude_debug_message", 181),
    (try_begin),
        (eq, "$travel_town", -1), # main story fleet
        (eq, "$g_player_is_captive", 1),

        (set_fixed_point_multiplier, 100),
        (init_position, pos32),
        (position_set_x, pos32, -10600),
        (position_set_y, pos32, 3700),

        (party_get_position, pos31, "p_transporter"),
        (get_distance_between_positions, ":distance", pos31, pos32),
        (try_begin),
            (le, ":distance", 500),

            (init_position, pos33),
            (position_set_x, pos33, -13300),
            (position_set_y, pos33, 4900),

            (party_set_position, "p_main_party", pos33),
            (set_camera_follow_party, "p_main_party"),
            (rest_for_hours, 0, 0, 0),
            (assign, "$g_player_is_captive", 0),
            #(party_set_flags, "p_transporter", pf_is_ship, 0),
            (disable_party, "p_transporter"),
            #(change_screen_return),
            (assign, "$travel_town", 0),
            (jump_to_menu, "$auto_menu"),
            (assign, "$auto_menu", -1),
            #(store_current_hours, "$g_check_autos_at_hour"),	#new 02.01.14
        (else_try),
            (set_camera_follow_party, "p_transporter"),
        (try_end),
    (else_try),
        (neq, "$travel_town", -1),
        (neq, "$travel_town", 0),
        (eq, "$g_player_is_captive", 1),
        (set_fixed_point_multiplier, 100),
        (party_get_slot, ":target_port", "$travel_town", slot_party_port_party),
        (party_get_position, pos2, ":target_port"),
        (party_get_position, pos1, "p_transporter"),
        (get_distance_between_positions, ":distance", pos1, pos2),
        (le, ":distance", 150),
        (party_get_position, pos3, "$travel_town"),
        (party_set_position, "p_main_party", pos3),
        (set_camera_follow_party, "p_main_party"),
        (rest_for_hours, 0, 0, 0),
        (assign, "$g_player_is_captive", 0),
        #(party_set_flags, "p_transporter", pf_is_ship, 0),
        (disable_party, "p_transporter"),
        #(change_screen_return),
        (try_begin),
            (is_between, "$travel_town", towns_begin, towns_end),
            (store_faction_of_party, ":faction","$travel_town"),
            (store_relation, ":relation", ":faction", "fac_player_faction"),
            (ge, ":relation", 0),	#VC-2270
            (assign, "$auto_enter_town", "$travel_town"),
        (try_end),
        (assign, "$travel_town", 0),
        #(store_current_hours, "$g_check_autos_at_hour"),	#new 02.01.14
    (try_end),
    # Piggybacking:
    (call_script, "script_map_sea_ai_2"),
]),

(1,[
    (call_script, "script_execude_debug_message", 182),
    (try_for_range, ":slot", s_nabatean_parties_begin, s_saka_parties_end),
        (troop_get_slot, ":party_no", "trp_player_camp_chest_end", ":slot"),
        (gt, ":party_no", last_static_party),
        (party_is_active, ":party_no"),
        (store_faction_of_party, ":faction", ":party_no"),
        (this_or_next|eq, ":faction", "fac_black_khergits"),##roman rebells
        (is_between, ":faction", minor_kingdoms_begin, minor_kingdoms_end),
        (try_begin),
                # (eq, ":party_template", "pt_kingdom_hero_party"),
                # (party_get_slot, ":ai_behavior", ":party_no", slot_party_ai_state),
                # (party_get_slot, ":ai_object", ":party_no", slot_party_ai_object),
                # (party_stack_get_troop_id, ":leader", ":party_no", 0),
                # (try_begin),
                  # (call_script, "script_npc_decision_checklist_party_ai", ":leader"),
                  # (neq, reg0, ":ai_behavior"),
                  # (neq, reg1, ":ai_object"),
                  # (str_store_party_name, s1, ":party_no"),
                  # (display_message, "@{s1} has wrong ai state"),
                # (try_end),
            # (else_try),
               # (check_quest_active, "qst_track_down_bandits"),
               # (quest_get_slot, ":quest_party", "qst_track_down_bandits", slot_quest_target_party),
               # (eq, ":quest_party", ":party_no"),
               # (party_is_active, ":party_no"),
               # (party_is_active, "p_main_party"),
               # (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_party),
               # (party_get_position, pos0,  "p_main_party"),
               # (party_set_ai_target_position, ":party_no", pos0),
               # (party_set_ai_object, ":party_no", "p_main_party"),
             # (else_try),
                ###have albus staying at target village
            # (eq, ":party_template", "pt_slave_revolt"),
            # (try_begin),
                # (store_distance_to_party_from_party, ":dist", "p_village_154", ":party_no"),
                # (ge, ":dist", 5),
                # (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_party),
                # (party_get_position, pos0,  "p_village_154"),
                # (party_set_ai_target_position, ":party_no", pos0),
                # (party_set_ai_object, ":party_no", "p_village_154"),
            # (else_try),
                # (party_get_position, pos0,  "p_village_154"),
                # (party_set_ai_behavior, ":party_no", ai_bhvr_patrol_location),
                # (party_set_ai_patrol_radius, ":party_no", 2),
                # (party_set_ai_target_position, ":party_no", pos0),
                # (party_set_slot, ":party_no", slot_party_ai_state, spai_patrolling_around_center),
           # (try_end),
        # (else_try),##rebel ai+minor faction AI
            (get_party_ai_behavior, ":ai_bhvr", ":party_no"),
            (party_get_slot, ":ai_behavior", ":party_no", slot_party_ai_state),
            (party_get_slot, ":ai_object_slot", ":party_no", slot_party_ai_object),
            (try_begin),
                (this_or_next|eq, ":ai_behavior", spai_starting_raid),
                (eq, ":ai_behavior", spai_raiding_around_center),
                # (try_begin),
                (is_between, ":ai_object_slot", villages_begin, villages_end),
                (store_distance_to_party_from_party, ":distance_from_target", ":party_no", ":ai_object_slot"),
                (try_begin),
                    (lt, ":distance_from_target", 2),
                    (party_set_slot, ":party_no", slot_party_ai_state,spai_raiding_around_center),
                    (party_set_ai_object, ":party_no", ":ai_object_slot"),
                    (try_begin),
                        (party_slot_eq, ":ai_object_slot", slot_village_state, svs_normal),
                        (call_script, "script_village_set_state", ":ai_object_slot", svs_being_raided),	#possible cause for VC-2085 but p_target = spt_village so it should be ok...
                        (party_set_slot, ":ai_object_slot", slot_village_raided_by, ":party_no"),
                        (try_begin),
                            (store_faction_of_party, ":village_faction", ":ai_object_slot"),
                            (this_or_next|party_slot_eq, ":ai_object_slot", slot_town_lord, "trp_player"),
                            (eq, ":village_faction", "fac_player_supporters_faction"),
                            (store_distance_to_party_from_party, ":dist", "p_main_party", ":ai_object_slot"),
                            (this_or_next|lt, ":dist", 30),
                            (party_slot_ge, ":ai_object_slot", slot_center_has_messenger_post, 1),
                            (eq, "$show_raid_messages", 1),
                            (call_script, "script_add_notification_menu", "mnu_notification_village_raid_started_rebells", ":ai_object_slot", ":party_no"),
                        (try_end),
                    (else_try),
                        (party_slot_eq, ":ai_object_slot", slot_village_state, svs_being_raided),
                    (else_try),
                        (party_set_slot, ":party_no", slot_party_ai_substate, 0),
                        (party_get_position, pos0,  ":party_no"),
                        (party_set_ai_behavior, ":party_no", ai_bhvr_patrol_location),
                        (party_set_ai_patrol_radius, ":party_no", 30),
                        (party_set_ai_target_position, ":party_no", pos0),
                        (party_set_slot, ":party_no", slot_party_ai_state, spai_patrolling_around_center),
                    (try_end),
                (else_try),
                    # (party_get_position, pos1, ":ai_object_slot"),
                    # (map_get_random_position_around_position, pos2, pos1, 1),
                    # (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_point),
                    # (party_set_ai_target_position, ":party_no", pos2),
                    # (party_set_ai_object, ":party_no", ":ai_object_slot"),
                    # (party_set_slot, ":party_no", slot_party_ai_object, ":ai_object_slot"),
                    # (party_set_slot, ":party_no", slot_party_ai_state, spai_patrolling_around_center),
                (try_end),
                # (else_try),
                    # (get_party_ai_object,":p_target",":party_no"),
                    # (gt, ":p_target", 0),
                    # (party_slot_eq, ":p_target", slot_party_type, spt_kingdom_hero_party),
                    # (neq, ":p_target", "p_main_party"),
                    # (store_distance_to_party_from_party, ":distance_from_target", ":party_no", ":p_target"),
                    # (try_begin),
                        # (lt, ":distance_from_target", 2),
                        # (party_set_slot, ":party_no", slot_party_ai_state ,spai_engaging_army),
                        # (party_set_ai_object, ":party_no", ":p_target"),
                        # (party_set_ai_behavior, ":party_no", ai_bhvr_attack_party),
                    # (else_try),
                        # (party_get_position, pos1, ":p_target"),
                        # (map_get_random_position_around_position, pos2, pos1, 1),
                        # (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_point),
                        # (party_set_ai_target_position, ":party_no", pos2),
                        # (party_set_ai_object, ":party_no", ":p_target"),
                        # (party_set_slot, ":party_no", slot_party_ai_object, ":p_target"),
                        # (party_set_slot, ":party_no", slot_party_ai_state, spai_engaging_army),
                    # (try_end),
                # (else_try),
                    # (party_get_position, pos0,  ":party_no"),
                    # (party_set_ai_behavior, ":party_no", ai_bhvr_patrol_location),
                    # (party_set_ai_patrol_radius, ":party_no", 30),
                    # (party_set_ai_target_position, ":party_no", pos0),
                    # (party_set_slot, ":party_no", slot_party_ai_state, spai_patrolling_around_center),
                    # (party_set_ai_object, ":party_no", -1),
                # (try_end),
            (else_try),#check here if they wandered on sea
                (eq, ":faction", "fac_black_khergits"),
                (party_slot_eq, ":party_no", slot_party_on_water, 1),
                # (party_get_current_terrain, ":cur_terrain", ":party_no"),
                # (this_or_next|eq,":cur_terrain",rt_water),
                # (this_or_next|eq,":cur_terrain",rt_deep_water),
                # (this_or_next|eq,":cur_terrain",rt_bridge),
                # (eq,":cur_terrain",rt_river),
                (assign, ":minimum_distance", 200),
                (assign, ":closest_village", -1),
                (try_for_range, ":town_no", towns_begin, towns_end),
                    (party_slot_eq, ":town_no", slot_town_port, 1),
                    (store_distance_to_party_from_party, ":dist", ":party_no",":town_no"),
                    (lt, ":dist", ":minimum_distance"),
                    (assign, ":minimum_distance", ":dist"),
                    (assign, ":closest_village", ":town_no"),
                (try_end),
                (gt, ":closest_village", 0),
                (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_party),
                (party_set_ai_target_position, ":party_no", ":closest_village"),
                (party_set_ai_object, ":party_no", ":closest_village"),
            (else_try),
                (neq, ":faction", "fac_black_khergits"),
                (party_get_slot, ":spawn_point", ":party_no", slot_party_spawn_point),
                (neq, ":ai_bhvr", ai_bhvr_travel_to_party),
                #(neq, ":ai_bhvr", ai_bhvr_travel_to_point),
                (set_fixed_point_multiplier, 1),
                (store_distance_to_party_from_party, ":distance", ":party_no", ":spawn_point"), #bandit lair?
                (party_get_num_prisoners, ":prisoners", ":party_no"),
                (this_or_next|gt, ":distance", 40),
                (this_or_next|party_slot_eq, ":party_no", slot_party_on_water, 1),
                (gt, ":prisoners", 50),
                (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_party),
                (party_set_ai_object, ":party_no", ":spawn_point"),
                (party_set_slot, ":party_no", slot_party_ai_object, ":spawn_point"),
                (party_set_slot, ":party_no", slot_party_ai_state, spai_retreating_to_center),
            (else_try),##reached spawn, start patrolling again
                (eq, ":ai_behavior", spai_retreating_to_center),
                (neq, ":faction", "fac_black_khergits"),
                (try_begin),
                    (eq, ":ai_bhvr", ai_bhvr_travel_to_party),
                    (set_fixed_point_multiplier, 1),
                    (party_get_slot, ":spawn_point", ":party_no", slot_party_spawn_point),
                    (store_distance_to_party_from_party, ":distance", ":party_no", ":spawn_point"), #bandit lair?
                    (le, ":distance", 3),
                    (party_is_in_any_town, ":party_no"),

                    (call_script, "script_party_remove_all_prisoners", ":party_no"),#also drop of prisoners
                    (party_set_ai_patrol_radius, ":party_no", 30),
                    (party_set_ai_behavior, ":party_no", ai_bhvr_patrol_party),
                    (party_set_ai_object, ":party_no", ":spawn_point"),
                    (party_set_slot, ":party_no", slot_party_ai_object, ":spawn_point"),
                    (party_set_slot, ":party_no", slot_party_ai_state, spai_patrolling_around_center),
                (try_end),
            (else_try),
            ##search for a target to raid
                (store_party_size_wo_prisoners,":size", ":party_no"),
                (ge, ":size", 60),

                # (store_relation, ":relation", ":faction", ":rome"),
                # (le, ":relation", -10),

                (assign, ":minimum_distance", 60),
                (call_script, "script_party_calculate_strength", ":party_no", 0),
                (assign, ":attacker_strength", reg0),
                (assign, ":closest_village", -1),

                (store_random_in_range, ":village_no", villages_begin, villages_end),

                (try_begin),
                    (eq, ":faction", "fac_black_khergits"),##roman rebells
                    (try_begin),
                        (store_distance_to_party_from_party, ":dist", ":party_no",":village_no"),
                        (lt, ":dist", ":minimum_distance"),
                        (neg|party_slot_eq, ":village_no", slot_village_state, svs_looted),
                        (neg|party_slot_eq, ":village_no", slot_village_state, svs_being_raided),
                        (neg|party_slot_ge, ":village_no", slot_village_infested_by_bandits, 1),
                        (store_faction_of_party, ":village_faction", ":village_no"),
                        (store_relation, ":relation", ":faction", ":village_faction"),##loot any hostile village
                        (lt, ":relation", 0),
                        ##Nero Claudius: Player may give garrisons to his villages to protect them
                        ##strength of the village
                        (call_script, "script_party_calculate_strength", ":village_no", 0),
                        (assign, ":defender_strength", reg0),
                        #strength match
                        (gt, ":attacker_strength", ":defender_strength"),
                        ##Nero Claudius end
                        (assign, ":minimum_distance", ":dist"),
                        (assign, ":closest_village", ":village_no"),
                    (try_end),
                (else_try),###West African Factions
                    (this_or_next|eq, ":faction", "fac_gaetuli"),
                    (eq, ":faction", "fac_garamantes"),
                    (try_begin),
                        (this_or_next|party_slot_eq, ":village_no", slot_center_province, p_afrc_cyre),##only certain villages
                        (this_or_next|party_slot_eq, ":village_no", slot_center_province, p_afrc_afrc),
                        (party_slot_eq, ":village_no", slot_center_province, p_afrc_maur),
                        (store_distance_to_party_from_party, ":dist", ":party_no",":village_no"),
                        (lt, ":dist", ":minimum_distance"),
                        (neg|party_slot_eq, ":village_no", slot_village_state, svs_looted),
                        (neg|party_slot_eq, ":village_no", slot_village_state, svs_being_raided),
                        (neg|party_slot_ge, ":village_no", slot_village_infested_by_bandits, 1),
                        (store_faction_of_party, ":village_faction", ":village_no"),
                        (store_relation, ":relation", ":faction", ":village_faction"),
                        (lt, ":relation", 0),
                        ##Nero Claudius: Player may give garrisons to his villages to protect them
                        ##strength of the village
                        (call_script, "script_party_calculate_strength", ":village_no", 0),
                        (assign, ":defender_strength", reg0),
                        #strength match
                        (gt, ":attacker_strength", ":defender_strength"),
                        ##Nero Claudius end
                        (assign, ":minimum_distance", ":dist"),
                        (assign, ":closest_village", ":village_no"),
                    (try_end),
                (else_try),##Egypt and Arabia
                    (try_begin),
                        (this_or_next|party_slot_eq, ":village_no", slot_center_province, p_afrc_egyp),
                        (this_or_next|party_slot_eq, ":village_no", slot_center_province, p_asia_arab),
                        (this_or_next|party_slot_eq, ":village_no", slot_center_province, p_asia_syr),
                        (party_slot_eq, ":village_no", slot_center_province, p_asia_jude),
                        (store_distance_to_party_from_party, ":dist", ":party_no",":village_no"),
                        (lt, ":dist", ":minimum_distance"),
                        (neg|party_slot_eq, ":village_no", slot_village_state, svs_looted),
                        (neg|party_slot_eq, ":village_no", slot_village_state, svs_being_raided),
                        (neg|party_slot_ge, ":village_no", slot_village_infested_by_bandits, 1),
                        (store_faction_of_party, ":village_faction", ":village_no"),
                        (store_relation, ":relation", ":faction", ":village_faction"),
                        (lt, ":relation", 0),
                        ##Nero Claudius: Player may give garrisons to his villages to protect them
                        ##strength of the village
                        (call_script, "script_party_calculate_strength", ":village_no", 0),
                        (assign, ":defender_strength", reg0),
                        #strength match
                        (gt, ":attacker_strength", ":defender_strength"),
                        ##Nero Claudius end
                        (assign, ":minimum_distance", ":dist"),
                        (assign, ":closest_village", ":village_no"),
                    (try_end),
                (try_end),
                (is_between, ":closest_village", villages_begin, villages_end),
                (party_get_position, pos1, ":closest_village"),
                (map_get_random_position_around_position, pos2, pos1, 1),
                (party_set_ai_behavior, ":party_no", ai_bhvr_travel_to_point),
                (party_set_ai_target_position, ":party_no", pos2),
                (party_set_ai_object, ":party_no", ":closest_village"),
                (party_set_slot, ":party_no", slot_party_ai_object, ":closest_village"),
                (party_set_slot, ":party_no", slot_party_ai_state, spai_starting_raid),
            (else_try),##if everything else fails start patrolling
                (party_get_position, pos0,  ":party_no"),
                (party_set_ai_behavior, ":party_no", ai_bhvr_patrol_location),
                (party_set_ai_patrol_radius, ":party_no", 30),
                (party_set_ai_target_position, ":party_no", pos0),
                (party_set_slot, ":party_no", slot_party_ai_state, spai_patrolling_around_center),
                (party_set_ai_object, ":party_no", -1),
            # (else_try),##to fix a bug after a village is raided
                # (get_party_ai_current_behavior, ":cur_bev", ":party_no"),
                # (this_or_next|eq, ":cur_bev", ai_bhvr_travel_to_point),
                # (eq, ":cur_bev", ai_bhvr_travel_to_party),
                # (eq, ":ai_bhvr", ai_bhvr_avoid_party),
                # (party_get_position, pos0,  ":party_no"),
                # (party_set_ai_behavior, ":party_no", ai_bhvr_patrol_location),
                # (party_set_ai_patrol_radius, ":party_no", 30),
                # (party_set_ai_target_position, ":party_no", pos0),
                # (party_set_slot, ":party_no", slot_party_ai_state, spai_patrolling_around_center),
                # (party_set_ai_object, ":party_no", -1),
            (try_end),
        (try_end),
    (try_end),
]),

(24,[
    (call_script, "script_execude_debug_message", 183),
	##player can order generals to join his party (if he is emperor or marshall), this is for removing them after 7 days of service
    (neg|party_slot_eq, "p_main_party", slot_party_on_water, 1),
    (try_begin),
        (party_get_num_attached_parties, ":num_attached_parties",  "p_main_party"),
        (ge, ":num_attached_parties", 1),
        (try_for_range, ":attached_party_rank", 0, ":num_attached_parties"),
            (party_get_attached_party_with_rank, ":attached_party", "p_main_party", ":attached_party_rank"),
            (party_get_slot, ":timer_2",":attached_party", slot_party_time_service),
            (val_add, ":timer_2", 1),
            (party_set_slot,":attached_party",slot_party_time_service,":timer_2"),
            (try_begin),
                (gt, ":timer_2", 6),
                # (party_detach, ":attached_party"),
                # (party_set_slot,":attached_party",slot_party_time_service, -1),
                # (party_relocate_near_party, ":attached_party", "p_main_party", 3),
                # (str_store_party_name, s22, ":attached_party"),
                # (display_message, "@{s22} has left your force."),
                (party_slot_eq, ":attached_party", slot_party_type, spt_kingdom_hero_party),
                (party_stack_get_troop_id, ":leader",":attached_party",0),
                (troop_slot_eq, ":leader", slot_troop_occupation, slto_kingdom_hero),
                (neg|main_party_has_troop, ":leader"),
                (assign, "$talk_context", tc_campaign_talk),
                (start_map_conversation, ":leader", -1),
            (try_end),
        (try_end),
    (try_end),
   ##player health trigger
    (try_begin),
        (map_free), #on map, some triggers fire, even if a screen is open, e.g. battle
        (neq, "$g_player_is_captive", 1),
        (troop_get_slot, ":unhealth", "trp_player", slot_troop_unhealth),
        (ge, ":unhealth", 625),
        (val_sub, ":unhealth", 600),
        (store_random_in_range, ":bad_luck", 0, 3050),
        (lt, ":bad_luck", ":unhealth"),
        (assign, "$temp", 1),
        (jump_to_menu, "mnu_death_waits"),
    (try_end),
]),

(24*7,[
    (call_script, "script_execude_debug_message", 184),
    (try_begin),
        (neg|check_quest_active, "qst_nero_special_quest"),
        (eq, "$players_kingdom", "fac_kingdom_7"),
        (troop_slot_ge, "trp_player", slot_troop_renown, 200),
        (neq, "$g_player_is_captive", 1),
        (troop_slot_eq, "trp_kingdom_7_lord", slot_troop_occupation, slto_kingdom_hero),#Nero still alive
        (assign, ":c", 0),
        (try_begin),
            (quest_slot_eq, "qst_nero_special_quest", slot_quest_target_dna, -1),
            (assign, ":c", 2),
        (else_try),
            (troop_slot_ge, "trp_kingdom_7_lord", slot_troop_met, 1),##has met nero
            (quest_slot_eq, "qst_nero_special_quest", slot_quest_target_dna, 0),
            (troop_slot_ge, "trp_kingdom_7_lord", slot_troop_player_relation, 10),#likes player
            (assign, ":c", 1),
        (else_try),
            (troop_slot_ge, "trp_kingdom_7_lord", slot_troop_met, 1),##has met nero
            (quest_slot_eq, "qst_nero_special_quest", slot_quest_target_dna, 1),
            (troop_slot_ge, "trp_kingdom_7_lord", slot_troop_player_relation, 20),#likes player
            (assign, ":c", 1),
        (else_try),
            (troop_slot_ge, "trp_kingdom_7_lord", slot_troop_met, 1),##has met nero
            (quest_slot_eq, "qst_nero_special_quest", slot_quest_target_dna, 2),
            (troop_slot_ge, "trp_kingdom_7_lord", slot_troop_player_relation, 30),#likes player
            (assign, ":c", 1),
        (else_try),
            (troop_slot_ge, "trp_kingdom_7_lord", slot_troop_met, 1),##has met nero
            (troop_slot_ge, "trp_player", slot_troop_renown, 400),#is renowned
            (quest_slot_eq, "qst_nero_special_quest", slot_quest_target_dna, 3),
            (assign, ":c", 1),
        (else_try),
            (troop_slot_ge, "trp_kingdom_7_lord", slot_troop_met, 1),##has met nero
            (troop_slot_ge, "trp_player", slot_troop_renown, 500),#is renowned
            (quest_slot_eq, "qst_nero_special_quest", slot_quest_target_dna, 4),
            (assign, ":c", 1),
        (else_try),
            (troop_slot_ge, "trp_kingdom_7_lord", slot_troop_met, 1),##has met nero
            (troop_slot_ge, "trp_player", slot_troop_renown, 600),#is renowned
            (quest_slot_eq, "qst_nero_special_quest", slot_quest_target_dna, 5),
            (assign, ":c", 1),
        # (else_try),
        #     (troop_slot_ge, "trp_kingdom_7_lord", slot_troop_met, 1),##has met nero
        #     (troop_slot_ge, "trp_player", slot_troop_renown, 600),#is renowned
        #     (quest_slot_eq, "qst_nero_special_quest", slot_quest_target_dna, 6),
        #     (assign, ":c", 1),
        (try_end),
        (try_begin),
            (eq, ":c", 1),
            (call_script, "script_add_notification_menu", "mnu_nero_special_quest_1", 0,0),
        (else_try),
            (eq, ":c", 2),
            (call_script, "script_add_notification_menu", "mnu_invitation_to_garden_party", 0,0),
        (try_end),
    (try_end),
    (try_begin),
        (troop_slot_ge, "trp_plinius_elder", slot_expedition_progress_south, 11),
        (troop_slot_ge, "trp_plinius_elder", slot_expedition_progress_east, 11),
        (troop_slot_eq, "trp_plinius_elder", slot_expedition_event_1_shown, 0),
        (store_troop_gold, ":g", "trp_player"),
        (ge, ":g", 1000000),
        (call_script, "script_add_notification_menu", "mnu_exploration_event_1", 0,0),
    (else_try),#not done yet
        (troop_slot_ge, "trp_plinius_elder", slot_expedition_progress_east, 12),
        (troop_slot_eq, "trp_plinius_elder", slot_expedition_event_2_shown, 0),
        (store_troop_gold, ":g", "trp_player"),
        (ge, ":g", 1000000),
        (call_script, "script_add_notification_menu", "mnu_exploration_event_2", 0,0),
    (try_end),
    (try_begin),
        (neq, "$g_player_is_captive", 1),
        (troop_slot_ge, "trp_diplomat_india", slot_india_sea_mission_in_progress, 1),
        (store_troop_gold, ":g", "trp_player"),
        (store_random_in_range, ":r", 0, 30),
        (try_begin),
            (le, ":r", 9),
            (ge, ":g", 50000),
            (call_script, "script_add_notification_menu", "mnu_india_event_2", 0,0),
        (else_try),
            (le, ":r", 14),
            (ge, ":g", 100000),
            (troop_slot_eq, "trp_diplomat_india", slot_india_compass, 0),
            (call_script, "script_add_notification_menu", "mnu_india_event_3", 0,0),
        (else_try),
            (le, ":r", 20),
            (ge, ":g", 1000000),
            (troop_slot_ge, "trp_diplomat_india", slot_india_compass, 1),
            (troop_slot_eq, "trp_diplomat_india", slot_india_india_sea_caravan_expanded, 0),
            (call_script, "script_add_notification_menu", "mnu_india_event_4", 0,0),
        (try_end),
    (try_end),

    ##senate system##there are 2 triggers, city relation has a higher influence
    (try_begin),
        (troop_slot_ge, "trp_senator_dummy", slot_senate_support, 10),
        (store_faction_of_party, ":fac", "p_town_6"),
        (eq, ":fac", "$players_kingdom"),
        (neg|party_slot_ge, "p_town_6", slot_party_looted_left_days, 1),
        (try_begin),
            (party_get_slot, ":rel", "p_town_6", slot_center_player_relation),
            (val_div, ":rel", 50),
            (val_mul, ":rel", -1),
            (store_add, ":chance", ":rel", 20),
            (store_random_in_range, ":r", 0, 100),
            (le, ":r", ":chance"),
            (set_show_messages, 0),
            (call_script, "script_change_senate_support", -1, 0),
            (set_show_messages, 1),
            (display_message, "@You lose support in the senate. (Decline over time)", color_bad_news),
        (try_end),
        ##nero relationship
        (try_begin),
            (troop_slot_eq, "trp_kingdom_7_lord", slot_troop_occupation, slto_kingdom_hero),
            (assign, ":safe_reg0", reg0),##safe reg0
            (call_script, "script_troop_get_player_relation", "trp_kingdom_7_lord"),
            (assign, ":ner_like", reg0),
            (assign, reg0, ":safe_reg0"),##safe reg0
            (val_div, ":ner_like", 10),##-10 to 10
            (gt, ":ner_like", 0),  #if it is positive
            (store_random_in_range, ":r", 0, 100),
            (lt, ":r", ":ner_like"),
            (set_show_messages, 0),
            (call_script, "script_change_senate_support", -1, 0),
            (set_show_messages, 1),
            (display_message, "@Due to your relationship with Caesar Nero, you lose support in the senate.", color_bad_news),
        (try_end),
    (try_end),

    (try_begin),
        # (gt, "$g_player_minister", 1),
        (eq, "$g_player_debt_to_party_members", 0),
        (neq, "$g_player_is_captive", 1),
        (neg|troop_slot_ge, "trp_player", slot_troop_prisoner_of_party, 0),
        (store_troop_gold, ":gold", "trp_household_possessions"),
        (ge, ":gold", 125000),
        (store_random_in_range, ":r", 0, 11),
        (lt, ":r", 4),
        (assign, ":continue", 0),
        (try_begin),
            (call_script, "script_troop_get_player_relation", "$g_player_minister"),
            (le, reg0, -10),
            (assign, ":continue", 1),
        (else_try),
            (lt, "$player_honor", 0),
            (call_script, "script_troop_get_player_relation", "$g_player_minister"),
            (le, reg0, 0),
            (assign, ":continue", 1),
        (else_try),
            (lt, "$player_honor", -10),
            (call_script, "script_troop_get_player_relation", "$g_player_minister"),
            (le, reg0, 10),
            (assign, ":continue", 1),
        (else_try),
            (lt, "$player_honor", -20),
            (call_script, "script_troop_get_player_relation", "$g_player_minister"),
            (le, reg0, 20),
            (assign, ":continue", 1),
        (else_try),
            (lt, "$player_honor", -30),
            (call_script, "script_troop_get_player_relation", "$g_player_minister"),
            (le, reg0, 30),
            (assign, ":continue", 1),
        (else_try),
            (lt, "$player_honor", -40),
            (call_script, "script_troop_get_player_relation", "$g_player_minister"),
            (le, reg0, 40),
            (assign, ":continue", 1),
        (else_try),
            (lt, "$player_honor", -60),
            (call_script, "script_troop_get_player_relation", "$g_player_minister"),
            (le, reg0, 70),
            (assign, ":continue", 1),
        (else_try),
            (lt, "$player_honor", -80),
            (call_script, "script_troop_get_player_relation", "$g_player_minister"),
            (le, reg0, 90),
            (assign, ":continue", 1),
        (else_try),
            (lt, "$player_right_to_rule", 50),
            (assign, ":continue", 1),
        (try_end),
        (eq, ":continue", 1),
        (jump_to_menu, "mnu_gold_losses"),
    (try_end),

    (try_begin),
        (eq, "$g_player_debt_to_party_members", 0),
        (neq, "$g_player_is_captive", 1),
        (faction_slot_eq, "$players_kingdom", slot_faction_leader, "trp_player"),
        (faction_slot_eq, "$players_kingdom", slot_faction_government_type, gov_imperial),
        (neg|troop_slot_ge, "trp_player", slot_troop_prisoner_of_party, 0),
        (faction_get_slot, ":treasury", "$players_kingdom", slot_faction_treasury),
        (ge, ":treasury", 150000),
        (try_begin),
            (le, ":treasury", 150000),
            (assign, ":prob", 25),
        (else_try),
            (le, ":treasury", 200000),
            (assign, ":prob", 30),
        (else_try),
            (le, ":treasury", 300000),
            (assign, ":prob", 35),
        (else_try),
            (le, ":treasury", 400000),
            (assign, ":prob", 40),
        (else_try),
            (le, ":treasury", 600000),
            (assign, ":prob", 45),
        (else_try),
            (le, ":treasury", 800000),
            (assign, ":prob", 50),
        (else_try),
            (le, ":treasury", 900000),
            (assign, ":prob", 55),
        (else_try),
            (le, ":treasury", 1000000),
            (assign, ":prob", 60),
        (else_try),
            (le, ":treasury", 1150000),
            (assign, ":prob", 70),
        (else_try),
            (assign, ":prob", 80),
        (try_end),
        (store_random_in_range, ":r", 0, 100),
        (lt, ":r", ":prob"),

        (jump_to_menu, "mnu_gold_losses_imperial_treasury"),
    (try_end),
]),

##new quests
(24,[
    (call_script, "script_execude_debug_message", 185),
    (try_begin),
        (map_free),#better not be in a menu there
        (check_quest_active, "qst_elusive_bandits"),
        (quest_slot_eq, "qst_elusive_bandits", slot_quest_current_state, 10),
        (store_party_size, ":size", "p_main_party"),
        (le, ":size", 50),
        (set_spawn_radius, 2),
        (tutorial_box, "@Danger!", "@The bandits approach."),
        (call_script, "script_spawn_party", "p_main_party", "pt_raider_party"),
        (assign, ":bandit_party", reg0),

        (try_begin),
            (le, ":bandit_party", last_static_party),
            (display_log_message, "@ERROR ERROR ERROR: Wrong bandit party, qst_elusive_bandits", message_negative),
        (try_end),
        (party_set_faction, ":bandit_party", "fac_outlaws"),
        (party_set_ai_behavior, ":bandit_party", ai_bhvr_attack_party),
        (party_set_aggressiveness,":bandit_party", 15),
        (party_set_courage,":bandit_party", 15),
        (party_set_ai_initiative,":bandit_party", 100),
        (party_set_ai_object, ":bandit_party", "p_main_party"),
        (quest_set_slot, "qst_elusive_bandits", slot_quest_target_party, ":bandit_party"),
        (quest_set_slot, "qst_elusive_bandits", slot_quest_current_state, 11),
    (try_end),

    (try_begin),
        (neq, "$can_sacrific", 1),##for sacrificing temples
        (assign, "$can_sacrific", 1),
    (try_end),

    # ask nero about influence
    (try_begin),
        (troop_slot_ge, "trp_kingdom_7_lord", slot_troop_bachus, 1),
        (troop_set_slot, "trp_kingdom_7_lord", slot_troop_bachus, 0),
    (try_end),

    # (try_begin),
      # (check_quest_active, "qst_gain_renown"),
      # (troop_slot_ge, "trp_player", slot_troop_renown, 200),
      # (call_script, "script_succeed_quest", "qst_gain_renown"),
      # (call_script, "script_end_quest", "qst_gain_renown"),
      # (add_xp_as_reward, 2000),
      # (display_message, "@You have finished one of your goals, and gained at least 200 renown!", color_good_news),
    # (try_end),
    (try_begin),
        (map_free),
        (neg|check_quest_active, "qst_gain_renown"),
        (neg|check_quest_active, "qst_join_roman_army"),
        (neg|check_quest_active, "qst_important_friends"),
        (check_quest_active, "qst_blank_quest_19"),
        (neq, "$g_player_is_captive", 1),
        (neq, "$g_is_emperor", 1),
        (eq, "$players_kingdom", "fac_kingdom_7"),
        (troop_slot_ge, "trp_player", slot_troop_renown, 199),
        (quest_slot_eq, "qst_blank_quest_5", slot_quest_current_state, 6),
        # (call_script, "script_add_notification_menu", "mnu_thoughts",0,0),
        (try_begin),
            (ge, "$g_rank", 1),
            (call_script, "script_add_notification_menu", "mnu_meeting_with_antonia",0,0),
        (else_try),
            (call_script, "script_add_notification_menu", "mnu_meeting_with_antonia_civilian", 0,0),
        (try_end),
    (try_end),
    (try_begin),
        (neg|check_quest_active, "qst_gain_renown"),
        (neg|check_quest_active, "qst_join_roman_army"),
        (check_quest_active, "qst_blank_quest_19"),
        (check_quest_active, "qst_important_friends"),
        (check_quest_active, "qst_four_emperors"),
        (neq, "$g_player_is_captive", 1),
        (neq, "$g_is_emperor", 1),

        (ge, "$g_rank", 1),
        (troop_slot_ge, "trp_player", slot_troop_renown, 199),
        (quest_slot_eq, "qst_important_friends", slot_quest_current_state, 1),
        # (store_attribute_level, ":int", "trp_player", ca_intelligence),
        # (ge, ":int", 12),
        (call_script, "script_add_notification_menu", "mnu_thoughts_2",0,0),
    (try_end),
]),

(24*2, [
    (call_script, "script_execude_debug_message", 186),
    (try_begin),#I use this instead of global variables
        ##pig bagging:
        (troop_set_slot, "trp_custom_troops_end", slot_troop_spouse, 0),#playing flip a coin with tavern keeper
        (troop_set_slot, "trp_custom_troops_end", slot_troop_father, 0),#playing flip a coin with in keeper
        (troop_set_slot, "trp_custom_troops_end", slot_troop_mother, 0),#playing flip a coin with tavern goers and soldiers
    (try_end),
    #(eq, "$g_tributary_ai", 1),
    #(try_for_range, ":faction_a", npc_kingdoms_begin, npc_kingdoms_end),
    (store_random_in_range, ":faction_a", npc_kingdoms_begin, npc_kingdoms_end),
    (try_begin),
        (faction_slot_eq, ":faction_a", slot_faction_rebelling_against, 0), # is not rebelling
        (faction_slot_eq, ":faction_a", slot_faction_state, sfs_active),#active
        #barbarian
        (neg|faction_slot_eq, ":faction_a", slot_faction_culture, "fac_culture_7"),#not Roman
        (neq, ":faction_a", "fac_kingdom_19"),# not a rebel faction
        (neq, ":faction_a", "fac_kingdom_17"),# not a rebel faction
        (faction_get_slot, ":num_towns", ":faction_a", slot_faction_num_castles),
        (faction_get_slot, ":num_castles_a", ":faction_a", slot_faction_num_towns),
        (val_add, ":num_castles_a", ":num_towns"),
        (le, ":num_castles_a", 5),#between 1 and 3 towns or castles (e.g. Quadi at game start)
        #get a true winner
        (assign, ":winner", -1),
        (assign, ":winner_score", -1),
        (assign, ":num_of_wars", 0),
        (assign, ":num_of_allies", 0),
        (try_for_range, ":faction_b", kingdoms_begin, npc_kingdoms_end),
            (faction_slot_eq, ":faction_b", slot_faction_state, sfs_active),#active
            (store_relation, ":relation", ":faction_a", ":faction_b"),
            (try_begin),##count allies
                (ge, ":relation", 0),#they are at peace
                (store_add, ":truce_slot", ":faction_a", slot_faction_truce_days_with_factions_begin),
                (val_sub, ":truce_slot", kingdoms_begin),
                (faction_get_slot, ":truce_days", ":faction_b", ":truce_slot"),

                (gt, ":truce_days", dplmc_treaty_defense_days_expire),
                (val_add, ":num_of_allies", 1),
            (try_end),
            (lt, ":relation", -1),#they are at war
            #(neg|faction_slot_eq, ":faction_b", slot_faction_culture, "fac_culture_7"),#not allowed for Romans
            (store_add, ":slot_war_damage_inflicted_on_a", ":faction_a", slot_faction_war_damage_inflicted_on_factions_begin),
            (val_sub, ":slot_war_damage_inflicted_on_a", kingdoms_begin),
            (faction_get_slot, ":war_damage_inflicted_by_b", ":faction_b", ":slot_war_damage_inflicted_on_a"),

            (store_add, ":slot_war_damage_inflicted_on_b", ":faction_b", slot_faction_war_damage_inflicted_on_factions_begin),
            (val_sub, ":slot_war_damage_inflicted_on_b", kingdoms_begin),
            (faction_get_slot, ":war_damage_inflicted_by_a", ":faction_a", ":slot_war_damage_inflicted_on_b"),

            (try_begin),#num of wars losing
                (gt, ":war_damage_inflicted_by_b", ":war_damage_inflicted_by_a"),
                (val_add, ":num_of_wars", 1),
            (try_end),

            (try_begin),
                (ge, "$cheat_mode", 1),
                (assign, reg33, ":war_damage_inflicted_by_b"),
                (assign, reg34, ":war_damage_inflicted_by_a"),
                (str_store_faction_name, s1, ":faction_a"),
                (str_store_faction_name, s2, ":faction_b"),
                (display_message, "@war_damage_inflicted_by_b: {reg33} ({s2}) war_damage_inflicted_by_a: {reg34} ({s1})"),
            (try_end),
            (val_mul, ":war_damage_inflicted_by_a", 2),

            (faction_get_slot, ":num_towns", ":faction_b", slot_faction_num_castles),
            (faction_get_slot, ":num_castles_b", ":faction_b", slot_faction_num_towns),
            (val_add, ":num_castles_b", ":num_towns"),
            (gt, ":num_castles_b", ":num_castles_a"),#to avoid that a small nation vassalizes a large one

            (gt, ":war_damage_inflicted_by_b", ":war_damage_inflicted_by_a"),
            (gt, ":war_damage_inflicted_by_b", ":winner_score"),
            (assign, ":winner_score", ":war_damage_inflicted_by_b"),
            (assign, ":winner", ":faction_b"),
        (try_end),
        (val_mul, ":num_castles_a", 30),
        (val_mul, ":num_of_allies", 30),
        (store_mul, ":num_of_wars_effect", ":num_of_wars", 30),
        (store_sub, ":threshold", 300, ":num_of_wars_effect"),
        (val_add, ":threshold", ":num_castles_a"),
        (val_add, ":threshold", ":num_of_allies"),

        (try_begin),##debug information
            (ge, "$cheat_mode", 1),
            (assign, reg33, ":threshold"),
            (assign, reg34, ":num_castles_a"),
            (assign, reg35, ":num_of_allies"),
            (assign, reg36, ":num_of_wars"),
            (str_store_faction_name, s1, ":faction_a"),
            (try_begin),
                (gt, ":winner", -1),
                (str_store_faction_name, s3, ":winner"),
                (assign, reg37, ":winner_score"),
            (else_try),
                (str_store_string, s3, "str_none"),
                (assign, reg37, ":winner_score"),
            (try_end),
            (display_message, "@faction_a: {s1}, threshold: {reg33}, num_castles_a: {reg34}, num_of_allies: {reg35}. num_of_wars: {reg36}, winner: {s3}, winner_score: {reg37}"),
        (try_end),

        (try_begin),
            (ge, ":num_of_wars", 1),#at least one wars
            (try_begin),
                (ge, ":winner", npc_kingdoms_begin),
                (gt, ":winner_score", ":threshold"),
                (call_script, "script_dplmc_start_tributary_between_kingdoms", ":faction_a", ":winner", 1),
            (else_try),
                (eq, ":winner", "fac_player_supporters_faction"),
                (call_script, "script_add_notification_menu", "mnu_notification_tributary_offer", ":faction_a", 0),
            (try_end),
        (try_end),
    (try_end),
]),

(24*3,[
    (call_script, "script_execude_debug_message", 187),
    (try_begin),
        (troop_slot_eq, "trp_global_variables", g_iazyges_event, 2),
        (call_script, "script_add_notification_menu", "mnu_iazyges_event",0,0),
    (else_try),
        (troop_slot_eq, "trp_global_variables", g_iazyges_event, -1),
        (call_script, "script_add_notification_menu", "mnu_iazyges_event_2",0,0),
    (try_end),
]),

##code for bandits at night and bandits in towns
(24.0*6.0/(number_of_towns),[
    (call_script, "script_execude_debug_message", 188),
    (store_random_in_range, ":center_no", towns_begin, towns_end),
    (call_script, "script_cf_center_night_bandits_check", ":center_no"),
]),

##code for bandits at night and bandits in villages
(24.0*6.0/(number_of_villages),[
    (call_script, "script_execude_debug_message", 189),
    (store_random_in_range, ":center_no", villages_begin, villages_end),
    (call_script, "script_cf_center_night_bandits_check", ":center_no"),
]),

(24,[
    (call_script, "script_execude_debug_message", 190),
    (map_free),#free travelling
    (store_random_in_range, ":companion", companions_begin, companions_end),
    (main_party_has_troop, ":companion"),
    # (str_store_troop_name, s21, ":companion"),

    (store_current_day, ":day"),
    (troop_get_slot, ":enlistment_day", ":companion", slot_troop_service_time),
    (val_sub, ":day", 7),#at least 7 days have passed since joined
    (gt, ":day", ":enlistment_day"),

    (try_begin),
        (store_character_level, ":level", ":companion"),
        (lt, ":level", 15),
        (store_random_in_range, ":r", 0, 4),
        (le, ":r", 1),
        (str_store_troop_name, s21, ":companion"),
        (store_random_in_range, ":string", "str_companion_event_1", "str_companion_event_end"),
        (str_store_string, s22, ":string"),
        (str_store_string, s23, "str_companion_event_level"),
        (display_message, "str_s22_s23", color_good_news),
        (store_current_day, ":day"),
        (troop_set_slot, ":companion", slot_troop_service_time, ":day"),
        (add_xp_to_troop, 5000, ":companion"),
    (else_try),
        (store_attribute_level, ":strength", ":companion", ca_strength),
        (lt, ":strength", 15),
        (store_random_in_range, ":r", 0, 4),
        (le, ":r", 1),
        (str_store_troop_name, s21, ":companion"),
        (store_random_in_range, ":string", "str_companion_event_1", "str_companion_event_end"),
        (str_store_string, s22, ":string"),
        (str_store_string, s23, "str_companion_event_strength"),
        (display_message, "str_s22_s23", color_good_news),
        (store_current_day, ":day"),
        (troop_set_slot, ":companion", slot_troop_service_time, ":day"),
        (troop_raise_attribute,":companion", ca_strength, 1),
        (add_xp_to_troop, 500, ":companion"),
    (else_try),
        (store_attribute_level, ":agility", ":companion", ca_agility),
        (lt, ":agility", 15),
        (store_random_in_range, ":r", 0, 4),
        (le, ":r", 1),
        (str_store_troop_name, s21, ":companion"),
        (store_random_in_range, ":string", "str_companion_event_1", "str_companion_event_end"),
        (str_store_string, s22, ":string"),
        (str_store_string, s23, "str_companion_event_agility"),
        (display_message, "str_s22_s23", color_good_news),
        (store_current_day, ":day"),
        (troop_set_slot, ":companion", slot_troop_service_time, ":day"),
        (troop_raise_attribute,":companion", ca_agility, 1),
        (add_xp_to_troop, 500, ":companion"),
    (try_end),
]),

(48,[
    (call_script, "script_execude_debug_message", 191),
    (eq, "$g_player_is_captive", 0),#not captive
    (eq, "$enlisted_party", -1),#no freelance
    (neg|check_quest_active, "qst_investment"),
    (store_random_in_range, ":rand", 0, 10),
    (le, ":rand", 2),
    (troop_slot_ge, "trp_argentarius", slot_troop_met, 1),
    (quest_slot_eq, "qst_investment", slot_quest_dont_give_again_remaining_days, 0),
    (troop_slot_eq, "trp_player", slot_troop_culture, "fac_culture_7"),
    (troop_slot_ge, "trp_player", slot_troop_renown, 200),
    (store_relation, ":relation", "fac_kingdom_7", "fac_player_faction"),
    (this_or_next|ge, ":relation", 0),
    (faction_slot_eq, "$players_kingdom", slot_faction_culture, "fac_culture_7"),
    (store_troop_gold, ":gold", "trp_player"),
    (gt, ":gold", 75000),
    (jump_to_menu, "mnu_investment"),
]),

###TRIGGER: "LEGION SYSTEM"
(24,[
    (call_script, "script_execude_debug_message", 192),
    (try_for_range, ":slot", slot_legion_home_begin, slot_legion_home_end),
        (troop_get_slot, ":headquarter", "trp_province_array", ":slot"),

        (is_between, ":headquarter", walled_centers_begin, walled_centers_end),
        (store_faction_of_party, ":faction_hq", ":headquarter"),

        (store_sub, ":legion", ":slot", slot_legion_home_begin),
        (store_add, ":slot_commander", slot_legion_commanders_begin, ":legion"),
        (troop_get_slot, ":legate", "trp_province_array", ":slot_commander"),

        (gt, ":legate", -1),
        (store_faction_of_troop, ":faction", ":legate"),

        # find new legate if not already done
        (try_begin), # legate is dead, find new one
            (neg|faction_slot_eq, ":faction", slot_faction_leader, "trp_player"), # is AI
            (neg|troop_slot_eq, ":legate", slot_troop_occupation, slto_kingdom_hero), # legate is alive but aux commander not
            (call_script, "script_find_new_commander_for_legion", ":legion", ":faction"),
        (else_try),# legate alive, but slot is wrong
            (troop_slot_eq, ":legate", slot_troop_occupation, slto_kingdom_hero), # legate is alive but aux commander not
            (neg|troop_slot_ge, ":legate", slot_troop_legion, 1),
            (call_script, "script_troop_set_rank", ":legate", slot_troop_legion, ":legion"),
            (neq, ":legate", "trp_player"),
            (call_script, "script_change_lord_party_to_fit_rank", ":legate"),
            (str_store_troop_name_link, s17, ":legate"),
            (display_message, "@{s17} hires troops for his legion."),
        (else_try),
            (neg|faction_slot_eq, ":faction", slot_faction_leader, "trp_player"), # is AI
            # check for auxiliar commanders dead
            (try_for_range, ":aux_commander_slot", slot_aux_commander_begin, slot_aux_commander_end),
                (store_sub, ":aux_legion_slot", ":aux_commander_slot", slot_aux_commander_begin),
                (val_add, ":aux_legion_slot", slot_aux_legion_begin),
                (troop_slot_eq, "trp_province_array", ":aux_legion_slot", ":legion"),
                (troop_get_slot, ":aux_comander", "trp_province_array", ":aux_commander_slot"),
                (neg|troop_slot_eq, ":aux_comander", slot_troop_occupation, slto_kingdom_hero),
                (store_sub, ":aux", ":aux_commander_slot", slot_aux_commander_begin),
                (val_add, ":aux", "pt_cohors_aux"),
                (call_script, "script_find_new_commander_for_aux", ":aux", ":faction"),
            (try_end),
        (try_end),

        # (str_store_troop_name, s1, ":legate"),
        # (str_store_faction_name, s2, ":faction_hq"),
        # (str_store_faction_name, s3, ":faction"),
        # (str_store_party_name, s4, ":headquarter"),
        # (display_message, "@{s1} ({s3}), {s4} ({s2})"),

        (neq, ":faction", ":faction_hq"),

        #find new headquarter
        (call_script, "script_find_new_headquarter_for_legion", ":headquarter", ":faction", ":legion"),
        (assign, ":new_headquarter", reg0),

        (is_between, ":new_headquarter", walled_centers_begin, walled_centers_end),
        (troop_set_slot, "trp_province_array", ":slot", ":new_headquarter"),
        #give a proper message
        (str_store_party_name, s5, ":headquarter"),
        (str_store_party_name, s6, ":new_headquarter"),
        (store_add, ":string", ":legion", "str_lover_talk"),
        (str_store_string, s7, ":string"),
        (display_log_message, "@The headquarter of {s7} in {s5} has been captured. It's new headquarter is in {s6}."),
        #set banner too
        (call_script, "script_legion_hq_set_banner", ":new_headquarter", ":legion"),
    (try_end),
]),

###TRIGGER: "PROVINCE SYSTEM"
(24,[
    (call_script, "script_execude_debug_message", 194),
    (try_for_range_backwards, ":province", slot_province_governor_begin, p_provinces_end),
        (troop_get_slot, ":governor", "trp_province_array", ":province"),
        (ge, ":governor", 0),

        #first check if the province had been conquered
        (assign, ":end", walled_centers_end),
        (try_for_range, ":center", walled_centers_begin, ":end"),
            (party_slot_eq, ":center", slot_center_province, ":province"),
            (party_slot_eq, ":center", slot_town_lord, ":governor"),
            (assign, ":end", -1),#it it is -1 it has not been conquered yet
        (try_end),

        #remove governor if last center of the province is captured
        (try_begin),
            (neq, ":end", -1),
            (str_store_troop_name, s5, ":governor"),
            (store_add, ":string", ":province", "str_province_begin"),
            (str_store_string, s6, ":string"),
            (display_log_message, "@The province {s6} was lost. {s5} is no longer a governor."),
            (call_script, "script_troop_set_rank", ":governor", slot_troop_govern, -1),
            (try_begin),
                (gt, ":governor", 0),#not player
                (call_script, "script_change_lord_party_to_fit_rank", ":governor"),
            (try_end),
            (troop_set_slot, "trp_province_array", ":province", -1),#no governor
        (try_end),

        # check if governorship expired for a senatorial province
        # do not apply this script if the empire is in civil war
        (try_begin),
            (eq, ":end", -1),
            (store_add, ":slot", slot_province_senatorial_begin, ":province"),
            (troop_get_slot, ":timer", "trp_province_array", ":slot"),
            (ge, ":timer", 1),
            (try_begin),
                (ge, "$g_civil_war", 1), # in civil war the timer is paused, so add one day
                (val_add, ":timer", 1),
                (troop_set_slot, "trp_province_array", ":slot", ":timer"),
                # (assign, reg1, ":timer"),
                # (display_message, "@timer: {reg1}"),
                # (store_current_day, ":day"),
                # (assign, reg2, ":day"),
                # (display_message, "@day: {reg2}"),
            (else_try),
                (store_current_day, ":day"),
                (ge, ":day", ":timer"),
                (try_begin),
                    (eq, ":governor", "trp_player"),
                    (assign, ":ex_governor_faction", "$players_kingdom"),
                (else_try),
                    (store_faction_of_troop, ":ex_governor_faction", ":governor"),
                (try_end),
                # governorship expires, find new governor
                # search for a new governor
                (assign, ":score", -100),
                (assign, ":candiate", -1),
                (try_for_range, ":active_npc", active_npcs_including_player_begin, heroes_end),
                    (assign, ":c", 1),
                    (try_begin),
                        (eq, ":active_npc", active_npcs_including_player_begin),
                        (assign, ":active_npc", "trp_player"),
                        (assign, ":npc_faction", "$players_kingdom"),
                        (try_begin),
                            (gt, "$g_dont_give_fief_to_player_days", 0),#player has not refused a honour previously
                            (assign, ":c", 0),
                        (else_try),
                            (ge, "$g_is_emperor", 1),#is not emperor
                            (assign, ":c", 0),
                        (try_end),
                    (else_try),
                        (store_faction_of_troop, ":npc_faction", ":active_npc"),
                    (try_end),
                    (eq, ":c", 1),
                    (eq, ":npc_faction", ":ex_governor_faction"),#same faction
                    (assign, ":c", 0),
                    #is not dead
                    (this_or_next|troop_slot_eq, ":active_npc", slot_troop_occupation, slto_kingdom_hero),
                    (eq, ":active_npc", "trp_player"),

                    (neq, ":active_npc", ":governor"),
                    (neg|troop_slot_ge, ":active_npc", slot_troop_legion, 1),
                    (neg|troop_slot_ge, ":active_npc", slot_troop_aux, 1),
                    (neg|troop_slot_ge, ":active_npc", slot_troop_govern, 1),
                    # (str_store_troop_name, s22, ":active_npc"),
                    # (display_message, "@@Check for {s22}"),

                    #we can assume he has no governorship via the slot
                    #lord does not already govern a province
                    # (assign, ":end", p_provinces_end),
                    # (try_for_range, ":slot", slot_province_governor_begin, ":end"),
                        # (troop_slot_eq, "trp_province_array", ":slot", ":active_npc"),
                        # (assign, ":end", -1),
                    # (try_end),
                    # (eq, ":end", p_provinces_end),
                    # (str_store_troop_name, s22, ":active_npc"),
                    # (display_message, "@@Check for {s22} 2"),

                    (troop_get_slot, ":renown", ":active_npc", slot_troop_renown),
                    (assign, ":score_1", ":renown"),
                    (store_random_in_range, ":rand", 0, 200),
                    (val_add, ":renown", ":rand"),
                    #controversy is from 0 to 100
                    (troop_get_slot, ":controversy", ":active_npc", slot_troop_controversy),
                    (val_clamp, ":controversy", 0, 101),

                    (store_sub, ":modifier", 101, ":controversy"),
                    (val_max, ":modifier", 1),
                    (val_mul, ":score_1", ":modifier"),
                    (val_div, ":score_1", 100),
                    # (assign, reg1, ":score_1"),
                    # (assign, reg2, ":modifier"),
                    # (str_store_troop_name, s1, ":active_npc"),
                    # (display_message, "@Check for {s1}, score {reg1}, modifier {reg2}"),
                    (ge, ":score_1", ":score"),
                    (assign, ":score", ":score_1"),
                    (assign, ":candiate", ":active_npc"),
                    # (assign, reg1, ":score"),
                    # (assign, reg2, ":modifier"),
                    # (str_store_troop_name, s1, ":candiate"),
                    # (display_message, "@candiate {s1}, score {reg1}, modifier {reg2}"),
                (try_end),
                #is no governor found use old governor
                (try_begin),
                    (eq, ":candiate", -1),
                    (assign, ":candiate", ":governor"),
                (try_end),
                (gt, ":candiate", -1),
                # (str_store_party_name, s24, "$g_center_trigger_taxes"),
                # (display_message, "@Check for {s24}, candiate found"),
                (try_begin),
                    (eq, ":candiate", "trp_player"),
                    (call_script, "script_add_notification_menu", "mnu_notification_player_senatorial_province_appointed", 0, ":province"),
                (else_try),
                    (eq, ":npc_faction", "$players_kingdom"),
                    (eq, "$g_governor_appointment_message", 1),
                    (troop_slot_ge, "trp_senator_dummy", slot_senate_support, 20),#has some influence
                    (call_script, "script_add_notification_menu", "mnu_notification_player_faction_province_decide", ":candiate", ":province"),
                (else_try),
                    (val_add, ":day", 84),
                    (troop_set_slot, "trp_province_array", ":slot", ":day"),
                    (troop_set_slot, "trp_province_array", ":province", ":candiate"),
                    (call_script, "script_troop_set_rank", ":candiate",slot_troop_govern, ":province"),

                    (try_for_range, ":center", walled_centers_begin, walled_centers_end),
                        (store_faction_of_party, ":center_faction", ":center"),
                        (eq, ":center_faction", ":ex_governor_faction"),
                        (party_get_slot, ":province_1", ":center", slot_center_province),
                        (eq, ":province_1", ":province"),
                        (call_script, "script_give_center_to_lord2", ":center", ":candiate", 0),
                    (try_end),

                    (try_begin),
                        (eq, ":governor", "trp_player"),
                        (call_script, "script_add_notification_menu", "mnu_notification_player_senatorial_province_expires", 0, ":province"),
                    (try_end),
                    (str_store_troop_name_link, s22, ":candiate"),
                    (str_store_troop_name_link, s21, ":governor"),
                    (val_add, ":province", "str_province_begin"),
                    (str_store_string, s23, ":province"),
                    (display_log_message, "@{s21}'s governorship of {s23} has expired. The senate has assigned {s22} as new governor."),
                    #remove old governor
                    (try_begin),
                        (neq, ":governor", ":candiate"),
                        (call_script, "script_troop_set_rank", ":governor", slot_troop_govern, -1),
                        (try_begin),
                            (gt, ":governor", 0),#not player
                            (call_script, "script_change_lord_party_to_fit_rank", ":governor"),
                        (try_end),
                    (try_end),
                (try_end),
            (try_end),
        (try_end),
        #end check for governorship to expire
    (try_end),
]),
###END TRIGGER PROVINCE SYSTEM

(24*7,[
    (call_script, "script_execude_debug_message", 195),
    (party_slot_eq, "p_main_party", slot_party_on_water, 0),
    (neq, "$g_player_is_captive", 1),
    (eq, "$g_is_emperor", 1),
    (le, "$g_civil_war", 0),

    (try_begin),
        (faction_get_slot, ":chance", "$players_kingdom", slot_faction_tax_rate_buisness),
        (val_mul, ":chance", 2),
        (val_mul, ":chance", ":chance"),
        (val_add, ":chance", "$g_unrest"),

        (store_random_in_range, ":rand", 0, 9000),
        (val_sub, ":rand", "$g_unrest"),
        (lt, ":rand", ":chance"),

        (jump_to_menu, "mnu_nobility_tax_protests"),
    (else_try),
        (eq, "$edict7", 0),
        (store_random_in_range, ":rand", 0, 500),
        (le, ":rand", 50),
        (store_faction_of_party, ":fac_rome", "p_town_6"),
        (eq, ":fac_rome", "$players_kingdom"),
        (jump_to_menu, "mnu_grain_protests"),
    (try_end),
]),

(0.05,[
    (call_script, "script_execude_debug_message", 196),
    (try_for_parties, ":party_no"),
        (gt, ":party_no", last_static_party),
        (party_is_active, ":party_no"),
        (try_begin),
            (party_get_current_terrain, ":cur_terrain", ":party_no"),
            (this_or_next|eq,":cur_terrain",rt_bridge),
            (this_or_next|eq,":cur_terrain",rt_river),
            (eq,":cur_terrain",rt_water),
            (try_begin),
                (this_or_next|eq,":cur_terrain",rt_bridge),
                (this_or_next|eq,":cur_terrain",rt_river),
                (eq,":cur_terrain",rt_water),
                (party_slot_eq, ":party_no", slot_party_on_water, 0),	#PARTY IS SWITCHING FROM LAND TO WATER
                (party_set_slot, ":party_no", slot_party_on_water, 1),
                (party_set_flags, ":party_no", pf_is_ship, 1),
                (try_begin),	#free player if he is captive
                    (eq, "$g_player_is_captive", 1),
                    (eq, "$travel_town", 0),	#VC-2283
                    (eq, ":party_no", "$capturer_party"),
                    (jump_to_menu,"mnu_captivity_end_wilderness_escape"),
                (try_end),
            (try_end),
        (else_try),
            (party_slot_eq, ":party_no", slot_party_on_water, 1),	#PARTY IS SWITCHING FROM WATER TO LAND
            (party_set_slot, ":party_no", slot_party_on_water, 0),
            (party_set_flags, ":party_no", pf_is_ship, 0),#I think this should still be necessary
        (try_end),
        (call_script, "script_update_party_icon", ":party_no"),#update icon
    (try_end),
]),

(24.0*7.0/(number_of_villages),[
    (call_script, "script_execude_debug_message", 197),
    (assign, ":save_reg0", reg0),
    #Collect taxes for another week
    (try_begin),
        (neg|is_between, "$g_village_trigger_taxes", villages_begin, villages_end),
        (assign, "$g_village_trigger_taxes", villages_begin),
    (try_end),
    (call_script, "script_calculate_weekly_rents", "$g_village_trigger_taxes"),
    (assign, reg0, ":save_reg0"),
    (val_add, "$g_village_trigger_taxes", 1),
]),
]##END OF FILE