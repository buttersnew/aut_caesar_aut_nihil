# -*- coding: cp1254 -*-
import string
from header_common import *
from header_presentations import *
from header_mission_templates import *
from IDs.ID_meshes import *
from header_operations import *
from header_triggers import *
from module_constants import *
from header_terrain_types import *
from module_items import *
from header_skills import *
from module_info_pages import *
from module_factions import *
from IDs.ID_postfx_params import *
from IDs.ID_factions import *

#from compiler import *
####################################################################################################################
#  Each presentation record contains the following fields:
#  1) Presentation id: used for referencing presentations in other files. The prefix prsnt_ is automatically added before each presentation id.
#  2) Presentation flags. See header_presentations.py for a list of available flags
#  3) Presentation background mesh: See module_meshes.py for a list of available background meshes
#  4) Triggers: Simple triggers that are associated with the presentation
####################################################################################################################

presentations = [
## mainmenu
("game_start",prsntf_read_only,0,[
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    (create_mesh_overlay, reg0, "mesh_main_menu_dust"),
    (position_set_x, pos1, 0),
    (position_set_y, pos1, 0),
    (overlay_set_position, reg0, pos1),

    (create_mesh_overlay, reg0, "mesh_warrider_logo"),
    (position_set_x, pos1, 0.031*1000),
    (position_set_y, pos1, 0.61*1000),
    (overlay_set_position, reg0, pos1),
    # (create_mesh_overlay, reg0, "mesh_main_menu_background"),
    # (position_set_x, pos1, 0),
    # (position_set_y, pos1, 0),
    # (overlay_set_position, reg0, pos1),
    # (create_mesh_overlay, reg0, "mesh_main_menu_prs"),
    # (position_set_x, pos1, 0),
    # (position_set_y, pos1, 0),
    # (overlay_set_position, reg0, pos1),
    # (create_mesh_overlay, reg0, "mesh_main_menu_move_1"),
    # (position_set_x, pos1, 0),
    # (position_set_y, pos1, 0),
    # (overlay_set_position, reg0, pos1),

    (assign, ":initial_x_coordinate", 50+95),
    (assign, ":Initial_y_coordinate", 499),
    (assign, ":font_size", 1150),

    (try_begin),
        (is_vanilla_warband),
        (create_text_overlay, reg1, "@You are running the mod with vanilla warband.^Consider using WSE2.", tf_center_justify|tf_vertical_align_center|tf_with_outline),
        (position_set_x, pos1, 700),
        (position_set_y, pos1, 700),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, ":initial_x_coordinate"),
        (position_set_y, pos1, ":Initial_y_coordinate"),
        (overlay_set_position, reg1, pos1),
        (overlay_set_color, reg1, message_alert),
        (val_sub, ":Initial_y_coordinate", 30),
    (try_end),



    (create_text_overlay, "$g_presentation_credits_obj_1", "@New Game", tf_center_justify|tf_double_space|tf_vertical_align_center),
    (position_set_x, pos1, ":font_size"),
    (position_set_y, pos1, ":font_size"),
    (overlay_set_size, "$g_presentation_credits_obj_1", pos1),
    (position_set_x, pos1, ":initial_x_coordinate"),
    (position_set_y, pos1, ":Initial_y_coordinate"),
    (overlay_set_position, "$g_presentation_credits_obj_1", pos1),
    (val_sub, ":Initial_y_coordinate", 40),

    (create_text_overlay, "$g_presentation_credits_obj_2", "@Load Save", tf_center_justify|tf_double_space|tf_vertical_align_center),
    (position_set_x, pos1, ":font_size"),
    (position_set_y, pos1, ":font_size"),
    (overlay_set_size, "$g_presentation_credits_obj_2", pos1),
    (position_set_x, pos1, ":initial_x_coordinate"),
    (position_set_y, pos1, ":Initial_y_coordinate"),
    (overlay_set_position, "$g_presentation_credits_obj_2", pos1),
    (val_sub, ":Initial_y_coordinate", 40),

    (create_text_overlay, "$g_presentation_credits_obj_3", "@Quick Battle", tf_center_justify|tf_double_space|tf_vertical_align_center),
    (position_set_x, pos1, ":font_size"),
    (position_set_y, pos1, ":font_size"),
    (overlay_set_size, "$g_presentation_credits_obj_3", pos1),
    (position_set_x, pos1, ":initial_x_coordinate"),
    (position_set_y, pos1, ":Initial_y_coordinate"),
    (overlay_set_position, "$g_presentation_credits_obj_3", pos1),
    (val_sub, ":Initial_y_coordinate", 40),

    (create_text_overlay, "$g_presentation_credits_obj_4", "@Options", tf_center_justify|tf_double_space|tf_vertical_align_center),
    (position_set_x, pos1, ":font_size"),
    (position_set_y, pos1, ":font_size"),
    (overlay_set_size, "$g_presentation_credits_obj_4", pos1),
    (position_set_x, pos1, ":initial_x_coordinate"),
    (position_set_y, pos1, ":Initial_y_coordinate"),
    (overlay_set_position, "$g_presentation_credits_obj_4", pos1),
    (val_sub, ":Initial_y_coordinate", 40),

    (create_text_overlay, "$g_presentation_credits_obj_5", "@Credits", tf_center_justify|tf_double_space|tf_vertical_align_center),
    (position_set_x, pos1, ":font_size"),
    (position_set_y, pos1, ":font_size"),
    (overlay_set_size, "$g_presentation_credits_obj_5", pos1),
    (position_set_x, pos1, ":initial_x_coordinate"),
    (position_set_y, pos1, ":Initial_y_coordinate"),
    (overlay_set_position, "$g_presentation_credits_obj_5", pos1),
    (val_sub, ":Initial_y_coordinate", 40),

    (create_text_overlay, "$g_presentation_credits_obj_6", "@Exit", tf_center_justify|tf_double_space|tf_vertical_align_center),
    (position_set_x, pos1, ":font_size"),
    (position_set_y, pos1, ":font_size"),
    (overlay_set_size, "$g_presentation_credits_obj_6", pos1),
    (position_set_x, pos1, ":initial_x_coordinate"),
    (position_set_y, pos1, ":Initial_y_coordinate"),
    (overlay_set_position, "$g_presentation_credits_obj_6", pos1),
  ]),

  (ti_on_presentation_mouse_enter_leave,[
    (store_trigger_param_1, ":overlay_id"),
    (store_trigger_param_2, ":mouse_enter"),
    (this_or_next|eq, ":overlay_id", "$g_presentation_credits_obj_1"),
    (this_or_next|eq, ":overlay_id", "$g_presentation_credits_obj_2"),
    (this_or_next|eq, ":overlay_id", "$g_presentation_credits_obj_3"),
    (this_or_next|eq, ":overlay_id", "$g_presentation_credits_obj_4"),
    (this_or_next|eq, ":overlay_id", "$g_presentation_credits_obj_5"),
    (eq, ":overlay_id", "$g_presentation_credits_obj_6"),
    (try_begin),
        (eq, ":mouse_enter", 1),
        (overlay_set_color, ":overlay_id", 0x000000),
        (assign, ":re_size", 1200),
        (position_set_x, pos1, ":re_size"),
        (position_set_y, pos1, ":re_size"),
        (overlay_set_size, ":overlay_id", pos1),
    (else_try),
        (overlay_set_color, ":overlay_id", 0xAA0000),
        (assign, ":re_size", 1400),
        (position_set_x, pos1, ":re_size"),
        (position_set_y, pos1, ":re_size"),
        (overlay_set_size, ":overlay_id", pos1),
        # (play_sound, "snd_message_negative_sound"),
    (try_end),
  ]),
    #   this seems to crash the game
    # (ti_on_presentation_mouse_press,
    # [
        # (store_trigger_param_1, ":overlay_id"),
        # (this_or_next|eq, ":overlay_id", "$g_presentation_credits_obj_1"),
        # (this_or_next|eq, ":overlay_id", "$g_presentation_credits_obj_2"),
        # (this_or_next|eq, ":overlay_id", "$g_presentation_credits_obj_3"),
        # (this_or_next|eq, ":overlay_id", "$g_presentation_credits_obj_4"),
        # (this_or_next|eq, ":overlay_id", "$g_presentation_credits_obj_5"),
        # (eq, ":overlay_id", "$g_presentation_credits_obj_6"),
        # (play_sound, "snd_message_negative_sound", 1),
    # ]),
]),

# other game presentations
("game_multiplayer_admin_panel", prsntf_manual_end_only, 0, []),
("game_escape",prsntf_read_only,0,[]),

("game_credits",prsntf_read_only,mesh_load_window,[
  (ti_on_presentation_load,[
    (assign, "$g_presentation_credits_obj_1", -1),
    (assign, "$g_presentation_credits_obj_2", -1),
    (assign, "$g_presentation_credits_obj_3", -1),
    (assign, "$g_presentation_credits_obj_4", -1),
    (assign, "$g_presentation_credits_obj_5", -1),
    (assign, "$g_presentation_credits_obj_6", -1),
    (assign, "$g_presentation_credits_obj_7", -1),
    (assign, "$g_presentation_credits_obj_8", -1),
    (assign, "$g_presentation_credits_obj_9", -1),
    (assign, "$g_presentation_credits_obj_10", -1),
    (assign, "$g_presentation_credits_obj_11", -1),
    (assign, "$g_presentation_credits_obj_12", -1),
    (assign, "$g_presentation_credits_obj_1_alpha", 0),
    (assign, "$g_presentation_credits_obj_2_alpha", 0),
    (assign, "$g_presentation_credits_obj_3_alpha", 0),
    (assign, "$g_presentation_credits_obj_4_alpha", 0),
    (assign, "$g_presentation_credits_obj_5_alpha", 0),
    (assign, "$g_presentation_credits_obj_6_alpha", 0),
    (assign, "$g_presentation_credits_obj_7_alpha", 0),
    (assign, "$g_presentation_credits_obj_8_alpha", 0),
    (assign, "$g_presentation_credits_obj_9_alpha", 0),
  ]),
  (ti_on_presentation_run,[
    (store_trigger_param_1, ":cur_time"),
    (set_fixed_point_multiplier, 1000),
    (presentation_set_duration, 1000000),
    (try_begin),
      (this_or_next|key_clicked, key_space),
      (this_or_next|key_clicked, key_enter),
      (this_or_next|key_clicked, key_escape),
      (this_or_next|key_clicked, key_back_space),
      (this_or_next|key_clicked, key_left_mouse_button),
      (this_or_next|key_clicked, key_right_mouse_button),
      (this_or_next|key_clicked, key_xbox_ltrigger),
      (key_clicked, key_xbox_rtrigger),
      (presentation_set_duration, 0),
    (try_end),
    (try_begin),
      (lt, "$g_presentation_credits_obj_1", 0),
      (str_store_string, s1, "str_credits_1"),
      (create_text_overlay, "$g_presentation_credits_obj_1", s1, tf_center_justify|tf_double_space|tf_vertical_align_center),
      (overlay_set_color, "$g_presentation_credits_obj_1", 0),
      (overlay_set_alpha, "$g_presentation_credits_obj_1", 0),
      (position_set_x, pos1, 1500),
      (position_set_y, pos1, 1500),
      (overlay_set_size, "$g_presentation_credits_obj_1", pos1),
      (position_set_x, pos1, 500),
      (position_set_y, pos1, 375),
      (overlay_set_position, "$g_presentation_credits_obj_1", pos1),
      (overlay_animate_to_alpha, "$g_presentation_credits_obj_1", 1000, 0xFF),
    (else_try),
      (gt, ":cur_time", 2000),
      (eq, "$g_presentation_credits_obj_1_alpha", 0),
      (assign, "$g_presentation_credits_obj_1_alpha", 1),
      (overlay_animate_to_alpha, "$g_presentation_credits_obj_1", 1000, 0x00),
    (else_try),
      (gt, ":cur_time", 3500),
      (lt, "$g_presentation_credits_obj_2", 0),
      (str_store_string, s1, "str_credits_2"),
      (create_text_overlay, "$g_presentation_credits_obj_2", s1, tf_center_justify|tf_double_space|tf_vertical_align_center),
      (overlay_set_color, "$g_presentation_credits_obj_2", 0),
      (overlay_set_alpha, "$g_presentation_credits_obj_2", 0),
      (position_set_x, pos1, 1750),
      (position_set_y, pos1, 1750),
      (overlay_set_size, "$g_presentation_credits_obj_2", pos1),
      (position_set_x, pos1, 500),
      (position_set_y, pos1, 375),
      (overlay_set_position, "$g_presentation_credits_obj_2", pos1),
      (overlay_animate_to_alpha, "$g_presentation_credits_obj_2", 1000, 0xFF),
    (else_try),
      (gt, ":cur_time", 5500),
      (eq, "$g_presentation_credits_obj_2_alpha", 0),
      (assign, "$g_presentation_credits_obj_2_alpha", 1),
      (overlay_animate_to_alpha, "$g_presentation_credits_obj_2", 1000, 0x00),
    (else_try),
      (gt, ":cur_time", 7000),
      (lt, "$g_presentation_credits_obj_3", 0),
      (str_store_string, s1, "str_credits_3"),
      (create_text_overlay, "$g_presentation_credits_obj_3", s1, tf_center_justify|tf_double_space|tf_vertical_align_center),
      (overlay_set_color, "$g_presentation_credits_obj_3", 0),
      (overlay_set_alpha, "$g_presentation_credits_obj_3", 0),
      (position_set_x, pos1, 1750),
      (position_set_y, pos1, 1750),
      (overlay_set_size, "$g_presentation_credits_obj_3", pos1),
      (position_set_x, pos1, 500),
      (position_set_y, pos1, 375),
      (overlay_set_position, "$g_presentation_credits_obj_3", pos1),
      (overlay_animate_to_alpha, "$g_presentation_credits_obj_3", 1000, 0xFF),
    (else_try),
      (gt, ":cur_time", 9000),
      (eq, "$g_presentation_credits_obj_3_alpha", 0),
      (assign, "$g_presentation_credits_obj_3_alpha", 1),
      (overlay_animate_to_alpha, "$g_presentation_credits_obj_3", 1000, 0),
    (else_try),
      (gt, ":cur_time", 10500),
      (lt, "$g_presentation_credits_obj_4", 0),
      (str_store_string, s1, "str_credits_4"),
      (create_text_overlay, "$g_presentation_credits_obj_4", s1, tf_center_justify|tf_double_space|tf_vertical_align_center),
      (overlay_set_color, "$g_presentation_credits_obj_4", 0),
      (overlay_set_alpha, "$g_presentation_credits_obj_4", 0),
      (position_set_x, pos1, 1750),
      (position_set_y, pos1, 1750),
      (overlay_set_size, "$g_presentation_credits_obj_4", pos1),
      (position_set_x, pos1, 500),
      (position_set_y, pos1, 375),
      (overlay_set_position, "$g_presentation_credits_obj_4", pos1),
      (overlay_animate_to_alpha, "$g_presentation_credits_obj_4", 1000, 0xFF),
    (else_try),
      (gt, ":cur_time", 12500),
      (eq, "$g_presentation_credits_obj_4_alpha", 0),
      (assign, "$g_presentation_credits_obj_4_alpha", 1),
      (overlay_animate_to_alpha, "$g_presentation_credits_obj_4", 1000, 0),
    (else_try),
      (gt, ":cur_time", 14000),
      (lt, "$g_presentation_credits_obj_5", 0),
      (str_store_string, s1, "str_credits_5"),
      (create_text_overlay, "$g_presentation_credits_obj_5", s1, tf_center_justify|tf_double_space|tf_vertical_align_center),
      (overlay_set_color, "$g_presentation_credits_obj_5", 0),
      (overlay_set_alpha, "$g_presentation_credits_obj_5", 0),
      (position_set_x, pos1, 1750),
      (position_set_y, pos1, 1750),
      (overlay_set_size, "$g_presentation_credits_obj_5", pos1),
      (position_set_x, pos1, 500),
      (position_set_y, pos1, 375),
      (overlay_set_position, "$g_presentation_credits_obj_5", pos1),
      (overlay_animate_to_alpha, "$g_presentation_credits_obj_5", 1000, 0xFF),
    (else_try),
      (gt, ":cur_time", 16000),
      (eq, "$g_presentation_credits_obj_5_alpha", 0),
      (assign, "$g_presentation_credits_obj_5_alpha", 1),
      (overlay_animate_to_alpha, "$g_presentation_credits_obj_5", 1000, 0),
    (else_try),
      (gt, ":cur_time", 17500),
      (lt, "$g_presentation_credits_obj_6", 0),
      (str_store_string, s1, "str_credits_6"),
      (create_text_overlay, "$g_presentation_credits_obj_6", s1, tf_center_justify|tf_double_space|tf_vertical_align_center),
      (overlay_set_color, "$g_presentation_credits_obj_6", 0),
      (overlay_set_alpha, "$g_presentation_credits_obj_6", 0),
      (position_set_x, pos1, 1750),
      (position_set_y, pos1, 1750),
      (overlay_set_size, "$g_presentation_credits_obj_6", pos1),
      (position_set_x, pos1, 500),
      (position_set_y, pos1, 375),
      (overlay_set_position, "$g_presentation_credits_obj_6", pos1),
      (overlay_animate_to_alpha, "$g_presentation_credits_obj_6", 1000, 0xFF),
    (else_try),
      (gt, ":cur_time", 19500),
      (eq, "$g_presentation_credits_obj_6_alpha", 0),
      (assign, "$g_presentation_credits_obj_6_alpha", 1),
      (overlay_animate_to_alpha, "$g_presentation_credits_obj_6", 1000, 0),
    (else_try),
      (gt, ":cur_time", 21000),
      (lt, "$g_presentation_credits_obj_7", 0),
      (str_store_string, s1, "str_credits_7"),
      (create_text_overlay, "$g_presentation_credits_obj_7", s1, tf_center_justify|tf_double_space|tf_vertical_align_center),
      (overlay_set_color, "$g_presentation_credits_obj_7", 0),
      (overlay_set_alpha, "$g_presentation_credits_obj_7", 0),
      (position_set_x, pos1, 1750),
      (position_set_y, pos1, 1750),
      (overlay_set_size, "$g_presentation_credits_obj_7", pos1),
      (position_set_x, pos1, 500),
      (position_set_y, pos1, 375),
      (overlay_set_position, "$g_presentation_credits_obj_7", pos1),
      (overlay_animate_to_alpha, "$g_presentation_credits_obj_7", 1000, 0xFF),
    (else_try),
      (gt, ":cur_time", 23000),
      (eq, "$g_presentation_credits_obj_7_alpha", 0),
      (assign, "$g_presentation_credits_obj_7_alpha", 1),
      (overlay_animate_to_alpha, "$g_presentation_credits_obj_7", 1000, 0),
    (else_try),
      (gt, ":cur_time", 24500),
      (lt, "$g_presentation_credits_obj_8", 0),
      (str_store_string, s1, "str_credits_8"),
      (create_text_overlay, "$g_presentation_credits_obj_8", s1, tf_center_justify|tf_double_space|tf_vertical_align_center),
      (overlay_set_color, "$g_presentation_credits_obj_8", 0),
      (overlay_set_alpha, "$g_presentation_credits_obj_8", 0),
      (position_set_x, pos1, 1750),
      (position_set_y, pos1, 1750),
      (overlay_set_size, "$g_presentation_credits_obj_8", pos1),
      (position_set_x, pos1, 500),
      (position_set_y, pos1, 375),
      (overlay_set_position, "$g_presentation_credits_obj_8", pos1),
      (overlay_animate_to_alpha, "$g_presentation_credits_obj_8", 1000, 0xFF),
    (else_try),
      (gt, ":cur_time", 26500),
      (eq, "$g_presentation_credits_obj_8_alpha", 0),
      (assign, "$g_presentation_credits_obj_8_alpha", 1),
      (overlay_animate_to_alpha, "$g_presentation_credits_obj_8", 1000, 0),
    (else_try),
      (gt, ":cur_time", 28000),
      (lt, "$g_presentation_credits_obj_9", 0),
      (str_store_string, s1, "str_credits_10"),
      (create_text_overlay, "$g_presentation_credits_obj_9", s1, tf_center_justify|tf_double_space|tf_vertical_align_center),
      (overlay_set_color, "$g_presentation_credits_obj_9", 0),
      (overlay_set_alpha, "$g_presentation_credits_obj_9", 0),
      (position_set_x, pos1, 750),
      (position_set_y, pos1, 750),
      (overlay_set_size, "$g_presentation_credits_obj_9", pos1),
      (position_set_x, pos1, 250),
      (position_set_y, pos1, 485),
      (overlay_set_position, "$g_presentation_credits_obj_9", pos1),
      (overlay_animate_to_alpha, "$g_presentation_credits_obj_9", 1000, 0xFF),

      (str_store_string, s1, "str_credits_11"),
      (create_text_overlay, "$g_presentation_credits_obj_10", s1, tf_center_justify|tf_double_space|tf_vertical_align_center),
      (overlay_set_color, "$g_presentation_credits_obj_10", 0),
      (overlay_set_alpha, "$g_presentation_credits_obj_10", 0),
      (position_set_x, pos1, 750),
      (position_set_y, pos1, 750),
      (overlay_set_size, "$g_presentation_credits_obj_10", pos1),
      (position_set_x, pos1, 750),
      (position_set_y, pos1, 470),
      (overlay_set_position, "$g_presentation_credits_obj_10", pos1),
      (overlay_animate_to_alpha, "$g_presentation_credits_obj_10", 1000, 0xFF),

      (str_store_string, s1, "str_credits_12"),
      (create_text_overlay, "$g_presentation_credits_obj_11", s1, tf_center_justify|tf_double_space|tf_vertical_align_center),
      (overlay_set_color, "$g_presentation_credits_obj_11", 0),
      (overlay_set_alpha, "$g_presentation_credits_obj_11", 0),
      (position_set_x, pos1, 750),
      (position_set_y, pos1, 750),
      (overlay_set_size, "$g_presentation_credits_obj_11", pos1),
      (position_set_x, pos1, 500),
      (position_set_y, pos1, 105),
      (overlay_set_position, "$g_presentation_credits_obj_11", pos1),
      (overlay_animate_to_alpha, "$g_presentation_credits_obj_11", 1000, 0xFF),
    (else_try),
      (gt, ":cur_time", 34000),
      (eq, "$g_presentation_credits_obj_9_alpha", 0),
      (assign, "$g_presentation_credits_obj_9_alpha", 1),
      (overlay_animate_to_alpha, "$g_presentation_credits_obj_9", 1000, 0),
      (overlay_animate_to_alpha, "$g_presentation_credits_obj_10", 1000, 0),
      (overlay_animate_to_alpha, "$g_presentation_credits_obj_11", 1000, 0),
    (else_try),
      (gt, ":cur_time", 35500),
      (lt, "$g_presentation_credits_obj_12", 0),
      (str_store_string, s1, "str_credits_9"),
      (create_text_overlay, "$g_presentation_credits_obj_12", s1, tf_center_justify|tf_double_space),
      (overlay_set_color, "$g_presentation_credits_obj_12", 0),
      (overlay_set_alpha, "$g_presentation_credits_obj_12", 0xFF),
      (position_set_x, pos1, 1000),
      (position_set_y, pos1, 1000),
      (overlay_set_size, "$g_presentation_credits_obj_12", pos1),
      (position_set_x, pos1, 500),
      (position_set_y, pos1, -4800),
      (overlay_set_position, "$g_presentation_credits_obj_12", pos1),
      (position_set_x, pos1, 500),
      (position_set_y, pos1, 760),
      (overlay_animate_to_position, "$g_presentation_credits_obj_12", 70000, pos1),
    (else_try),
      (gt, ":cur_time", 105500),
      (presentation_set_duration, 0),
    (try_end),
  ]),
]),

  ("game_profile_banner_selection", 0, mesh_load_window, [
    (ti_on_presentation_load, [
      (set_fixed_point_multiplier, 1000),
      (str_store_string, s1, "str_profile_banner_selection_text"),
      (create_text_overlay, reg1, s1, tf_center_justify),
      (position_set_x, pos1, 500),
      (position_set_y, pos1, 600),
      (overlay_set_position, reg1, pos1),
      (overlay_set_text, reg1, s1),
      (create_button_overlay, "$g_presentation_obj_profile_banner_selection_1", "@Next Page", tf_center_justify),
      (position_set_x, pos1, 700),
      (position_set_y, pos1, 50),
      (overlay_set_position, "$g_presentation_obj_profile_banner_selection_1", pos1),

      (create_button_overlay, "$g_presentation_obj_profile_banner_selection_2", "str_use_default_banner", tf_center_justify),
      (position_set_x, pos1, 300),
      (position_set_y, pos1, 50),
      (overlay_set_position, "$g_presentation_obj_profile_banner_selection_2", pos1),

      (assign, ":x_pos", 150),
      (assign, ":y_pos", 575),
      (store_mul, ":starting_banner", 16, "$g_presentation_page_no"),
      (store_add, ":ending_banner", ":starting_banner", 16),
      (store_add, "$g_presentation_banner_start", "$g_presentation_obj_profile_banner_selection_2", 1),
      (assign, ":num_valid_banners", 0),
      (try_for_range, ":cur_banner_mesh", banner_meshes_begin, banner_meshes_end_minus_one),
        (assign, ":already_used", 0),
        (try_for_range, ":cur_faction", npc_kingdoms_begin, npc_kingdoms_end),
          (faction_slot_eq, ":cur_faction", slot_faction_banner, ":cur_banner_mesh"),
          (assign, ":already_used", 1),
        (try_end),
        (eq, ":already_used", 0),
        (val_add, ":num_valid_banners", 1),
        (gt, ":num_valid_banners", ":starting_banner"),
        (le, ":num_valid_banners", ":ending_banner"),
        (create_image_button_overlay, reg1, ":cur_banner_mesh", ":cur_banner_mesh"),
        (position_set_x, pos1, ":x_pos"),
        (position_set_y, pos1, ":y_pos"),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 100),
        (position_set_y, pos1, 100),
        (overlay_set_size, reg1, pos1),
        (val_add, ":x_pos", 100),
        (ge, ":x_pos", 900),
        (assign, ":x_pos", 150),
        (val_sub, ":y_pos", 250),
      (try_end),
      (presentation_set_duration, 999999),
      ]),

    (ti_on_presentation_event_state_change, [
      (store_trigger_param_1, ":object"),
      (try_begin),
        (eq, ":object", "$g_presentation_obj_profile_banner_selection_1"),
        (val_add, "$g_presentation_page_no", 1),
        (val_mod, "$g_presentation_page_no", 8),
        (presentation_set_duration, 0),
        (start_presentation, "prsnt_game_profile_banner_selection"),
      (else_try),
        (eq, ":object", "$g_presentation_obj_profile_banner_selection_2"),
        (profile_set_banner_id, -1),
        (presentation_set_duration, 0),
      (else_try),
        (store_sub, ":selected_banner", ":object", "$g_presentation_banner_start"),
        (store_mul, ":page_adder", 16, "$g_presentation_page_no"),
        (val_add, ":selected_banner", ":page_adder"),
        (assign, ":num_valid_banners", 0),
        (assign, ":end_cond", banner_meshes_end_minus_one),
        (try_for_range, ":cur_banner_mesh", banner_meshes_begin, ":end_cond"),
          (assign, ":already_used", 0),
          (try_for_range, ":cur_faction", npc_kingdoms_begin, npc_kingdoms_end),
            (faction_slot_eq, ":cur_faction", slot_faction_banner, ":cur_banner_mesh"),
            (assign, ":already_used", 1),
          (try_end),
          (eq, ":already_used", 0),
          (try_begin),
            (eq, ":selected_banner", ":num_valid_banners"),
            (store_sub, ":selected_banner_index", ":cur_banner_mesh", banner_meshes_begin),
            (profile_set_banner_id, ":selected_banner_index"),
            (assign, ":end_cond", 0), #break
          (try_end),
          (val_add, ":num_valid_banners", 1),
        (try_end),
        (presentation_set_duration, 0),
      (try_end),
      ]),
    ]),

  ("game_custom_battle_designer", prsntf_manual_end_only, mesh_cb_ui_main, [
    (ti_on_presentation_load,
     [(set_fixed_point_multiplier, 1000),

      (create_text_overlay, reg0, "str_player", tf_center_justify|tf_single_line|tf_with_outline),
      (overlay_set_color, reg0, 0xFFFFFFFF),
      (position_set_x, pos1, 1500),
      (position_set_y, pos1, 1500),
      (overlay_set_size, reg0, pos1),
      (position_set_x, pos1, 175),
      (position_set_y, pos1, 700),
      (overlay_set_position, reg0, pos1),

      (create_text_overlay, reg0, "str_enemy",  tf_center_justify|tf_single_line|tf_with_outline),
      (overlay_set_color, reg0, 0xFFFFFFFF),
      (position_set_x, pos1, 1500),
      (position_set_y, pos1, 1500),
      (overlay_set_size, reg0, pos1),
      (position_set_x, pos1, 820),
      (position_set_y, pos1, 700),
      (overlay_set_position, reg0, pos1),

      (create_text_overlay, reg0, "str_character", tf_center_justify),
      (position_set_x, pos1, 175),
      (position_set_y, pos1, 670),
      (overlay_set_position, reg0, pos1),

      (create_combo_label_overlay, "$g_presentation_obj_custom_battle_designer_18"),
      (position_set_x, pos1, 800),
      (position_set_y, pos1, 800),
      (overlay_set_size, "$g_presentation_obj_custom_battle_designer_18", pos1),
      (position_set_x, pos1, 175),
      (position_set_y, pos1, 635),
      (overlay_set_position, "$g_presentation_obj_custom_battle_designer_18", pos1),
      (try_for_range, ":cur_troop", quick_battle_troops_begin, quick_battle_troops_end),
        (str_store_troop_name, s0, ":cur_troop"),
        (overlay_add_item, "$g_presentation_obj_custom_battle_designer_18", s0),
      (try_end),
      (store_sub, ":cur_troop", "$g_quick_battle_troop", quick_battle_troops_begin),
      (overlay_set_val, "$g_presentation_obj_custom_battle_designer_18", ":cur_troop"),

      (store_mul, ":cur_troop", "$g_quick_battle_troop", 2), #with weapons
      (create_mesh_overlay_with_tableau_material, reg0, -1, "tableau_game_party_window", ":cur_troop"),
      (position_set_x, pos1, 25),
      (position_set_y, pos1, 370),
      (overlay_set_position, reg0, pos1),

      (try_begin),
        (eq, "$g_quick_battle_team_2_faction", "fac_kingdom_1"),
        (assign, ":cur_troop", "trp_dacian_flaxman"),
      (else_try),
        (eq, "$g_quick_battle_team_2_faction", "fac_kingdom_2"),
        (assign, ":cur_troop", "trp_celtic_noble_swords"),
      (else_try),
        (eq, "$g_quick_battle_team_2_faction", "fac_kingdom_3"),
        (assign, ":cur_troop", "trp_sarmatian_noble_horseman"),
      (else_try),
        (eq, "$g_quick_battle_team_2_faction", "fac_kingdom_4"),
        (assign, ":cur_troop", "trp_germanic_berserker"),
      (else_try),
        (eq, "$g_quick_battle_team_2_faction", "fac_kingdom_5"),
        (assign, ":cur_troop", "trp_eastern_medium_horseman"),
      (else_try),
        (eq, "$g_quick_battle_team_2_faction", "fac_kingdom_6"),
        (assign, ":cur_troop", "trp_eastern_cataphract"),
      (else_try),
        (eq, "$g_quick_battle_team_2_faction", "fac_kingdom_7"),
        (assign, ":cur_troop", "trp_aux_cav"),
      (else_try),
        (eq, "$g_quick_battle_team_2_faction", "fac_gladiators"),
        (assign, ":cur_troop", "trp_gladiator_murmillo"),
	  (else_try),
        (assign, ":cur_troop", "trp_taiga_bandit"),
      (try_end),
      (val_mul, ":cur_troop", 2), #with weapons
      (create_mesh_overlay_with_tableau_material, reg0, -1, "tableau_game_party_window", ":cur_troop"),
      (position_set_x, pos1, 670),
      (position_set_y, pos1, 370),
      (overlay_set_position, reg0, pos1),

      (create_text_overlay, reg0, "str_biography", tf_center_justify),
      (position_set_x, pos1, 500),
      (position_set_y, pos1, 700),
      (overlay_set_position, reg0, pos1),

      (store_sub, ":cur_troop_text", "$g_quick_battle_troop", quick_battle_troops_begin),
      (val_add, ":cur_troop_text", quick_battle_troop_texts_begin),
      (create_text_overlay, reg0, ":cur_troop_text", tf_scrollable),
      (position_set_x, pos1, 850),
      (position_set_y, pos1, 850),
      (overlay_set_size, reg0, pos1),
      (position_set_x, pos1, 320),
      (position_set_y, pos1, 560),
      (overlay_set_position, reg0, pos1),
      (position_set_x, pos1, 360),
      (position_set_y, pos1, 130),
      (overlay_set_area_size, reg0, pos1),

      (create_text_overlay, reg0, "str_map_basic", tf_center_justify),
      (overlay_set_color, reg0, 0xFFFFFF),
      (position_set_x, pos1, 1500),
      (position_set_y, pos1, 1500),
      (overlay_set_size, reg0, pos1),
      (position_set_x, pos1, 500),
      (position_set_y, pos1, 450),
      (overlay_set_position, reg0, pos1),

      (create_combo_label_overlay, "$g_presentation_obj_custom_battle_designer_1"),
      (position_set_x, pos1, 700),
      (position_set_y, pos1, 700),
      (overlay_set_size, "$g_presentation_obj_custom_battle_designer_1", pos1),
      (position_set_x, pos1, 500),
      (position_set_y, pos1, 415),
      (overlay_set_position, "$g_presentation_obj_custom_battle_designer_1", pos1),
      (try_begin),
        (eq, "$g_quick_battle_game_type", 0), #battle
        (try_for_range, ":cur_scene", quick_battle_battle_scenes_begin, quick_battle_battle_scenes_end),
          (store_sub, ":cur_scene_name", ":cur_scene", quick_battle_scenes_begin),
          (val_add, ":cur_scene_name", quick_battle_scene_names_begin),
          (overlay_add_item, "$g_presentation_obj_custom_battle_designer_1", ":cur_scene_name"),
        (try_end),
        (try_begin),
          (is_between, "$g_quick_battle_map", quick_battle_battle_scenes_begin, quick_battle_battle_scenes_end),
          (store_sub, ":cur_map", "$g_quick_battle_map", quick_battle_battle_scenes_begin),
          (overlay_set_val, "$g_presentation_obj_custom_battle_designer_1", ":cur_map"),
        (else_try),
          (overlay_set_val, "$g_presentation_obj_custom_battle_designer_1", 0),
          (assign, "$g_quick_battle_map", quick_battle_battle_scenes_begin),
        (try_end),
      (else_try),
        (try_for_range, ":cur_scene", quick_battle_siege_scenes_begin, quick_battle_siege_scenes_end),
          (store_sub, ":cur_scene_name", ":cur_scene", quick_battle_scenes_begin),
          (val_add, ":cur_scene_name", quick_battle_scene_names_begin),
          (overlay_add_item, "$g_presentation_obj_custom_battle_designer_1", ":cur_scene_name"),
        (try_end),
        (try_begin),
          (is_between, "$g_quick_battle_map", quick_battle_siege_scenes_begin, quick_battle_siege_scenes_end),
          (store_sub, ":cur_map", "$g_quick_battle_map", quick_battle_siege_scenes_begin),
          (overlay_set_val, "$g_presentation_obj_custom_battle_designer_1", ":cur_map"),
        (else_try),
          (overlay_set_val, "$g_presentation_obj_custom_battle_designer_1", 0),
          (assign, "$g_quick_battle_map", quick_battle_siege_scenes_begin),
        (try_end),
      (try_end),

      (store_sub, ":cur_mesh", "$g_quick_battle_map", quick_battle_scenes_begin),
      (val_add, ":cur_mesh", quick_battle_scene_images_begin),
      (create_mesh_overlay, reg0, ":cur_mesh"),
      (position_set_x, pos1, 700),
      (position_set_y, pos1, 700),
      (overlay_set_size, reg0, pos1),
      (position_set_x, pos1, 380),
      (position_set_y, pos1, 220),
      (overlay_set_position, reg0, pos1),

      (create_text_overlay, reg0, "str_game_type_basic", tf_center_justify),
      (overlay_set_color, reg0, 0xFFFFFF),
      (position_set_x, pos1, 1500),
      (position_set_y, pos1, 1500),
      (overlay_set_size, reg0, pos1),
      (position_set_x, pos1, 500),
      (position_set_y, pos1, 180),
      (overlay_set_position, reg0, pos1),

      (create_combo_label_overlay, "$g_presentation_obj_custom_battle_designer_23"),
      (position_set_x, pos1, 700),
      (position_set_y, pos1, 700),
      (overlay_set_size, "$g_presentation_obj_custom_battle_designer_23", pos1),
      (position_set_x, pos1, 500),
      (position_set_y, pos1, 150),
      (overlay_set_position, "$g_presentation_obj_custom_battle_designer_23", pos1),
      (overlay_add_item, "$g_presentation_obj_custom_battle_designer_23", "str_battle"),
      (overlay_add_item, "$g_presentation_obj_custom_battle_designer_23", "str_siege_offense"),
      #(overlay_add_item, "$g_presentation_obj_custom_battle_designer_23", "str_siege_defense"),
      (overlay_set_val, "$g_presentation_obj_custom_battle_designer_23", "$g_quick_battle_game_type"),

      (create_game_button_overlay, "$g_presentation_obj_custom_battle_designer_24", "str_randomize"),
      (position_set_x, pos1, 500),
      (position_set_y, pos1, 60),
      (overlay_set_position, "$g_presentation_obj_custom_battle_designer_24", pos1),

      (assign, ":cur_y", 330),
      (assign, ":cur_y", 350),
      (assign, ":cur_y_adder", 40),

      (create_text_overlay, reg0, "str_faction", tf_center_justify),
      (position_set_x, pos1, 175),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, reg0, pos1),

      (create_text_overlay, reg0, "str_faction", tf_center_justify),
      (position_set_x, pos1, 820),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, reg0, pos1),

      (val_sub, ":cur_y", ":cur_y_adder"),

      (create_combo_label_overlay, "$g_presentation_obj_custom_battle_designer_4"),
##      (position_set_x, pos1, 800),
##      (position_set_y, pos1, 800),
##      (overlay_set_size, "$g_presentation_obj_custom_battle_designer_4", pos1),
      (position_set_x, pos1, 175),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, "$g_presentation_obj_custom_battle_designer_4", pos1),
      (try_begin),
        (is_trial_version),
        (str_store_faction_name, s0, quick_battle_kingdoms_begin),
        (overlay_add_item, "$g_presentation_obj_custom_battle_designer_4", s0),
        (store_add, ":cur_faction", quick_battle_kingdoms_begin, 1),
        (str_store_faction_name, s0, ":cur_faction"),
        (overlay_add_item, "$g_presentation_obj_custom_battle_designer_4", s0),
      (else_try),
        (try_for_range, ":cur_faction", quick_battle_kingdoms_begin, quick_battle_kingdoms_end),
          (str_store_faction_name, s0, ":cur_faction"),
          (overlay_add_item, "$g_presentation_obj_custom_battle_designer_4", s0),
        (try_end),
        (str_store_faction_name, s0, "fac_gladiators"),
        (overlay_add_item, "$g_presentation_obj_custom_battle_designer_4", s0),
      (try_end),
      (try_begin),
        (eq, "$g_quick_battle_team_1_faction", "fac_gladiators"),
        (store_sub, ":overlay_value", quick_battle_kingdoms_end, quick_battle_kingdoms_begin),
        (overlay_set_val, "$g_presentation_obj_custom_battle_designer_4", ":overlay_value"),
      (else_try),
        (store_sub, ":team_1_faction", "$g_quick_battle_team_1_faction", quick_battle_kingdoms_begin),
        (overlay_set_val, "$g_presentation_obj_custom_battle_designer_4", ":team_1_faction"),
      (try_end),

      (create_combo_label_overlay, "$g_presentation_obj_custom_battle_designer_5"),
##      (position_set_x, pos1, 800),
##      (position_set_y, pos1, 800),
##      (overlay_set_size, "$g_presentation_obj_custom_battle_designer_5", pos1),
      (position_set_x, pos1, 820),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, "$g_presentation_obj_custom_battle_designer_5", pos1),
      (try_begin),
        (is_trial_version),
        (str_store_faction_name, s0, quick_battle_kingdoms_begin),
        (overlay_add_item, "$g_presentation_obj_custom_battle_designer_5", s0),
        (store_add, ":cur_faction", quick_battle_kingdoms_begin, 1),
        (str_store_faction_name, s0, ":cur_faction"),
        (overlay_add_item, "$g_presentation_obj_custom_battle_designer_5", s0),
      (else_try),
        (try_for_range, ":cur_faction", quick_battle_kingdoms_begin, quick_battle_kingdoms_end),
          (str_store_faction_name, s0, ":cur_faction"),
          (overlay_add_item, "$g_presentation_obj_custom_battle_designer_5", s0),
        (try_end),
        (str_store_faction_name, s0, "fac_gladiators"),
        (overlay_add_item, "$g_presentation_obj_custom_battle_designer_5", s0),
      (try_end),
      (try_begin),
        (eq, "$g_quick_battle_team_2_faction", "fac_gladiators"),
        (store_sub, ":overlay_value", quick_battle_kingdoms_end, quick_battle_kingdoms_begin),
        (overlay_set_val, "$g_presentation_obj_custom_battle_designer_5", ":overlay_value"),
      (else_try),
        (store_sub, ":team_2_faction", "$g_quick_battle_team_2_faction", quick_battle_kingdoms_begin),
        (overlay_set_val, "$g_presentation_obj_custom_battle_designer_5", ":team_2_faction"),
      (try_end),

      (val_sub, ":cur_y", ":cur_y_adder"),

      (create_text_overlay, reg0, "str_army_composition", tf_center_justify),
      (position_set_x, pos1, 175),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, reg0, pos1),

      (create_text_overlay, reg0, "str_army_composition", tf_center_justify),
      (position_set_x, pos1, 820),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, reg0, pos1),

      (val_sub, ":cur_y", ":cur_y_adder"),

      (try_begin),
        (eq, "$g_presentation_obj_custom_battle_designer_6_last_value", 0),
        (eq, "$g_presentation_obj_custom_battle_designer_7_last_value", 0),
        (eq, "$g_presentation_obj_custom_battle_designer_8_last_value", 0),
        (eq, "$g_presentation_obj_custom_battle_designer_9_last_value", 0),
        (eq, "$g_presentation_obj_custom_battle_designer_10_last_value", 0),
        (eq, "$g_presentation_obj_custom_battle_designer_11_last_value", 0),
        (assign, "$g_presentation_obj_custom_battle_designer_6_last_value", 34),
        (assign, "$g_presentation_obj_custom_battle_designer_7_last_value", 33),
        (assign, "$g_presentation_obj_custom_battle_designer_8_last_value", 33),
        (assign, "$g_presentation_obj_custom_battle_designer_9_last_value", 34),
        (assign, "$g_presentation_obj_custom_battle_designer_10_last_value", 33),
        (assign, "$g_presentation_obj_custom_battle_designer_11_last_value", 33),
        (assign, "$g_presentation_obj_custom_battle_designer_6_locked", 0),
        (assign, "$g_presentation_obj_custom_battle_designer_7_locked", 0),
        (assign, "$g_presentation_obj_custom_battle_designer_8_locked", 0),
        (assign, "$g_presentation_obj_custom_battle_designer_9_locked", 0),
        (assign, "$g_presentation_obj_custom_battle_designer_10_locked", 0),
        (assign, "$g_presentation_obj_custom_battle_designer_11_locked", 0),
      (try_end),

      (create_mesh_overlay, reg0, "mesh_cb_ui_icon_infantry"),
      (position_set_x, pos1, 5),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, reg0, pos1),
      (position_set_x, pos1, 400),
      (position_set_y, pos1, 400),
      (overlay_set_size, reg0, pos1),

      (create_mesh_overlay, reg0, "mesh_cb_ui_icon_infantry"),
      (position_set_x, pos1, 650),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, reg0, pos1),
      (position_set_x, pos1, 400),
      (position_set_y, pos1, 400),
      (overlay_set_size, reg0, pos1),

      (create_slider_overlay, "$g_presentation_obj_custom_battle_designer_6", 0, 100),
      (overlay_set_val, "$g_presentation_obj_custom_battle_designer_6", "$g_presentation_obj_custom_battle_designer_6_last_value"),
      (position_set_x, pos1, 900),
      (position_set_y, pos1, 1000),
      (overlay_set_size, "$g_presentation_obj_custom_battle_designer_6", pos1),
      (position_set_x, pos1, 175),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, "$g_presentation_obj_custom_battle_designer_6", pos1),

      (assign, reg0, "$g_presentation_obj_custom_battle_designer_6_last_value"),
      (create_text_overlay, "$g_presentation_obj_custom_battle_designer_12", "str_reg0_percent", 0),
      (position_set_x, pos1, 295),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, "$g_presentation_obj_custom_battle_designer_12", pos1),

      (create_slider_overlay, "$g_presentation_obj_custom_battle_designer_9", 0, 100),
      (overlay_set_val, "$g_presentation_obj_custom_battle_designer_9", "$g_presentation_obj_custom_battle_designer_9_last_value"),
      (position_set_x, pos1, 900),
      (position_set_y, pos1, 1000),
      (overlay_set_size, "$g_presentation_obj_custom_battle_designer_9", pos1),
      (position_set_x, pos1, 820),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, "$g_presentation_obj_custom_battle_designer_9", pos1),

      (assign, reg0, "$g_presentation_obj_custom_battle_designer_9_last_value"),
      (create_text_overlay, "$g_presentation_obj_custom_battle_designer_15", "str_reg0_percent", 0),
      (position_set_x, pos1, 940),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, "$g_presentation_obj_custom_battle_designer_15", pos1),

      (val_sub, ":cur_y", ":cur_y_adder"),

      (create_mesh_overlay, reg0, "mesh_cb_ui_icon_archer"),
      (position_set_x, pos1, 15),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, reg0, pos1),
      (position_set_x, pos1, 400),
      (position_set_y, pos1, 400),
      (overlay_set_size, reg0, pos1),

      (create_mesh_overlay, reg0, "mesh_cb_ui_icon_archer"),
      (position_set_x, pos1, 660),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, reg0, pos1),
      (position_set_x, pos1, 400),
      (position_set_y, pos1, 400),
      (overlay_set_size, reg0, pos1),

      (create_slider_overlay, "$g_presentation_obj_custom_battle_designer_7", 0, 100),
      (overlay_set_val, "$g_presentation_obj_custom_battle_designer_7", "$g_presentation_obj_custom_battle_designer_7_last_value"),
      (position_set_x, pos1, 900),
      (position_set_y, pos1, 1000),
      (overlay_set_size, "$g_presentation_obj_custom_battle_designer_7", pos1),
      (position_set_x, pos1, 175),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, "$g_presentation_obj_custom_battle_designer_7", pos1),

      (assign, reg0, "$g_presentation_obj_custom_battle_designer_7_last_value"),
      (create_text_overlay, "$g_presentation_obj_custom_battle_designer_13", "str_reg0_percent", 0),
      (position_set_x, pos1, 295),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, "$g_presentation_obj_custom_battle_designer_13", pos1),

      (create_slider_overlay, "$g_presentation_obj_custom_battle_designer_10", 0, 100),
      (overlay_set_val, "$g_presentation_obj_custom_battle_designer_10", "$g_presentation_obj_custom_battle_designer_10_last_value"),
      (position_set_x, pos1, 900),
      (position_set_y, pos1, 1000),
      (overlay_set_size, "$g_presentation_obj_custom_battle_designer_10", pos1),
      (position_set_x, pos1, 820),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, "$g_presentation_obj_custom_battle_designer_10", pos1),

      (assign, reg0, "$g_presentation_obj_custom_battle_designer_10_last_value"),
      (create_text_overlay, "$g_presentation_obj_custom_battle_designer_16", "str_reg0_percent", 0),
      (position_set_x, pos1, 940),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, "$g_presentation_obj_custom_battle_designer_16", pos1),

      (val_sub, ":cur_y", ":cur_y_adder"),

      (create_mesh_overlay, reg0, "mesh_cb_ui_icon_horseman"),
      (position_set_x, pos1, 10),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, reg0, pos1),
      (position_set_x, pos1, 400),
      (position_set_y, pos1, 400),
      (overlay_set_size, reg0, pos1),

      (create_mesh_overlay, reg0, "mesh_cb_ui_icon_horseman"),
      (position_set_x, pos1, 655),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, reg0, pos1),
      (position_set_x, pos1, 400),
      (position_set_y, pos1, 400),
      (overlay_set_size, reg0, pos1),

      (create_slider_overlay, "$g_presentation_obj_custom_battle_designer_8", 0, 100),
      (overlay_set_val, "$g_presentation_obj_custom_battle_designer_8", "$g_presentation_obj_custom_battle_designer_8_last_value"),
      (position_set_x, pos1, 900),
      (position_set_y, pos1, 1000),
      (overlay_set_size, "$g_presentation_obj_custom_battle_designer_8", pos1),
      (position_set_x, pos1, 175),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, "$g_presentation_obj_custom_battle_designer_8", pos1),

      (assign, reg0, "$g_presentation_obj_custom_battle_designer_8_last_value"),
      (create_text_overlay, "$g_presentation_obj_custom_battle_designer_14", "str_reg0_percent", 0),
      (position_set_x, pos1, 295),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, "$g_presentation_obj_custom_battle_designer_14", pos1),

      (create_slider_overlay, "$g_presentation_obj_custom_battle_designer_11", 0, 100),
      (overlay_set_val, "$g_presentation_obj_custom_battle_designer_11", "$g_presentation_obj_custom_battle_designer_11_last_value"),
      (position_set_x, pos1, 900),
      (position_set_y, pos1, 1000),
      (overlay_set_size, "$g_presentation_obj_custom_battle_designer_11", pos1),
      (position_set_x, pos1, 820),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, "$g_presentation_obj_custom_battle_designer_11", pos1),

      (assign, reg0, "$g_presentation_obj_custom_battle_designer_11_last_value"),
      (create_text_overlay, "$g_presentation_obj_custom_battle_designer_17", "str_reg0_percent", 0),
      (position_set_x, pos1, 940),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, "$g_presentation_obj_custom_battle_designer_17", pos1),

      (val_sub, ":cur_y", ":cur_y_adder"),

      (create_text_overlay, reg0, "str_army_size", tf_center_justify),
      (position_set_x, pos1, 175),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, reg0, pos1),

      (create_text_overlay, reg0, "str_army_size", tf_center_justify),
      (position_set_x, pos1, 820),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, reg0, pos1),

      (val_sub, ":cur_y", ":cur_y_adder"),

      (try_begin),
        (is_trial_version),
        (val_min, "$g_quick_battle_army_1_size", 25),
        (val_min, "$g_quick_battle_army_2_size", 25),
      (try_end),

      (create_slider_overlay, "$g_presentation_obj_custom_battle_designer_2", 0, 100),
      (overlay_set_boundaries, "$g_presentation_obj_custom_battle_designer_2", 1000, 75000),
      (overlay_set_val, "$g_presentation_obj_custom_battle_designer_2", "$g_quick_battle_army_1_size"),
      (position_set_x, pos1, 900),
      (position_set_y, pos1, 1000),
      (overlay_set_size, "$g_presentation_obj_custom_battle_designer_2", pos1),
      (position_set_x, pos1, 135),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, "$g_presentation_obj_custom_battle_designer_2", pos1),

      (call_script, "script_get_army_size_from_slider_value", "$g_quick_battle_army_1_size"),
      (create_text_overlay, "$g_presentation_obj_custom_battle_designer_21", "str_reg0_men", 0),
      (position_set_x, pos1, 255),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, "$g_presentation_obj_custom_battle_designer_21", pos1),

      (create_slider_overlay, "$g_presentation_obj_custom_battle_designer_3", 200),
      (overlay_set_boundaries, "$g_presentation_obj_custom_battle_designer_3", 1000, 75000),
      (overlay_set_val, "$g_presentation_obj_custom_battle_designer_3", "$g_quick_battle_army_2_size"),
      (position_set_x, pos1, 900),
      (position_set_y, pos1, 1000),
      (overlay_set_size, "$g_presentation_obj_custom_battle_designer_3", pos1),
      (position_set_x, pos1, 780),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, "$g_presentation_obj_custom_battle_designer_3", pos1),

      (call_script, "script_get_army_size_from_slider_value", "$g_quick_battle_army_2_size"),
      (create_text_overlay, "$g_presentation_obj_custom_battle_designer_22", "str_reg0_men", 0),
      (position_set_x, pos1, 900),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, "$g_presentation_obj_custom_battle_designer_22", pos1),

      (create_game_button_overlay, "$g_presentation_obj_custom_battle_designer_19", "str_start", 0),
      (position_set_x, pos1, 415),
      (position_set_y, pos1, 10),
      (overlay_set_position, "$g_presentation_obj_custom_battle_designer_19", pos1),

      (create_game_button_overlay, "$g_presentation_obj_custom_battle_designer_20", "str_back", 0),
      (position_set_x, pos1, 585),
      (position_set_y, pos1, 10),
      (overlay_set_position, "$g_presentation_obj_custom_battle_designer_20", pos1),

      (presentation_set_duration, 999999),
    ]),

    (ti_on_presentation_event_state_change,
     [
       (store_trigger_param_1, ":object"),
       (store_trigger_param_2, ":value"),
       (try_begin),
         (eq, ":object", "$g_presentation_obj_custom_battle_designer_1"),
         (try_begin),
           (eq, "$g_quick_battle_game_type", 0),
           (store_add, "$g_quick_battle_map", ":value", quick_battle_battle_scenes_begin),
         (else_try),
           (store_add, "$g_quick_battle_map", ":value", quick_battle_siege_scenes_begin),
         (try_end),
         (presentation_set_duration, 0),
         (start_presentation, "prsnt_game_custom_battle_designer"),
       (else_try),
         (eq, ":object", "$g_presentation_obj_custom_battle_designer_23"),
         (assign, "$g_quick_battle_game_type", ":value"),
         (presentation_set_duration, 0),
         (start_presentation, "prsnt_game_custom_battle_designer"),
       (else_try),
         (eq, ":object", "$g_presentation_obj_custom_battle_designer_24"),
         (store_random_in_range, "$g_quick_battle_game_type", 0, 3),
         (store_random_in_range, "$g_quick_battle_troop", quick_battle_troops_begin, quick_battle_troops_end),
         (try_begin),
           (is_trial_version),
           (store_random_in_range, "$g_quick_battle_team_1_faction", 0, 2),
           (try_begin),
             (eq, "$g_quick_battle_team_1_faction", 0),
             (assign, "$g_quick_battle_team_2_faction", 1),
           (else_try),
             (assign, "$g_quick_battle_team_2_faction", 0),
           (try_end),
           (val_add, "$g_quick_battle_team_1_faction", quick_battle_kingdoms_begin),
           (val_add, "$g_quick_battle_team_2_faction", quick_battle_kingdoms_begin),
           (store_random_in_range, "$g_quick_battle_army_1_size", 10, 16),
           (store_random_in_range, ":random_army_size", 0, 6),
           (val_add, "$g_quick_battle_army_1_size", ":random_army_size"),
           (store_random_in_range, ":random_army_size", 0, 6),
           (val_add, "$g_quick_battle_army_1_size", ":random_army_size"),
         (else_try),
           (store_sub, ":num_factions", quick_battle_kingdoms_end, quick_battle_kingdoms_begin),
           (val_add, ":num_factions", 1),
           (store_random_in_range, "$g_quick_battle_team_1_faction", 0, ":num_factions"),
           (try_begin),
             (eq, "$g_quick_battle_team_1_faction", 0),
             (assign, "$g_quick_battle_team_1_faction", "fac_gladiators"),
           (else_try),
             (val_add, "$g_quick_battle_team_1_faction", quick_battle_kingdoms_begin),
             (val_sub, "$g_quick_battle_team_1_faction", 1),
           (try_end),
           (assign, ":end_cond", 1000),
           (try_for_range, ":unused", 0, ":end_cond"),
             (store_random_in_range, "$g_quick_battle_team_2_faction", 0, ":num_factions"),
             (try_begin),
               (eq, "$g_quick_battle_team_2_faction", 0),
               (assign, "$g_quick_battle_team_2_faction", "fac_gladiators"),
             (else_try),
               (val_add, "$g_quick_battle_team_2_faction", quick_battle_kingdoms_begin),
               (val_sub, "$g_quick_battle_team_2_faction", 1),
             (try_end),
             (neq, "$g_quick_battle_team_1_faction", "$g_quick_battle_team_2_faction"),
             (assign, ":end_cond", 0),
           (try_end),
           (store_random_in_range, "$g_quick_battle_army_1_size", 10, 21),
           (store_random_in_range, ":random_army_size", 0, 11),
           (val_add, "$g_quick_battle_army_1_size", ":random_army_size"),
           (store_random_in_range, ":random_army_size", 0, 11),
           (val_add, "$g_quick_battle_army_1_size", ":random_army_size"),
         (try_end),
         (assign, "$g_quick_battle_army_2_size", "$g_quick_battle_army_1_size"),
         (try_begin),
           (eq, "$g_quick_battle_game_type", 0), #battle
           (store_random_in_range, "$g_quick_battle_map", quick_battle_battle_scenes_begin, quick_battle_battle_scenes_end),
           (store_random_in_range, ":random_type", 0, 3),
           (store_random_in_range, ":random_type_2", 0, 2),
           (store_random_in_range, ":random_composition", 0, 100),
           (store_sub, ":left_max", 100, ":random_composition"),
           (store_random_in_range, ":random_composition_2", 0, ":left_max"),
           (store_sub, ":random_composition_3", ":left_max", ":random_composition_2"),
           (try_begin),
             (eq, ":random_type", 0),
             (assign, "$g_presentation_obj_custom_battle_designer_6_last_value", ":random_composition"),
             (try_begin),
               (eq, ":random_type_2", 0),
               (assign, "$g_presentation_obj_custom_battle_designer_7_last_value", ":random_composition_2"),
               (assign, "$g_presentation_obj_custom_battle_designer_8_last_value", ":random_composition_3"),
             (else_try),
               (assign, "$g_presentation_obj_custom_battle_designer_8_last_value", ":random_composition_2"),
               (assign, "$g_presentation_obj_custom_battle_designer_7_last_value", ":random_composition_3"),
             (try_end),
           (else_try),
             (eq, ":random_type", 1),
             (assign, "$g_presentation_obj_custom_battle_designer_7_last_value", ":random_composition"),
             (try_begin),
               (eq, ":random_type_2", 0),
               (assign, "$g_presentation_obj_custom_battle_designer_6_last_value", ":random_composition_2"),
               (assign, "$g_presentation_obj_custom_battle_designer_8_last_value", ":random_composition_3"),
             (else_try),
               (assign, "$g_presentation_obj_custom_battle_designer_8_last_value", ":random_composition_2"),
               (assign, "$g_presentation_obj_custom_battle_designer_6_last_value", ":random_composition_3"),
             (try_end),
           (else_try),
             (assign, "$g_presentation_obj_custom_battle_designer_8_last_value", ":random_composition"),
             (try_begin),
               (eq, ":random_type_2", 0),
               (assign, "$g_presentation_obj_custom_battle_designer_6_last_value", ":random_composition_2"),
               (assign, "$g_presentation_obj_custom_battle_designer_7_last_value", ":random_composition_3"),
             (else_try),
               (assign, "$g_presentation_obj_custom_battle_designer_7_last_value", ":random_composition_2"),
               (assign, "$g_presentation_obj_custom_battle_designer_6_last_value", ":random_composition_3"),
             (try_end),
           (try_end),
           (store_random_in_range, ":random_type", 0, 3),
           (store_random_in_range, ":random_type_2", 0, 2),
           (store_random_in_range, ":random_composition", 0, 100),
           (store_sub, ":left_max", 100, ":random_composition"),
           (store_random_in_range, ":random_composition_2", 0, ":left_max"),
           (store_sub, ":random_composition_3", ":left_max", ":random_composition_2"),
           (try_begin),
             (eq, ":random_type", 0),
             (assign, "$g_presentation_obj_custom_battle_designer_9_last_value", ":random_composition"),
             (try_begin),
               (eq, ":random_type_2", 0),
               (assign, "$g_presentation_obj_custom_battle_designer_10_last_value", ":random_composition_2"),
               (assign, "$g_presentation_obj_custom_battle_designer_11_last_value", ":random_composition_3"),
             (else_try),
               (assign, "$g_presentation_obj_custom_battle_designer_11_last_value", ":random_composition_2"),
               (assign, "$g_presentation_obj_custom_battle_designer_10_last_value", ":random_composition_3"),
             (try_end),
           (else_try),
             (eq, ":random_type", 1),
             (assign, "$g_presentation_obj_custom_battle_designer_10_last_value", ":random_composition"),
             (try_begin),
               (eq, ":random_type_2", 0),
               (assign, "$g_presentation_obj_custom_battle_designer_9_last_value", ":random_composition_2"),
               (assign, "$g_presentation_obj_custom_battle_designer_11_last_value", ":random_composition_3"),
             (else_try),
               (assign, "$g_presentation_obj_custom_battle_designer_11_last_value", ":random_composition_2"),
               (assign, "$g_presentation_obj_custom_battle_designer_9_last_value", ":random_composition_3"),
             (try_end),
           (else_try),
             (assign, "$g_presentation_obj_custom_battle_designer_11_last_value", ":random_composition"),
             (try_begin),
               (eq, ":random_type_2", 0),
               (assign, "$g_presentation_obj_custom_battle_designer_9_last_value", ":random_composition_2"),
               (assign, "$g_presentation_obj_custom_battle_designer_10_last_value", ":random_composition_3"),
             (else_try),
               (assign, "$g_presentation_obj_custom_battle_designer_10_last_value", ":random_composition_2"),
               (assign, "$g_presentation_obj_custom_battle_designer_9_last_value", ":random_composition_3"),
             (try_end),
           (try_end),
         (else_try),
           (eq, "$g_quick_battle_game_type", 1), #siege offense
           (store_random_in_range, "$g_quick_battle_map", quick_battle_siege_scenes_begin, quick_battle_siege_scenes_end),
           #defender is enemy
           (store_random_in_range, "$g_presentation_obj_custom_battle_designer_10_last_value", 30, 100), #min 30% archer
           (store_sub, "$g_presentation_obj_custom_battle_designer_9_last_value", 100, "$g_presentation_obj_custom_battle_designer_10_last_value"),
           (assign, "$g_presentation_obj_custom_battle_designer_11_last_value", 0), #no cavalry
           (store_random_in_range, "$g_presentation_obj_custom_battle_designer_6_last_value", 20, 100), #min 20% infantry
           (store_sub, "$g_presentation_obj_custom_battle_designer_7_last_value", 100, "$g_presentation_obj_custom_battle_designer_6_last_value"),
           (assign, "$g_presentation_obj_custom_battle_designer_8_last_value", 0), #no cavalry
         (else_try),
           #siege defense
           (store_random_in_range, "$g_quick_battle_map", quick_battle_siege_scenes_begin, quick_battle_siege_scenes_end),
           #defender is player
           (store_random_in_range, "$g_presentation_obj_custom_battle_designer_7_last_value", 30, 100), #min 30% archer
           (store_sub, "$g_presentation_obj_custom_battle_designer_6_last_value", 100, "$g_presentation_obj_custom_battle_designer_7_last_value"),
           (assign, "$g_presentation_obj_custom_battle_designer_8_last_value", 0), #no cavalry
           (store_random_in_range, "$g_presentation_obj_custom_battle_designer_9_last_value", 20, 100), #min 20% infantry
           (store_sub, "$g_presentation_obj_custom_battle_designer_10_last_value", 100, "$g_presentation_obj_custom_battle_designer_9_last_value"),
           (assign, "$g_presentation_obj_custom_battle_designer_11_last_value", 0), #no cavalry
         (try_end),
         (presentation_set_duration, 0),
         (start_presentation, "prsnt_game_custom_battle_designer"),
       (else_try),
         (eq, ":object", "$g_presentation_obj_custom_battle_designer_2"),
         (assign, "$g_quick_battle_army_1_size", ":value"),
         (try_begin),
           (is_trial_version),
           (gt, "$g_quick_battle_army_1_size", 25),
           (assign, "$g_quick_battle_army_1_size", 25),
           (overlay_set_val, "$g_presentation_obj_custom_battle_designer_2", 25),
         (try_end),
         (call_script, "script_get_army_size_from_slider_value", "$g_quick_battle_army_1_size"),
         (overlay_set_text, "$g_presentation_obj_custom_battle_designer_21", "str_reg0_men"),
       (else_try),
         (eq, ":object", "$g_presentation_obj_custom_battle_designer_3"),
         (assign, "$g_quick_battle_army_2_size", ":value"),
         (try_begin),
           (is_trial_version),
           (gt, "$g_quick_battle_army_2_size", 25),
           (assign, "$g_quick_battle_army_2_size", 25),
           (overlay_set_val, "$g_presentation_obj_custom_battle_designer_3", 25),
         (try_end),
         (call_script, "script_get_army_size_from_slider_value", "$g_quick_battle_army_2_size"),
         (overlay_set_text, "$g_presentation_obj_custom_battle_designer_22", "str_reg0_men"),
       (else_try),
         (eq, ":object", "$g_presentation_obj_custom_battle_designer_4"),
         (try_begin),
           (store_sub, ":outlaw_index", quick_battle_kingdoms_end, quick_battle_kingdoms_begin),
           (eq, ":value", ":outlaw_index"),
           (assign, "$g_quick_battle_team_1_faction", "fac_gladiators"),
         (else_try),
           (store_add, "$g_quick_battle_team_1_faction", ":value", quick_battle_kingdoms_begin),
         (try_end),
       (else_try),
         (eq, ":object", "$g_presentation_obj_custom_battle_designer_5"),
         (try_begin),
           (store_sub, ":outlaw_index", quick_battle_kingdoms_end, quick_battle_kingdoms_begin),
           (eq, ":value", ":outlaw_index"),
           (assign, "$g_quick_battle_team_2_faction", "fac_gladiators"),
         (else_try),
           (store_add, "$g_quick_battle_team_2_faction", ":value", quick_battle_kingdoms_begin),
         (try_end),
         (presentation_set_duration, 0),
         (start_presentation, "prsnt_game_custom_battle_designer"),
       (else_try),
         (eq, ":object", "$g_presentation_obj_custom_battle_designer_18"),
         (store_add, "$g_quick_battle_troop", ":value", quick_battle_troops_begin),
         (presentation_set_duration, 0),
         (start_presentation, "prsnt_game_custom_battle_designer"),
       (else_try),
         (eq, ":object", "$g_presentation_obj_custom_battle_designer_6"),
         (try_begin),
           (eq, "$g_presentation_obj_custom_battle_designer_6_locked", 1),
           (neq, ":value", "$g_presentation_obj_custom_battle_designer_6_last_value"),
           (overlay_set_val, "$g_presentation_obj_custom_battle_designer_6", "$g_presentation_obj_custom_battle_designer_6_last_value"),
         (else_try),
           (try_begin),
             (lt, ":value", "$g_presentation_obj_custom_battle_designer_6_last_value"),
             (store_sub, ":dif", "$g_presentation_obj_custom_battle_designer_6_last_value", ":value"),
             (try_begin),
               (eq, "$g_presentation_obj_custom_battle_designer_7_locked", 1),
               (assign, ":first_dif", 0),
               (assign, ":second_dif", ":dif"),
             (else_try),
               (eq, "$g_presentation_obj_custom_battle_designer_8_locked", 1),
               (assign, ":first_dif", ":dif"),
               (assign, ":second_dif", 0),
             (else_try),
               (store_div, ":first_dif", ":dif", 2),
               (store_sub, ":second_dif", ":dif", ":first_dif"),
               (try_begin),
                 (neq, ":first_dif", ":second_dif"),
                 (store_random_in_range, ":random_no", 0, 2),
                 (eq, ":random_no", 0),
                 (val_sub, ":second_dif", 1),
                 (val_add, ":first_dif", 1),
               (try_end),
             (try_end),
             (assign, "$g_presentation_obj_custom_battle_designer_6_last_value", ":value"),
             (val_add, "$g_presentation_obj_custom_battle_designer_7_last_value", ":first_dif"),
             (val_add, "$g_presentation_obj_custom_battle_designer_8_last_value", ":second_dif"),
             (try_begin),
               (gt, "$g_presentation_obj_custom_battle_designer_7_last_value", 100),
               (store_sub, ":dif", "$g_presentation_obj_custom_battle_designer_7_last_value", 100),
               (val_add, "$g_presentation_obj_custom_battle_designer_8_last_value", ":dif"),
               (assign, "$g_presentation_obj_custom_battle_designer_7_last_value", 100),
             (else_try),
               (gt, "$g_presentation_obj_custom_battle_designer_8_last_value", 100),
               (store_sub, ":dif", "$g_presentation_obj_custom_battle_designer_8_last_value", 100),
               (val_add, "$g_presentation_obj_custom_battle_designer_7_last_value", ":dif"),
               (assign, "$g_presentation_obj_custom_battle_designer_8_last_value", 100),
             (try_end),
             (overlay_set_val, "$g_presentation_obj_custom_battle_designer_7", "$g_presentation_obj_custom_battle_designer_7_last_value"),
             (overlay_set_val, "$g_presentation_obj_custom_battle_designer_8", "$g_presentation_obj_custom_battle_designer_8_last_value"),
           (else_try),
             (gt, ":value", "$g_presentation_obj_custom_battle_designer_6_last_value"),
             (store_sub, ":dif", ":value", "$g_presentation_obj_custom_battle_designer_6_last_value"),
             (try_begin),
               (eq, "$g_presentation_obj_custom_battle_designer_7_locked", 1),
               (assign, ":first_dif", 0),
               (assign, ":second_dif", ":dif"),
             (else_try),
               (eq, "$g_presentation_obj_custom_battle_designer_8_locked", 1),
               (assign, ":first_dif", ":dif"),
               (assign, ":second_dif", 0),
             (else_try),
               (store_div, ":first_dif", ":dif", 2),
               (store_sub, ":second_dif", ":dif", ":first_dif"),
               (try_begin),
                 (neq, ":first_dif", ":second_dif"),
                 (store_random_in_range, ":random_no", 0, 2),
                 (eq, ":random_no", 0),
                 (val_sub, ":second_dif", 1),
                 (val_add, ":first_dif", 1),
               (try_end),
             (try_end),
             (assign, "$g_presentation_obj_custom_battle_designer_6_last_value", ":value"),
             (val_sub, "$g_presentation_obj_custom_battle_designer_7_last_value", ":first_dif"),
             (val_sub, "$g_presentation_obj_custom_battle_designer_8_last_value", ":second_dif"),
             (try_begin),
               (lt, "$g_presentation_obj_custom_battle_designer_7_last_value", 0),
               (val_add, "$g_presentation_obj_custom_battle_designer_8_last_value", "$g_presentation_obj_custom_battle_designer_7_last_value"),
               (assign, "$g_presentation_obj_custom_battle_designer_7_last_value", 0),
             (else_try),
               (lt, "$g_presentation_obj_custom_battle_designer_8_last_value", 0),
               (val_add, "$g_presentation_obj_custom_battle_designer_7_last_value", "$g_presentation_obj_custom_battle_designer_8_last_value"),
               (assign, "$g_presentation_obj_custom_battle_designer_8_last_value", 0),
             (try_end),
             (overlay_set_val, "$g_presentation_obj_custom_battle_designer_7", "$g_presentation_obj_custom_battle_designer_7_last_value"),
             (overlay_set_val, "$g_presentation_obj_custom_battle_designer_8", "$g_presentation_obj_custom_battle_designer_8_last_value"),
           (try_end),
           (assign, reg0, "$g_presentation_obj_custom_battle_designer_6_last_value"),
           (overlay_set_text, "$g_presentation_obj_custom_battle_designer_12", "str_reg0_percent"),
           (assign, reg0, "$g_presentation_obj_custom_battle_designer_7_last_value"),
           (overlay_set_text, "$g_presentation_obj_custom_battle_designer_13", "str_reg0_percent"),
           (assign, reg0, "$g_presentation_obj_custom_battle_designer_8_last_value"),
           (overlay_set_text, "$g_presentation_obj_custom_battle_designer_14", "str_reg0_percent"),
         (try_end),
       (else_try),
         (eq, ":object", "$g_presentation_obj_custom_battle_designer_7"),
         (try_begin),
           (eq, "$g_presentation_obj_custom_battle_designer_7_locked", 1),
           (neq, ":value", "$g_presentation_obj_custom_battle_designer_7_last_value"),
           (overlay_set_val, "$g_presentation_obj_custom_battle_designer_7", "$g_presentation_obj_custom_battle_designer_7_last_value"),
         (else_try),
           (try_begin),
             (lt, ":value", "$g_presentation_obj_custom_battle_designer_7_last_value"),
             (store_sub, ":dif", "$g_presentation_obj_custom_battle_designer_7_last_value", ":value"),
             (try_begin),
               (eq, "$g_presentation_obj_custom_battle_designer_6_locked", 1),
               (assign, ":first_dif", 0),
               (assign, ":second_dif", ":dif"),
             (else_try),
               (eq, "$g_presentation_obj_custom_battle_designer_8_locked", 1),
               (assign, ":first_dif", ":dif"),
               (assign, ":second_dif", 0),
             (else_try),
               (store_div, ":first_dif", ":dif", 2),
               (store_sub, ":second_dif", ":dif", ":first_dif"),
               (try_begin),
                 (neq, ":first_dif", ":second_dif"),
                 (store_random_in_range, ":random_no", 0, 2),
                 (eq, ":random_no", 0),
                 (val_sub, ":second_dif", 1),
                 (val_add, ":first_dif", 1),
               (try_end),
             (try_end),
             (assign, "$g_presentation_obj_custom_battle_designer_7_last_value", ":value"),
             (val_add, "$g_presentation_obj_custom_battle_designer_6_last_value", ":first_dif"),
             (val_add, "$g_presentation_obj_custom_battle_designer_8_last_value", ":second_dif"),
             (try_begin),
               (gt, "$g_presentation_obj_custom_battle_designer_6_last_value", 100),
               (store_sub, ":dif", "$g_presentation_obj_custom_battle_designer_6_last_value", 100),
               (val_add, "$g_presentation_obj_custom_battle_designer_8_last_value", ":dif"),
               (assign, "$g_presentation_obj_custom_battle_designer_6_last_value", 100),
             (else_try),
               (gt, "$g_presentation_obj_custom_battle_designer_8_last_value", 100),
               (store_sub, ":dif", "$g_presentation_obj_custom_battle_designer_8_last_value", 100),
               (val_add, "$g_presentation_obj_custom_battle_designer_6_last_value", ":dif"),
               (assign, "$g_presentation_obj_custom_battle_designer_8_last_value", 100),
             (try_end),
             (overlay_set_val, "$g_presentation_obj_custom_battle_designer_6", "$g_presentation_obj_custom_battle_designer_6_last_value"),
             (overlay_set_val, "$g_presentation_obj_custom_battle_designer_8", "$g_presentation_obj_custom_battle_designer_8_last_value"),
           (else_try),
             (gt, ":value", "$g_presentation_obj_custom_battle_designer_7_last_value"),
             (store_sub, ":dif", ":value", "$g_presentation_obj_custom_battle_designer_7_last_value"),
             (try_begin),
               (eq, "$g_presentation_obj_custom_battle_designer_6_locked", 1),
               (assign, ":first_dif", 0),
               (assign, ":second_dif", ":dif"),
             (else_try),
               (eq, "$g_presentation_obj_custom_battle_designer_8_locked", 1),
               (assign, ":first_dif", ":dif"),
               (assign, ":second_dif", 0),
             (else_try),
               (store_div, ":first_dif", ":dif", 2),
               (store_sub, ":second_dif", ":dif", ":first_dif"),
               (try_begin),
                 (neq, ":first_dif", ":second_dif"),
                 (store_random_in_range, ":random_no", 0, 2),
                 (eq, ":random_no", 0),
                 (val_sub, ":second_dif", 1),
                 (val_add, ":first_dif", 1),
               (try_end),
             (try_end),
             (assign, "$g_presentation_obj_custom_battle_designer_7_last_value", ":value"),
             (val_sub, "$g_presentation_obj_custom_battle_designer_6_last_value", ":first_dif"),
             (val_sub, "$g_presentation_obj_custom_battle_designer_8_last_value", ":second_dif"),
             (try_begin),
               (lt, "$g_presentation_obj_custom_battle_designer_6_last_value", 0),
               (val_add, "$g_presentation_obj_custom_battle_designer_8_last_value", "$g_presentation_obj_custom_battle_designer_6_last_value"),
               (assign, "$g_presentation_obj_custom_battle_designer_6_last_value", 0),
             (else_try),
               (lt, "$g_presentation_obj_custom_battle_designer_8_last_value", 0),
               (val_add, "$g_presentation_obj_custom_battle_designer_6_last_value", "$g_presentation_obj_custom_battle_designer_8_last_value"),
               (assign, "$g_presentation_obj_custom_battle_designer_8_last_value", 0),
             (try_end),
             (overlay_set_val, "$g_presentation_obj_custom_battle_designer_6", "$g_presentation_obj_custom_battle_designer_6_last_value"),
             (overlay_set_val, "$g_presentation_obj_custom_battle_designer_8", "$g_presentation_obj_custom_battle_designer_8_last_value"),
           (try_end),
           (assign, reg0, "$g_presentation_obj_custom_battle_designer_6_last_value"),
           (overlay_set_text, "$g_presentation_obj_custom_battle_designer_12", "str_reg0_percent"),
           (assign, reg0, "$g_presentation_obj_custom_battle_designer_7_last_value"),
           (overlay_set_text, "$g_presentation_obj_custom_battle_designer_13", "str_reg0_percent"),
           (assign, reg0, "$g_presentation_obj_custom_battle_designer_8_last_value"),
           (overlay_set_text, "$g_presentation_obj_custom_battle_designer_14", "str_reg0_percent"),
         (try_end),
       (else_try),
         (eq, ":object", "$g_presentation_obj_custom_battle_designer_8"),
           (try_begin),
             (eq, "$g_presentation_obj_custom_battle_designer_8_locked", 1),
             (neq, ":value", "$g_presentation_obj_custom_battle_designer_8_last_value"),
             (overlay_set_val, "$g_presentation_obj_custom_battle_designer_8", "$g_presentation_obj_custom_battle_designer_8_last_value"),
           (else_try),
           (try_begin),
             (lt, ":value", "$g_presentation_obj_custom_battle_designer_8_last_value"),
             (store_sub, ":dif", "$g_presentation_obj_custom_battle_designer_8_last_value", ":value"),
             (try_begin),
               (eq, "$g_presentation_obj_custom_battle_designer_7_locked", 1),
               (assign, ":first_dif", 0),
               (assign, ":second_dif", ":dif"),
             (else_try),
               (eq, "$g_presentation_obj_custom_battle_designer_6_locked", 1),
               (assign, ":first_dif", ":dif"),
               (assign, ":second_dif", 0),
             (else_try),
               (store_div, ":first_dif", ":dif", 2),
               (store_sub, ":second_dif", ":dif", ":first_dif"),
               (try_begin),
                 (neq, ":first_dif", ":second_dif"),
                 (store_random_in_range, ":random_no", 0, 2),
                 (eq, ":random_no", 0),
                 (val_sub, ":second_dif", 1),
                 (val_add, ":first_dif", 1),
               (try_end),
             (try_end),
             (assign, "$g_presentation_obj_custom_battle_designer_8_last_value", ":value"),
             (val_add, "$g_presentation_obj_custom_battle_designer_7_last_value", ":first_dif"),
             (val_add, "$g_presentation_obj_custom_battle_designer_6_last_value", ":second_dif"),
             (try_begin),
               (gt, "$g_presentation_obj_custom_battle_designer_7_last_value", 100),
               (store_sub, ":dif", "$g_presentation_obj_custom_battle_designer_7_last_value", 100),
               (val_add, "$g_presentation_obj_custom_battle_designer_6_last_value", ":dif"),
               (assign, "$g_presentation_obj_custom_battle_designer_7_last_value", 100),
             (else_try),
               (gt, "$g_presentation_obj_custom_battle_designer_6_last_value", 100),
               (store_sub, ":dif", "$g_presentation_obj_custom_battle_designer_6_last_value", 100),
               (val_add, "$g_presentation_obj_custom_battle_designer_7_last_value", ":dif"),
               (assign, "$g_presentation_obj_custom_battle_designer_6_last_value", 100),
             (try_end),
             (overlay_set_val, "$g_presentation_obj_custom_battle_designer_7", "$g_presentation_obj_custom_battle_designer_7_last_value"),
             (overlay_set_val, "$g_presentation_obj_custom_battle_designer_6", "$g_presentation_obj_custom_battle_designer_6_last_value"),
           (else_try),
             (gt, ":value", "$g_presentation_obj_custom_battle_designer_8_last_value"),
             (store_sub, ":dif", ":value", "$g_presentation_obj_custom_battle_designer_8_last_value"),
             (try_begin),
               (eq, "$g_presentation_obj_custom_battle_designer_7_locked", 1),
               (assign, ":first_dif", 0),
               (assign, ":second_dif", ":dif"),
             (else_try),
               (eq, "$g_presentation_obj_custom_battle_designer_6_locked", 1),
               (assign, ":first_dif", ":dif"),
               (assign, ":second_dif", 0),
             (else_try),
               (store_div, ":first_dif", ":dif", 2),
               (store_sub, ":second_dif", ":dif", ":first_dif"),
               (try_begin),
                 (neq, ":first_dif", ":second_dif"),
                 (store_random_in_range, ":random_no", 0, 2),
                 (eq, ":random_no", 0),
                 (val_sub, ":second_dif", 1),
                 (val_add, ":first_dif", 1),
               (try_end),
             (try_end),
             (assign, "$g_presentation_obj_custom_battle_designer_8_last_value", ":value"),
             (val_sub, "$g_presentation_obj_custom_battle_designer_7_last_value", ":first_dif"),
             (val_sub, "$g_presentation_obj_custom_battle_designer_6_last_value", ":second_dif"),
             (try_begin),
               (lt, "$g_presentation_obj_custom_battle_designer_7_last_value", 0),
               (val_add, "$g_presentation_obj_custom_battle_designer_6_last_value", "$g_presentation_obj_custom_battle_designer_7_last_value"),
               (assign, "$g_presentation_obj_custom_battle_designer_7_last_value", 0),
             (else_try),
               (lt, "$g_presentation_obj_custom_battle_designer_6_last_value", 0),
               (val_add, "$g_presentation_obj_custom_battle_designer_7_last_value", "$g_presentation_obj_custom_battle_designer_6_last_value"),
               (assign, "$g_presentation_obj_custom_battle_designer_6_last_value", 0),
             (try_end),
             (overlay_set_val, "$g_presentation_obj_custom_battle_designer_7", "$g_presentation_obj_custom_battle_designer_7_last_value"),
             (overlay_set_val, "$g_presentation_obj_custom_battle_designer_6", "$g_presentation_obj_custom_battle_designer_6_last_value"),
           (try_end),
           (assign, reg0, "$g_presentation_obj_custom_battle_designer_6_last_value"),
           (overlay_set_text, "$g_presentation_obj_custom_battle_designer_12", "str_reg0_percent"),
           (assign, reg0, "$g_presentation_obj_custom_battle_designer_7_last_value"),
           (overlay_set_text, "$g_presentation_obj_custom_battle_designer_13", "str_reg0_percent"),
           (assign, reg0, "$g_presentation_obj_custom_battle_designer_8_last_value"),
           (overlay_set_text, "$g_presentation_obj_custom_battle_designer_14", "str_reg0_percent"),
         (try_end),
       (else_try),
         (eq, ":object", "$g_presentation_obj_custom_battle_designer_9"),
         (try_begin),
           (eq, "$g_presentation_obj_custom_battle_designer_9_locked", 1),
           (neq, ":value", "$g_presentation_obj_custom_battle_designer_9_last_value"),
           (overlay_set_val, "$g_presentation_obj_custom_battle_designer_9", "$g_presentation_obj_custom_battle_designer_9_last_value"),
         (else_try),
           (try_begin),
             (lt, ":value", "$g_presentation_obj_custom_battle_designer_9_last_value"),
             (store_sub, ":dif", "$g_presentation_obj_custom_battle_designer_9_last_value", ":value"),
             (try_begin),
               (eq, "$g_presentation_obj_custom_battle_designer_10_locked", 1),
               (assign, ":first_dif", 0),
               (assign, ":second_dif", ":dif"),
             (else_try),
               (eq, "$g_presentation_obj_custom_battle_designer_11_locked", 1),
               (assign, ":first_dif", ":dif"),
               (assign, ":second_dif", 0),
             (else_try),
               (store_div, ":first_dif", ":dif", 2),
               (store_sub, ":second_dif", ":dif", ":first_dif"),
               (try_begin),
                 (neq, ":first_dif", ":second_dif"),
                 (store_random_in_range, ":random_no", 0, 2),
                 (eq, ":random_no", 0),
                 (val_sub, ":second_dif", 1),
                 (val_add, ":first_dif", 1),
               (try_end),
             (try_end),
             (assign, "$g_presentation_obj_custom_battle_designer_9_last_value", ":value"),
             (val_add, "$g_presentation_obj_custom_battle_designer_10_last_value", ":first_dif"),
             (val_add, "$g_presentation_obj_custom_battle_designer_11_last_value", ":second_dif"),
             (try_begin),
               (gt, "$g_presentation_obj_custom_battle_designer_10_last_value", 100),
               (store_sub, ":dif", "$g_presentation_obj_custom_battle_designer_10_last_value", 100),
               (val_add, "$g_presentation_obj_custom_battle_designer_11_last_value", ":dif"),
               (assign, "$g_presentation_obj_custom_battle_designer_10_last_value", 100),
             (else_try),
               (gt, "$g_presentation_obj_custom_battle_designer_11_last_value", 100),
               (store_sub, ":dif", "$g_presentation_obj_custom_battle_designer_11_last_value", 100),
               (val_add, "$g_presentation_obj_custom_battle_designer_10_last_value", ":dif"),
               (assign, "$g_presentation_obj_custom_battle_designer_11_last_value", 100),
             (try_end),
             (overlay_set_val, "$g_presentation_obj_custom_battle_designer_10", "$g_presentation_obj_custom_battle_designer_10_last_value"),
             (overlay_set_val, "$g_presentation_obj_custom_battle_designer_11", "$g_presentation_obj_custom_battle_designer_11_last_value"),
           (else_try),
             (gt, ":value", "$g_presentation_obj_custom_battle_designer_9_last_value"),
             (store_sub, ":dif", ":value", "$g_presentation_obj_custom_battle_designer_9_last_value"),
             (try_begin),
               (eq, "$g_presentation_obj_custom_battle_designer_10_locked", 1),
               (assign, ":first_dif", 0),
               (assign, ":second_dif", ":dif"),
             (else_try),
               (eq, "$g_presentation_obj_custom_battle_designer_11_locked", 1),
               (assign, ":first_dif", ":dif"),
               (assign, ":second_dif", 0),
             (else_try),
               (store_div, ":first_dif", ":dif", 2),
               (store_sub, ":second_dif", ":dif", ":first_dif"),
               (try_begin),
                 (neq, ":first_dif", ":second_dif"),
                 (store_random_in_range, ":random_no", 0, 2),
                 (eq, ":random_no", 0),
                 (val_sub, ":second_dif", 1),
                 (val_add, ":first_dif", 1),
               (try_end),
             (try_end),
             (assign, "$g_presentation_obj_custom_battle_designer_9_last_value", ":value"),
             (val_sub, "$g_presentation_obj_custom_battle_designer_10_last_value", ":first_dif"),
             (val_sub, "$g_presentation_obj_custom_battle_designer_11_last_value", ":second_dif"),
             (try_begin),
               (lt, "$g_presentation_obj_custom_battle_designer_10_last_value", 0),
               (val_add, "$g_presentation_obj_custom_battle_designer_11_last_value", "$g_presentation_obj_custom_battle_designer_10_last_value"),
               (assign, "$g_presentation_obj_custom_battle_designer_10_last_value", 0),
             (else_try),
               (lt, "$g_presentation_obj_custom_battle_designer_11_last_value", 0),
               (val_add, "$g_presentation_obj_custom_battle_designer_10_last_value", "$g_presentation_obj_custom_battle_designer_11_last_value"),
               (assign, "$g_presentation_obj_custom_battle_designer_11_last_value", 0),
             (try_end),
             (overlay_set_val, "$g_presentation_obj_custom_battle_designer_10", "$g_presentation_obj_custom_battle_designer_10_last_value"),
             (overlay_set_val, "$g_presentation_obj_custom_battle_designer_11", "$g_presentation_obj_custom_battle_designer_11_last_value"),
           (try_end),
           (assign, reg0, "$g_presentation_obj_custom_battle_designer_9_last_value"),
           (overlay_set_text, "$g_presentation_obj_custom_battle_designer_15", "str_reg0_percent"),
           (assign, reg0, "$g_presentation_obj_custom_battle_designer_10_last_value"),
           (overlay_set_text, "$g_presentation_obj_custom_battle_designer_16", "str_reg0_percent"),
           (assign, reg0, "$g_presentation_obj_custom_battle_designer_11_last_value"),
           (overlay_set_text, "$g_presentation_obj_custom_battle_designer_17", "str_reg0_percent"),
         (try_end),
       (else_try),
         (eq, ":object", "$g_presentation_obj_custom_battle_designer_10"),
         (try_begin),
           (eq, "$g_presentation_obj_custom_battle_designer_10_locked", 1),
           (neq, ":value", "$g_presentation_obj_custom_battle_designer_10_last_value"),
           (overlay_set_val, "$g_presentation_obj_custom_battle_designer_10", "$g_presentation_obj_custom_battle_designer_10_last_value"),
         (else_try),
           (try_begin),
             (lt, ":value", "$g_presentation_obj_custom_battle_designer_10_last_value"),
             (store_sub, ":dif", "$g_presentation_obj_custom_battle_designer_10_last_value", ":value"),
             (try_begin),
               (eq, "$g_presentation_obj_custom_battle_designer_9_locked", 1),
               (assign, ":first_dif", 0),
               (assign, ":second_dif", ":dif"),
             (else_try),
               (eq, "$g_presentation_obj_custom_battle_designer_11_locked", 1),
               (assign, ":first_dif", ":dif"),
               (assign, ":second_dif", 0),
             (else_try),
               (store_div, ":first_dif", ":dif", 2),
               (store_sub, ":second_dif", ":dif", ":first_dif"),
               (try_begin),
                 (neq, ":first_dif", ":second_dif"),
                 (store_random_in_range, ":random_no", 0, 2),
                 (eq, ":random_no", 0),
                 (val_sub, ":second_dif", 1),
                 (val_add, ":first_dif", 1),
               (try_end),
             (try_end),
             (assign, "$g_presentation_obj_custom_battle_designer_10_last_value", ":value"),
             (val_add, "$g_presentation_obj_custom_battle_designer_9_last_value", ":first_dif"),
             (val_add, "$g_presentation_obj_custom_battle_designer_11_last_value", ":second_dif"),
             (try_begin),
               (gt, "$g_presentation_obj_custom_battle_designer_9_last_value", 100),
               (store_sub, ":dif", "$g_presentation_obj_custom_battle_designer_9_last_value", 100),
               (val_add, "$g_presentation_obj_custom_battle_designer_11_last_value", ":dif"),
               (assign, "$g_presentation_obj_custom_battle_designer_9_last_value", 100),
             (else_try),
               (gt, "$g_presentation_obj_custom_battle_designer_11_last_value", 100),
               (store_sub, ":dif", "$g_presentation_obj_custom_battle_designer_11_last_value", 100),
               (val_add, "$g_presentation_obj_custom_battle_designer_9_last_value", ":dif"),
               (assign, "$g_presentation_obj_custom_battle_designer_11_last_value", 100),
             (try_end),
             (overlay_set_val, "$g_presentation_obj_custom_battle_designer_9", "$g_presentation_obj_custom_battle_designer_9_last_value"),
             (overlay_set_val, "$g_presentation_obj_custom_battle_designer_11", "$g_presentation_obj_custom_battle_designer_11_last_value"),
           (else_try),
             (gt, ":value", "$g_presentation_obj_custom_battle_designer_10_last_value"),
             (store_sub, ":dif", ":value", "$g_presentation_obj_custom_battle_designer_10_last_value"),
             (try_begin),
               (eq, "$g_presentation_obj_custom_battle_designer_9_locked", 1),
               (assign, ":first_dif", 0),
               (assign, ":second_dif", ":dif"),
             (else_try),
               (eq, "$g_presentation_obj_custom_battle_designer_11_locked", 1),
               (assign, ":first_dif", ":dif"),
               (assign, ":second_dif", 0),
             (else_try),
               (store_div, ":first_dif", ":dif", 2),
               (store_sub, ":second_dif", ":dif", ":first_dif"),
               (try_begin),
                 (neq, ":first_dif", ":second_dif"),
                 (store_random_in_range, ":random_no", 0, 2),
                 (eq, ":random_no", 0),
                 (val_sub, ":second_dif", 1),
                 (val_add, ":first_dif", 1),
               (try_end),
             (try_end),
             (assign, "$g_presentation_obj_custom_battle_designer_10_last_value", ":value"),
             (val_sub, "$g_presentation_obj_custom_battle_designer_9_last_value", ":first_dif"),
             (val_sub, "$g_presentation_obj_custom_battle_designer_11_last_value", ":second_dif"),
             (try_begin),
               (lt, "$g_presentation_obj_custom_battle_designer_9_last_value", 0),
               (val_add, "$g_presentation_obj_custom_battle_designer_11_last_value", "$g_presentation_obj_custom_battle_designer_9_last_value"),
               (assign, "$g_presentation_obj_custom_battle_designer_9_last_value", 0),
             (else_try),
               (lt, "$g_presentation_obj_custom_battle_designer_11_last_value", 0),
               (val_add, "$g_presentation_obj_custom_battle_designer_9_last_value", "$g_presentation_obj_custom_battle_designer_11_last_value"),
               (assign, "$g_presentation_obj_custom_battle_designer_11_last_value", 0),
             (try_end),
             (overlay_set_val, "$g_presentation_obj_custom_battle_designer_9", "$g_presentation_obj_custom_battle_designer_9_last_value"),
             (overlay_set_val, "$g_presentation_obj_custom_battle_designer_11", "$g_presentation_obj_custom_battle_designer_11_last_value"),
           (try_end),
           (assign, reg0, "$g_presentation_obj_custom_battle_designer_9_last_value"),
           (overlay_set_text, "$g_presentation_obj_custom_battle_designer_15", "str_reg0_percent"),
           (assign, reg0, "$g_presentation_obj_custom_battle_designer_10_last_value"),
           (overlay_set_text, "$g_presentation_obj_custom_battle_designer_16", "str_reg0_percent"),
           (assign, reg0, "$g_presentation_obj_custom_battle_designer_11_last_value"),
           (overlay_set_text, "$g_presentation_obj_custom_battle_designer_17", "str_reg0_percent"),
         (try_end),
       (else_try),
         (eq, ":object", "$g_presentation_obj_custom_battle_designer_11"),
         (try_begin),
           (eq, "$g_presentation_obj_custom_battle_designer_11_locked", 1),
           (neq, ":value", "$g_presentation_obj_custom_battle_designer_11_last_value"),
           (overlay_set_val, "$g_presentation_obj_custom_battle_designer_11", "$g_presentation_obj_custom_battle_designer_11_last_value"),
         (else_try),
           (try_begin),
             (lt, ":value", "$g_presentation_obj_custom_battle_designer_11_last_value"),
             (store_sub, ":dif", "$g_presentation_obj_custom_battle_designer_11_last_value", ":value"),
             (try_begin),
               (eq, "$g_presentation_obj_custom_battle_designer_10_locked", 1),
               (assign, ":first_dif", 0),
               (assign, ":second_dif", ":dif"),
             (else_try),
               (eq, "$g_presentation_obj_custom_battle_designer_9_locked", 1),
               (assign, ":first_dif", ":dif"),
               (assign, ":second_dif", 0),
             (else_try),
               (store_div, ":first_dif", ":dif", 2),
               (store_sub, ":second_dif", ":dif", ":first_dif"),
               (try_begin),
                 (neq, ":first_dif", ":second_dif"),
                 (store_random_in_range, ":random_no", 0, 2),
                 (eq, ":random_no", 0),
                 (val_sub, ":second_dif", 1),
                 (val_add, ":first_dif", 1),
               (try_end),
             (try_end),
             (assign, "$g_presentation_obj_custom_battle_designer_11_last_value", ":value"),
             (val_add, "$g_presentation_obj_custom_battle_designer_10_last_value", ":first_dif"),
             (val_add, "$g_presentation_obj_custom_battle_designer_9_last_value", ":second_dif"),
             (try_begin),
               (gt, "$g_presentation_obj_custom_battle_designer_10_last_value", 100),
               (store_sub, ":dif", "$g_presentation_obj_custom_battle_designer_10_last_value", 100),
               (val_add, "$g_presentation_obj_custom_battle_designer_9_last_value", ":dif"),
               (assign, "$g_presentation_obj_custom_battle_designer_10_last_value", 100),
             (else_try),
               (gt, "$g_presentation_obj_custom_battle_designer_9_last_value", 100),
               (store_sub, ":dif", "$g_presentation_obj_custom_battle_designer_9_last_value", 100),
               (val_add, "$g_presentation_obj_custom_battle_designer_10_last_value", ":dif"),
               (assign, "$g_presentation_obj_custom_battle_designer_9_last_value", 100),
             (try_end),
             (overlay_set_val, "$g_presentation_obj_custom_battle_designer_10", "$g_presentation_obj_custom_battle_designer_10_last_value"),
             (overlay_set_val, "$g_presentation_obj_custom_battle_designer_9", "$g_presentation_obj_custom_battle_designer_9_last_value"),
           (else_try),
             (gt, ":value", "$g_presentation_obj_custom_battle_designer_11_last_value"),
             (store_sub, ":dif", ":value", "$g_presentation_obj_custom_battle_designer_11_last_value"),
             (try_begin),
               (eq, "$g_presentation_obj_custom_battle_designer_10_locked", 1),
               (assign, ":first_dif", 0),
               (assign, ":second_dif", ":dif"),
             (else_try),
               (eq, "$g_presentation_obj_custom_battle_designer_9_locked", 1),
               (assign, ":first_dif", ":dif"),
               (assign, ":second_dif", 0),
             (else_try),
               (store_div, ":first_dif", ":dif", 2),
               (store_sub, ":second_dif", ":dif", ":first_dif"),
               (try_begin),
                 (neq, ":first_dif", ":second_dif"),
                 (store_random_in_range, ":random_no", 0, 2),
                 (eq, ":random_no", 0),
                 (val_sub, ":second_dif", 1),
                 (val_add, ":first_dif", 1),
               (try_end),
             (try_end),
             (assign, "$g_presentation_obj_custom_battle_designer_11_last_value", ":value"),
             (val_sub, "$g_presentation_obj_custom_battle_designer_10_last_value", ":first_dif"),
             (val_sub, "$g_presentation_obj_custom_battle_designer_9_last_value", ":second_dif"),
             (try_begin),
               (lt, "$g_presentation_obj_custom_battle_designer_10_last_value", 0),
               (val_add, "$g_presentation_obj_custom_battle_designer_9_last_value", "$g_presentation_obj_custom_battle_designer_10_last_value"),
               (assign, "$g_presentation_obj_custom_battle_designer_10_last_value", 0),
             (else_try),
               (lt, "$g_presentation_obj_custom_battle_designer_9_last_value", 0),
               (val_add, "$g_presentation_obj_custom_battle_designer_10_last_value", "$g_presentation_obj_custom_battle_designer_9_last_value"),
               (assign, "$g_presentation_obj_custom_battle_designer_9_last_value", 0),
             (try_end),
             (overlay_set_val, "$g_presentation_obj_custom_battle_designer_10", "$g_presentation_obj_custom_battle_designer_10_last_value"),
             (overlay_set_val, "$g_presentation_obj_custom_battle_designer_9", "$g_presentation_obj_custom_battle_designer_9_last_value"),
           (try_end),
           (assign, reg0, "$g_presentation_obj_custom_battle_designer_9_last_value"),
           (overlay_set_text, "$g_presentation_obj_custom_battle_designer_15", "str_reg0_percent"),
           (assign, reg0, "$g_presentation_obj_custom_battle_designer_10_last_value"),
           (overlay_set_text, "$g_presentation_obj_custom_battle_designer_16", "str_reg0_percent"),
           (assign, reg0, "$g_presentation_obj_custom_battle_designer_11_last_value"),
           (overlay_set_text, "$g_presentation_obj_custom_battle_designer_17", "str_reg0_percent"),
         (try_end),
       (else_try),
         (eq, ":object", "$g_presentation_obj_custom_battle_designer_19"),
         (assign, "$g_is_quick_battle", 1),
         (assign, ":cur_scene", "$g_quick_battle_map"),
         (try_begin),
           (eq, "$g_quick_battle_game_type", 0), #battle
           (assign, ":cur_mission_template", "mt_quick_battle_battle"),
           (modify_visitors_at_site, ":cur_scene"),
           (call_script, "script_spawn_quick_battle_army", 0, "$g_quick_battle_team_1_faction", "$g_presentation_obj_custom_battle_designer_6_last_value", "$g_presentation_obj_custom_battle_designer_7_last_value", "$g_presentation_obj_custom_battle_designer_8_last_value", 0, 1),
           (call_script, "script_spawn_quick_battle_army", 16, "$g_quick_battle_team_2_faction", "$g_presentation_obj_custom_battle_designer_9_last_value", "$g_presentation_obj_custom_battle_designer_10_last_value", "$g_presentation_obj_custom_battle_designer_11_last_value", 0, 0),
         (else_try),
           (eq, "$g_quick_battle_game_type", 1), #siege offense, now used for gladiator fights in the colosseum
           (assign, ":cur_mission_template", "mt_quick_battle_siege"),
           (modify_visitors_at_site, ":cur_scene"),
           (call_script, "script_spawn_quick_battle_army", 0, "$g_quick_battle_team_1_faction", "$g_presentation_obj_custom_battle_designer_6_last_value", "$g_presentation_obj_custom_battle_designer_7_last_value", "$g_presentation_obj_custom_battle_designer_8_last_value", 1, 1),
           (call_script, "script_spawn_quick_battle_army", 16, "$g_quick_battle_team_2_faction", "$g_presentation_obj_custom_battle_designer_9_last_value", "$g_presentation_obj_custom_battle_designer_10_last_value", "$g_presentation_obj_custom_battle_designer_11_last_value", 0, 0),
         # (else_try),
           # #siege defense, now used for gladiator fights in the colosseum
           # (assign, ":cur_mission_template", "mt_quick_battle_siege"),
           # (modify_visitors_at_site, ":cur_scene"),
           # (call_script, "script_spawn_quick_battle_army", 0, "$g_quick_battle_team_1_faction", "$g_presentation_obj_custom_battle_designer_6_last_value", "$g_presentation_obj_custom_battle_designer_7_last_value", "$g_presentation_obj_custom_battle_designer_8_last_value", 1, 1),
           # (call_script, "script_spawn_quick_battle_army", 16, "$g_quick_battle_team_2_faction", "$g_presentation_obj_custom_battle_designer_9_last_value", "$g_presentation_obj_custom_battle_designer_10_last_value", "$g_presentation_obj_custom_battle_designer_11_last_value", 0, 0),
         (try_end),
         (set_jump_mission,":cur_mission_template"),
         (jump_to_menu, "mnu_custom_battle_end"),
         (jump_to_scene, ":cur_scene"),
         (change_screen_mission),
         (presentation_set_duration, 0),
       (else_try),
         (eq, ":object", "$g_presentation_obj_custom_battle_designer_20"),
         (presentation_set_duration, 0),
       (try_end),
      ]),
    (ti_on_presentation_mouse_enter_leave,
     [
       (store_trigger_param_1, ":object"),
       (store_trigger_param_2, ":enter_leave"),
       (this_or_next|eq, ":object", "$g_presentation_obj_custom_battle_designer_6"),
       (this_or_next|eq, ":object", "$g_presentation_obj_custom_battle_designer_7"),
       (this_or_next|eq, ":object", "$g_presentation_obj_custom_battle_designer_8"),
       (this_or_next|eq, ":object", "$g_presentation_obj_custom_battle_designer_9"),
       (this_or_next|eq, ":object", "$g_presentation_obj_custom_battle_designer_10"),
       (eq, ":object", "$g_presentation_obj_custom_battle_designer_11"),
       (try_begin),
         (eq, ":enter_leave", 1),
         (try_begin),
           (eq, ":object", "$g_presentation_obj_custom_battle_last_mouse_over_object"),
           (assign, "$g_presentation_obj_custom_battle_last_mouse_over_object", -1),
         (try_end),
       (else_try),
         (assign, "$g_presentation_obj_custom_battle_last_mouse_over_object", ":object"),
       (try_end),
       ]),
    (ti_on_presentation_run,
     [
      (try_begin),
        (this_or_next|key_clicked, key_escape),
		(key_clicked, key_xbox_start),
        (presentation_set_duration, 0),
      (else_try),
        (key_clicked, key_right_mouse_button),
        (neq, "$g_presentation_obj_custom_battle_last_mouse_over_object", -1),
        (try_begin),
          (eq, "$g_presentation_obj_custom_battle_last_mouse_over_object", "$g_presentation_obj_custom_battle_designer_6"),
          (try_begin),
            (eq, "$g_presentation_obj_custom_battle_designer_6_locked", 0),
            (assign, "$g_presentation_obj_custom_battle_designer_6_locked", 1),
            (assign, "$g_presentation_obj_custom_battle_designer_7_locked", 0),
            (assign, "$g_presentation_obj_custom_battle_designer_8_locked", 0),
          (else_try),
            (assign, "$g_presentation_obj_custom_battle_designer_6_locked", 0),
          (try_end),
        (else_try),
          (eq, "$g_presentation_obj_custom_battle_last_mouse_over_object", "$g_presentation_obj_custom_battle_designer_7"),
          (try_begin),
            (eq, "$g_presentation_obj_custom_battle_designer_7_locked", 0),
            (assign, "$g_presentation_obj_custom_battle_designer_6_locked", 0),
            (assign, "$g_presentation_obj_custom_battle_designer_7_locked", 1),
            (assign, "$g_presentation_obj_custom_battle_designer_8_locked", 0),
          (else_try),
            (assign, "$g_presentation_obj_custom_battle_designer_7_locked", 0),
          (try_end),
        (else_try),
          (eq, "$g_presentation_obj_custom_battle_last_mouse_over_object", "$g_presentation_obj_custom_battle_designer_8"),
          (try_begin),
            (eq, "$g_presentation_obj_custom_battle_designer_8_locked", 0),
            (assign, "$g_presentation_obj_custom_battle_designer_6_locked", 0),
            (assign, "$g_presentation_obj_custom_battle_designer_7_locked", 0),
            (assign, "$g_presentation_obj_custom_battle_designer_8_locked", 1),
          (else_try),
            (assign, "$g_presentation_obj_custom_battle_designer_8_locked", 0),
          (try_end),
        (else_try),
          (eq, "$g_presentation_obj_custom_battle_last_mouse_over_object", "$g_presentation_obj_custom_battle_designer_9"),
          (try_begin),
            (eq, "$g_presentation_obj_custom_battle_designer_9_locked", 0),
            (assign, "$g_presentation_obj_custom_battle_designer_9_locked", 1),
            (assign, "$g_presentation_obj_custom_battle_designer_10_locked", 0),
            (assign, "$g_presentation_obj_custom_battle_designer_11_locked", 0),
          (else_try),
            (assign, "$g_presentation_obj_custom_battle_designer_9_locked", 0),
          (try_end),
        (else_try),
          (eq, "$g_presentation_obj_custom_battle_last_mouse_over_object", "$g_presentation_obj_custom_battle_designer_10"),
          (try_begin),
            (eq, "$g_presentation_obj_custom_battle_designer_10_locked", 0),
            (assign, "$g_presentation_obj_custom_battle_designer_9_locked", 0),
            (assign, "$g_presentation_obj_custom_battle_designer_10_locked", 1),
            (assign, "$g_presentation_obj_custom_battle_designer_11_locked", 0),
          (else_try),
            (assign, "$g_presentation_obj_custom_battle_designer_10_locked", 0),
          (try_end),
        (else_try),
          (eq, "$g_presentation_obj_custom_battle_last_mouse_over_object", "$g_presentation_obj_custom_battle_designer_11"),
          (try_begin),
            (eq, "$g_presentation_obj_custom_battle_designer_11_locked", 0),
            (assign, "$g_presentation_obj_custom_battle_designer_9_locked", 0),
            (assign, "$g_presentation_obj_custom_battle_designer_10_locked", 0),
            (assign, "$g_presentation_obj_custom_battle_designer_11_locked", 1),
          (else_try),
            (assign, "$g_presentation_obj_custom_battle_designer_11_locked", 0),
          (try_end),
        (try_end),
      (try_end),
      ]),
    ]),

  #SB : we re-purpose this into a generic rename presentation depending on $g_presentation_state
  #inputs to be renamed are fac_player_supporters_faction, $g_player_court, $g_encountered_party, and $g_player_troop
("name_kingdom",0,mesh_load_window,[
  (ti_on_presentation_load,[
    (set_fixed_point_multiplier, 1000),
    # (str_store_string, s1, "str_name_kingdom_text"),
    #SB : set up text label
    (try_begin),
        (neg|is_between, "$g_presentation_state", rename_kingdom, rename_aux_cav + 1),
        (assign, "$g_presentation_state", rename_kingdom),
        (display_message, "@Error: Wrong variable g_presentation_state"),
    (try_end),
    # (try_begin),
        # (store_current_scene, ":scene"),
        # (eq, ":scene", "scn_barracks"),
        # (eq, "$temp", 2),
        # (str_store_string, s1, "str_default_legion"),
    # (else_try),
        # (eq, "$", 1),
        # (str_store_string, s1, "str_default_legion"),
    # (else_try),
    (store_add, ":string", "str_name_presentation_text", "$g_presentation_state"),
    (str_store_string, s1, ":string"),
    # (try_end),
    (create_text_overlay, reg1, "str_name_presentation_text", tf_center_justify),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 500),
    (overlay_set_position, reg1, pos1),

    (create_simple_text_box_overlay, "$g_presentation_obj_name_kingdom_1"),
    (position_set_x, pos1, 400),
    (position_set_y, pos1, 400),
    (overlay_set_position, "$g_presentation_obj_name_kingdom_1", pos1),
    (assign, "$g_presentation_obj_banner_selection_1", -1),
    #SB : set up text box
    (try_begin),
        (eq, "$g_presentation_state", rename_kingdom),
        (try_begin),
            (store_and, ":name_set", "$players_kingdom_name_set", rename_kingdom),
            (eq, ":name_set", 1),
            (str_store_faction_name, s7, "fac_player_supporters_faction"),
        (else_try),
            (faction_slot_eq, "fac_player_supporters_faction", slot_faction_government_type, gov_imperial),
            (neq, "$g_civil_war", -1),
            (str_store_troop_name_plural, s1, "trp_player"),
            (str_store_string, s7, "@Imperium Romanum Pars {s1}"),
        (else_try),
            (faction_slot_eq, "fac_player_supporters_faction", slot_faction_government_type, gov_imperial),
            (str_store_string, s7, "@Imperium Romanum"), #castles can also be courts but we can't get the original name
        (else_try), #SB : kingdom naming based off first captured center, assigned to g_player_court
            (is_between, "$g_player_court", towns_begin, towns_end),
            (str_store_party_name, s7, "$g_player_court"),
            (str_store_string, s7, "@Kingdom of {s7}"), #castles can also be courts but we can't get the original name
        (else_try),
            (str_store_troop_name, s0, "trp_player"),
            (str_store_string, s7, "str_default_kingdom_name"),
        (try_end),
        #SB : add in the color option
        (eq, "$g_presentation_state", rename_kingdom),
        (create_button_overlay, "$g_presentation_obj_banner_selection_1", "str_color", tf_center_justify),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 300),
        (overlay_set_position, "$g_presentation_obj_banner_selection_1", pos1),
        (faction_get_color, ":color", "$players_kingdom"),
        (overlay_set_color, "$g_presentation_obj_banner_selection_1", ":color"),
    (else_try),
        (eq, "$g_presentation_state", rename_center),
        (str_store_party_name, s7, "$g_player_court"),
    (else_try),
        (this_or_next|eq, "$g_presentation_state", rename_party),
        (eq, "$g_presentation_state", rename_party_2),
        (str_store_party_name, s7, "$g_encountered_party"),
    (else_try),
        (this_or_next|eq, "$g_presentation_state", rename_month),
        (eq, "$g_presentation_state", rename_companion),
        # (this_or_next|eq, "$g_presentation_state", rename_aux_inf),
        # (this_or_next|eq, "$g_presentation_state", rename_aux_cav),
        # (eq, "$g_presentation_state", rename_legion),
        (str_store_troop_name_plural, s7, "$g_player_troop"),
    (try_end),
    (overlay_set_text, "$g_presentation_obj_name_kingdom_1", s7),

    (create_button_overlay, "$g_presentation_obj_name_kingdom_2", "@Continue...", tf_center_justify),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 150),
    (overlay_set_position, "$g_presentation_obj_name_kingdom_2", pos1),
    (presentation_set_duration, 999999),
  ]),
  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":object"),
    (try_begin),
        (eq, ":object", "$g_presentation_obj_name_kingdom_1"),
        (str_store_string, s7, s0),
    (else_try),
        (eq, ":object", "$g_presentation_obj_name_kingdom_2"),
        (try_begin),
            (eq, "$g_presentation_state", rename_kingdom),
            (faction_set_name, "fac_player_supporters_faction", s7),
            (val_or, "$players_kingdom_name_set", rename_kingdom),
        (else_try),
            (eq, "$g_presentation_state", rename_party),
            (party_set_name, "$g_encountered_party", s7),
        (else_try),
            (eq, "$g_presentation_state", rename_party_2),
            (party_set_name, "$g_encountered_party", s7),
            (call_script, "script_change_player_relation_with_center", "$current_town", -5),
            (finish_mission),
        (else_try),
            (eq, "$g_presentation_state", rename_center),
            (try_begin), #probably add the feast requirement here
                (troop_is_hero, "$g_player_minister"),
                (store_skill_level, ":persuasion", "skl_persuasion", "$g_player_minister"),
                (store_sub, ":persuasion", 12, ":persuasion"),
                (val_mul, ":persuasion", -1),
                (call_script, "script_change_player_relation_with_center", "$g_player_court", ":persuasion"),
            (try_end),
            (party_set_name, "$g_player_court", s7),
            (val_or, "$players_kingdom_name_set", rename_center),
        (else_try),
            (eq, "$g_presentation_state", rename_companion),
            (troop_set_name, "$g_player_troop", s7),
            (troop_set_plural_name, "$g_player_troop", s7),
            (try_begin), #SB : set from title now that we've changed the base name
                (troop_slot_eq, "$g_player_troop", slot_troop_occupation, slto_kingdom_hero),
                (store_faction_of_troop, ":faction_no", "$g_player_troop"),
                (call_script, "script_troop_set_title_according_to_faction", "$g_player_troop", ":faction_no"),
            (try_end),
        (else_try),
            (eq, "$g_presentation_state", rename_month),
            (troop_set_name, "$g_player_troop", s7),
            (troop_set_plural_name, "$g_player_troop", s7),
        (try_end),
        (presentation_set_duration, 0),
    (else_try), #SB : jump to recoloring kingdom(s)
        (eq, ":object", "$g_presentation_obj_banner_selection_1"),
        (eq, "$g_presentation_state", rename_kingdom), #carried over
        (assign, "$temp", 9), #player kingdom
        (assign, "$g_presentation_next_presentation", "prsnt_name_kingdom"),
        (assign, "$g_presentation_state", recolor_kingdom), #carried over
        (start_presentation, "prsnt_change_color"),
    (try_end),
  ]),
]),
## SB : recolor kingdom presentation

  ("change_color", 0, mesh_load_window, [
    (ti_on_presentation_load,
      [
        (presentation_set_duration, 999999),
        (set_fixed_point_multiplier, 1000),

        (create_combo_button_overlay, "$g_presentation_obj_1"),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 680),
        (overlay_set_position, "$g_presentation_obj_1", pos1),

        # (try_for_range, ":cur_slot", 0, 9),
          # (troop_get_slot, ":cur_faction", "trp_temp_array_a", ":cur_slot"),
          # (str_store_faction_name, s0, ":cur_faction"),
          # (overlay_add_item, "$g_presentation_obj_1", s0),
        # (try_end),

        ## name and color
        (try_begin),
          (eq, "$g_presentation_state", recolor_kingdom),

          #maybe not
          # (faction_get_slot, ":mesh", "$players_kingdom", slot_faction_banner),
          # (create_mesh_overlay, reg0, ":mesh"),
          # (overlay_set_position, reg0, pos1),

          # faction list
          (assign, ":slot_no", 0),
          # (try_for_range, ":faction", "fac_commoners", "fac_innocents"),
          #   (troop_set_slot, "trp_temp_array_a", ":slot_no", ":faction"),
          #   (str_store_faction_name, s0, ":faction"),
          #   (overlay_add_item, "$g_presentation_obj_1", s0),
          #   (val_add, ":slot_no", 1),
          # (try_end),
          (try_for_range_backwards, ":faction", kingdoms_begin, kingdoms_end),
            (faction_slot_eq, ":faction", slot_faction_state, sfs_active),
            (troop_set_slot, "trp_temp_array_a", ":slot_no", ":faction"),
            (str_store_faction_name, s0, ":faction"),
            (overlay_add_item, "$g_presentation_obj_1", s0),
            (val_add, ":slot_no", 1),
          (try_end),
          (overlay_set_val, "$g_presentation_obj_1", "$temp"),
          # (overlay_set_hilight_color, "$g_presentation_obj_1", 0xFFFFFF),
          # (overlay_set_color, "$g_presentation_obj_1", 0xFFFFFF),

          # default color list
          # (troop_set_slot, "trp_temp_array_b", 0, factions[fac_deserters][6]),
          (troop_set_slot, "trp_temp_array_b", 0, 0xAAAAAA), #commoners doesn't have a default value
          (troop_set_slot, "trp_temp_array_b", 1, factions[fac_outlaws][6]),
          (troop_set_slot, "trp_temp_array_b", 2, factions[fac_neutral][6]),
          # (troop_set_slot, "trp_temp_array_b", 0, 0x444444), #common
          # (troop_set_slot, "trp_temp_array_b", 1, 0x888888), #outlaw
          # (troop_set_slot, "trp_temp_array_b", 2, 0xFFFFFF), #neutral
          (troop_set_slot, "trp_temp_array_b", 3, factions[fac_kingdom_1][6]),
          (troop_set_slot, "trp_temp_array_b", 4, factions[fac_kingdom_2][6]),
          (troop_set_slot, "trp_temp_array_b", 5, factions[fac_kingdom_3][6]),
          (troop_set_slot, "trp_temp_array_b", 6, factions[fac_kingdom_4][6]),
          (troop_set_slot, "trp_temp_array_b", 7, factions[fac_kingdom_5][6]),
          (troop_set_slot, "trp_temp_array_b", 8, factions[fac_kingdom_6][6]),
          (troop_set_slot, "trp_temp_array_b", 9, factions[fac_kingdom_7][6]),
          (troop_set_slot, "trp_temp_array_b", 10, factions[fac_kingdom_8][6]),
          (troop_set_slot, "trp_temp_array_b", 11, factions[fac_kingdom_9][6]),
          (troop_set_slot, "trp_temp_array_b", 12, factions[fac_kingdom_10][6]),
          (troop_set_slot, "trp_temp_array_b", 13, factions[fac_kingdom_11][6]),
          (troop_set_slot, "trp_temp_array_b", 14, factions[fac_kingdom_12][6]),
          (troop_set_slot, "trp_temp_array_b", 15, factions[fac_kingdom_13][6]),
          (troop_set_slot, "trp_temp_array_b", 16, factions[fac_kingdom_14][6]),
          (troop_set_slot, "trp_temp_array_b", 17, factions[fac_kingdom_15][6]),
          (troop_set_slot, "trp_temp_array_b", 18, factions[fac_kingdom_16][6]),
          (troop_set_slot, "trp_temp_array_b", 18, factions[fac_kingdom_17][6]),
          (troop_set_slot, "trp_temp_array_b", 19, factions[fac_player_supporters_faction][6]),
          # (troop_set_slot, "trp_temp_array_b", 3, 0xCCCC66),
          # (troop_set_slot, "trp_temp_array_b", 4, 0x669999),
          # (troop_set_slot, "trp_temp_array_b", 5, 0x0066FF),
          # (troop_set_slot, "trp_temp_array_b", 6, 0x9999CC),
          # (troop_set_slot, "trp_temp_array_b", 7, 0xFF3300),
          # (troop_set_slot, "trp_temp_array_b", 8, 0xCC6600),
          # (troop_set_slot, "trp_temp_array_b", 9, 0x33DD33),
          # (troop_set_slot, "trp_temp_array_b", 10, 0xFFCC33),

          # (troop_set_slot, "trp_temp_array_b", 11, 0xFF4433), #plyr

          ## name and color
          (troop_get_slot, ":faction", "trp_temp_array_a", "$temp"),
          (str_store_faction_name, s0, ":faction"),
          (faction_get_color, ":faction_color", ":faction"),
        (else_try),
          (eq, "$g_presentation_state", recolor_groups),
          # (assign, "$temp", grc_infantry),
          (overlay_add_item, "$g_presentation_obj_1", "str_allies_"),
          (overlay_add_item, "$g_presentation_obj_1", "str_enemies_"),
          (try_for_range_backwards, ":class", grc_infantry, grc_everyone),
            # (troop_get_slot, ":faction_color", "trp_mercenaries_end", ":class"),
            # (troop_set_slot, "trp_temp_array_b", ":class", ":faction_color"), #unnecessary?
            (str_store_class_name, s0, ":class"),
            (overlay_add_item, "$g_presentation_obj_1", s0),
          (try_end),
          (troop_get_slot, ":class", "trp_temp_array_a", "$temp"),
          (str_store_class_name, s0, ":class"),
        (else_try),
          (eq, "$g_presentation_state", recolor_heraldic),
          (overlay_set_display, "$g_presentation_obj_1", 0),
          (troop_get_slot, ":banner", "$g_player_troop", slot_troop_banner_scene_prop),
          (val_sub, ":banner", banner_scene_props_begin),
          (troop_get_slot, ":faction_color", "trp_banner_background_color_array", ":banner"),
          (assign, "$temp", ":banner"), #store offset
          (val_add, ":banner", banner_meshes_begin),
          (create_mesh_overlay, reg0),
          (overlay_set_position, reg0, pos1),
        (try_end),
        (try_begin),
          (ge, "$g_presentation_state", recolor_heraldic),
          (store_add, ":string", "$g_presentation_state", "str_color_of"),
          (str_store_string, s0, ":string"),
        (try_end),
        (create_text_overlay, reg1, "str_color_of", tf_center_justify),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 600),
        (overlay_set_position, reg1, pos1),
        (create_mesh_overlay, "$g_presentation_obj_2", "mesh_white_plane"),
        (position_set_x, pos1, 450),
        (position_set_y, pos1, 480),
        (overlay_set_position, "$g_presentation_obj_2", pos1),
        (position_set_x, pos1, 5000),
        (position_set_y, pos1, 5000),
        (overlay_set_size, "$g_presentation_obj_2", pos1),
        # (faction_get_color, ":faction_color", ":cur_faction"),
        (overlay_set_color, "$g_presentation_obj_2", ":faction_color"),

        ## sliders
        (position_set_x, pos1, 500),
        (create_slider_overlay, "$g_presentation_obj_3", 0, 255),
        (position_set_y, pos1, 400),
        (overlay_set_position, "$g_presentation_obj_3", pos1),
        (create_slider_overlay, "$g_presentation_obj_4", 0, 255),
        (position_set_y, pos1, 350),
        (overlay_set_position, "$g_presentation_obj_4", pos1),
        (create_slider_overlay, "$g_presentation_obj_5", 0, 255),
        (position_set_y, pos1, 300),
        (overlay_set_position, "$g_presentation_obj_5", pos1),
        (store_mod, ":blue", ":faction_color", 0x100),
        (val_div, ":faction_color", 0x100),
        (store_mod, ":green", ":faction_color", 0x100),
        (val_div, ":faction_color", 0x100),
        (store_mod, ":red", ":faction_color", 0x100),
        (overlay_set_val, "$g_presentation_obj_3", ":red"),
        (overlay_set_val, "$g_presentation_obj_4", ":green"),
        (overlay_set_val, "$g_presentation_obj_5", ":blue"),
        ## num boxes
        (position_set_x, pos1, 650),
        (create_number_box_overlay, "$g_presentation_obj_6", 0, 256),
        (position_set_y, pos1, 400),
        (overlay_set_position, "$g_presentation_obj_6", pos1),
        (create_number_box_overlay, "$g_presentation_obj_7", 0, 256),
        (position_set_y, pos1, 350),
        (overlay_set_position, "$g_presentation_obj_7", pos1),
        (create_number_box_overlay, "$g_presentation_obj_8", 0, 256),
        (position_set_y, pos1, 300),
        (overlay_set_position, "$g_presentation_obj_8", pos1),
        (overlay_set_val, "$g_presentation_obj_6", ":red"),
        (overlay_set_val, "$g_presentation_obj_7", ":green"),
        (overlay_set_val, "$g_presentation_obj_8", ":blue"),
        (assign, reg2, ":red"),
        (assign, reg3, ":green"),
        (assign, reg4, ":blue"),
        ## text: r g b
        (position_set_x, pos1, 330),
        (create_text_overlay, reg1, "@Red:", tf_center_justify),
        (position_set_y, pos1, 400),
        (overlay_set_position, reg1, pos1),
        (create_text_overlay, reg1, "@Green:", tf_center_justify),
        (position_set_y, pos1, 350),
        (overlay_set_position, reg1, pos1),
        (create_text_overlay, reg1, "@Blue:", tf_center_justify),
        (position_set_y, pos1, 300),
        (overlay_set_position, reg1, pos1),

        ## HTML code
        (str_store_string, s0, "str_dplmc_none"),
        (create_text_overlay, "$g_presentation_obj_9", "str_html", tf_center_justify),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 450),
        (overlay_set_position, "$g_presentation_obj_9", pos1),
        (call_script, "script_convert_rgb_code_to_html_code", reg2, reg3, reg4),
        (overlay_set_text, "$g_presentation_obj_9", "str_html"),

        ## default and random
        (create_game_button_overlay, "$g_presentation_obj_11", "str_reset_to_default"),
        (position_set_x, pos1, 420),
        (position_set_y, pos1, 230),
        (overlay_set_position, "$g_presentation_obj_11", pos1),
        (create_game_button_overlay, "$g_presentation_obj_12", "str_randomize"),
        (position_set_x, pos1, 580),
        (position_set_y, pos1, 230),
        (overlay_set_position, "$g_presentation_obj_12", pos1),

        ## color picker
        (create_mesh_overlay, reg1, "mesh_white_plane"),
        (position_set_x, pos1, 138),
        (position_set_y, pos1, 78),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 36100),
        (position_set_y, pos1, 6100),
        (overlay_set_size, reg1, pos1),
        (overlay_set_color, reg1, 0),

        (assign, ":pos_x", 140),
        (assign, ":pos_y", 80),
        (try_for_range, ":cur_slot", 0, 216),
          (create_image_button_overlay, reg1, "mesh_white_plane", "mesh_white_plane"),
          (position_set_x, pos1, ":pos_x"),
          (position_set_y, pos1, ":pos_y"),
          (overlay_set_position, reg1, pos1),
          (position_set_x, pos1, 900),
          (position_set_y, pos1, 900),
          (overlay_set_size, reg1, pos1),
          (assign, ":cur_color", ":cur_slot"),
          (call_script, "script_convert_slot_no_to_color", ":cur_color"),
          (assign, ":dest_color", reg0),
          (overlay_set_color, reg1, ":dest_color"),
          (val_add, ":pos_x", 20),
          (try_begin),
            (eq, ":pos_x", 860),
            (assign, ":pos_x", 140),
            (val_add, ":pos_y", 20),
          (try_end),
          (troop_set_slot, "trp_temp_array_c", ":cur_slot", reg1),
        (try_end),

        ## done
        (create_game_button_overlay, "$g_presentation_obj_10", "str_done"),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 25),
        (overlay_set_position, "$g_presentation_obj_10", pos1),
        ####### mouse fix pos system #######
        #(call_script, "script_mouse_fix_pos_ready"),
        ####### mouse fix pos system #######
      ]),

      #(ti_on_presentation_run,
        #[
        ####### mouse fix pos system #######
        #(call_script, "script_mouse_fix_pos_run"),
        ####### mouse fix pos system #######
      #]),

    (ti_on_presentation_event_state_change,
      [
        (store_trigger_param_1, ":object"),
        (store_trigger_param_2, ":value"),

        (try_begin),
          (eq, ":object", "$g_presentation_obj_1"),
          (assign, "$temp", ":value"),
          # (overlay_set_val, "$g_presentation_obj_1", ":value"),
          (start_presentation, "prsnt_change_color"),
        (else_try),
          (this_or_next|eq, ":object", "$g_presentation_obj_3"),
          (eq, ":object", "$g_presentation_obj_6"),
          (overlay_set_val, "$g_presentation_obj_3", ":value"),
          (overlay_set_val, "$g_presentation_obj_6", ":value"),
          (assign, reg2, ":value"),
          (call_script, "script_get_dest_color_from_rgb", reg2, reg3, reg4),
          (assign, ":cur_color", reg0),
          (overlay_set_color, "$g_presentation_obj_2", ":cur_color"),

          (troop_get_slot, ":cur_faction", "trp_temp_array_a", "$temp"),
          (str_store_faction_name,s0, ":cur_faction"),
          (faction_set_color, ":cur_faction", ":cur_color"),
          (call_script, "script_convert_rgb_code_to_html_code", reg2, reg3, reg4),
          (overlay_set_text, "$g_presentation_obj_9", "str_html"),
        (else_try),
          (this_or_next|eq, ":object", "$g_presentation_obj_4"),
          (eq, ":object", "$g_presentation_obj_7"),
          (overlay_set_val, "$g_presentation_obj_4", ":value"),
          (overlay_set_val, "$g_presentation_obj_7", ":value"),
          (assign, reg3, ":value"),
          (call_script, "script_get_dest_color_from_rgb", reg2, reg3, reg4),
          (assign, ":cur_color", reg0),
          (overlay_set_color, "$g_presentation_obj_2", ":cur_color"),
          (troop_get_slot, ":cur_faction", "trp_temp_array_a", "$temp"),
          (str_store_faction_name,s0, ":cur_faction"),
          (faction_set_color, ":cur_faction", ":cur_color"),
          (call_script, "script_convert_rgb_code_to_html_code", reg2, reg3, reg4),
          (overlay_set_text, "$g_presentation_obj_9", "str_html"),
        (else_try),
          (this_or_next|eq, ":object", "$g_presentation_obj_5"),
          (eq, ":object", "$g_presentation_obj_8"),
          (overlay_set_val, "$g_presentation_obj_5", ":value"),
          (overlay_set_val, "$g_presentation_obj_8", ":value"),
          (assign, reg4, ":value"),
          (call_script, "script_change_color"),
          # (call_script, "script_get_dest_color_from_rgb", reg2, reg3, reg4),
          # (assign, ":cur_color", reg0),
          # (overlay_set_color, "$g_presentation_obj_2", ":cur_color"),
          # (troop_get_slot, ":cur_faction", "trp_temp_array_a", "$temp"),
          # (faction_set_color, ":cur_faction", ":cur_color"),
          # (call_script, "script_convert_rgb_code_to_html_code", reg2, reg3, reg4),
          # (overlay_set_text, "$g_presentation_obj_9", "str_html"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_11"),
          (troop_get_slot, ":cur_faction", "trp_temp_array_a", "$temp"),
          (str_store_faction_name,s0, ":cur_faction"),
          (troop_get_slot, ":default_color", "trp_temp_array_b", "$temp"),
          (try_begin),
            (eq, "$g_presentation_state", recolor_kingdom),
            (faction_set_color, ":cur_faction", ":default_color"),
          (else_try),
            (eq, "$g_presentation_state", recolor_groups),
            (troop_set_slot, "trp_mercenaries_end", "$temp", ":default_color"),
          (else_try),
            (eq, "$g_presentation_state", recolor_heraldic),
            (troop_set_slot, "trp_banner_background_color_array", "$temp", ":default_color"),
          (try_end),
          (overlay_set_color, "$g_presentation_obj_2", ":default_color"),
          (store_mod, ":blue", ":default_color", 0x100),
          (val_div, ":default_color", 0x100),
          (store_mod, ":green", ":default_color", 0x100),
          (val_div, ":default_color", 0x100),
          (store_mod, ":red", ":default_color", 0x100),
          (overlay_set_val, "$g_presentation_obj_3", ":red"),
          (overlay_set_val, "$g_presentation_obj_4", ":green"),
          (overlay_set_val, "$g_presentation_obj_5", ":blue"),
          (overlay_set_val, "$g_presentation_obj_6", ":red"),
          (overlay_set_val, "$g_presentation_obj_7", ":green"),
          (overlay_set_val, "$g_presentation_obj_8", ":blue"),
          (assign, reg2, ":red"),
          (assign, reg3, ":green"),
          (assign, reg4, ":blue"),
          (call_script, "script_convert_rgb_code_to_html_code", reg2, reg3, reg4),
          (overlay_set_text, "$g_presentation_obj_9", "str_html"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_12"),
          (store_random_in_range, reg2, 0, 256),
          (store_random_in_range, reg3, 0, 256),
          (store_random_in_range, reg4, 0, 256),
          (overlay_set_val, "$g_presentation_obj_3", reg2),
          (overlay_set_val, "$g_presentation_obj_4", reg3),
          (overlay_set_val, "$g_presentation_obj_5", reg4),
          (overlay_set_val, "$g_presentation_obj_6", reg2),
          (overlay_set_val, "$g_presentation_obj_7", reg3),
          (overlay_set_val, "$g_presentation_obj_8", reg4),
          (call_script, "script_change_color"),
          # (call_script, "script_get_dest_color_from_rgb", reg2, reg3, reg4),
          # (assign, ":cur_color", reg0),
          # (overlay_set_color, "$g_presentation_obj_2", ":cur_color"),
          # (troop_get_slot, ":cur_faction", "trp_temp_array_a", "$temp"),
          # (faction_set_color, ":cur_faction", ":cur_color"),
          # (call_script, "script_convert_rgb_code_to_html_code", reg2, reg3, reg4),
          # (overlay_set_text, "$g_presentation_obj_9", "str_html"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_10"),
          (try_begin),
            (gt, "$g_presentation_next_presentation", 0),
            (start_presentation, "$g_presentation_next_presentation"),
          (else_try),
            (presentation_set_duration, 0),
          (try_end),
        (else_try),
          (try_for_range, ":cur_slot", 0, 216),
            (troop_slot_eq, "trp_temp_array_c", ":cur_slot", ":object"),
            (assign, ":cur_color", ":cur_slot"),
            (call_script, "script_convert_slot_no_to_color", ":cur_color"),
            (assign, ":dest_color", reg0),
            (troop_get_slot, ":cur_faction", "trp_temp_array_a", "$temp"),
            (str_store_faction_name,s0, ":cur_faction"),
            #(display_message, "@color {reg0}, {s0}"),
            (faction_set_color, ":cur_faction", ":dest_color"),
            #(faction_set_color, "fac_player_supporters_faction", ":dest_color"),
            (overlay_set_color, "$g_presentation_obj_2", ":dest_color"),
            (store_mod, ":blue", ":dest_color", 0x100),
            (val_div, ":dest_color", 0x100),
            (store_mod, ":green", ":dest_color", 0x100),
            (val_div, ":dest_color", 0x100),
            (store_mod, ":red", ":dest_color", 0x100),
            (overlay_set_val, "$g_presentation_obj_3", ":red"),
            (overlay_set_val, "$g_presentation_obj_4", ":green"),
            (overlay_set_val, "$g_presentation_obj_5", ":blue"),
            (overlay_set_val, "$g_presentation_obj_6", ":red"),
            (overlay_set_val, "$g_presentation_obj_7", ":green"),
            (overlay_set_val, "$g_presentation_obj_8", ":blue"),
            (assign, reg2, ":red"),
            (assign, reg3, ":green"),
            (assign, reg4, ":blue"),
            (call_script, "script_convert_rgb_code_to_html_code", reg2, reg3, reg4),
            (overlay_set_text, "$g_presentation_obj_9", "str_html"),
          (try_end),
        (try_end),
    ]),
  ]),


## SB: Update from CC
("banner_selection",0,mesh_load_window,[
  (ti_on_presentation_load,[
    (set_fixed_point_multiplier, 1000),
    (try_begin),
        (eq, "$g_edit_banner_troop", "trp_player"),
        (str_store_string, s1, "str_banner_selection_text"),
    (else_try),
        (str_store_troop_name, s0, "$g_edit_banner_troop"),
        (str_store_string, s1, "@Choose a banner for {s0}."),
    (try_end),
    (create_text_overlay, reg1, s1, tf_center_justify),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 670),
    (overlay_set_position, reg1, pos1),
    (overlay_set_text, reg1, s1),

    (str_clear, s0),
    (create_text_overlay, reg1, s0, tf_scrollable),
    (position_set_x, pos1, 50),
    (position_set_y, pos1, 50),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 850),
    (position_set_y, pos1, 585),
    (overlay_set_area_size, reg1, pos1),
    (set_container_overlay, reg1),

    (assign, ":try_end", banner_meshes_legion_begin),
    (assign, ":try_begin", banner_meshes_begin),
    (try_begin),
        (eq, "$g_edit_banner_troop", "trp_players_legion"),
        (assign, ":try_end", banner_meshes_legion_end_minus_one),
        (assign, ":try_begin", banner_meshes_legion_begin),
    (try_end),

    (store_sub, ":num_banners", ":try_end", ":try_begin"),

    (store_div, ":num_rows", ":num_banners", 12),
    (store_mod, ":extra_row", ":num_banners", 12),
    (val_min, ":extra_row", 1),
    (val_add, ":num_rows", ":extra_row"),
    (store_mul, ":y_pos", ":num_rows", 150),
    (val_sub, ":y_pos", 15),
    (assign, ":x_pos", 40),

    (troop_get_slot, ":current_banner_spr", "$g_edit_banner_troop", slot_troop_banner_scene_prop),
    # (assign, reg1, ":current_banner_spr"),
    # (display_message, "@current_banner_spr = {reg1}"),

    (assign, "$g_presentation_obj_banner_selection_1", 0),
    (try_for_range, ":cur_banner_mesh", ":try_begin", ":try_end"),
        (create_image_button_overlay, reg1, ":cur_banner_mesh", ":cur_banner_mesh"),

        (try_begin),
            (store_sub, ":cur_banner", ":cur_banner_mesh", banner_meshes_begin),
            (val_add, ":cur_banner", banner_scene_props_begin),
            (eq, ":current_banner_spr", ":cur_banner"),
            (overlay_set_alpha, reg1, 0x99), # reduce visibility
            (display_message, "@Test"),
        (try_end),

        (position_set_x, pos1, ":x_pos"),
        (position_set_y, pos1, ":y_pos"),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 60),
        (position_set_y, pos1, 60),
        (overlay_set_size, reg1, pos1),
        (troop_set_slot, "trp_temp_array_a", "$g_presentation_obj_banner_selection_1", reg1),
        (troop_set_slot, "trp_temp_array_b", "$g_presentation_obj_banner_selection_1", ":cur_banner_mesh"),
        (val_add, "$g_presentation_obj_banner_selection_1", 1),
        ## position
        (val_add, ":x_pos", 70),
        (ge, ":x_pos", 70*12+40),
        (assign, ":x_pos", 40),
        (val_sub, ":y_pos", 150),
    (try_end),
    # (set_container_overlay, -1),

    (presentation_set_duration, 999999),
  ]),

  (ti_on_presentation_event_state_change,[

    (store_trigger_param_1, ":object"),
    (try_for_range, ":trp_slot_index", 0, "$g_presentation_obj_banner_selection_1"),
        (troop_slot_eq, "trp_temp_array_a", ":trp_slot_index", ":object"),
        (troop_get_slot, ":cur_banner_mesh", "trp_temp_array_b", ":trp_slot_index"),

        (store_sub, ":selected_banner", ":cur_banner_mesh", banner_meshes_begin),
        (store_add, ":selected_banner_map_icon", ":selected_banner", banner_map_icons_begin),
        (store_add, ":selected_banner_spr", ":selected_banner", banner_scene_props_begin),

        (troop_set_slot, "$g_edit_banner_troop", slot_troop_banner_scene_prop, ":selected_banner_spr"),

        (try_begin),
            (is_between, "$g_edit_banner_troop", active_npcs_begin, active_npcs_end),
            (troop_get_slot, ":leaded_party", "$g_edit_banner_troop", slot_troop_leaded_party),
            (gt, ":leaded_party", 0),
            (party_is_active, ":leaded_party"),
            (party_set_banner_icon, ":leaded_party", ":selected_banner_map_icon"),
        (else_try), # update legate banner
            (eq, "$g_edit_banner_troop", "trp_players_legion"),
            (store_add, ":slot", slot_legion_commanders_begin, 13),#player legion
            (troop_get_slot, ":legate", "trp_province_array", ":slot"),
            (store_faction_of_troop, ":faction", ":legate"),
            (call_script, "script_set_troop_banner_according_to_faction", ":legate", ":faction"),
        (else_try),
            (eq, "$g_edit_banner_troop", "trp_player"),#are editing the player
            #player party set banner
            (party_set_banner_icon, "p_main_party", ":selected_banner_map_icon"),
            (try_begin),
                #player faction is active
                (eq, "$players_kingdom", "fac_player_supporters_faction"),
                (call_script, "script_change_faction_banner", ":cur_banner_mesh", "$players_kingdom"),
            (try_end),
        (try_end),

        (try_begin),
            (gt, "$g_presentation_next_presentation", 0),
            (start_presentation, "$g_presentation_next_presentation"),
        (else_try),
            (presentation_set_duration, 0),
        (try_end),
    (try_end),
  ]),

  (ti_on_presentation_run,[
    (try_begin),
        (this_or_next|key_clicked, key_space),
        (this_or_next|key_clicked, key_enter),
        (this_or_next|key_clicked, key_escape),
        (this_or_next|key_clicked, key_back_space),
        (this_or_next|key_clicked, key_xbox_ltrigger),
        (key_clicked, key_xbox_rtrigger),
        (try_begin),
            (gt, "$g_presentation_next_presentation", 0),
            (start_presentation, "$g_presentation_next_presentation"),
        (else_try),
            (presentation_set_duration, 0),
        (try_end),
    (try_end),
  ]),
]),

  ## CC
("custom_banner", 0, mesh_load_window,[
     (ti_on_presentation_load,
      [
        (set_fixed_point_multiplier, 1000),
        (troop_get_slot, ":flag_type", "$g_edit_banner_troop", slot_troop_custom_banner_flag_type),
        (val_max, ":flag_type", 0),
        (troop_set_slot, "$g_edit_banner_troop", slot_troop_custom_banner_flag_type, ":flag_type"),
        (val_add, ":flag_type", custom_banner_flag_types_begin),
        (troop_get_slot, ":map_flag_type", "$g_edit_banner_troop", slot_troop_custom_banner_map_flag_type),
        (val_max, ":map_flag_type", 0),
        (troop_set_slot, "$g_edit_banner_troop", slot_troop_custom_banner_map_flag_type, ":map_flag_type"),
        (val_add, ":map_flag_type", custom_banner_flag_map_types_begin),
        (try_begin),
            (troop_slot_ge, "$g_edit_banner_troop", slot_troop_banner_scene_prop, 1),
            (troop_set_slot, "$g_edit_banner_troop", slot_troop_banner_scene_prop, -1),
        (try_end),

##        (create_mesh_overlay_with_tableau_material, "$g_presentation_obj_custom_banner_1", ":flag_type", "tableau_custom_banner_square", "$g_edit_banner_troop"),
        (troop_get_slot, ":bg_color_1", "$g_edit_banner_troop", slot_troop_custom_banner_bg_color_1),
        (troop_get_slot, ":bg_color_2", "$g_edit_banner_troop", slot_troop_custom_banner_bg_color_2),

        (create_text_overlay, reg1, "str_color_no_1", 0),
        (position_set_x, pos1, 40),
        (position_set_y, pos1, 550),
        (overlay_set_position, reg1, pos1),
        (create_text_overlay, reg1, "str_color_no_2", 0),
        (position_set_x, pos1, 40),
        (position_set_y, pos1, 500),
        (overlay_set_position, reg1, pos1),

        (create_image_button_overlay_with_tableau_material, "$g_presentation_obj_custom_banner_22", "mesh_color_picker", "tableau_color_picker", ":bg_color_1"),
        (create_image_button_overlay_with_tableau_material, "$g_presentation_obj_custom_banner_23", "mesh_color_picker", "tableau_color_picker", ":bg_color_2"),
        (position_set_x, pos1, 200),
        (position_set_y, pos1, 565),
        (overlay_set_position, "$g_presentation_obj_custom_banner_22", pos1),
        (position_set_y, pos1, 515),
        (overlay_set_position, "$g_presentation_obj_custom_banner_23", pos1),
        (position_set_x, pos1, 250),
        (position_set_y, pos1, 250),
        (overlay_set_size, "$g_presentation_obj_custom_banner_22", pos1),
        (overlay_set_size, "$g_presentation_obj_custom_banner_23", pos1),

        (create_button_overlay, "$g_presentation_obj_custom_banner_2", "str_change", tf_center_justify),
        (create_button_overlay, "$g_presentation_obj_custom_banner_3", "str_change", tf_center_justify),
        (create_button_overlay, "$g_presentation_obj_custom_banner_4", "str_change_background", tf_center_justify),
        (create_button_overlay, "$g_presentation_obj_custom_banner_5", "str_change", tf_center_justify),
        (create_button_overlay, "$g_presentation_obj_custom_banner_19", "str_change", tf_center_justify),
        (create_button_overlay, "$g_presentation_obj_custom_banner_20", "str_accept", tf_center_justify),
        (troop_get_slot, ":num_charges", "$g_edit_banner_troop", slot_troop_custom_banner_num_charges),
        (create_button_overlay, "$g_presentation_obj_custom_banner_16", "str_randomize", tf_center_justify),
        (create_image_button_overlay_with_tableau_material, "$g_presentation_obj_custom_banner_17", ":flag_type", "tableau_custom_banner_default", "$g_edit_banner_troop"),
        (try_begin),
          (eq, ":map_flag_type", "mesh_custom_map_banner_01"),
          (create_image_button_overlay_with_tableau_material, "$g_presentation_obj_custom_banner_18", ":map_flag_type", "tableau_custom_banner_square", "$g_edit_banner_troop"),
        (else_try),
          (eq, ":map_flag_type", "mesh_custom_map_banner_02"),
          (create_image_button_overlay_with_tableau_material, "$g_presentation_obj_custom_banner_18", ":map_flag_type", "tableau_custom_banner_short", "$g_edit_banner_troop"),
        (else_try),
          (create_image_button_overlay_with_tableau_material, "$g_presentation_obj_custom_banner_18", ":map_flag_type", "tableau_custom_banner_tall", "$g_edit_banner_troop"),
        (try_end),
        (create_image_button_overlay_with_tableau_material, "$g_presentation_obj_custom_banner_1", -1, "tableau_custom_banner_square_no_mesh", "$g_edit_banner_troop"),
        (create_text_overlay, reg1, "str_sample_banner", tf_center_justify),
        (position_set_x, pos1, 825),
        (position_set_y, pos1, 650),
        (overlay_set_position, reg1, pos1),
        (create_text_overlay, reg1, "str_sample_map_banner", tf_center_justify),
        (position_set_y, pos1, 500),
        (overlay_set_position, reg1, pos1),

        (position_set_x, pos1, 800),
        (position_set_y, pos1, 640),
        (overlay_set_position, "$g_presentation_obj_custom_banner_17", pos1),
        (position_set_x, pos1, 780),
        (position_set_y, pos1, 315),
        (overlay_set_position, "$g_presentation_obj_custom_banner_18", pos1),
        (position_set_x, pos1, 50),
        (position_set_y, pos1, 50),
        (overlay_set_size, "$g_presentation_obj_custom_banner_17", pos1),
        (position_set_x, pos1, 50),
        (position_set_y, pos1, 50),
        (overlay_set_size, "$g_presentation_obj_custom_banner_18", pos1),


        (create_text_overlay, reg1, "str_number_of_charges", 0),
        (position_set_x, pos1, 40),
        (position_set_y, pos1, 350),
        (overlay_set_position, reg1, pos1),

        (assign, reg1, ":num_charges"),
        (create_text_overlay, reg2, "str_reg1", tf_center_justify),
        (position_set_x, pos1, 350),
        (position_set_y, pos1, 350),
        (overlay_set_position, reg2, pos1),
        (try_begin),
          (lt, ":num_charges", 4),
          (create_button_overlay, "$g_presentation_obj_custom_banner_15", "str_plus", tf_center_justify),
          (position_set_x, pos1, 385),
          (position_set_y, pos1, 350),
          (overlay_set_position, "$g_presentation_obj_custom_banner_15", pos1),
        (else_try),
          (assign, "$g_presentation_obj_custom_banner_15", -1),
        (try_end),
        (try_begin),
          (gt, ":num_charges", 0),
          (create_button_overlay, "$g_presentation_obj_custom_banner_21", "str_minus", tf_center_justify),
          (position_set_x, pos1, 370),
          (position_set_y, pos1, 350),
          (overlay_set_position, "$g_presentation_obj_custom_banner_21", pos1),
        (else_try),
          (assign, "$g_presentation_obj_custom_banner_21", -1),
        (try_end),

        (try_begin),
          (ge, ":num_charges", 1),
          (create_text_overlay, reg1, "str_charge", tf_center_justify),
          (position_set_x, pos1, 300),
          (position_set_y, pos1, 300),
          (overlay_set_position, reg1, pos1),
          (create_text_overlay, reg1, "str_color", tf_center_justify),
          (position_set_x, pos1, 550),
          (position_set_y, pos1, 300),
          (overlay_set_position, reg1, pos1),
          (create_button_overlay, "$g_presentation_obj_custom_banner_14", "str_change_charge_position", tf_center_justify),
          (position_set_y, pos1, 350),
          (position_set_x, pos1, 550),
          (overlay_set_position, "$g_presentation_obj_custom_banner_14", pos1),

          (create_text_overlay, reg1, "str_charge_no_1", 0),
          (position_set_x, pos1, 40),
          (position_set_y, pos1, 240),
          (overlay_set_position, reg1, pos1),
          (create_button_overlay, "$g_presentation_obj_custom_banner_6", "str_change", 0),
          (position_set_x, pos1, 310),
          (overlay_set_position, "$g_presentation_obj_custom_banner_6", pos1),
          (create_button_overlay, "$g_presentation_obj_custom_banner_7", "str_change", 0),
          (position_set_x, pos1, 560),
          (overlay_set_position, "$g_presentation_obj_custom_banner_7", pos1),
          (troop_get_slot, ":cur_charge", "$g_edit_banner_troop", slot_troop_custom_banner_charge_type_1),
          (val_mod, ":cur_charge", 256),
          (val_add, ":cur_charge", custom_banner_charges_begin),
          (create_image_button_overlay, "$g_presentation_obj_custom_banner_24", ":cur_charge", ":cur_charge"),
          (position_set_x, pos1, 260),
          (position_set_y, pos1, 255),
          (overlay_set_position, "$g_presentation_obj_custom_banner_24", pos1),
          (position_set_x, pos1, 50),
          (position_set_y, pos1, 50),
          (overlay_set_size, "$g_presentation_obj_custom_banner_24", pos1),
          (troop_get_slot, ":cur_charge_color", "$g_edit_banner_troop", slot_troop_custom_banner_charge_color_1),
          (create_image_button_overlay_with_tableau_material, "$g_presentation_obj_custom_banner_28", "mesh_color_picker", "tableau_color_picker", ":cur_charge_color"),
          (position_set_x, pos1, 530),
          (position_set_y, pos1, 255),
          (overlay_set_position, "$g_presentation_obj_custom_banner_28", pos1),
          (position_set_x, pos1, 250),
          (position_set_y, pos1, 250),
          (overlay_set_size, "$g_presentation_obj_custom_banner_28", pos1),

				(create_button_overlay, "$g_presentation_obj_custom_banner_32", "str_flip_horizontal", 0),
				(position_set_x, pos1, 700),
				(position_set_y, pos1, 240),
				(overlay_set_position, "$g_presentation_obj_custom_banner_32", pos1),
				(position_set_x, pos1, 800),
				(position_set_y, pos1, 800),
				(overlay_set_size, "$g_presentation_obj_custom_banner_32", pos1),
				(create_button_overlay, "$g_presentation_obj_custom_banner_33", "str_flip_vertical", 0),
				(position_set_x, pos1, 820),
				(position_set_y, pos1, 240),
				(overlay_set_position, "$g_presentation_obj_custom_banner_33", pos1),
				(position_set_x, pos1, 800),
				(position_set_y, pos1, 800),
				(overlay_set_size, "$g_presentation_obj_custom_banner_33", pos1),
        (try_end),
        (try_begin),
          (ge, ":num_charges", 2),
          (create_text_overlay, reg1, "str_charge_no_2", 0),
          (position_set_x, pos1, 40),
          (position_set_y, pos1, 180),
          (overlay_set_position, reg1, pos1),
          (create_button_overlay, "$g_presentation_obj_custom_banner_8", "str_change", 0),
          (position_set_x, pos1, 310),
          (overlay_set_position, "$g_presentation_obj_custom_banner_8", pos1),
          (create_button_overlay, "$g_presentation_obj_custom_banner_9", "str_change", 0),
          (position_set_x, pos1, 560),
          (overlay_set_position, "$g_presentation_obj_custom_banner_9", pos1),
          (troop_get_slot, ":cur_charge", "$g_edit_banner_troop", slot_troop_custom_banner_charge_type_2),
          (val_mod, ":cur_charge", 256),
          (val_add, ":cur_charge", custom_banner_charges_begin),
          (create_image_button_overlay, "$g_presentation_obj_custom_banner_25", ":cur_charge", ":cur_charge"),
          (position_set_x, pos1, 260),
          (position_set_y, pos1, 195),
          (overlay_set_position, "$g_presentation_obj_custom_banner_25", pos1),
          (position_set_x, pos1, 50),
          (position_set_y, pos1, 50),
          (overlay_set_size, "$g_presentation_obj_custom_banner_25", pos1),
          (troop_get_slot, ":cur_charge_color", "$g_edit_banner_troop", slot_troop_custom_banner_charge_color_2),
          (create_image_button_overlay_with_tableau_material, "$g_presentation_obj_custom_banner_29", "mesh_color_picker", "tableau_color_picker", ":cur_charge_color"),
          (position_set_x, pos1, 530),
          (position_set_y, pos1, 195),
          (overlay_set_position, "$g_presentation_obj_custom_banner_29", pos1),
          (position_set_x, pos1, 250),
          (position_set_y, pos1, 250),
          (overlay_set_size, "$g_presentation_obj_custom_banner_29", pos1),

				(create_button_overlay, "$g_presentation_obj_custom_banner_34", "str_flip_horizontal", 0),
				(position_set_x, pos1, 700),
				(position_set_y, pos1, 180),
				(overlay_set_position, "$g_presentation_obj_custom_banner_34", 1),
				(position_set_x, pos1, 800),
				(position_set_y, pos1, 800),
				(overlay_set_size, "$g_presentation_obj_custom_banner_34", pos1),
				(create_button_overlay, "$g_presentation_obj_custom_banner_35", "str_flip_vertical", 0),
				(position_set_x, pos1, 820),
				(position_set_y, pos1, 180),
				(overlay_set_position, "$g_presentation_obj_custom_banner_35", pos1),
				(position_set_x, pos1, 800),
				(position_set_y, pos1, 800),
				(overlay_set_size, "$g_presentation_obj_custom_banner_35", pos1),
        (try_end),
        (try_begin),
          (ge, ":num_charges", 3),
          (create_text_overlay, reg1, "str_charge_no_3", 0),
          (position_set_x, pos1, 40),
          (position_set_y, pos1, 120),
          (overlay_set_position, reg1, pos1),
          (create_button_overlay, "$g_presentation_obj_custom_banner_10", "str_change", 0),
          (position_set_x, pos1, 310),
          (overlay_set_position, "$g_presentation_obj_custom_banner_10", pos1),
          (create_button_overlay, "$g_presentation_obj_custom_banner_11", "str_change", 0),
          (position_set_x, pos1, 560),
          (overlay_set_position, "$g_presentation_obj_custom_banner_11", pos1),
          (troop_get_slot, ":cur_charge", "$g_edit_banner_troop", slot_troop_custom_banner_charge_type_3),
          (val_mod, ":cur_charge", 256),
          (val_add, ":cur_charge", custom_banner_charges_begin),
          (create_image_button_overlay, "$g_presentation_obj_custom_banner_26", ":cur_charge", ":cur_charge"),
          (position_set_x, pos1, 260),
          (position_set_y, pos1, 135),
          (overlay_set_position, "$g_presentation_obj_custom_banner_26", pos1),
          (position_set_x, pos1, 50),
          (position_set_y, pos1, 50),
          (overlay_set_size, "$g_presentation_obj_custom_banner_26", pos1),
          (troop_get_slot, ":cur_charge_color", "$g_edit_banner_troop", slot_troop_custom_banner_charge_color_3),
          (create_image_button_overlay_with_tableau_material, "$g_presentation_obj_custom_banner_30", "mesh_color_picker", "tableau_color_picker", ":cur_charge_color"),
          (position_set_x, pos1, 530),
          (position_set_y, pos1, 135),
          (overlay_set_position, "$g_presentation_obj_custom_banner_30", pos1),
          (position_set_x, pos1, 250),
          (position_set_y, pos1, 250),
          (overlay_set_size, "$g_presentation_obj_custom_banner_30", pos1),

				(create_button_overlay, "$g_presentation_obj_custom_banner_36", "str_flip_horizontal", 0),
				(position_set_x, pos1, 700),
				(position_set_y, pos1, 120),
				(overlay_set_position, "$g_presentation_obj_custom_banner_36", pos1),
				(position_set_x, pos1, 800),
				(position_set_y, pos1, 800),
				(overlay_set_size, "$g_presentation_obj_custom_banner_36", pos1),
				(create_button_overlay, "$g_presentation_obj_custom_banner_37", "str_flip_vertical", 0),
				(position_set_x, pos1, 820),
				(position_set_y, pos1, 120),
				(overlay_set_position, "$g_presentation_obj_custom_banner_37", pos1),
				(position_set_x, pos1, 800),
				(position_set_y, pos1, 800),
				(overlay_set_size, "$g_presentation_obj_custom_banner_37", pos1),
        (try_end),
        (try_begin),
          (ge, ":num_charges", 4),
          (create_text_overlay, reg1, "str_charge_no_4", 0),
          (position_set_x, pos1, 40),
          (position_set_y, pos1, 60),
          (overlay_set_position, reg1, pos1),
          (create_button_overlay, "$g_presentation_obj_custom_banner_12", "str_change", 0),
          (position_set_x, pos1, 310),
          (overlay_set_position, "$g_presentation_obj_custom_banner_12", pos1),
          (create_button_overlay, "$g_presentation_obj_custom_banner_13", "str_change", 0),
          (position_set_x, pos1, 560),
          (overlay_set_position, "$g_presentation_obj_custom_banner_13", pos1),
          (troop_get_slot, ":cur_charge", "$g_edit_banner_troop", slot_troop_custom_banner_charge_type_4),
          (val_mod, ":cur_charge", 256),
          (val_add, ":cur_charge", custom_banner_charges_begin),
          (create_image_button_overlay, "$g_presentation_obj_custom_banner_27", ":cur_charge", ":cur_charge"),
          (position_set_x, pos1, 260),
          (position_set_y, pos1, 75),
          (overlay_set_position, "$g_presentation_obj_custom_banner_27", pos1),
          (position_set_x, pos1, 50),
          (position_set_y, pos1, 50),
          (overlay_set_size, "$g_presentation_obj_custom_banner_27", pos1),
          (troop_get_slot, ":cur_charge_color", "$g_edit_banner_troop", slot_troop_custom_banner_charge_color_4),
          (create_image_button_overlay_with_tableau_material, "$g_presentation_obj_custom_banner_31", "mesh_color_picker", "tableau_color_picker", ":cur_charge_color"),
          (position_set_x, pos1, 530),
          (position_set_y, pos1, 75),
          (overlay_set_position, "$g_presentation_obj_custom_banner_31", pos1),
          (position_set_x, pos1, 250),
          (position_set_y, pos1, 250),
          (overlay_set_size, "$g_presentation_obj_custom_banner_31", pos1),

            (create_button_overlay, "$g_presentation_obj_custom_banner_38", "str_flip_horizontal", 0),
            (position_set_x, pos1, 700),
            (position_set_y, pos1, 60),
            (overlay_set_position, "$g_presentation_obj_custom_banner_38", pos1),
            (position_set_x, pos1, 800),
            (position_set_y, pos1, 800),
            (overlay_set_size, "$g_presentation_obj_custom_banner_38", pos1),
            (create_button_overlay, "$g_presentation_obj_custom_banner_39", "str_flip_vertical", 0),
            (position_set_x, pos1, 820),
            (position_set_y, pos1, 60),
            (overlay_set_position, "$g_presentation_obj_custom_banner_39", pos1),
            (position_set_x, pos1, 800),
            (position_set_y, pos1, 800),
            (overlay_set_size, "$g_presentation_obj_custom_banner_39", pos1),
        (try_end),

        (position_set_x, pos1, 350),
        (position_set_y, pos1, 400),
        (overlay_set_position, "$g_presentation_obj_custom_banner_1", pos1),
        (position_set_x, pos1, 275),
        (position_set_y, pos1, 550),
        (overlay_set_position, "$g_presentation_obj_custom_banner_2", pos1),
        (position_set_y, pos1, 500),
        (overlay_set_position, "$g_presentation_obj_custom_banner_3", pos1),
        (position_set_x, pos1, 175),
        (position_set_y, pos1, 600),
        (overlay_set_position, "$g_presentation_obj_custom_banner_4", pos1),
        (position_set_x, pos1, 880),
        (position_set_y, pos1, 575),
        (overlay_set_position, "$g_presentation_obj_custom_banner_5", pos1),
        (position_set_y, pos1, 400),
        (overlay_set_position, "$g_presentation_obj_custom_banner_19", pos1),
        (position_set_y, pos1, 650),
        (position_set_x, pos1, 175),
        (overlay_set_position, "$g_presentation_obj_custom_banner_16", pos1),
        (position_set_y, 1, 20),
        (position_set_x, 1, 850),
        (overlay_set_position, "$g_presentation_obj_custom_banner_20", pos1),
        (presentation_set_duration, 999999),
        ]),
     (ti_on_presentation_event_state_change,
      [
        (store_trigger_param_1, ":object"),
        (troop_get_slot, ":num_charges", "$g_edit_banner_troop", slot_troop_custom_banner_num_charges),
        (try_begin),
          (this_or_next|eq, ":object", "$g_presentation_obj_custom_banner_2"),
          (eq, ":object", "$g_presentation_obj_custom_banner_22"),
          (assign, "$g_presentation_next_presentation", "prsnt_custom_banner"),
          (assign, "$g_presentation_output_slot", slot_troop_custom_banner_bg_color_1),
          (start_presentation, "prsnt_color_selection"),
        (else_try),
          (this_or_next|eq, ":object", "$g_presentation_obj_custom_banner_3"),
          (eq, ":object", "$g_presentation_obj_custom_banner_23"),
          (assign, "$g_presentation_next_presentation", "prsnt_custom_banner"),
          (assign, "$g_presentation_output_slot", slot_troop_custom_banner_bg_color_2),
          (start_presentation, "prsnt_color_selection"),
        (else_try),
          (this_or_next|eq, ":object", "$g_presentation_obj_custom_banner_4"),
          (eq, ":object", "$g_presentation_obj_custom_banner_1"),
          (assign, "$g_presentation_next_presentation", "prsnt_custom_banner"),
          (start_presentation, "prsnt_banner_background_selection"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_custom_banner_5"),
          (assign, "$g_presentation_next_presentation", "prsnt_custom_banner"),
          (start_presentation, "prsnt_banner_flag_type_selection"),
        (else_try),
          (ge, ":num_charges", 1),
          (this_or_next|eq, ":object", "$g_presentation_obj_custom_banner_6"),
          (eq, ":object", "$g_presentation_obj_custom_banner_24"),
          (assign, "$g_presentation_next_presentation", "prsnt_custom_banner"),
          (assign, "$g_presentation_output_slot", slot_troop_custom_banner_charge_type_1),
          (start_presentation, "prsnt_banner_charge_selection"),
        (else_try),
          (ge, ":num_charges", 1),
          (this_or_next|eq, ":object", "$g_presentation_obj_custom_banner_7"),
          (eq, ":object", "$g_presentation_obj_custom_banner_28"),
          (assign, "$g_presentation_next_presentation", "prsnt_custom_banner"),
          (assign, "$g_presentation_output_slot", slot_troop_custom_banner_charge_color_1),
          (start_presentation, "prsnt_color_selection"),
        (else_try),
          (ge, ":num_charges", 2),
          (this_or_next|eq, ":object", "$g_presentation_obj_custom_banner_8"),
          (eq, ":object", "$g_presentation_obj_custom_banner_25"),
          (assign, "$g_presentation_next_presentation", "prsnt_custom_banner"),
          (assign, "$g_presentation_output_slot", slot_troop_custom_banner_charge_type_2),
          (start_presentation, "prsnt_banner_charge_selection"),
        (else_try),
          (ge, ":num_charges", 2),
          (this_or_next|eq, ":object", "$g_presentation_obj_custom_banner_9"),
          (eq, ":object", "$g_presentation_obj_custom_banner_29"),
          (assign, "$g_presentation_next_presentation", "prsnt_custom_banner"),
          (assign, "$g_presentation_output_slot", slot_troop_custom_banner_charge_color_2),
          (start_presentation, "prsnt_color_selection"),
        (else_try),
          (ge, ":num_charges", 3),
          (this_or_next|eq, ":object", "$g_presentation_obj_custom_banner_10"),
          (eq, ":object", "$g_presentation_obj_custom_banner_26"),
          (assign, "$g_presentation_next_presentation", "prsnt_custom_banner"),
          (assign, "$g_presentation_output_slot", slot_troop_custom_banner_charge_type_3),
          (start_presentation, "prsnt_banner_charge_selection"),
        (else_try),
          (ge, ":num_charges", 3),
          (this_or_next|eq, ":object", "$g_presentation_obj_custom_banner_11"),
          (eq, ":object", "$g_presentation_obj_custom_banner_30"),
          (assign, "$g_presentation_next_presentation", "prsnt_custom_banner"),
          (assign, "$g_presentation_output_slot", slot_troop_custom_banner_charge_color_3),
          (start_presentation, "prsnt_color_selection"),
        (else_try),
          (ge, ":num_charges", 4),
          (this_or_next|eq, ":object", "$g_presentation_obj_custom_banner_12"),
          (eq, ":object", "$g_presentation_obj_custom_banner_27"),
          (assign, "$g_presentation_next_presentation", "prsnt_custom_banner"),
          (assign, "$g_presentation_output_slot", slot_troop_custom_banner_charge_type_4),
          (start_presentation, "prsnt_banner_charge_selection"),
        (else_try),
          (ge, ":num_charges", 4),
          (this_or_next|eq, ":object", "$g_presentation_obj_custom_banner_13"),
          (eq, ":object", "$g_presentation_obj_custom_banner_31"),
          (assign, "$g_presentation_next_presentation", "prsnt_custom_banner"),
          (assign, "$g_presentation_output_slot", slot_troop_custom_banner_charge_color_4),
          (start_presentation, "prsnt_color_selection"),
        (else_try),
          (ge, ":num_charges", 1),
          (eq, ":object", "$g_presentation_obj_custom_banner_14"),
          (assign, "$g_presentation_next_presentation", "prsnt_custom_banner"),
          (start_presentation, "prsnt_banner_charge_positioning"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_custom_banner_15"),
          (troop_get_slot, ":num_charges", "$g_edit_banner_troop", slot_troop_custom_banner_num_charges),
          (val_add, ":num_charges", 1),
          (val_clamp, ":num_charges", 0, 5),
          (troop_set_slot, "$g_edit_banner_troop", slot_troop_custom_banner_num_charges, ":num_charges"),
          (start_presentation, "prsnt_custom_banner"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_custom_banner_21"),
          (troop_get_slot, ":num_charges", "$g_edit_banner_troop", slot_troop_custom_banner_num_charges),
          (val_sub, ":num_charges", 1),
          (val_clamp, ":num_charges", 0, 5),
          (troop_set_slot, "$g_edit_banner_troop", slot_troop_custom_banner_num_charges, ":num_charges"),
          (start_presentation, "prsnt_custom_banner"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_custom_banner_16"),
          (call_script, "script_get_random_custom_banner", "$g_edit_banner_troop"),
          (start_presentation, "prsnt_custom_banner"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_custom_banner_17"),
          (assign, "$g_presentation_next_presentation", "prsnt_custom_banner"),
          (start_presentation, "prsnt_banner_flag_type_selection"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_custom_banner_18"),
          (assign, "$g_presentation_next_presentation", "prsnt_custom_banner"),
          (start_presentation, "prsnt_banner_flag_map_type_selection"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_custom_banner_19"),
          (assign, "$g_presentation_next_presentation", "prsnt_custom_banner"),
          (start_presentation, "prsnt_banner_flag_map_type_selection"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_custom_banner_32"),
          (troop_get_slot, ":charge_type", "$g_edit_banner_troop", slot_troop_custom_banner_charge_type_1),
          (store_mod, ":charge_type_base", ":charge_type", 256),
          (val_div, ":charge_type", 256),
          (store_mod, ":flag", ":charge_type", 2),
          (val_div, ":charge_type", 2), #remove flag
          (val_add, ":flag", 1),
          (val_mod, ":flag", 2), #switch flag
          (val_mul, ":charge_type", 2),
          (val_add, ":charge_type", ":flag"),
          (val_mul, ":charge_type", 256),
          (val_add, ":charge_type", ":charge_type_base"),
          (troop_set_slot, "$g_edit_banner_troop", slot_troop_custom_banner_charge_type_1, ":charge_type"),
          (start_presentation, "prsnt_custom_banner"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_custom_banner_34"),
          (troop_get_slot, ":charge_type", "$g_edit_banner_troop", slot_troop_custom_banner_charge_type_2),
          (store_mod, ":charge_type_base", ":charge_type", 256),
          (val_div, ":charge_type", 256),
          (store_mod, ":flag", ":charge_type", 2),
          (val_div, ":charge_type", 2), #remove flag
          (val_add, ":flag", 1),
          (val_mod, ":flag", 2), #switch flag
          (val_mul, ":charge_type", 2),
          (val_add, ":charge_type", ":flag"),
          (val_mul, ":charge_type", 256),
          (val_add, ":charge_type", ":charge_type_base"),
          (troop_set_slot, "$g_edit_banner_troop", slot_troop_custom_banner_charge_type_2, ":charge_type"),
          (start_presentation, "prsnt_custom_banner"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_custom_banner_36"),
          (troop_get_slot, ":charge_type", "$g_edit_banner_troop", slot_troop_custom_banner_charge_type_3),
          (store_mod, ":charge_type_base", ":charge_type", 256),
          (val_div, ":charge_type", 256),
          (store_mod, ":flag", ":charge_type", 2),
          (val_div, ":charge_type", 2), #remove flag
          (val_add, ":flag", 1),
          (val_mod, ":flag", 2), #switch flag
          (val_mul, ":charge_type", 2),
          (val_add, ":charge_type", ":flag"),
          (val_mul, ":charge_type", 256),
          (val_add, ":charge_type", ":charge_type_base"),
          (troop_set_slot, "$g_edit_banner_troop", slot_troop_custom_banner_charge_type_3, ":charge_type"),
          (start_presentation, "prsnt_custom_banner"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_custom_banner_38"),
          (troop_get_slot, ":charge_type", "$g_edit_banner_troop", slot_troop_custom_banner_charge_type_4),
          (store_mod, ":charge_type_base", ":charge_type", 256),
          (val_div, ":charge_type", 256),
          (store_mod, ":flag", ":charge_type", 2),
          (val_div, ":charge_type", 2), #remove flag
          (val_add, ":flag", 1),
          (val_mod, ":flag", 2), #switch flag
          (val_mul, ":charge_type", 2),
          (val_add, ":charge_type", ":flag"),
          (val_mul, ":charge_type", 256),
          (val_add, ":charge_type", ":charge_type_base"),
          (troop_set_slot, "$g_edit_banner_troop", slot_troop_custom_banner_charge_type_4, ":charge_type"),
          (start_presentation, "prsnt_custom_banner"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_custom_banner_33"),
          (troop_get_slot, ":charge_type", "$g_edit_banner_troop", slot_troop_custom_banner_charge_type_1),
          (store_div, ":flag", ":charge_type", 512),
          (val_add, ":flag", 1),
          (val_mod, ":flag", 2), #switch flag
          (val_mul, ":flag", 512),
          (val_mod, ":charge_type", 512), #remove flag
          (val_add, ":charge_type", ":flag"),
          (troop_set_slot, "$g_edit_banner_troop", slot_troop_custom_banner_charge_type_1, ":charge_type"),
          (start_presentation, "prsnt_custom_banner"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_custom_banner_35"),
          (troop_get_slot, ":charge_type", "$g_edit_banner_troop", slot_troop_custom_banner_charge_type_2),
          (store_div, ":flag", ":charge_type", 512),
          (val_add, ":flag", 1),
          (val_mod, ":flag", 2), #switch flag
          (val_mul, ":flag", 512),
          (val_mod, ":charge_type", 512), #remove flag
          (val_add, ":charge_type", ":flag"),
          (troop_set_slot, "$g_edit_banner_troop", slot_troop_custom_banner_charge_type_2, ":charge_type"),
          (start_presentation, "prsnt_custom_banner"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_custom_banner_37"),
          (troop_get_slot, ":charge_type", "$g_edit_banner_troop", slot_troop_custom_banner_charge_type_3),
          (store_div, ":flag", ":charge_type", 512),
          (val_add, ":flag", 1),
          (val_mod, ":flag", 2), #switch flag
          (val_mul, ":flag", 512),
          (val_mod, ":charge_type", 512), #remove flag
          (val_add, ":charge_type", ":flag"),
          (troop_set_slot, "$g_edit_banner_troop", slot_troop_custom_banner_charge_type_3, ":charge_type"),
          (start_presentation, "prsnt_custom_banner"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_custom_banner_39"),
          (troop_get_slot, ":charge_type", "$g_edit_banner_troop", slot_troop_custom_banner_charge_type_4),
          (store_div, ":flag", ":charge_type", 512),
          (val_add, ":flag", 1),
          (val_mod, ":flag", 2), #switch flag
          (val_mul, ":flag", 512),
          (val_mod, ":charge_type", 512), #remove flag
          (val_add, ":charge_type", ":flag"),
          (troop_set_slot, "$g_edit_banner_troop", slot_troop_custom_banner_charge_type_4, ":charge_type"),
          (start_presentation, "prsnt_custom_banner"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_custom_banner_20"),

          (troop_get_slot, ":flag_icon", "$g_edit_banner_troop", slot_troop_custom_banner_map_flag_type),
          (try_begin),
            (ge, ":flag_icon", 0),
            (val_add, ":flag_icon", custom_banner_map_icons_begin),
            (party_set_banner_icon, "p_main_party", ":flag_icon"),
            (try_for_range, ":party", "p_town_1", "p_village_1"),
                (party_slot_eq, ":party", slot_town_lord, "$g_edit_banner_troop"),
                (party_set_banner_icon, ":party", ":flag_icon"),
            (try_end),

          #set player supporter faction banner too
            (try_begin),
                (eq, "$g_edit_banner_troop", "trp_player"),#are editing the player
                (faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),#player faction is active
                (troop_get_slot, ":banner_mesh", "trp_player", slot_troop_banner_scene_prop),
                (try_begin),
                    (gt, ":banner_mesh", 0),
                    (val_add, ":banner_mesh", banner_meshes_begin),
                    (val_sub, ":banner_mesh", banner_scene_props_begin),
                    (faction_set_slot, "fac_player_faction", slot_faction_banner, ":banner_mesh"),
                    (faction_set_slot, "fac_player_supporters_faction", slot_faction_banner, ":banner_mesh"),
                (else_try),#custom banner
                    (eq, ":banner_mesh", -1),
                    (faction_set_slot, "fac_player_faction", slot_faction_banner, -1),
                    (faction_set_slot, "fac_player_supporters_faction", slot_faction_banner, -1),
                (try_end),
            (try_end),

            ##all use faction banners
            (try_for_range, ":lord", active_npcs_begin, active_npcs_end),
                (store_faction_of_troop, ":faction_lord", ":lord"),
                (eq, ":faction_lord", "$players_kingdom"),
                (faction_slot_eq, "$players_kingdom", slot_faction_leader, "$g_edit_banner_troop"),
                (call_script, "script_set_troop_banner_according_to_faction", ":lord", "$players_kingdom"),
            (try_end),

            (try_for_range, ":cur_center", walled_centers_begin, walled_centers_end),
                ##all use faction banners
                (faction_slot_eq, "$players_kingdom", slot_faction_leader, "$g_edit_banner_troop"),
                (this_or_next|party_slot_eq, ":cur_center", slot_town_lord, "$g_edit_banner_troop"),
                (store_faction_of_party, ":fac", ":cur_center"),
                (eq, ":fac", "$players_kingdom"),
                (party_get_slot, ":lord", ":cur_center", slot_town_lord),

                (store_add, ":break_loop", slot_legion_home_begin, 14),
                (try_for_range, ":legion_home", slot_legion_home_begin, ":break_loop"),
                    (troop_slot_eq, "trp_province_array", ":legion_home", ":cur_center"),
                    (assign, ":break_loop", -1),
                (try_end),
                (neq, ":break_loop", -1),

                (troop_get_slot, ":flag_icon", "$g_edit_banner_troop", slot_troop_custom_banner_map_flag_type),
                (val_add, ":flag_icon", custom_banner_map_icons_begin),
                (party_set_banner_icon, ":cur_center", ":flag_icon"),
            (else_try),
                (party_slot_eq, ":cur_center", slot_town_lord, "$g_edit_banner_troop"),
                (troop_get_slot, ":flag_icon", "$g_edit_banner_troop", slot_troop_custom_banner_map_flag_type),
                (val_add, ":flag_icon", custom_banner_map_icons_begin),
                (party_set_banner_icon, ":cur_center", ":flag_icon"),
            (try_end),
          (try_end),
          (troop_set_slot, "$g_edit_banner_troop", slot_troop_banner_scene_prop, -1),
          (faction_set_slot, "fac_player_faction", slot_faction_banner, -1),
          (faction_set_slot, "fac_player_supporters_faction", slot_faction_banner, -1),

          (presentation_set_duration, 0),
       (try_end),
        ]),
##     (ti_on_presentation_run,
##      [(try_begin),
##         (this_or_next|key_clicked, key_space),
##         (this_or_next|key_clicked, key_enter),
##         (this_or_next|key_clicked, key_escape),
##         (key_clicked, key_back_space),
##         (presentation_set_duration, 0),
##       (try_end),
##       ]),
     ]),

  ("banner_charge_positioning", 0, mesh_load_window,
   [
     (ti_on_presentation_load,
      [
        (set_fixed_point_multiplier, 1000),
        (create_text_overlay, reg1, "str_choose_position", tf_center_justify),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 600),
        (overlay_set_position, reg1, pos1),
        (assign, ":pos_x", 125),
        (assign, ":pos_y", 400),
        (call_script, "script_get_troop_custom_banner_num_positionings", "$g_edit_banner_troop"),
        (assign, ":num_positionings", reg0),
        (store_mul, ":x_needed", ":num_positionings", 125),
        (val_sub, ":x_needed", 25),
        (store_div, ":pos_x", ":x_needed", 2),
        (store_sub, ":pos_x", 500, ":pos_x"),
        (try_for_range, ":cur_positioning", 0, ":num_positionings"),
          (create_image_button_overlay_with_tableau_material, reg1, -1, "tableau_positioning_selection", ":cur_positioning"),
          (position_set_x, pos1, ":pos_x"),
          (position_set_y, pos1, ":pos_y"),
          (val_add, ":pos_x", 125),
          (overlay_set_position, reg1, pos1),
          (troop_set_slot, "trp_temp_array_a", ":cur_positioning", reg1),
        (try_end),
        (presentation_set_duration, 999999),
        ]),
     (ti_on_presentation_event_state_change,
      [
        (store_trigger_param_1, ":object"),
        (call_script, "script_get_troop_custom_banner_num_positionings", "$g_edit_banner_troop"),
        (assign, ":num_positionings", reg0),
        (try_for_range, ":trp_slot_index", 0, ":num_positionings"),
          (troop_slot_eq, "trp_temp_array_a", ":trp_slot_index", ":object"),
          (troop_set_slot, "$g_edit_banner_troop", slot_troop_custom_banner_positioning, ":trp_slot_index"),
          (assign, ":num_positionings", 0),
        (try_end),
        (try_begin),
          (gt, "$g_presentation_next_presentation", 0),
          (start_presentation, "$g_presentation_next_presentation"),
        (else_try),
          (presentation_set_duration, 0),
        (try_end),
        ]),
     ]),

  ("banner_charge_selection", 0, mesh_load_window,
   [
     (ti_on_presentation_load,
      [
        (set_fixed_point_multiplier, 1000),
        (create_text_overlay, reg1, "str_choose_charge", tf_center_justify),

        (position_set_x, pos1, 500),
        (position_set_y, pos1, 650),
        (overlay_set_position, reg1, pos1),
        (assign, ":pos_x", 100),
        (assign, ":pos_y", 600),
        (try_for_range, ":cur_charge", custom_banner_charges_begin, custom_banner_charges_end),
          (create_image_button_overlay, reg1, ":cur_charge", ":cur_charge"),
          (position_set_x, pos1, ":pos_x"),
          (position_set_y, pos1, ":pos_y"),
          (val_add, ":pos_x", 100),
          (try_begin),
            (gt, ":pos_x", 900),
            (assign, ":pos_x", 100),
            (val_sub, ":pos_y", 100),
          (try_end),
          (overlay_set_position, reg1, pos1),
          (position_set_x, pos1, 80),
          (position_set_y, pos1, 80),
          (overlay_set_size, reg1, pos1),
          (store_sub, ":slot_index", ":cur_charge", custom_banner_charges_begin),
          (troop_set_slot, "trp_temp_array_a", ":slot_index", reg1),
        (try_end),
        (presentation_set_duration, 999999),
        ]),
     (ti_on_presentation_event_state_change,
      [
        (store_trigger_param_1, ":object"),
        (assign, ":end_cond", custom_banner_charges_end),
        (val_sub, ":end_cond", custom_banner_charges_begin),
        (try_for_range, ":trp_slot_index", 0, ":end_cond"),
          (troop_slot_eq, "trp_temp_array_a", ":trp_slot_index", ":object"),
          (troop_set_slot, "$g_edit_banner_troop", "$g_presentation_output_slot", ":trp_slot_index"),
          (assign, ":end_cond", 0),
        (try_end),
        (try_begin),
          (gt, "$g_presentation_next_presentation", 0),
          (start_presentation, "$g_presentation_next_presentation"),
        (else_try),
          (presentation_set_duration, 0),
        (try_end),
        ]),
     ]),

  ("banner_background_selection", 0, mesh_load_window,
   [
     (ti_on_presentation_load,
      [
        (set_fixed_point_multiplier, 1000),
        (create_text_overlay, reg1, "str_choose_background", tf_center_justify),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 600),
        (overlay_set_position, reg1, pos1),
        (assign, ":pos_x", 75),
        (assign, ":pos_y", 450),
        (try_for_range, ":cur_banner", custom_banner_backgrounds_begin, custom_banner_backgrounds_end),
          (store_sub, ":slot_index", ":cur_banner", custom_banner_backgrounds_begin),
          (create_image_button_overlay_with_tableau_material, reg1, -1, "tableau_background_selection", ":slot_index"),
          (position_set_x, pos1, ":pos_x"),
          (position_set_y, pos1, ":pos_y"),
          (val_add, ":pos_x", 125),
          (try_begin),
            (gt, ":pos_x", 900),
            (assign, ":pos_x", 75),
            (val_sub, ":pos_y", 125),
          (try_end),
          (overlay_set_position, reg1, pos1),
          (troop_set_slot, "trp_temp_array_a", ":slot_index", reg1),
        (try_end),
        (presentation_set_duration, 999999),
        ]),
     (ti_on_presentation_event_state_change,
      [
        (store_trigger_param_1, ":object"),
        (assign, ":end_cond", custom_banner_backgrounds_end),
        (val_sub, ":end_cond", custom_banner_backgrounds_begin),
        (try_for_range, ":trp_slot_index", 0, ":end_cond"),
          (troop_slot_eq, "trp_temp_array_a", ":trp_slot_index", ":object"),
          (troop_set_slot, "$g_edit_banner_troop", slot_troop_custom_banner_bg_type, ":trp_slot_index"),
          (assign, ":end_cond", 0),
        (try_end),
        (try_begin),
          (gt, "$g_presentation_next_presentation", 0),
          (start_presentation, "$g_presentation_next_presentation"),
        (else_try),
          (presentation_set_duration, 0),
        (try_end),
        ]),
     ]),

  ("banner_flag_type_selection", 0, mesh_load_window,
   [
     (ti_on_presentation_load,
      [
        (set_fixed_point_multiplier, 1000),
        (create_text_overlay, reg1, "str_choose_flag_type", tf_center_justify),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 600),
        (overlay_set_position, reg1, pos1),

        (assign, ":pos_x", 435),
        (assign, ":pos_y", 450),
        (try_for_range, ":cur_flag", custom_banner_flag_types_begin, custom_banner_flag_types_end),
          (store_sub, ":slot_index", ":cur_flag", custom_banner_flag_types_begin),
          (troop_set_slot, "$g_edit_banner_troop", slot_troop_custom_banner_flag_type, ":slot_index"),
          (create_image_button_overlay_with_tableau_material, reg1, ":cur_flag", "tableau_custom_banner_default", "$g_edit_banner_troop"),
          (position_set_x, pos1, ":pos_x"),
          (position_set_y, pos1, ":pos_y"),
          (val_add, ":pos_x", 130),
          (overlay_set_position, reg1, pos1),
          (position_set_x, pos1, 100),
          (position_set_y, pos1, 100),
          (overlay_set_size, reg1, pos1),
          (troop_set_slot, "trp_temp_array_a", ":slot_index", reg1),
        (try_end),
        (presentation_set_duration, 999999),
        ]),
     (ti_on_presentation_event_state_change,
      [
        (store_trigger_param_1, ":object"),
        (assign, ":end_cond", custom_banner_flag_types_end),
        (val_sub, ":end_cond", custom_banner_flag_types_begin),
        (try_for_range, ":trp_slot_index", 0, ":end_cond"),
          (troop_slot_eq, "trp_temp_array_a", ":trp_slot_index", ":object"),
          (troop_set_slot, "$g_edit_banner_troop", slot_troop_custom_banner_flag_type, ":trp_slot_index"),
          (assign, ":end_cond", 0),
        (try_end),
        (try_begin),
          (gt, "$g_presentation_next_presentation", 0),
          (start_presentation, "$g_presentation_next_presentation"),
        (else_try),
          (presentation_set_duration, 0),
        (try_end),
        ]),
     ]),

  ("banner_flag_map_type_selection", 0, mesh_load_window,
   [
     (ti_on_presentation_load,
      [
        (set_fixed_point_multiplier, 1000),
        (create_text_overlay, reg1, "str_choose_map_flag_type", tf_center_justify),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 600),
        (overlay_set_position, reg1, pos1),
        (troop_get_slot, ":bg_type", "$g_edit_banner_troop", slot_troop_custom_banner_bg_type),
        (val_add, ":bg_type", custom_banner_backgrounds_begin),
        (assign, ":pos_x", 250),
        (assign, ":pos_y", 150),
        (try_for_range, ":cur_flag", custom_banner_flag_map_types_begin, custom_banner_flag_map_types_end),
          (store_sub, ":slot_index", ":cur_flag", custom_banner_flag_map_types_begin),
          (troop_set_slot, "$g_edit_banner_troop", slot_troop_custom_banner_map_flag_type, ":slot_index"),
          (try_begin),
            (eq, ":cur_flag", "mesh_custom_map_banner_01"),
            (create_image_button_overlay_with_tableau_material, reg1, ":cur_flag", "tableau_custom_banner_square", "$g_edit_banner_troop"),
          (else_try),
            (eq, ":cur_flag", "mesh_custom_map_banner_02"),
            (create_image_button_overlay_with_tableau_material, reg1, ":cur_flag", "tableau_custom_banner_short", "$g_edit_banner_troop"),
          (else_try),
            (create_image_button_overlay_with_tableau_material, reg1, ":cur_flag", "tableau_custom_banner_tall", "$g_edit_banner_troop"),
          (try_end),
          (position_set_x, pos1, ":pos_x"),
          (position_set_y, pos1, ":pos_y"),
          (val_add, ":pos_x", 200),
          (overlay_set_position, reg1, pos1),
          (position_set_x, pos1, 100),
          (position_set_y, pos1, 100),
          (overlay_set_size, reg1, pos1),
          (troop_set_slot, "trp_temp_array_a", ":slot_index", reg1),
        (try_end),
        (presentation_set_duration, 999999),
        ]),
     (ti_on_presentation_event_state_change,
      [
        (store_trigger_param_1, ":object"),
        (assign, ":end_cond", custom_banner_flag_map_types_end),
        (val_sub, ":end_cond", custom_banner_flag_map_types_begin),
        (try_for_range, ":trp_slot_index", 0, ":end_cond"),
          (troop_slot_eq, "trp_temp_array_a", ":trp_slot_index", ":object"),
          (troop_set_slot, "$g_edit_banner_troop", slot_troop_custom_banner_map_flag_type, ":trp_slot_index"),
          (assign, ":end_cond", 0),
        (try_end),
        (try_begin),
          (gt, "$g_presentation_next_presentation", 0),
          (start_presentation, "$g_presentation_next_presentation"),
        (else_try),
          (presentation_set_duration, 0),
        (try_end),
        ]),
     ]),

  ("color_selection", 0, mesh_load_window,
   [
     (ti_on_presentation_load,
      [
        (set_fixed_point_multiplier, 1000),
        (create_text_overlay, reg1, "str_choose_color", tf_center_justify),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 600),
        (overlay_set_position, reg1, pos1),

        (assign, ":pos_x", 125),
        (assign, ":pos_y", 450),
        (try_for_range, ":i_color", 0, 42),
          (call_script, "script_get_custom_banner_color_from_index", ":i_color"),
          (assign, ":cur_color", reg0),
          (create_image_button_overlay_with_tableau_material, reg1, "mesh_color_picker", "tableau_color_picker", ":cur_color"),
          (position_set_x, pos1, ":pos_x"),
          (position_set_y, pos1, ":pos_y"),
          (val_add, ":pos_x", 50),
          (try_begin),
            (store_mod, ":mod_i_color", ":i_color", 7),
            (eq, ":mod_i_color", 6),
            (assign, ":pos_x", 125),
            (val_sub, ":pos_y", 50),
          (try_end),
          (overlay_set_position, reg1, pos1),
          (position_set_x, pos1, 500),
          (position_set_y, pos1, 500),
          (overlay_set_size, reg1, pos1),
          (store_mul, ":trp_slot_index", ":i_color", 2),
          (store_add, ":trp_slot_color", ":trp_slot_index", 1),
          (troop_set_slot, "trp_temp_array_a", ":trp_slot_index", reg1),
          (troop_set_slot, "trp_temp_array_a", ":trp_slot_color", ":cur_color"),
        (try_end),
        (presentation_set_duration, 999999),
        ]),
     (ti_on_presentation_event_state_change,
      [
        (store_trigger_param_1, ":object"),
        (assign, ":end_cond", 64),
        (try_for_range, ":i_color", 0, ":end_cond"),
          (store_mul, ":trp_slot_index", ":i_color", 2),
          (troop_slot_eq, "trp_temp_array_a", ":trp_slot_index", ":object"),
          (store_add, ":trp_slot_color", ":trp_slot_index", 1),
          (troop_get_slot, ":output_color", "trp_temp_array_a", ":trp_slot_color"),
          (troop_set_slot, "$g_edit_banner_troop", "$g_presentation_output_slot", ":output_color"),
          (assign, ":end_cond", 0),
        (try_end),
        (try_begin),
          (gt, "$g_presentation_next_presentation", 0),
          (start_presentation, "$g_presentation_next_presentation"),
        (else_try),
          (presentation_set_duration, 0),
        (try_end),
        ]),
     ]),
    ("sliders",0,0,[
      (ti_on_presentation_load,
       [(set_fixed_point_multiplier, 1000),
        (create_slider_overlay, "$g_presentation_obj_sliders_1", 0, 100),
        (create_slider_overlay, "$g_presentation_obj_sliders_2", 0, 100),
        (create_slider_overlay, "$g_presentation_obj_sliders_3", 0, 100),
        (create_slider_overlay, "$g_presentation_obj_sliders_4", 0, 100),
        (assign, reg1, 25),
        (str_store_string, s1, "str_reg1"),
        (create_text_overlay, "$g_presentation_obj_sliders_5", s1),
        (create_text_overlay, "$g_presentation_obj_sliders_6", s1),
        (create_text_overlay, "$g_presentation_obj_sliders_7", s1),
        (create_text_overlay, "$g_presentation_obj_sliders_8", s1),
        (assign, "$g_presentation_obj_sliders_1_val", 25),
        (overlay_set_val, "$g_presentation_obj_sliders_1", 25),
        (assign, "$g_presentation_obj_sliders_2_val", 25),
        (overlay_set_val, "$g_presentation_obj_sliders_2", 25),
        (assign, "$g_presentation_obj_sliders_3_val", 25),
        (overlay_set_val, "$g_presentation_obj_sliders_3", 25),
        (assign, "$g_presentation_obj_sliders_4_val", 25),
        (overlay_set_val, "$g_presentation_obj_sliders_4", 25),
        (position_set_x, pos1, 600),
        (position_set_y, pos1, 200),
        (overlay_set_position, "$g_presentation_obj_sliders_1", pos1),
        (position_set_y, pos1, 300),
        (overlay_set_position, "$g_presentation_obj_sliders_2", pos1),
        (position_set_y, pos1, 400),
        (overlay_set_position, "$g_presentation_obj_sliders_3", pos1),
        (position_set_y, pos1, 500),
        (overlay_set_position, "$g_presentation_obj_sliders_4", pos1),
        (position_set_x, pos1, 800),
        (position_set_y, pos1, 200),
        (overlay_set_position, "$g_presentation_obj_sliders_5", pos1),
        (position_set_y, pos1, 300),
        (overlay_set_position, "$g_presentation_obj_sliders_6", pos1),
        (position_set_y, pos1, 400),
        (overlay_set_position, "$g_presentation_obj_sliders_7", pos1),
        (position_set_y, pos1, 500),
        (overlay_set_position, "$g_presentation_obj_sliders_8", pos1),
        (position_set_x, pos1, 500),
        (overlay_set_size, "$g_presentation_obj_sliders_3", pos1),
        ]),
      (ti_on_presentation_run,
       [
        ]),
      (ti_on_presentation_event_state_change,
       [(store_trigger_param_1, ":object"),
        (store_trigger_param_2, ":value"),
        (assign, ":val_changed", 0),
        (try_begin),
          (eq, ":object", "$g_presentation_obj_sliders_1"),
          (try_begin),
            (neq, "$g_presentation_obj_sliders_1_val", ":value"),
            (assign, "$g_presentation_obj_sliders_1_val", ":value"),
            (assign, ":val_changed", 1),
          (try_end),
        (else_try),
          (eq, ":object", "$g_presentation_obj_sliders_2"),
          (try_begin),
            (neq, "$g_presentation_obj_sliders_2_val", ":value"),
            (assign, "$g_presentation_obj_sliders_2_val", ":value"),
            (assign, ":val_changed", 1),
          (try_end),
        (else_try),
          (eq, ":object", "$g_presentation_obj_sliders_3"),
          (try_begin),
            (neq, "$g_presentation_obj_sliders_3_val", ":value"),
            (assign, "$g_presentation_obj_sliders_3_val", ":value"),
            (assign, ":val_changed", 1),
          (try_end),
        (else_try),
          (eq, ":object", "$g_presentation_obj_sliders_4"),
          (try_begin),
            (neq, "$g_presentation_obj_sliders_4_val", ":value"),
            (assign, "$g_presentation_obj_sliders_4_val", ":value"),
            (assign, ":val_changed", 1),
          (try_end),
        (try_end),
        (try_begin),
          (eq, ":val_changed", 1),
          (assign, ":sum_values", 0),
          (val_add, ":sum_values", "$g_presentation_obj_sliders_1_val"),
          (val_add, ":sum_values", "$g_presentation_obj_sliders_2_val"),
          (val_add, ":sum_values", "$g_presentation_obj_sliders_3_val"),
          (val_add, ":sum_values", "$g_presentation_obj_sliders_4_val"),
          (store_sub, ":difference", 100, ":sum_values"),
          (assign, ":obj_1_new_val", "$g_presentation_obj_sliders_1_val"),
          (assign, ":obj_2_new_val", "$g_presentation_obj_sliders_2_val"),
          (assign, ":obj_3_new_val", "$g_presentation_obj_sliders_3_val"),
          (assign, ":obj_4_new_val", "$g_presentation_obj_sliders_4_val"),
          (assign, ":adder", 1),
          (assign, ":between_1", 0),
          (assign, ":between_2", 100),
          (try_begin),
            (lt, ":difference", 0),
            (val_mul, ":difference", -1),
            (assign, ":adder", -1),
            (assign, ":between_1", 1),
            (assign, ":between_2", 101),
          (try_end),
          (store_sub, ":sum_non_changed_values", ":sum_values", ":value"),
          (val_add, ":sum_non_changed_values", 30),
          (try_for_range, ":unused", 0, ":difference"),
            (store_random_in_range, ":random_no", 0, ":sum_non_changed_values"),
            (try_begin),
              (neq, ":object", "$g_presentation_obj_sliders_1"),
              (val_sub, ":random_no", "$g_presentation_obj_sliders_1_val"),
              (val_sub, ":random_no", 10),
              (lt, ":random_no", 0),
              (is_between, ":obj_1_new_val", ":between_1", ":between_2"),
              (val_add, ":obj_1_new_val", ":adder"),
            (else_try),
              (neq, ":object", "$g_presentation_obj_sliders_2"),
              (val_sub, ":random_no", "$g_presentation_obj_sliders_2_val"),
              (val_sub, ":random_no", 10),
              (lt, ":random_no", 0),
              (is_between, ":obj_2_new_val", ":between_1", ":between_2"),
              (val_add, ":obj_2_new_val", ":adder"),
            (else_try),
              (neq, ":object", "$g_presentation_obj_sliders_3"),
              (val_sub, ":random_no", "$g_presentation_obj_sliders_3_val"),
              (val_sub, ":random_no", 10),
              (lt, ":random_no", 0),
              (is_between, ":obj_3_new_val", ":between_1", ":between_2"),
              (val_add, ":obj_3_new_val", ":adder"),
            (else_try),
              (is_between, ":obj_4_new_val", ":between_1", ":between_2"),
              (val_add, ":obj_4_new_val", ":adder"),
            (else_try),
              (val_add, ":difference", 1),
            (try_end),
          (try_end),
          (assign, "$g_presentation_obj_sliders_1_val", ":obj_1_new_val"),
          (assign, "$g_presentation_obj_sliders_2_val", ":obj_2_new_val"),
          (assign, "$g_presentation_obj_sliders_3_val", ":obj_3_new_val"),
          (assign, "$g_presentation_obj_sliders_4_val", ":obj_4_new_val"),
        (try_end),
        (overlay_set_val, "$g_presentation_obj_sliders_1", "$g_presentation_obj_sliders_1_val"),
        (overlay_set_val, "$g_presentation_obj_sliders_2", "$g_presentation_obj_sliders_2_val"),
        (overlay_set_val, "$g_presentation_obj_sliders_3", "$g_presentation_obj_sliders_3_val"),
        (overlay_set_val, "$g_presentation_obj_sliders_4", "$g_presentation_obj_sliders_4_val"),
        (assign, reg1, "$g_presentation_obj_sliders_1_val"),
        (str_store_string, s1, "str_reg1"),
        (overlay_set_text, "$g_presentation_obj_sliders_5", s1),
        (assign, reg1, "$g_presentation_obj_sliders_2_val"),
        (str_store_string, s1, "str_reg1"),
        (overlay_set_text, "$g_presentation_obj_sliders_6", s1),
        (assign, reg1, "$g_presentation_obj_sliders_3_val"),
        (str_store_string, s1, "str_reg1"),
        (overlay_set_text, "$g_presentation_obj_sliders_7", s1),
        (assign, reg1, "$g_presentation_obj_sliders_4_val"),
        (str_store_string, s1, "str_reg1"),
        (overlay_set_text, "$g_presentation_obj_sliders_8", s1),
        ]),
      ]),

  ("arena_training", prsntf_read_only|prsntf_manual_end_only, 0, [
      (ti_on_presentation_load,
       [(presentation_set_duration, 999999),
        (set_fixed_point_multiplier, 1000),
        (get_player_agent_no, ":player_agent"),
        (agent_get_kill_count, reg1, ":player_agent", 1),
        (str_store_string, s1, "@Number of men knocked down: {reg1}"),
        (create_text_overlay, "$g_presentation_obj_arena_training_1", s1),
        (overlay_set_color, "$g_presentation_obj_arena_training_1", 0xFFFFFF),
        (position_set_x, pos1, 10),
        (position_set_y, pos1, 700),
        (overlay_set_position, "$g_presentation_obj_arena_training_1", pos1),
        (assign, reg1, 0),
        (str_store_string, s1, "@Number of men left: {reg1}"),
        (create_text_overlay, "$g_presentation_obj_arena_training_2", s1),
        (overlay_set_color, "$g_presentation_obj_arena_training_2", 0xFFFFFF),
        (position_set_x, pos1, 10),
        (position_set_y, pos1, 670),
        (overlay_set_position, "$g_presentation_obj_arena_training_2", pos1),
        ]),
      (ti_on_presentation_run,
       [(get_player_agent_no, ":player_agent"),
        (agent_get_kill_count, reg1, ":player_agent", 1),
        (str_store_string, s1, "@Opponents Beaten: {reg1}"),
        (overlay_set_text, "$g_presentation_obj_arena_training_1", s1),
        (assign, ":num_left", "$g_arena_training_max_opponents"),
        (try_for_agents, ":agent_no"),
          (agent_is_human, ":agent_no"),
          (neg|agent_is_alive, ":agent_no"),
          (neq, ":agent_no", ":player_agent"),
          (val_sub, ":num_left", 1),
        (try_end),
        (assign, reg1, ":num_left"),
        (str_store_string, s1, "@Opponents Remaining: {reg1}"),
        (overlay_set_text, "$g_presentation_obj_arena_training_2", s1),
        ]),
      ]),

  ("retirement", 0, mesh_load_window,
   [
     (ti_on_presentation_load,
      [
        (presentation_set_duration, 999999),
        (set_fixed_point_multiplier, 1000),
        (create_button_overlay, "$g_presentation_obj_retirement_1", "@Push a knife into your chest.", tf_center_justify),
        (create_button_overlay, "$g_presentation_obj_retirement_2", "@Wait, maybe this is a bad idea.", tf_center_justify),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 80),
        (overlay_set_position, "$g_presentation_obj_retirement_1", pos1),
        (position_set_y, pos1, 40),
        (overlay_set_position, "$g_presentation_obj_retirement_2", pos1),
        (assign, ":total_effect", 0),
        #wealth
        (store_troop_gold, ":wealth", "trp_player"),
        (store_div, ":wealth_effect", ":wealth", 200),
        (val_add, ":total_effect", ":wealth_effect"),
        #ruled centers and friendly/enemy centers
        (assign, ":num_towns", 0),
        (assign, ":num_castles", 0),
        (assign, ":num_villages", 0),
        (assign, ":num_friendly_towns", 0),
        (assign, ":num_friendly_villages", 0),
        (assign, ":num_enemy_towns", 0),
        (assign, ":num_enemy_villages", 0),
        (try_for_range, ":center_no", centers_begin, centers_end),
          (party_get_slot, ":type", ":center_no", slot_party_type),
          (try_begin),
            (party_slot_eq, ":center_no", slot_town_lord, "trp_player"),
            (try_begin),
              (eq, ":type", spt_town),
              (val_add, ":num_towns", 1),
            (else_try),
              (eq, ":type", spt_castle),
              (val_add, ":num_castles", 1),
            (else_try),
              (val_add, ":num_villages", 1),
            (try_end),
          (try_end),
          (party_get_slot, ":relation", ":center_no", slot_center_player_relation),
          (try_begin),
            (ge, ":relation", 40),
            (try_begin),
              (eq, ":type", spt_town),
              (val_add, ":num_friendly_towns", 1),
            (else_try),
              (eq, ":type", spt_village),
              (val_add, ":num_friendly_villages", 1),
            (try_end),
          (else_try),
            (le, ":relation", -40),
            (try_begin),
              (eq, ":type", spt_town),
              (val_add, ":num_enemy_towns", 1),
            (else_try),
              (eq, ":type", spt_village),
              (val_add, ":num_enemy_villages", 1),
            (try_end),
          (try_end),
        (try_end),
        (store_mul, ":num_towns_effect", ":num_towns", 100),
        (store_mul, ":num_castles_effect", ":num_castles", 50),
        (store_mul, ":num_villages_effect", ":num_villages", 20),
        (store_add, ":num_centers", ":num_towns", ":num_castles"),
        (val_add, ":num_centers", ":num_villages"),
        (store_add, ":ruled_centers_effect", ":num_towns_effect", ":num_castles_effect"),
        (val_add, ":ruled_centers_effect", ":num_villages_effect"),
        (val_add, ":total_effect", ":ruled_centers_effect"),
        (store_mul, ":num_friendly_towns_effect", ":num_friendly_towns", 20),
        (store_mul, ":num_friendly_villages_effect", ":num_friendly_villages", 4),
        (store_add, ":num_friendly_centers", ":num_friendly_towns", ":num_friendly_villages"),
        (store_add, ":friendly_centers_effect", ":num_friendly_towns_effect", ":num_friendly_villages_effect"),
        (val_add, ":total_effect", ":friendly_centers_effect"),
        (store_mul, ":num_enemy_towns_effect", ":num_enemy_towns", -40),
        (store_mul, ":num_enemy_villages_effect", ":num_enemy_villages", -8),
        (store_add, ":num_enemy_centers", ":num_enemy_towns", ":num_enemy_villages"),
        (store_add, ":enemy_centers_effect", ":num_enemy_towns_effect", ":num_enemy_villages_effect"),
        (val_add, ":total_effect", ":enemy_centers_effect"),
        #inventory
        (assign, ":total_item_value", 0),
        (troop_get_inventory_capacity, ":capacity", "trp_player"),
        (try_for_range, ":i_inv", 0, ":capacity"),
          (troop_get_inventory_slot, ":item", "trp_player", ":i_inv"),
          (ge, ":item", 0),
          (store_item_value, ":item_value", ":item"),
          (val_add, ":total_item_value", ":item_value"),
        (try_end),
        (store_div, ":total_item_value_effect", ":total_item_value", 200),
        (val_add, ":total_effect", ":total_item_value_effect"),
        #renown
        (troop_get_slot, ":renown", "trp_player", slot_troop_renown),
        (store_div, ":renown_effect", ":renown", 1),
        (val_add, ":total_effect", ":renown_effect"),
        #enemies and friends
        (assign, ":num_enemies", 0),
        (assign, ":num_friends", 0),
        (try_for_range, ":troop_no", heroes_begin, heroes_end),
          (this_or_next|troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_hero),
          (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_kingdom_lady),
          (call_script, "script_troop_get_player_relation", ":troop_no"),
          (assign, ":relation", reg0),
          #(troop_get_slot, ":relation", ":troop_no", slot_troop_player_relation),
          (try_begin),
            (ge, ":relation", 40),
            (val_add, ":num_friends", 1),
          (else_try),
            (le, ":relation", -40),
            (val_add, ":num_enemies", 1),
          (try_end),
        (try_end),
        (store_mul, ":num_friends_effect", ":num_friends", 10),
        (val_add, ":total_effect", ":num_friends_effect"),
        (store_mul, ":num_enemies_effect", ":num_enemies", -10),
        (val_add, ":total_effect", ":num_enemies_effect"),
        #current day
        (store_current_day, ":cur_day"),
        (store_div, ":cur_day_effect", ":cur_day", -1),
        (val_add, ":total_effect", ":cur_day_effect"),
        #g_total_victories
        (store_mul, ":total_victories_effect", "$g_total_victories", 2),
        (val_add, ":total_effect", ":total_victories_effect"),
        #g_total_defeats
        (store_mul, ":total_defeats_effect", "$g_total_defeats", -3),
        (val_add, ":total_effect", ":total_defeats_effect"),
        #g_total_quests_completed
        (store_mul, ":total_quests_completed_effect", "$g_total_quests_completed", 4),
        (val_add, ":total_effect", ":total_quests_completed_effect"),
        #xp
        (troop_get_xp, ":xp", "trp_player"),
        (store_div, ":xp_effect", ":xp", 5000),
        (val_add, ":total_effect", ":xp_effect"),
        #companions joined / departed
        (assign, ":num_companions_joined", 0),
        (assign, ":num_companions_departed", 0),
        (try_for_range, ":troop_no", companions_begin, companions_end),
          (try_begin),
            (troop_slot_eq, ":troop_no", slot_troop_occupation, slto_player_companion),
            (val_add, ":num_companions_joined", 1),
          (else_try),
            (troop_slot_ge, ":troop_no", slot_troop_playerparty_history, 1),
            (val_add, ":num_companions_departed", 1),
          (try_end),
        (try_end),
        (store_div, ":num_companions_joined_effect", ":num_companions_joined", 2),
        (val_add, ":total_effect", ":num_companions_joined_effect"),
        (store_div, ":num_companions_departed_effect", ":num_companions_departed", -4),
        (val_add, ":total_effect", ":num_companions_departed_effect"),
        #difficulty
        (get_average_game_difficulty, ":difficulty"),
        (assign, ":difficulty_effect", ":total_effect"),
        (val_mul, ":total_effect", ":difficulty"),
        (val_div, ":total_effect", 75),
        (val_mul, ":total_effect", ":difficulty"),
        (val_div, ":total_effect", 75),
        (store_sub, ":difficulty_effect", ":total_effect", ":difficulty_effect"),

        (assign, reg5, ":cur_day"),
        (store_character_level, reg4, "trp_player"),
        (troop_get_slot, reg50, "trp_player", slot_troop_age),
        (create_text_overlay, reg1, "@With a knife in your hand, you are ready to commit suicide at an age of {reg50}, at level {reg4} after {reg5} days.", tf_center_justify),
        (position_set_x, pos1, 700),
        (position_set_y, pos1, 700),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 950),
        (position_set_y, pos1, 950),
        (overlay_set_size, reg1, pos1),
##        (overlay_set_color, reg1, 0),
        (create_text_overlay, reg2, "@Effect on Score", tf_center_justify),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg2, pos1),
        (position_set_x, pos1, 850),
        (position_set_y, pos1, 670),
        (overlay_set_position, reg2, pos1),
        (assign, reg0, ":num_centers"),
        (create_text_overlay, reg1, "@Settlements owned by you: {reg0}", 0),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 600),
        (position_set_y, pos1, 650),
        (overlay_set_position, reg1, pos1),
        (assign, reg0, ":ruled_centers_effect"),
        (create_text_overlay, reg1, "@{!}{reg0?+:}{reg0}", tf_center_justify),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 850),
        (position_set_y, pos1, 650),
        (overlay_set_position, reg1, pos1),
        (try_begin),
          (gt, reg0, 0),
          (overlay_set_color, reg1, 0x00AA00),
        (try_end),

        (assign, reg0, ":num_friendly_centers"),
        (create_text_overlay, reg1, "@Friendly Settlements: {reg0}", 0),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 600),
        (position_set_y, pos1, 630),
        (overlay_set_position, reg1, pos1),
        (assign, reg0, ":friendly_centers_effect"),
        (create_text_overlay, reg1, "@{!}{reg0?+:}{reg0}", tf_center_justify),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 850),
        (position_set_y, pos1, 630),
        (overlay_set_position, reg1, pos1),
        (try_begin),
          (gt, reg0, 0),
          (overlay_set_color, reg1, 0x00AA00),
        (try_end),

        (assign, reg0, ":num_enemy_centers"),
        (create_text_overlay, reg1, "@Hostile Settlements: {reg0}", 0),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 600),
        (position_set_y, pos1, 610),
        (overlay_set_position, reg1, pos1),
        (assign, reg0, ":enemy_centers_effect"),
        (create_text_overlay, reg1, "str_reg0", tf_center_justify),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 850),
        (position_set_y, pos1, 610),
        (overlay_set_position, reg1, pos1),
        (try_begin),
          (lt, reg0, 0),
          (overlay_set_color, reg1, 0xFF0000),
        (try_end),

        (assign, reg0, ":num_friends"),
        (create_text_overlay, reg1, "@Friendly Lords: {reg0}", 0),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 600),
        (position_set_y, pos1, 590),
        (overlay_set_position, reg1, pos1),
        (assign, reg0, ":num_friends_effect"),
        (create_text_overlay, reg1, "@{!}{reg0?+:}{reg0}", tf_center_justify),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 850),
        (position_set_y, pos1, 590),
        (overlay_set_position, reg1, pos1),
        (try_begin),
          (gt, reg0, 0),
          (overlay_set_color, reg1, 0x00AA00),
        (try_end),

        (assign, reg0, ":num_enemies"),
        (create_text_overlay, reg1, "@Enemy Lords: {reg0}", 0),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 600),
        (position_set_y, pos1, 570),
        (overlay_set_position, reg1, pos1),
        (assign, reg0, ":num_enemies_effect"),
        (create_text_overlay, reg1, "str_reg0", tf_center_justify),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 850),
        (position_set_y, pos1, 570),
        (overlay_set_position, reg1, pos1),
        (try_begin),
          (lt, reg0, 0),
          (overlay_set_color, reg1, 0xFF0000),
        (try_end),

        (assign, reg0, "$g_total_victories"),
        (create_text_overlay, reg1, "@Victories: {reg0}", 0),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 600),
        (position_set_y, pos1, 550),
        (overlay_set_position, reg1, pos1),
        (assign, reg0, ":total_victories_effect"),
        (create_text_overlay, reg1, "@{!}{reg0?+:}{reg0}", tf_center_justify),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 850),
        (position_set_y, pos1, 550),
        (overlay_set_position, reg1, pos1),
        (try_begin),
          (gt, reg0, 0),
          (overlay_set_color, reg1, 0x00AA00),
        (try_end),

        (assign, reg0, "$g_total_defeats"),
        (create_text_overlay, reg1, "@Defeats: {reg0}", 0),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 600),
        (position_set_y, pos1, 530),
        (overlay_set_position, reg1, pos1),
        (assign, reg0, ":total_defeats_effect"),
        (create_text_overlay, reg1, "str_reg0", tf_center_justify),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 850),
        (position_set_y, pos1, 530),
        (overlay_set_position, reg1, pos1),
        (try_begin),
          (lt, reg0, 0),
          (overlay_set_color, reg1, 0xFF0000),
        (try_end),

        (assign, reg0, "$g_total_quests_completed"),
        (create_text_overlay, reg1, "@Quests Completed: {reg0}", 0),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 600),
        (position_set_y, pos1, 510),
        (overlay_set_position, reg1, pos1),
        (assign, reg0, ":total_quests_completed_effect"),
        (create_text_overlay, reg1, "@{!}{reg0?+:}{reg0}", tf_center_justify),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 850),
        (position_set_y, pos1, 510),
        (overlay_set_position, reg1, pos1),
        (try_begin),
          (gt, reg0, 0),
          (overlay_set_color, reg1, 0x00AA00),
        (try_end),

        (assign, reg0, ":num_companions_joined"),
        (create_text_overlay, reg1, "@Companions Found: {reg0}", 0),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 600),
        (position_set_y, pos1, 490),
        (overlay_set_position, reg1, pos1),
        (assign, reg0, ":num_companions_joined_effect"),
        (create_text_overlay, reg1, "@{!}{reg0?+:}{reg0}", tf_center_justify),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 850),
        (position_set_y, pos1, 490),
        (overlay_set_position, reg1, pos1),
        (try_begin),
          (gt, reg0, 0),
          (overlay_set_color, reg1, 0x00AA00),
        (try_end),

        (assign, reg0, ":num_companions_departed"),
        (create_text_overlay, reg1, "@Companions Lost/Departed: {reg0}", 0),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 600),
        (position_set_y, pos1, 470),
        (overlay_set_position, reg1, pos1),
        (assign, reg0, ":num_companions_departed_effect"),
        (create_text_overlay, reg1, "str_reg0", tf_center_justify),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 850),
        (position_set_y, pos1, 470),
        (overlay_set_position, reg1, pos1),
        (try_begin),
          (lt, reg0, 0),
          (overlay_set_color, reg1, 0xFF0000),
        (try_end),

        (assign, reg0, ":wealth"),
        (create_text_overlay, reg1, "@Wealth: {reg0} denars", 0),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 600),
        (position_set_y, pos1, 450),
        (overlay_set_position, reg1, pos1),
        (assign, reg0, ":wealth_effect"),
        (create_text_overlay, reg1, "@{!}{reg0?+:}{reg0}", tf_center_justify),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 850),
        (position_set_y, pos1, 450),
        (overlay_set_position, reg1, pos1),
        (try_begin),
          (gt, reg0, 0),
          (overlay_set_color, reg1, 0x00AA00),
        (try_end),

        (assign, reg0, ":total_item_value"),
        (create_text_overlay, reg1, "@Inventory: {reg0} denars", 0),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 600),
        (position_set_y, pos1, 430),
        (overlay_set_position, reg1, pos1),
        (assign, reg0, ":total_item_value_effect"),
        (create_text_overlay, reg1, "@{!}{reg0?+:}{reg0}", tf_center_justify),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 850),
        (position_set_y, pos1, 430),
        (overlay_set_position, reg1, pos1),
        (try_begin),
          (gt, reg0, 0),
          (overlay_set_color, reg1, 0x00AA00),
        (try_end),

        (assign, reg0, ":renown"),
        (create_text_overlay, reg1, "@Renown: {reg0}", 0),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 600),
        (position_set_y, pos1, 410),
        (overlay_set_position, reg1, pos1),
        (assign, reg0, ":renown_effect"),
        (create_text_overlay, reg1, "@{!}{reg0?+:}{reg0}", tf_center_justify),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 850),
        (position_set_y, pos1, 410),
        (overlay_set_position, reg1, pos1),
        (try_begin),
          (gt, reg0, 0),
          (overlay_set_color, reg1, 0x00AA00),
        (try_end),

        (assign, reg0, ":xp"),
        (create_text_overlay, reg1, "@Experience: {reg0}", 0),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 600),
        (position_set_y, pos1, 390),
        (overlay_set_position, reg1, pos1),
        (assign, reg0, ":xp_effect"),
        (create_text_overlay, reg1, "@{!}{reg0?+:}{reg0}", tf_center_justify),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 850),
        (position_set_y, pos1, 390),
        (overlay_set_position, reg1, pos1),
        (try_begin),
          (gt, reg0, 0),
          (overlay_set_color, reg1, 0x00AA00),
        (try_end),

        (assign, reg0, ":cur_day"),
        (create_text_overlay, reg1, "@Days Passed: {reg0}", 0),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 600),
        (position_set_y, pos1, 370),
        (overlay_set_position, reg1, pos1),
        (assign, reg0, ":cur_day_effect"),
        (create_text_overlay, reg1, "str_reg0", tf_center_justify),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 850),
        (position_set_y, pos1, 370),
        (overlay_set_position, reg1, pos1),
        (try_begin),
          (lt, reg0, 0),
          (overlay_set_color, reg1, 0xFF0000),
        (try_end),

        (assign, reg0, ":difficulty"),
        (create_text_overlay, reg1, "@Difficulty: {reg0}%", 0),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 600),
        (position_set_y, pos1, 350),
        (overlay_set_position, reg1, pos1),
        (assign, reg0, ":difficulty_effect"),
        (assign, reg3, reg0),
        (val_max, reg3, 0),
        (create_text_overlay, reg1, "@{!}{reg3?+:}{reg0}", tf_center_justify),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 850),
        (position_set_y, pos1, 350),
        (overlay_set_position, reg1, pos1),
        (try_begin),
          (gt, reg0, 0),
          (overlay_set_color, reg1, 0x00AA00),
        (else_try),
          (lt, reg0, 0),
          (overlay_set_color, reg1, 0xFF0000),
        (try_end),

        (assign, reg0, ":total_effect"),
        (create_text_overlay, reg1, "@TOTAL SCORE: {reg0}", tf_center_justify),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 320),
        (overlay_set_position, reg1, pos1),

        (assign, ":total_villages", 0),
        (assign, ":total_castles", 0),
        (assign, ":total_towns", 0),
        (assign, ":total_village_rels", 0),
        (assign, ":total_castle_rels", 0),
        (assign, ":total_town_rels", 0),
        (try_for_range, ":cur_center_no", centers_begin, centers_end),
          (try_begin),
            (party_slot_eq, ":cur_center_no", slot_town_lord, "trp_player"),
            (try_begin),
              (party_slot_eq, ":cur_center_no", slot_party_type, spt_town),
              (val_add, ":total_towns", 1),
            (else_try),
              (party_slot_eq, ":cur_center_no", slot_party_type, spt_castle),
              (val_add, ":total_castles", 1),
            (else_try),
              (val_add, ":total_villages", 1),
            (try_end),
          (else_try),
            (party_get_slot, ":center_relation", ":cur_center_no", slot_center_player_relation),
            (gt, ":center_relation", 0),
            (try_begin),
              (party_slot_eq, ":cur_center_no", slot_party_type, spt_town),
              (val_add, ":total_town_rels", ":center_relation"),
            (else_try),
              (party_slot_eq, ":cur_center_no", slot_party_type, spt_castle),
              (val_add, ":total_castle_rels", ":center_relation"),
            (else_try),
              (val_add, ":total_village_rels", ":center_relation"),
            (try_end),
          (try_end),
        (try_end),
        (try_begin),
          (gt, ":total_towns", 0),
          (store_random_in_range, ":random_town", 0, ":total_towns"),
          (try_for_range, ":cur_center_no", towns_begin, towns_end),
            (party_slot_eq, ":cur_center_no", slot_town_lord, "trp_player"),
            (val_sub, ":random_town", 1),
            (lt, ":random_town", 0),
            (str_store_party_name, s9, ":cur_center_no"),
          (try_end),
        (else_try),
          (gt, ":total_town_rels", 0),
          (store_random_in_range, ":random_town_rel", 0, ":total_town_rels"),
          (try_for_range, ":cur_center_no", towns_begin, towns_end),
            (party_get_slot, ":center_relation", ":cur_center_no", slot_center_player_relation),
            (gt, ":center_relation", 0),
            (val_sub, ":random_town_rel", ":center_relation"),
            (lt, ":random_town_rel", 0),
            (str_store_party_name, s9, ":cur_center_no"),
          (try_end),
        (else_try),
          (store_random_in_range, ":random_town", towns_begin, towns_end),
          (str_store_party_name, s9, ":random_town"),
        (try_end),
        (try_begin),
          (gt, ":total_castles", 0),
          (store_random_in_range, ":random_castle", 0, ":total_castles"),
          (try_for_range, ":cur_center_no", castles_begin, castles_end),
            (party_slot_eq, ":cur_center_no", slot_town_lord, "trp_player"),
            (val_sub, ":random_castle", 1),
            (lt, ":random_castle", 0),
            (str_store_party_name, s8, ":cur_center_no"),
          (try_end),
        (else_try),
          (gt, ":total_castle_rels", 0),
          (store_random_in_range, ":random_castle_rel", 0, ":total_castle_rels"),
          (try_for_range, ":cur_center_no", castles_begin, castles_end),
            (party_get_slot, ":center_relation", ":cur_center_no", slot_center_player_relation),
            (gt, ":center_relation", 0),
            (val_sub, ":random_castle_rel", ":center_relation"),
            (lt, ":random_castle_rel", 0),
            (str_store_party_name, s8, ":cur_center_no"),
          (try_end),
        (else_try),
          (store_random_in_range, ":random_castle", castles_begin, castles_end),
          (str_store_party_name, s8, ":random_castle"),
        (try_end),
        (try_begin),
          (gt, ":total_villages", 0),
          (store_random_in_range, ":random_village", 0, ":total_villages"),
          (try_for_range, ":cur_center_no", villages_begin, villages_end),
            (party_slot_eq, ":cur_center_no", slot_town_lord, "trp_player"),
            (val_sub, ":random_village", 1),
            (lt, ":random_village", 0),
            (str_store_party_name, s7, ":cur_center_no"),
          (try_end),
        (else_try),
          (gt, ":total_village_rels", 0),
          (store_random_in_range, ":random_village_rel", 0, ":total_village_rels"),
          (try_for_range, ":cur_center_no", villages_begin, villages_end),
            (party_get_slot, ":center_relation", ":cur_center_no", slot_center_player_relation),
            (gt, ":center_relation", 0),
            (val_sub, ":random_village_rel", ":center_relation"),
            (lt, ":random_village_rel", 0),
            (str_store_party_name, s7, ":cur_center_no"),
          (try_end),
        (else_try),
          (store_random_in_range, ":random_village", villages_begin, villages_end),
          (str_store_party_name, s7, ":random_village"),
        (try_end),

        (try_begin),
          (lt, ":total_effect", 100),
          (create_mesh_overlay_with_tableau_material, reg1, -1, "tableau_retirement_troop", 0),
          (str_store_string, s0, "str_retirement_text_1"),
        (else_try),
          (lt, ":total_effect", 200),
          (create_mesh_overlay_with_tableau_material, reg1, -1, "tableau_retirement_troop", 1),
          (str_store_string, s0, "str_retirement_text_2"),
        (else_try),
          (lt, ":total_effect", 400),
          (create_mesh_overlay_with_tableau_material, reg1, -1, "tableau_retirement_troop", 2),
          (str_store_string, s0, "str_retirement_text_3"),
        (else_try),
          (lt, ":total_effect", 700),
          (create_mesh_overlay_with_tableau_material, reg1, -1, "tableau_retirement_troop", 3),
          (str_store_string, s0, "str_retirement_text_4"),
        (else_try),
          (lt, ":total_effect", 1200),
          (create_mesh_overlay_with_tableau_material, reg1, -1, "tableau_retirement_troop", 4),
          (str_store_string, s0, "str_retirement_text_5"),
        (else_try),
          (lt, ":total_effect", 1850),
          (create_mesh_overlay_with_tableau_material, reg1, -1, "tableau_retirement_troop", 5),
          (str_store_string, s0, "str_retirement_text_6"),
        (else_try),
          (lt, ":total_effect", 2500),
          (create_mesh_overlay_with_tableau_material, reg1, -1, "tableau_retirement_troop", 6),
          (str_store_string, s0, "str_retirement_text_7"),
        (else_try),
          (lt, ":total_effect", 3500),
          (create_mesh_overlay_with_tableau_material, reg1, -1, "tableau_retirement_troop", 7),
          (str_store_string, s0, "str_retirement_text_8"),
        (else_try),
          (lt, ":total_effect", 5000),
          (create_mesh_overlay_with_tableau_material, reg1, -1, "tableau_retirement_troop", 8),
          (str_store_string, s0, "str_retirement_text_9"),
        (else_try),
          (create_mesh_overlay_with_tableau_material, reg1, -1, "tableau_retirement_troop", 9),
          (str_store_string, s0, "str_retirement_text_10"),
        (try_end),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, 120),
        (overlay_set_position, reg1, pos1),

        (create_text_overlay, reg1, s0, tf_double_space|tf_scrollable),
        (position_set_x, pos1, 600),
        (position_set_y, pos1, 120),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 360),
        (position_set_y, pos1, 190),
        (overlay_set_area_size, reg1, pos1),
        (position_set_x, pos1, 800),
        (position_set_y, pos1, 800),
        (overlay_set_size, reg1, pos1),
        ]),
     (ti_on_presentation_event_state_change,
      [
        (store_trigger_param_1, ":object"),
        (try_begin),
          (eq, ":object", "$g_presentation_obj_retirement_1"),
          (assign, "$temp",0),
          (jump_to_menu, "mnu_death_waits"),
          (start_presentation, "prsnt_game_credits"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_retirement_2"),
          (presentation_set_duration, 0),
          (change_screen_return),
        (try_end),
        ]),
     ]),


("budget_report", 0, mesh_load_window,[
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    (try_begin),
        (eq, "$g_apply_budget_report_to_gold", 1),
        (play_sound, "snd_money_received", 1),
        ##update recruitment limit
        (try_begin),
            (eq, "$g_rank", 1),
            (troop_set_slot, "trp_global_variables", g_player_recruitement_limit, gold_tribue),
            (display_message, "@Recruitment funds updated!", message_alert),
        (else_try),
            (eq, "$g_rank", 2),
            (troop_set_slot, "trp_global_variables", g_player_recruitement_limit, gold_praefect),
            (display_message, "@Recruitment funds updated!", message_alert),
        (else_try),
            (eq, "$g_rank", 3),
            (troop_set_slot, "trp_global_variables", g_player_recruitement_limit, gold_legate),
            (display_message, "@Recruitment funds updated!", message_alert),
        (try_end),
        (troop_set_slot, "trp_global_variables", g_last_week_income, 0),#reset
    (try_end),

    (try_begin),
        (eq, "$g_apply_budget_report_to_gold", 0),
        (create_text_overlay, reg1, "@Settlement details:", 0),
        (overlay_set_color, reg1, 0x000000), #Black se ve bien
        (position_set_x, pos1, 50),
        (position_set_y, pos1, 625),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos2, 900),
        (position_set_y, pos2, 900),
        (overlay_set_size, reg1, pos2),
        (copy_position, pos2, pos1),
        (position_get_x, ":x", pos2),
        (val_add, ":x", 200),
        (position_set_x, pos2, ":x"),
        (position_get_y, ":y", pos2),
        (val_add, ":y", 3),
        (position_set_y, pos2, ":y"),
        (create_check_box_overlay, reg2, "mesh_checkbox_off", "mesh_checkbox_on"),
        (overlay_set_position, reg2, pos2),
        (position_set_x, pos2, 900),
        (position_set_y, pos2, 900),
        (overlay_set_size, reg2, pos2),
        (overlay_set_val, reg2, "$g_presentation_credits_obj_1_alpha"),
        (assign, "$g_presentation_credits_obj_1", reg2),

        (create_text_overlay, reg1, "@Latifundia details:", 0),
        (overlay_set_color, reg1, 0x000000), #Black se ve bien
        (position_set_x, pos1, 50),
        (position_set_y, pos1, 625+24),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos2, 900),
        (position_set_y, pos2, 900),
        (overlay_set_size, reg1, pos2),
        (copy_position, pos2, pos1),
        (position_get_x, ":x", pos2),
        (val_add, ":x", 200),
        (position_set_x, pos2, ":x"),
        (position_get_y, ":y", pos2),
        (val_add, ":y", 3),
        (position_set_y, pos2, ":y"),
        (create_check_box_overlay, reg2, "mesh_checkbox_off", "mesh_checkbox_on"),
        (overlay_set_position, reg2, pos2),
        (position_set_x, pos2, 900),
        (position_set_y, pos2, 900),
        (overlay_set_size, reg2, pos2),
        (overlay_set_val, reg2, "$g_presentation_credits_obj_2_alpha"),
        (assign, "$g_presentation_credits_obj_2", reg2),

        (create_text_overlay, reg1, "@Workshop details:", 0),
        (overlay_set_color, reg1, 0x000000), #Black se ve bien
        (position_set_x, pos1, 50),
        (position_set_y, pos1, 625+24+24),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos2, 900),
        (position_set_y, pos2, 900),
        (overlay_set_size, reg1, pos2),
        (copy_position, pos2, pos1),
        (position_get_x, ":x", pos2),
        (val_add, ":x", 200),
        (position_set_x, pos2, ":x"),
        (position_get_y, ":y", pos2),
        (val_add, ":y", 3),
        (position_set_y, pos2, ":y"),
        (create_check_box_overlay, reg2, "mesh_checkbox_off", "mesh_checkbox_on"),
        (overlay_set_position, reg2, pos2),
        (position_set_x, pos2, 900),
        (position_set_y, pos2, 900),
        (overlay_set_size, reg2, pos2),
        (overlay_set_val, reg2, "$g_presentation_credits_obj_3_alpha"),
        (assign, "$g_presentation_credits_obj_3", reg2),
    (try_end),

    ##trade BEGIN
    (try_begin),##trade with india
        (eq, "$g_apply_budget_report_to_gold", 1),#only apply if triggered
        (troop_slot_ge, "trp_diplomat_india", slot_india_sea_mission_in_progress, 1),
        (neg|troop_slot_ge, "trp_diplomat_india", slot_india_sea_mission_in_progress, 3),
        (troop_get_slot, ":progress", "trp_diplomat_india", slot_india_sea_mission_in_progress),
        (val_add, ":progress", 1),
        (troop_set_slot, "trp_diplomat_india", slot_india_sea_mission_in_progress, ":progress"),
    (try_end),##end trade with india


    (try_begin),##trade with india
        (eq, "$g_apply_budget_report_to_gold", 1),#only apply if triggered
        (troop_slot_ge, "trp_diplomat_india", slot_india_land_mission_in_progress, 1),
        (neg|troop_slot_ge, "trp_diplomat_india", slot_india_land_mission_in_progress, 3),
        (troop_get_slot, ":progress", "trp_diplomat_india", slot_india_land_mission_in_progress),
        (val_add, ":progress", 1),
        (troop_set_slot, "trp_diplomat_india", slot_india_land_mission_in_progress, ":progress"),
    (try_end),##end trade with india

    (try_begin),##expedition from plinius
        (eq, "$g_apply_budget_report_to_gold", 1),#only apply if triggered
        (troop_slot_ge, "trp_plinius_elder", slot_expedition_start_time_1, 1),
        (troop_get_slot, ":hours", "trp_plinius_elder", slot_expedition_start_time_1),
        (store_current_hours, ":cur_hours"),
        (val_sub, ":cur_hours", ":hours"),
        (val_div, ":cur_hours", 24),
        (ge, ":cur_hours", 7),
        (assign, reg4, ":cur_hours"),
        (display_message, "@There is news of your expedition to the southern Lands. Talk with Plinius at Domus Augusti. ({reg4} days)"),
    (try_end),##end expedition from plinius
    (try_begin),##expedition from plinius
        (eq, "$g_apply_budget_report_to_gold", 1),#only apply if triggered
        (troop_slot_ge, "trp_plinius_elder", slot_expedition_start_time_2, 1),
        (troop_get_slot, ":hours", "trp_plinius_elder", slot_expedition_start_time_2),
        (store_current_hours, ":cur_hours"),
        (val_sub, ":cur_hours", ":hours"),
        (val_div, ":cur_hours", 24),
        (ge, ":cur_hours", 7),
        (assign, reg4, ":cur_hours"),
        (display_message, "@There is news of your expedition to the eastern Lands. Talk with Plinius at Domus Augusti. ({reg4} days)"),
    (try_end),##end expedition from plinius

    (try_begin),
        (troop_slot_ge, "trp_diplomat_india", slot_india_land_mission_in_progress, 3),
        (display_message, "@There is news of your land caravan sent to Kushan. Speak to the ambassador at Domus Augusti.", color_good_news),
    (else_try),
        (troop_slot_ge, "trp_diplomat_india", slot_india_sea_mission_in_progress, 3),
        (display_message, "@There is news of your merchant fleet sent to Kushan. Speak to the ambassador at Domus Augusti.", color_good_news),
    (try_end),
     ###TRADE END

    ##SETUP SCREEN

    (create_text_overlay, reg1, "str_weekly_budget", tf_center_justify),
    (position_set_x, pos1, 1500),
    (position_set_y, pos1, 1500),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 260),
    (try_begin),
        (eq, "$g_apply_budget_report_to_gold", 1),
        (position_set_y, pos1, 625),
    (else_try),
        (position_set_y, pos1, 705),
    (try_end),
    (overlay_set_position, reg1, pos1),

    ##SETUP CONTAINER with LIST
    (str_clear, s0),
    (create_text_overlay, "$g_presentation_obj_bugdet_report_container", s0, tf_scrollable_style_2),
    (position_set_x, pos1, 0),
    (position_set_y, pos1, 100),
    (overlay_set_position, "$g_presentation_obj_bugdet_report_container", pos1),
    (position_set_x, pos1, 505),
    (position_set_y, pos1, 515),
    (overlay_set_area_size, "$g_presentation_obj_bugdet_report_container", pos1),
    (set_container_overlay, "$g_presentation_obj_bugdet_report_container"),

    #get variables for tax inefficiency
    (store_skill_level, reg1, "skl_trade", "trp_player"),
    (store_sub, ":tax_efficiency_loss_ratio_per_center", 10, reg1),

    (store_div, ":num_centers_needed_for_efficiency_loss", reg1, 2),
    (val_add, ":tax_efficiency_loss_ratio_per_center", 2),

    #census also helps on an induvidual level
    (try_begin),
        (eq, "$conducted_census", 1),
        (val_div, ":tax_efficiency_loss_ratio_per_center", 2),
    (try_end),

    #corruption on imperial level is now handled elsewhere
    #only apply this for non feudal ones
    (try_begin),
        (neg|faction_slot_eq, "fac_player_supporters_faction", slot_faction_government_type, gov_imperial),
        (gt, "$g_player_minister", 0),
        # (troop_get_slot, ":relation", "$g_player_minister", slot_troop_player_relation),
        (call_script, "script_troop_get_player_relation", "$g_player_minister"),
        (assign, ":relation", reg0),
        (try_begin),
            (ge, ":relation", 75), #high relation = less tax loss
            (val_add, ":num_centers_needed_for_efficiency_loss", 2),
            (val_sub, ":tax_efficiency_loss_ratio_per_center", 1),
        (else_try),
            (lt, ":relation", 15),
            (val_sub, ":num_centers_needed_for_efficiency_loss", 1),
            (val_add, ":tax_efficiency_loss_ratio_per_center", 1),
        (else_try),
            (lt, ":relation", -5),
            (val_sub, ":num_centers_needed_for_efficiency_loss", 2),
            (val_add, ":tax_efficiency_loss_ratio_per_center", 2),
        (try_end),
    (try_end),
    (try_begin),
        (eq, "$control_tax", 1), #tax control
        (neg|faction_slot_eq, "fac_player_supporters_faction", slot_faction_government_type, gov_imperial),
        (val_add, ":num_centers_needed_for_efficiency_loss", 2),
    (try_end),

    (val_clamp, ":num_centers_needed_for_efficiency_loss", 1, 11),
    (val_clamp, ":tax_efficiency_loss_ratio_per_center", 1, 51),

    # (assign, reg1, ":num_centers_needed_for_efficiency_loss"),
    # (display_message, "@num_centers_needed_for_efficiency_loss: {reg1}"),

    #calculate length of the list
    (assign, ":num_lines", 0),
    (try_begin),
        (neq, "$g_is_emperor", 1),#not for emperor as it is already handled in the imperial bugdet
        (try_for_range, ":fac", kingdoms_begin, kingdoms_end),
            (faction_slot_eq, ":fac", slot_faction_player_tributary, 1),
            (val_add, ":num_lines", 1),
        (try_end),
        (try_for_range, ":fac", minor_kingdoms_begin, minor_kingdoms_end),
            (faction_slot_eq, ":fac", slot_faction_player_tributary, 1),
            (val_add, ":num_lines", 1),
        (try_end),
    (try_end),

    ##
    # (try_begin),##if player is emperor, the whole empire will count to tax efficiency
    #     (eq, "$g_is_emperor", 1),
    #     (faction_get_slot, ":castles", "$players_kingdom", slot_faction_num_castles),
    #     (faction_get_slot, ":towns", "$players_kingdom", slot_faction_num_towns),
    #     (store_add, ":num_owned_center_values_for_tax_efficiency", ":castles", ":towns"),
    # (else_try),
    (assign, ":num_owned_center_values_for_tax_efficiency", 0),
    # (try_end),

    (assign, ":all_centers_accumulated_total", 0),
    (assign, ":all_centers_accumulated_taxes_and_rents", 0),
    (assign, ":all_taxes_paid", 0),
    (try_for_range, ":center_no", centers_begin, centers_end),
        (try_begin),
            (party_slot_ge, ":center_no", slot_center_has_latifundium, 1),
            (eq, "$g_presentation_credits_obj_2_alpha", 1),
            (val_add, ":num_lines", 1),
        (try_end),
        (try_begin),
            (party_slot_ge, ":center_no", slot_center_player_enterprise, 1),
            (eq, "$g_presentation_credits_obj_3_alpha", 1),
            (val_add, ":num_lines", 1),
        (try_end),
        (party_slot_eq, ":center_no", slot_town_lord, "trp_player"),
        (try_begin),
            (eq, "$g_presentation_credits_obj_1_alpha", 1),
            (val_add, ":num_lines", 1),
        (try_end),
        (try_begin),
            (party_slot_ge, ":center_no", slot_center_has_silver_mine, 1),
            (eq, "$g_presentation_credits_obj_1_alpha", 1),
            (val_add, ":num_lines", 1),
        (try_end),
        # (try_begin),
            # (neq, "$g_is_emperor", 1),
        (val_add, ":num_owned_center_values_for_tax_efficiency", 1),
        # (try_end),
        (try_begin),#tariffs
            (is_between, ":center_no", towns_begin, towns_end),
            (eq, "$g_presentation_credits_obj_1_alpha", 1),
            (val_add, ":num_lines", 1),
            # (try_begin),
            #     (neq, "$g_is_emperor", 1),
            #     (val_add, ":num_owned_center_values_for_tax_efficiency", 1),
            # (try_end),
        (try_end),
    (try_end),
    # (assign, reg1, ":num_owned_center_values_for_tax_efficiency"),
    # (display_message, "@num_owned_center_values_for_tax_efficiency: {reg1}"),

    (try_begin),
        (eq, "$g_presentation_credits_obj_1_alpha", 0),
        (val_add, ":num_lines", 1),
    (try_end),
    (try_begin),
        (eq, "$g_presentation_credits_obj_2_alpha", 0),
        (val_add, ":num_lines", 1),
    (try_end),
    (try_begin),
        (eq, "$g_presentation_credits_obj_3_alpha", 0),
        (val_add, ":num_lines", 1),
    (try_end),

    (try_begin),
        (gt, "$players_kingdom", 0),
        (neq, "$players_kingdom", "fac_player_supporters_faction"),
        (neq, "$players_kingdom", "fac_player_faction"),
        (eq, "$player_has_homage", 0),
        (val_add, ":num_lines", 1),
    (try_end),
    (try_begin),
        (gt, ":num_owned_center_values_for_tax_efficiency", ":num_centers_needed_for_efficiency_loss"),
        #gt accumulated total is ignored
        (val_add, ":num_lines", 1),
    (try_end),

    (try_for_parties, ":party_no"),
        (party_is_active, ":party_no"),
        (assign, ":garrison_troop", 0),
        (party_get_template_id, ":ptid", ":party_no"),
        (try_begin),
            (this_or_next|party_slot_eq, ":party_no", slot_party_type, spt_town),
            (party_slot_eq, ":party_no", slot_party_type, spt_castle),
            (party_slot_eq, ":party_no", slot_town_lord, "trp_player"),
            (assign, ":garrison_troop", 1),
        (else_try),
            (this_or_next|party_slot_eq, ":party_no", slot_party_type, spt_town),
            (party_slot_eq, ":party_no", slot_party_type, spt_castle),
            (neg|party_slot_ge, ":party_no", slot_town_lord, 1), #unassigned
            (store_faction_of_party, ":center_faction", ":party_no"),
            (eq, ":center_faction", "fac_player_supporters_faction"),
            (faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
            (assign, ":garrison_troop", 1),
        (try_end),
        ##diplomacy begin
        (assign, ":patrol_troop", 0),
        (try_begin),
            (party_slot_eq, ":party_no",slot_party_type, spt_patrol),
            (party_slot_eq, ":party_no", dplmc_slot_party_mission_diplomacy, "trp_player"),
            (assign, ":patrol_troop", 1),
        (try_end),

        (try_begin),
            (eq, "$g_is_emperor", 0),#not emperor
            (party_slot_eq, ":party_no",slot_party_type, spt_kingdom_hero_party),
            (party_stack_get_troop_id, ":party_leader", ":party_no", 0),
            (this_or_next|troop_slot_eq, ":party_leader", slot_troop_legion, 13),
            (this_or_next|troop_slot_eq, ":party_leader", slot_troop_aux, "pt_player_aux_inf"),
            (troop_slot_eq, ":party_leader", slot_troop_aux, "pt_player_aux_cav"),
            # (neg|troop_slot_ge, "trp_kingdom_7_lord", slot_troop_player_relation, 10),
            (assign, ":patrol_troop", 1),
        (try_end),

        (assign, ":hero_troop", 0),
        (try_begin),
            (eq, ":ptid", "pt_hero_party"),
            (assign, ":hero_troop", 1),
        (try_end),

        (this_or_next|eq, ":party_no", "p_main_party"),
        (this_or_next|party_slot_eq, ":party_no", slot_party_type, spt_player_camp),
        (this_or_next|party_slot_eq, ":party_no", slot_party_type, spt_companion_raider),
        (this_or_next|eq, ":patrol_troop", 1),
        (this_or_next|eq, ":hero_troop", 1),
        ##diplomacy end
        (eq, ":garrison_troop", 1),
        (val_add, ":num_lines", 1), #include empty towns/castles
    (try_end),
    (try_begin),
        (gt, "$g_player_debt_to_party_members", 0),
        (val_add, ":num_lines", 2), #include new debt line
    (try_end),
    ##new lines
    (try_begin),##salery
        (ge, "$g_rank", 1),
        (val_add, ":num_lines", 1), #
    (try_end),
    (try_begin),##quest about investment
        (eq, "$g_apply_budget_report_to_gold", 1),
        (neg|check_quest_active, "qst_investment"),
        (quest_slot_ge, "qst_investment", slot_quest_target_amount, 1),
        (store_current_day, ":cur_day"),
        (val_sub, ":cur_day", 7),
        (quest_slot_ge, "qst_investment", slot_quest_current_state, ":cur_day"),
        (val_add, ":num_lines", 1), #
    (try_end),
    (try_begin),##Domus Augusti
        (eq, "$g_is_emperor", 1),
        (party_slot_eq, "p_town_6", slot_town_lord, "trp_player"),
        (val_add, ":num_lines", 1), #
    (try_end),

    # tributes paid for the king
    (try_begin),
        (faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
        (faction_slot_eq, "fac_player_supporters_faction", slot_faction_government_type, gov_feudal),
        (val_add, ":num_lines", 1),
    (else_try),
        (gt, "$players_kingdom", 0),
        (faction_slot_eq, "$players_kingdom", slot_faction_government_type, gov_feudal),
        (val_add, ":num_lines", 1),
    (try_end),

    (try_begin),##freelancer payment
        (quest_slot_ge, "qst_freelancing", slot_quest_freelancer_payment, 1),
        (val_add, ":num_lines", 1), #
    (try_end),

    (try_begin),##lending out money
        (eq, "$g_apply_budget_report_to_gold", 1),
        (troop_slot_ge, "trp_argentarius", slot_troop_wealth, 1),
        (store_current_hours, ":time"),
        (neg|troop_slot_ge, "trp_argentarius", slot_troop_leaded_party, ":time"),
        (val_add, ":num_lines", 1), #
    (try_end),
    # (try_begin),##lex julia et papia payment
    #     (eq, "$g_is_emperor", 1),
    #     (eq, "$edict2", 1),
    #     (troop_slot_ge, "trp_player", slot_troop_renown, 200),
    #     (val_add, ":num_lines", 1), #
    # (try_end),
    (try_begin),##punitive tax for not being married
        (neg|troop_slot_ge, "trp_player", slot_troop_spouse, 1),
        (troop_slot_eq, "trp_player", slot_troop_culture, "fac_culture_7"),
        (eq, "$edict2", 1),
        (troop_slot_ge, "trp_player", slot_troop_renown, 200),
        (neg|faction_slot_eq, "$players_kingdom", slot_faction_culture, "fac_culture_1"),
        (neg|faction_slot_eq, "$players_kingdom", slot_faction_culture, "fac_culture_2"),
        (neg|faction_slot_eq, "$players_kingdom", slot_faction_culture, "fac_culture_2_1"),
        (neg|faction_slot_eq, "$players_kingdom", slot_faction_culture, "fac_culture_3"),
        (neg|faction_slot_eq, "$players_kingdom", slot_faction_culture, "fac_culture_4"),
        (neg|faction_slot_eq, "$players_kingdom", slot_faction_culture, "fac_culture_5"),
        (neg|faction_slot_eq, "$players_kingdom", slot_faction_culture, "fac_culture_6"),
        (neg|faction_slot_eq, "$players_kingdom", slot_faction_culture, "fac_culture_8"),
        (neg|faction_slot_eq, "$players_kingdom", slot_faction_culture, "fac_culture_9"),
        (val_add, ":num_lines", 1), #
    (try_end),

    (try_begin),##spouse waste money
        (troop_slot_ge, "trp_player", slot_troop_spouse, 1),
        (troop_get_slot,":spouse", "trp_player", slot_troop_spouse),
        (troop_slot_eq, ":spouse", slot_troop_bachus, 3),
        (val_add, ":num_lines", 1), #
    (try_end),
    (try_begin),#emperors pocket
        (eq, "$g_is_emperor", 1),
        (faction_get_slot, reg0, "$players_kingdom", slot_faction_emperors_bocket),
        (gt, reg0, 1),
        (val_add, ":num_lines", 1),
    (try_end),
    (try_begin),##villa
        (troop_slot_eq, "trp_global_variables", g_player_villa, 2),
        (gt, "$g_player_villa_costs", 0),
        (val_add, ":num_lines", 1), #
    (try_end),
    (try_begin),##rents from the villa
	      (troop_slot_eq, "trp_global_variables", g_player_villa, 2),
	      (eq, "$g_player_rent", 1),
        (val_add, ":num_lines", 1), #
    (try_end),
    (try_begin),#staff salary
        (call_script, "script_calculate_staff_salary"),
        (gt, reg0, 0),
        (val_add, ":num_lines", 1), # staff salary
    (try_end),
    (try_begin), #earlier cash, new cash
        (gt, "$g_player_chamberlain", 0),
        (val_add, ":num_lines", 2),
    (try_end),
    (assign, ":player_tax_faction", -1),
    (try_begin),
        (faction_slot_eq, "$players_kingdom", slot_faction_state, sfs_active),
        (faction_slot_eq, "$players_kingdom", slot_faction_government_type, gov_imperial),
        (assign, ":player_tax_faction", "$players_kingdom"),
    (else_try),
        (troop_slot_eq, "trp_player", slot_troop_culture, "fac_culture_7"),
        (assign, ":score_to_beat", 0),
        (try_for_range, ":kingdom", npc_kingdoms_begin, npc_kingdoms_end),
            (faction_slot_eq, ":kingdom", slot_faction_state, sfs_active),
            (store_relation, ":score", ":kingdom", "$players_kingdom"),
            (ge, ":score", ":score_to_beat"),
            (assign, ":player_tax_faction", ":kingdom"),
        (try_end),
    (try_end),
    (try_begin),# imperial taxes
        (is_between, ":player_tax_faction", kingdoms_begin, kingdoms_end),
        (val_add, ":num_lines", 3),
    (try_end),
    (try_begin),# tributes
        (faction_slot_eq, "$players_kingdom", slot_faction_leader, "trp_player"),
        (faction_get_slot, ":tributary_off", "$players_kingdom", slot_faction_tributary_of),
        (faction_slot_eq, ":tributary_off", slot_faction_state, sfs_active),
        (is_between, ":tributary_off", kingdoms_begin, kingdoms_end),
        (val_add, ":num_lines", 1),
    (try_end),

    (val_add, ":num_lines", 4),
    (store_mul, ":cur_y", 27, ":num_lines"),
    (assign, ":net_change", 0), #this is the amount added

    (assign, ":workshops_total", 0),
    (assign, ":latifundia_total", 0),
    (assign, ":expierence_gain"),
    ##############center loop
    ##calculate rents from centers
    (try_for_range, ":center_no", centers_begin, centers_end),
		#Enterprise
        ######################
        (try_begin),
            (party_get_slot, ":enterprise_output", ":center_no", slot_center_player_enterprise),
            (gt, ":enterprise_output", 1),
            (neg|party_slot_ge, ":center_no", slot_center_player_enterprise_days_until_complete, 1),

            (call_script, "script_process_player_enterprise", ":enterprise_output", ":center_no"),
            (assign, ":net_profit", reg0),
            (assign, ":price_of_single_output", reg4),
            (assign, ":price_of_single_input", reg5),
            (assign, ":price_of_secondary_input", reg10),

            (store_sub, ":town_order", ":center_no", towns_begin),
            (store_add, ":craftsman_troop", ":town_order", "trp_town_1_master_craftsman"),

            (item_get_slot, ":outputs_added_to_market", ":enterprise_output", slot_item_output_per_run),
            (assign, ":outputs_added_to_warehouse", 0),

            #Enterprise impact of outputs
            (try_begin),
                #output placed in inventory: deduct selling price and add one good
                (party_slot_eq, ":center_no", slot_center_player_enterprise_production_order, 1),

                #Count empty slots
                (assign, ":empty_slots", 0),
                (troop_get_inventory_capacity, ":total_capacity", ":craftsman_troop"),
                (try_for_range, ":capacity_iterator", 0, ":total_capacity"),
                    (troop_get_inventory_slot, ":slot", ":craftsman_troop", ":capacity_iterator"),
                    (lt, ":slot", 1),
                    (val_add, ":empty_slots", 1),
                (try_end),

                (assign, ":outputs_added_to_warehouse", ":outputs_added_to_market"),
                (val_min, ":outputs_added_to_warehouse",  ":empty_slots"),
                (gt, ":outputs_added_to_warehouse", 0),

                (store_mul, ":cancelled_sales", ":price_of_single_output", ":outputs_added_to_warehouse"),
                (val_sub, ":net_profit", ":cancelled_sales"),
                (val_sub, ":outputs_added_to_market", ":outputs_added_to_warehouse"),
            (try_end),

            #If the transaction is for real, and not just a budget check
            (try_begin),
                (eq, "$g_apply_budget_report_to_gold", 1),
                (troop_add_items, ":craftsman_troop", ":enterprise_output", ":outputs_added_to_warehouse"),

                #Affect prices by outputs added to market
                (store_sub, ":item_slot_no", ":enterprise_output", trade_goods_begin),
                (val_add, ":item_slot_no", slot_town_trade_good_prices_begin),
                (party_get_slot, ":current_index", ":center_no", ":item_slot_no"),
                (store_mul, ":impact_on_price", ":outputs_added_to_market", 15),
                (val_sub, ":current_index", ":impact_on_price"),
                (party_set_slot, ":center_no", ":item_slot_no",":current_index"),

                (gt, "$cheat_mode", 0),
                (str_store_troop_name, s3, ":craftsman_troop"),
                (assign, reg3, ":outputs_added_to_warehouse"),
                (display_message, "@{!}DEBUG -- Adding {reg3} items to {s3}"),
            (try_end),

            #Enterprise impact of outputs
            (item_get_slot, ":inputs_taken_from_market", ":enterprise_output", slot_item_input_number),
            (try_begin),
                (item_slot_ge, ":enterprise_output", slot_item_secondary_raw_material, 1),
                (assign, ":2ary_inputs_taken_from_market", ":inputs_taken_from_market"),
            (else_try),
                (assign, ":2ary_inputs_taken_from_market", 0),
            (try_end),

            (assign, ":inputs_taken_from_warehouse", 0),
            (assign, ":2ary_inputs_taken_from_warehouse", 0),

            (try_begin),
            #input present in inventory: reimburse for input cost and remove one good
                (troop_get_inventory_capacity, ":total_capacity", ":craftsman_troop"),
                (try_for_range, ":capacity_iterator", 0, ":total_capacity"),
                (troop_get_inventory_slot, ":item_in_slot", ":craftsman_troop", ":capacity_iterator"),

                (lt, ":inputs_taken_from_warehouse", ":inputs_taken_from_market"),
                (item_slot_eq, ":enterprise_output", slot_item_primary_raw_material, ":item_in_slot"),
            #(troop_inventory_slot_get_item_amount, ":item_ammo", ":craftsman_troop", ":capacity_iterator"),
            #(troop_inventory_slot_get_item_max_amount, ":item_max_ammo", ":craftsman_troop", ":capacity_iterator"),
                #(eq, ":item_ammo", ":item_max_ammo"),

                    (val_add, ":inputs_taken_from_warehouse", 1),
                (else_try),
                    (lt, ":2ary_inputs_taken_from_warehouse", ":2ary_inputs_taken_from_market"),
                    (item_slot_eq, ":enterprise_output", slot_item_secondary_raw_material, ":item_in_slot"),
                #(troop_inventory_slot_get_item_amount, ":item_ammo", ":craftsman_troop", ":capacity_iterator"),
                #(troop_inventory_slot_get_item_max_amount, ":item_max_ammo", ":craftsman_troop", ":capacity_iterator"),
                #(eq, ":item_ammo", ":item_max_ammo"),

                    (val_add, ":2ary_inputs_taken_from_warehouse", 1),
                (try_end),

                (try_begin),
                    (gt, ":inputs_taken_from_warehouse", 0),
                    (val_sub, ":inputs_taken_from_market", ":inputs_taken_from_warehouse"),
                    (store_mul, ":savings_from_warehoused_inputs",	":price_of_single_input", ":inputs_taken_from_warehouse"),
                    (val_add, ":net_profit", ":savings_from_warehoused_inputs"),
                (try_end),
                (try_begin),
                    (gt, ":2ary_inputs_taken_from_warehouse", 0),
                    (val_sub, ":2ary_inputs_taken_from_market", ":2ary_inputs_taken_from_warehouse"),
                    (assign, ":savings_from_warehoused_inputs",	":price_of_secondary_input"),
                    (val_add, ":net_profit", ":savings_from_warehoused_inputs"),
                (try_end),
            (try_end),

            #If the transaction is for real, and not just a budget check
            (try_begin),
                (eq, "$g_apply_budget_report_to_gold", 1),
                (item_get_slot, ":raw_material", ":enterprise_output", slot_item_primary_raw_material),
                (troop_remove_items, ":craftsman_troop", ":raw_material", ":inputs_taken_from_warehouse"),
                (item_get_slot, ":secondary_raw_material", ":enterprise_output", slot_item_secondary_raw_material),
                (troop_remove_items, ":craftsman_troop", ":secondary_raw_material", ":2ary_inputs_taken_from_warehouse"),

                #Affect prices by intputs added to market
                (store_sub, ":item_slot_no", ":raw_material", trade_goods_begin),
                (val_add, ":item_slot_no", slot_town_trade_good_prices_begin),
                (party_get_slot, ":current_index", ":center_no", ":item_slot_no"),
                (store_mul, ":impact_on_price", ":outputs_added_to_market", 15),
                (val_add, ":current_index", ":impact_on_price"),
                (party_set_slot, ":center_no", ":item_slot_no",":current_index"),

                (try_begin),
                    (gt, ":2ary_inputs_taken_from_market", 0),
                    (store_sub, ":item_slot_no", ":secondary_raw_material", trade_goods_begin),
                    (val_add, ":item_slot_no", slot_town_trade_good_prices_begin),
                    (party_get_slot, ":current_index", ":center_no", ":item_slot_no"),
                    (val_add, ":current_index", 15),
                    (party_set_slot, ":center_no", ":item_slot_no",":current_index"),
                (try_end),
            (try_end),

            (try_begin),
                (eq, "$g_presentation_credits_obj_3_alpha", 1),
                (call_script, "script_get_enterprise_name", ":enterprise_output"),
                (str_store_string, s5, reg0),
                (str_store_party_name, s0, ":center_no"),
                (create_text_overlay, reg1, "str_enterprise_s5_at_s0", 0),
                (position_set_x, pos1, 900),
                (position_set_y, pos1, 900),
                (overlay_set_size, reg1, pos1),
                (position_set_x, pos1, 25),
                (position_set_y, pos1, ":cur_y"),
                (overlay_set_position, reg1, pos1),
            (try_end),

            #Enterprise revenue strings
            (try_begin),
                (store_faction_of_party, ":faction_no", ":center_no"),
                (store_relation, ":relation", ":faction_no", "$players_kingdom"),

                (assign, ":town_lord_hates_you", 0),
                (try_begin),
                    (party_get_slot, ":town_lord", ":center_no", slot_town_lord),
                    (gt, ":town_lord", -1),
                    (call_script, "script_troop_get_player_relation", ":town_lord"),
                    (lt, reg0, -40),
                    (assign, ":town_lord_hates_you", 1),
                (try_end),
                (this_or_next|lt, ":relation", 0),
                (eq, ":town_lord_hates_you", 1),
                #SB : sequestered profits go to lord instead
                (try_begin),
                    (eq, "$g_apply_budget_report_to_gold", 1),
                    (party_get_slot, ":town_lord", ":center_no", slot_town_lord),
                    (gt, ":town_lord", -1),
                    (call_script, "script_dplmc_distribute_gold_to_lord_and_holdings", ":net_profit", ":town_lord"),
                (try_end),
                (assign, ":net_profit", 0),
                (try_begin),
                    (eq, "$g_presentation_credits_obj_3_alpha", 1),
                    (create_text_overlay, reg1, "str_under_sequestration", tf_right_align|tf_single_line),
                    (overlay_set_color, reg1, 0xFF0000),
                (try_end),
            (else_try),
                (eq, "$g_presentation_credits_obj_3_alpha", 1),
                (ge, ":net_profit", 0),
                (assign, reg0, ":net_profit"),
                (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
                (overlay_set_color, reg1, 0x00AA00),
            (else_try),
                (eq, "$g_presentation_credits_obj_3_alpha", 1),
                (assign, reg0, ":net_profit"),
                (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
                (overlay_set_color, reg1, 0xFF0000),
            (try_end),

            (try_begin), ## add xp based on enterprice income
                (gt, ":net_profit", 0),
                (val_add, ":expierence_gain", 50),
            (try_end),

            (val_add, ":all_centers_accumulated_total", ":net_profit"),
            (val_add, ":workshops_total", ":net_profit"),
            (val_add, ":net_change", ":net_profit"),

            (try_begin),
                (eq, "$g_presentation_credits_obj_3_alpha", 1),
                (position_set_x, pos1, 900),
                (position_set_y, pos1, 900),
                (overlay_set_size, reg1, pos1),
                (position_set_x, pos1, 500),
                (position_set_y, pos1, ":cur_y"),
                (overlay_set_position, reg1, pos1),
                (val_sub, ":cur_y", 27),
            (try_end),
        (try_end),
        #Enterprise END END
        ######################
        #Latifundium
        (try_begin),
            (party_slot_ge, ":center_no", slot_center_has_latifundium, 1),
            (party_get_slot, ":latifundium", ":center_no", slot_center_has_latifundium),
            (str_store_party_name, s0, ":latifundium"),

            (try_begin),
                (eq, "$g_presentation_credits_obj_2_alpha", 1),
                (create_text_overlay, reg1, "@{s0}: ", 0),
                (position_set_x, pos1, 900),
                (position_set_y, pos1, 900),
                (overlay_set_size, reg1, pos1),
                (position_set_x, pos1, 25),
                (position_set_y, pos1, ":cur_y"),
                (overlay_set_position, reg1, pos1),
            (try_end),

            (party_get_slot, ":latifund_rent", ":latifundium", slot_center_accumulated_rents),
            (store_faction_of_party,":faction", ":center_no"),
            (try_begin),
                (store_relation, ":rel", ":faction", "fac_player_faction"),
                (lt, ":rel", 0),
                (try_begin),
                    (eq, "$g_presentation_credits_obj_2_alpha", 1),
                    (create_text_overlay, reg1, "@confiscated", tf_right_align|tf_single_line),
                (try_end),
            (else_try),
                (neg|party_slot_ge, ":latifundium", slot_lat_guards, 1),
                (party_slot_eq, ":center_no", slot_village_state, svs_looted),
                (try_begin),
                    (eq, "$g_presentation_credits_obj_2_alpha", 1),
                    (create_text_overlay, reg1, "@Looted", tf_right_align|tf_single_line),
                (try_end),
            (else_try),
                (neg|party_slot_ge, ":latifundium", slot_lat_guards, 1),
                (party_slot_ge, ":center_no", slot_village_infested_by_bandits, 1),
                (try_begin),
                    (eq, "$g_presentation_credits_obj_2_alpha", 1),
                    (create_text_overlay, reg1, "@Infested by bandits", tf_right_align|tf_single_line),
                (try_end),
            (else_try),
                (gt, ":latifund_rent", 0),
                (assign, reg13, ":latifund_rent"),
                (str_clear, s63),
                (try_begin),
                    (neq, "$g_is_emperor", 1),
                    (party_get_slot, ":lord", ":center_no", slot_town_lord),
                    (ge, ":lord", 1),
                    (call_script, "script_troop_get_player_relation", ":lord"),
                    (assign, ":relation_with_player", reg0),
                    (try_begin),
                        (ge, ":relation_with_player", 0),
                        (store_sub, ":taxrate", 30, ":relation_with_player"),
                    (else_try),
                        (val_abs, ":relation_with_player"),
                        (store_add, ":taxrate", ":relation_with_player", 20),
                    (try_end),
                    (val_clamp, ":taxrate", 0, 51),
                    (ge, ":taxrate", 1),
                    (assign, reg10, ":taxrate"),

                    (store_mul,":netto_rent", ":latifund_rent",":taxrate"),
                    (val_div, ":netto_rent", 100),

                    (store_sub, ":lord_tax", ":latifund_rent", ":netto_rent"),
                    (assign, reg11, ":netto_rent"),
                    (assign, reg12, ":latifund_rent"),
                    (try_begin),
                        (eq, "$g_apply_budget_report_to_gold", 1),
                        (call_script, "script_add_to_troop_wealth",":lord", ":netto_rent"),
                    (try_end),
                    # (display_message, "@(brutto: {reg12}, {reg10}% taxrate, tax paid: {reg11})"),
                    (str_store_string, s63, "@(taxrate {reg10}%)"),
                    (assign, reg13, ":lord_tax"),
                (try_end),

                (try_begin), # clear if collected
                    (eq, "$g_apply_budget_report_to_gold", 1),
                    (party_set_slot, ":latifundium", slot_center_accumulated_rents, 0),
                (try_end),

                (val_add, ":net_change", reg13), # add to total
                (try_begin), ## add xp based on enterprice income
                    (gt, ":net_change", 0),
                    (val_add, ":expierence_gain", 50),
                (try_end),

                (val_add, ":latifundia_total", reg13), #  add to sub total
                (try_begin), # display if not sub total is displayed
                    (eq, "$g_presentation_credits_obj_2_alpha", 1),
                    (create_text_overlay, reg1, "@{!}{reg13} {s63}", tf_right_align|tf_single_line),
                    (overlay_set_color, reg1, 0x00AA00),
                (try_end),
            (else_try),
                (try_begin),
                    (eq, "$g_presentation_credits_obj_2_alpha", 1),
                    (create_text_overlay, reg1, "@None", tf_right_align|tf_single_line),
                (try_end),
            (try_end),

            (try_begin),
                (eq, "$g_presentation_credits_obj_2_alpha", 1),
                (position_set_x, pos1, 900),
                (position_set_y, pos1, 900),
                (overlay_set_size, reg1, pos1),
                (position_set_x, pos1, 500),
                (position_set_y, pos1, ":cur_y"),
                (overlay_set_position, reg1, pos1),
                (val_sub, ":cur_y", 27),
            (try_end),
        (try_end),
        #Latifundium END

        #Taxes begin
        #########################
        (party_slot_eq, ":center_no", slot_town_lord, "trp_player"),
        (assign, ":accumulated_rents", 0),
        (assign, ":accumulated_tariffs", 0),
        (try_begin),
            (neg|party_slot_ge, ":center_no", slot_village_infested_by_bandits, 1),
            (party_get_slot, ":accumulated_rents", ":center_no", slot_center_accumulated_rents),
            (party_get_slot, ":accumulated_tariffs", ":center_no", slot_center_accumulated_tariffs),
        (try_end),
        ### [OSP] Gold and Iron Mines (need more gold)
        (try_begin),
            (neg|party_slot_ge, ":center_no", slot_village_infested_by_bandits, 1),
            (neg|party_slot_eq, ":center_no", slot_village_state, svs_looted),
            (party_slot_ge, ":center_no", slot_center_has_silver_mine, 1),
            (party_get_slot, ":goldm_rent", ":center_no", slot_village_give_goldcoin),
            (val_add, ":accumulated_rents", ":goldm_rent"),
        (try_end),
        ### [OSP] Gold and Iron Mines (need more gold)


        (store_add, ":accumulated_total", ":accumulated_rents", ":accumulated_tariffs"),
        (val_add, ":all_centers_accumulated_total", ":accumulated_total"),
        (val_add, ":all_centers_accumulated_taxes_and_rents", ":accumulated_total"),

        (val_add, ":net_change", ":accumulated_total"),#book it properly

        #player pays his tax
        (try_begin),
            (faction_slot_eq, "$players_kingdom", slot_faction_government_type, gov_imperial),
            (faction_get_slot, ":taxrate", "$players_kingdom", slot_faction_government_type),
            (store_mul, ":tax", ":taxrate", ":accumulated_total"),
            (val_div, ":tax", 100),
            (val_add, ":all_taxes_paid", ":tax"),
            (val_mul, ":tax", -1),
            (val_add, ":net_change", ":tax"),
        (try_end),

        (try_begin),
            (eq, "$g_presentation_credits_obj_1_alpha", 1),
            (str_store_party_name, s0, ":center_no"),
            ##diplomacy begin
            (try_begin),
                (neg|is_between, ":center_no", castles_begin, castles_end),
                (party_get_slot, ":tax_rate", ":center_no", dplmc_slot_center_taxation),
                (neq, ":tax_rate", 0),
                (call_script, "script_dplmc_describe_tax_rate_to_s50", ":tax_rate"),
                (str_store_string, s0, "@{s0} ({s50})"),
            (try_end),

            (create_text_overlay, reg1, "str_rents_from_s0", 0),
            (str_store_party_name, s0, ":center_no"),
            (position_set_x, pos1, 900),
            (position_set_y, pos1, 900),
            (overlay_set_size, reg1, pos1),
            (position_set_x, pos1, 25),
            (position_set_y, pos1, ":cur_y"),
            (overlay_set_position, reg1, pos1),
            (try_begin),
                (gt, ":accumulated_rents", 0),
                (assign, reg0, ":accumulated_rents"),
                (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
                (overlay_set_color, reg1, 0x00AA00),
            (else_try),
                (party_slot_ge, ":center_no", slot_village_infested_by_bandits, 1),
                (create_text_overlay, reg1, "@Infested by bandits", tf_right_align|tf_single_line),
            (else_try),
                (party_slot_eq, ":center_no", slot_village_state, svs_looted),
                (create_text_overlay, reg1, "@Looted", tf_right_align|tf_single_line),
            (else_try),
                (create_text_overlay, reg1, "@None", tf_right_align|tf_single_line),
            (try_end),
            (position_set_x, pos1, 900),
            (position_set_y, pos1, 900),
            (overlay_set_size, reg1, pos1),
            (position_set_x, pos1, 500),
            (position_set_y, pos1, ":cur_y"),
            (overlay_set_position, reg1, pos1),
            (val_sub, ":cur_y", 27),

            ### [OSP] Gold and Iron Mines (need more gold)
            (try_begin),
                (is_between, ":center_no", villages_begin, villages_end),
                (party_slot_ge, ":center_no", slot_center_has_silver_mine, 1),
                (party_slot_eq, ":center_no", slot_town_lord, "trp_player"),
                (str_store_party_name, s0, ":center_no"),
                (create_text_overlay, reg1, "@Rents from gold mine in {s0}: ", 0),
                (position_set_x, pos1, 900),
                (position_set_y, pos1, 900),
                (overlay_set_size, reg1, pos1),
                (position_set_x, pos1, 25),
                (position_set_y, pos1, ":cur_y"),
                (overlay_set_position, reg1, pos1),
                (party_get_slot, ":goldm_rent", ":center_no", slot_village_give_goldcoin),
                (try_begin),
                    (party_slot_eq, ":center_no", slot_village_state, svs_looted),
                    (create_text_overlay, reg1, "@Looted", tf_right_align|tf_single_line),
                (else_try),
                    (neg|party_slot_ge, ":center_no", slot_village_infested_by_bandits, 1),
                    (gt, ":goldm_rent", 0),
                    (assign, reg0, ":goldm_rent"),
                    (create_text_overlay, reg1, "@{!}{reg0}", tf_right_align|tf_single_line),
                    (overlay_set_color, reg1, 0x00AA00),
                (else_try),
                    (party_slot_ge, ":center_no", slot_village_infested_by_bandits, 1),
                    (create_text_overlay, reg1, "@Infested by bandits", tf_right_align|tf_single_line),
                (else_try),
                    (create_text_overlay, reg1, "@None", tf_right_align|tf_single_line),
                (try_end),
                (position_set_x, pos1, 900),
                (position_set_y, pos1, 900),
                (overlay_set_size, reg1, pos1),
                (position_set_x, pos1, 500),
                (position_set_y, pos1, ":cur_y"),
                (overlay_set_position, reg1, pos1),
                (val_sub, ":cur_y", 27),
            (try_end),
            ### [OSP] Gold and Iron Mines (need more gold)

            #Tariffs
            (try_begin),
                (is_between, ":center_no", towns_begin, towns_end),
                (create_text_overlay, reg1, "str_tariffs_from_s0", 0),
                (position_set_x, pos1, 900),
                (position_set_y, pos1, 900),
                (overlay_set_size, reg1, pos1),
                (position_set_x, pos1, 25),
                (position_set_y, pos1, ":cur_y"),
                (overlay_set_position, reg1, pos1),
                (try_begin),
                    (gt, ":accumulated_tariffs", 0),
                    (assign, reg0, ":accumulated_tariffs"),
                    (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
                    (overlay_set_color, reg1, 0x00AA00),
                (else_try),
                    (create_text_overlay, reg1, "@None", tf_right_align|tf_single_line),
                (try_end),
                (position_set_x, pos1, 900),
                (position_set_y, pos1, 900),
                (overlay_set_size, reg1, pos1),
                (position_set_x, pos1, 500),
                (position_set_y, pos1, ":cur_y"),
                (overlay_set_position, reg1, pos1),
                (val_sub, ":cur_y", 27),
            (try_end),
        (try_end),
        #Tariffs END
    (try_end),#END OF LOOP

    (try_begin),
        (eq, "$g_presentation_credits_obj_1_alpha", 0),
        (gt, ":all_centers_accumulated_taxes_and_rents", 0),
        (create_text_overlay, reg1, "@Rents/Tariffs from all Settlements:", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (assign, reg0, ":all_centers_accumulated_taxes_and_rents"),
        (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (overlay_set_color, reg1, 0x00AA00),
        (val_sub, ":cur_y", 27),
    (try_end),

    (try_begin),
        (eq, "$g_presentation_credits_obj_2_alpha", 0),
        (gt, ":latifundia_total", 0),
        (create_text_overlay, reg1, "@Income from all Latifundia:", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (assign, reg0, ":latifundia_total"),
        (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (overlay_set_color, reg1, 0x00AA00),
        (val_sub, ":cur_y", 27),
    (try_end),

    (try_begin),
        (eq, "$g_apply_budget_report_to_gold", 1),
        (gt, ":latifundia_total", 0),
        (call_script, "script_add_to_weekly_income", ":latifundia_total"),
    (try_end),

    (try_begin),
        (eq, "$g_presentation_credits_obj_3_alpha", 0),
        (gt, ":workshops_total", 0),
        (create_text_overlay, reg1, "@Income from all workshops:", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (assign, reg0, ":workshops_total"),
        (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (overlay_set_color, reg1, 0x00AA00),
        (val_sub, ":cur_y", 27),
    (try_end),

    (try_begin),
        (eq, "$g_apply_budget_report_to_gold", 1),
        (gt, ":workshops_total", 0),
        (call_script, "script_add_to_weekly_income", ":workshops_total"),
    (try_end),

    #mercenary payment
    (try_begin),
        (gt, "$players_kingdom", 0),
        (neq, "$players_kingdom", "fac_player_supporters_faction"),
        (neq, "$players_kingdom", "fac_player_faction"),
        (eq, "$player_has_homage", 0),
        (str_store_faction_name, s0, "$players_kingdom"),
        (create_text_overlay, reg1, "str_mercenary_payment_from_s0", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (call_script, "script_party_calculate_strength", "p_main_party", 0),
        (assign, ":offer_value", reg0),
        (try_for_parties, ":party_no"),
            (this_or_next|party_slot_eq, ":party_no", slot_party_type, spt_player_camp),
            (party_slot_eq, ":party_no", slot_party_type, spt_companion_raider),
            (call_script, "script_party_calculate_strength", ":party_no", 0),
            (val_add, ":offer_value", reg0),
        (try_end),
        ##Nero Change
        (val_mul, ":offer_value", 5),##
        (val_div, ":offer_value", 2),##
        (val_add, ":offer_value", 500),##the base payment are 500 denars
        (call_script, "script_round_value", ":offer_value"),
        (assign, ":offer_value", reg0),
        (try_begin),
            (eq, "$g_apply_budget_report_to_gold", 1),
            (call_script, "script_add_to_weekly_income", ":offer_value"),
        (try_end),
        (val_add, ":net_change", ":offer_value"),
        (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (overlay_set_color, reg1, 0x00AA00),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (val_sub, ":cur_y", 27),
    (try_end),
    #mercenary payment END

    ##Tax inefficiency
    (try_begin),
        (gt, ":num_owned_center_values_for_tax_efficiency", ":num_centers_needed_for_efficiency_loss"),
        (gt, ":all_centers_accumulated_total", 0),
        (store_sub, ":ratio_lost", ":num_owned_center_values_for_tax_efficiency", ":num_centers_needed_for_efficiency_loss"),
        (val_mul, ":ratio_lost", ":tax_efficiency_loss_ratio_per_center"),
        (val_min, ":ratio_lost", 50),#max tax inefficiency

        (assign, ":all_centers_accumulated_taxes_and_rents_2", ":all_centers_accumulated_taxes_and_rents"),

        (store_mul, ":tax_lost", ":all_centers_accumulated_taxes_and_rents_2", ":ratio_lost"),
        (val_div, ":tax_lost", 100),
        ##diplomacy begin
        (assign, ":percent", 0),
        (try_begin),
            (gt, "$g_player_chamberlain", 0),
            (val_add, ":percent", 10),
        (try_end),
        (try_begin),
            (eq, "$control_tax", 1), #tax control
            (val_add, ":percent", 15),
        (try_end),
        # (try_begin),
        #     (eq, "$conducted_census", 1),
        #     (val_add, ":percent", 3),
        # (try_end),

        (try_begin),#for imperial governments this is done else where
            (gt, "$g_player_minister", 0),
            (neg|faction_slot_eq, "fac_player_supporters_faction", slot_faction_government_type, gov_imperial),
            # (troop_get_slot, ":relation", "$g_player_minister", slot_troop_player_relation),
            (call_script, "script_troop_get_player_relation", "$g_player_minister"),
            (assign, ":relation", reg0),
            (try_begin),
                (ge, ":relation", 75),
                (val_add, ":percent", 2),
            (else_try),
                (ge, ":relation", 50),
                (val_add, ":percent", 1),
            (try_end),
        (try_end),

        (try_begin),
            (faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
            (faction_get_slot, ":centralization", "fac_player_supporters_faction", dplmc_slot_faction_centralization),
            (neq, ":centralization", 0),
            (val_mul, ":centralization", 5),
            (val_add, ":percent", ":centralization"),
            # (try_begin),
            #     (faction_get_slot, ":serfdom", "fac_player_supporters_faction", dplmc_slot_faction_serfdom),
            #     (neq, ":serfdom", 0),
            #     (val_mul, ":serfdom", 3),
            #     (val_add, ":percent", ":serfdom"),
            # (try_end),
        (else_try),
            (gt, "$players_kingdom", 0),
            (faction_get_slot, ":centralization", "$players_kingdom", dplmc_slot_faction_centralization),
            (neq, ":centralization", 0),
            (val_mul, ":centralization", -5),
            (val_add, ":percent", ":centralization"),
        (try_end),
        (try_begin),
            (gt, ":tax_lost", 0),
            (store_mul, ":save", ":tax_lost", ":percent"),
            (val_div, ":save", 100),
            (store_mul, ":percent", ":save", 100),
            (val_div, ":percent", ":tax_lost"),
            (val_sub, ":tax_lost", ":save"),
        (try_end),
         ##diplomacy end
        (val_sub, ":net_change", ":tax_lost"),
        ##diplomacy begin
        (try_begin),
            (gt, "$g_player_chamberlain", 0),
            (str_store_string, s55, "str_loss_due_to_tax_inefficiency"),
            (assign, reg0, ":percent"),
            # (val_mul, reg0, -1),
            (str_store_string, s55, "@{s55} ({reg0}% regained)"),
            (create_text_overlay, reg1, "@{s55}", 0),
        (else_try),
        ##diplomacy end
            (create_text_overlay, reg1, "str_loss_due_to_tax_inefficiency", 0),
        ##diplomacy begin
        (try_end),
        ##diplomacy end
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (store_mul, reg0, ":tax_lost", -1),
        (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (overlay_set_color, reg1, 0xFF0000),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (val_sub, ":cur_y", 27),
    (try_end),
    ##Tax inefficiency end

    #Party wages
    (assign, "$g_player_num_creditors", 0), #motomataru chief fix debt morale penalty
    (assign, "$g_player_old_wages", 0), #motomataru chief fix debt morale penalty
    (try_for_parties, ":party_no"),
        (party_is_active, ":party_no"),
        (party_get_template_id, ":ptid", ":party_no"),
        (assign, ":garrison_troop", 0),
        (try_begin),
            (this_or_next|party_slot_eq, ":party_no", slot_party_type, spt_town),
            (party_slot_eq, ":party_no", slot_party_type, spt_castle),
            (party_slot_eq, ":party_no", slot_town_lord, "trp_player"),
            (neg|party_slot_eq, ":party_no", slot_village_infested_by_bandits, "trp_peasant_woman"),##if center revolted
            (assign, ":garrison_troop", 1),
        (else_try),
            (this_or_next|party_slot_eq, ":party_no", slot_party_type, spt_town),
            (party_slot_eq, ":party_no", slot_party_type, spt_castle),
            (neg|party_slot_ge, ":party_no", slot_town_lord, 1), #unassigned
            (store_faction_of_party, ":center_faction", ":party_no"),
            (eq, ":center_faction", "fac_player_supporters_faction"),
            (faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
            (assign, ":garrison_troop", 1),
        (try_end),
        ##diplomacy begin
        (assign, ":patrol_troop", 0),
        (try_begin),
            (party_slot_eq, ":party_no",slot_party_type, spt_patrol),
            (party_slot_eq, ":party_no", dplmc_slot_party_mission_diplomacy, "trp_player"),
            (assign, ":patrol_troop", 1),
        (try_end),
        #player has to pay for his own custom legion
        (try_begin),
            (eq, "$g_is_emperor", 0),#not emperor
            (party_slot_eq, ":party_no",slot_party_type, spt_kingdom_hero_party),
            (party_stack_get_troop_id, ":party_leader", ":party_no", 0),
            (this_or_next|troop_slot_eq, ":party_leader", slot_troop_legion, 13),
            (this_or_next|troop_slot_eq, ":party_leader", slot_troop_aux, "pt_player_aux_inf"),
            (troop_slot_eq, ":party_leader", slot_troop_aux, "pt_player_aux_cav"),
            # (neg|troop_slot_ge, "trp_kingdom_7_lord", slot_troop_player_relation, 10),
            (assign, ":patrol_troop", 1),
        (try_end),
        (assign, ":hero_troop", 0),
        (try_begin),
            (eq, ":ptid","pt_hero_party"),
            (assign, ":hero_troop", 1),
        (try_end),
        (this_or_next|eq, ":patrol_troop", 1),
        (this_or_next|eq, ":hero_troop", 1),
        ##diplomacy end
        (this_or_next|eq, ":party_no", "p_main_party"),
        (this_or_next|party_slot_eq, ":party_no", slot_party_type, spt_player_camp),
        (this_or_next|party_slot_eq, ":party_no", slot_party_type, spt_companion_raider),
        (eq, ":garrison_troop", 1),

        (assign, ":total_wage", 0),
        (party_get_num_companion_stacks, ":num_stacks", ":party_no"),
        (try_for_range, ":i_stack", 0, ":num_stacks"),
            (party_stack_get_troop_id, ":stack_troop", ":party_no", ":i_stack"),
            (party_stack_get_size, ":stack_size", ":party_no", ":i_stack"),
            (val_add, "$g_player_num_creditors", ":stack_size"), #motomataru chief fix debt morale penalty
            (call_script, "script_game_get_troop_wage", ":stack_troop", ":party_no"),
            (assign, ":cur_wage", reg0),
            (val_mul, ":cur_wage", ":stack_size"),
            (val_add, ":total_wage", ":cur_wage"),
        (try_end),
        (try_begin),
            (eq, ":garrison_troop", 1),
            (val_div, ":total_wage", 2), #Half payment for garrisons
        (else_try),
            (eq, ":party_no", "p_main_party"),
            (store_sub, ":total_payment_ratio", 14, "$g_cur_week_half_daily_wage_payments"), #between 0 and 7
            (val_mul, ":total_wage", ":total_payment_ratio"),
            (val_div, ":total_wage", 14),
        (try_end),
        (val_mul, ":total_wage", -1),
        (str_store_party_name, s0, ":party_no"),
        (try_begin),
            (str_store_string, s0, "str_s0s_party"),

            (faction_slot_eq, "$players_kingdom", slot_faction_government_type, gov_imperial),
            (assign, reg0, 0),
            (try_begin),
                (eq, ":garrison_troop", 1),
                (assign, reg0, 1),
            (else_try),#this are basically players own troops and thus are booked from his pocket, only if player is emperor it goes to the imperial treasury
                (eq, "$g_is_emperor", 1),
                (eq, ":patrol_troop", 1),
            (else_try),
                (eq, ":party_no", "p_main_party"),
                (this_or_next|ge, "$g_rank", 1),
                (eq, "$g_is_emperor", 1),
                (assign, reg0, 1),
            (try_end),
            (eq, reg0, 1),

            (str_store_string, s0, "@{s0} (paid by imperial treasury)"),
        (try_end),
        (create_text_overlay, reg1, "str_wages_for_s0", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),

        (try_begin),
            (lt, ":total_wage", 0),
            (assign, reg0, ":total_wage"),
            (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
            (overlay_set_color, reg1, 0xFF0000),
        (else_try),
            (create_text_overlay, reg1, "@None", tf_right_align|tf_single_line),
        (try_end),

        (try_begin),
            (faction_slot_eq, "$players_kingdom", slot_faction_government_type, gov_imperial),
            (try_begin),
                (eq, ":garrison_troop", 1),
                (assign, reg0, 1),
            (else_try),#this are basically players own troops and thus are booked from his pocket, only if player is emperor it goes to the imperial treasury
                (eq, "$g_is_emperor", 1),
                (eq, ":patrol_troop", 1),
            (else_try),
                (eq, ":party_no", "p_main_party"),
                (this_or_next|ge, "$g_rank", 1),
                (eq, "$g_is_emperor", 1),
                (assign, reg0, 1),
            (try_end),
            (eq, reg0, 1),
            (try_begin),
                (eq, "$g_apply_budget_report_to_gold", 1),
                (val_abs, ":total_wage"),
                (call_script, "script_add_to_faction_bugdet", slot_faction_wages, "$players_kingdom", ":total_wage"),
            (try_end),
            (assign, ":total_wage", 0),
        (try_end),
        (val_add, "$g_player_old_wages", ":total_wage"), #motomataru chief fix debt morale penalty
        (val_add, ":net_change", ":total_wage"),

        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (val_sub, ":cur_y", 27),
    (try_end),
    ##END wages

    (try_begin),
        (gt, "$g_player_debt_to_party_members", 0),
        (val_sub, ":net_change", "$g_player_debt_to_party_members"),
        (create_text_overlay, reg1, "str_earlier_debts", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (store_mul, reg0, "$g_player_debt_to_party_members", -1),
        (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (overlay_set_color, reg1, 0xFF0000),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (val_sub, ":cur_y", 27),
    (try_end),

    ##STAFF SPENDING
    (call_script, "script_calculate_staff_salary"),
    (assign, ":staff_salary", reg0),
    (try_begin),
        (gt, ":staff_salary", 0),
        (val_sub, ":net_change", ":staff_salary"),
        (create_text_overlay, reg1, "@Staff:", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (store_mul, reg0, ":staff_salary", -1),
        (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (overlay_set_color, reg1, 0xFF0000),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (val_sub, ":cur_y", 27),
    (try_end),
    #END STAFF SPENDING
    ## begin imperial tax if player is governor
    (try_begin),
        (is_between, ":player_tax_faction", kingdoms_begin, kingdoms_end),
        (store_add, ":taxes", ":latifundia_total", ":workshops_total"),
        (faction_get_slot, ":taxrate_business", ":player_tax_faction", slot_faction_tax_rate_buisness),
        (val_mul, ":taxes", ":taxrate_business"),
        (val_div, ":taxes", 100),
        (gt, ":taxes", 1),
        (assign, reg50, ":taxrate_business"),
        (create_text_overlay, reg1, "@Imperial tax on business income ({reg50}%):", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (try_begin),
            (eq, "$g_apply_budget_report_to_gold", 1),
            (call_script, "script_add_to_faction_bugdet", slot_faction_taxes_business, ":player_tax_faction", ":taxes"),
        (try_end),
        (val_sub, ":net_change", ":taxes"),
        (assign, reg0, ":taxes"),
        (val_mul, reg0, -1),
        (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
        (overlay_set_color, reg1, 0xFF2C2C),

        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (val_sub, ":cur_y", 27),
    (try_end),

    (try_begin),
        (is_between, ":player_tax_faction", kingdoms_begin, kingdoms_end),
        (assign, ":taxes", 0),
        (try_begin),
            (gt, "$edict11", 1),
            (val_add, ":taxes", "$edict11"),
            (val_sub, ":taxes", 1),
        (try_end),
        (try_begin),
            (neg|troop_slot_ge, "trp_player", slot_troop_spouse, 1),
            (eq, "$edict2", 1),
            (troop_slot_ge, "trp_player", slot_troop_renown, 200),
            (val_add, ":taxes", 100),
        (try_end),
        (gt, ":taxes", 10),
        (create_text_overlay, reg1, "@Imperial tax from edicts:", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),

        (try_begin),
            (eq, "$g_apply_budget_report_to_gold", 1),
            (assign, "$edict11", 1),
            (call_script, "script_add_to_faction_bugdet", slot_faction_taxes_edicts, ":player_tax_faction", ":taxes"),
        (try_end),
        (val_sub, ":net_change", ":taxes"),
        (assign, reg0, ":taxes"),
        (val_mul, reg0, -1),
        (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
        (overlay_set_color, reg1, 0xFF2C2C),

        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (val_sub, ":cur_y", 27),
    (try_end),
    (try_begin),
        (is_between, ":player_tax_faction", kingdoms_begin, kingdoms_end),
        (gt, ":all_taxes_paid", 0),
        (create_text_overlay, reg1, "@Imperial tax on rents/tariffs:", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (try_begin),
            (eq, "$g_apply_budget_report_to_gold", 1),
            (val_abs, ":all_taxes_paid"),
            (call_script, "script_add_to_faction_bugdet", slot_faction_taxes_govern, ":player_tax_faction", ":all_taxes_paid"),
        (try_end),
        (assign, reg0, ":all_taxes_paid"),
        (val_mul, reg0, -1),
        (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (overlay_set_color, reg1, 0xFF0000),
        (val_sub, ":cur_y", 27),
    (try_end),
    ##imperial tax end

    #emperors pocket
    (try_begin),
        (eq, "$g_is_emperor", 1),
        (faction_get_slot, ":emperors_pocket", "$players_kingdom", slot_faction_emperors_bocket),
        (neq, ":emperors_pocket", 0),
        (val_mul, ":emperors_pocket", -1),
        (val_add, ":net_change", ":emperors_pocket"),

        (create_text_overlay, reg1, "@Emperor's pocket:", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),

        (assign, reg0, ":emperors_pocket"),
        (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
        (try_begin),
            (lt, ":emperors_pocket", 0),
            (overlay_set_color, reg1, 0xFF2C2C),
        (else_try),
            (overlay_set_color, reg1, 0x00AA00),
            (try_begin),
                (eq, "$g_apply_budget_report_to_gold", 1),
                (call_script, "script_add_to_weekly_income", ":emperors_pocket"),
            (try_end),
        (try_end),

        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (val_sub, ":cur_y", 27),
    (try_end),

    ## begin tributary states
    (try_begin),
        (assign, reg1, 0),
        (try_begin),#disabled for player leading an imperial faction as this will be included in the imperial bugdet
            (faction_slot_eq, "$players_kingdom", slot_faction_government_type, gov_imperial),
            (faction_slot_eq, "$players_kingdom", slot_faction_leader, "trp_player"),
            (assign, reg1, 1),
        (try_end),
        (eq, reg1, 0),

        (assign, ":cost_for", 0),
        (try_begin),
            (faction_slot_eq, "$players_kingdom", slot_faction_leader, "trp_player"),
            (faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
            (try_for_range, ":fac", kingdoms_begin, kingdoms_end),
                (faction_get_slot, ":tributary_off", ":fac", slot_faction_tributary_of),
                (this_or_next|faction_slot_eq, ":fac", slot_faction_player_tributary, 1),
                (eq, ":tributary_off", "$players_kingdom"),
                (val_add, ":cost_for", 1500),
            (try_end),
        (try_end),
        (try_for_range, ":fac", minor_kingdoms_begin, minor_kingdoms_end),
            (faction_slot_eq, ":fac", slot_faction_player_tributary, 1),
            (val_add, ":cost_for", 1500),
        (try_end),
        (ge, ":cost_for", 1000),

        (try_begin),
            (eq, "$g_apply_budget_report_to_gold", 1),
            (call_script, "script_add_to_weekly_income", ":cost_for"),
        (try_end),

        (create_text_overlay, reg1, "@Tributes from Tributaries:", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (assign, reg0, ":cost_for"),
        (val_add, ":net_change", ":cost_for"),

        (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
        (overlay_set_color, reg1, 0x00AA00),

        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (val_sub, ":cur_y", 27),
    (try_end),
    ##end tributary states

    ## player has to pay tribute
    (try_begin),
        (faction_slot_eq, "$players_kingdom", slot_faction_leader, "trp_player"),

        (faction_get_slot, ":tributary_off", "$players_kingdom", slot_faction_tributary_of),
        (faction_slot_eq, ":tributary_off", slot_faction_state, sfs_active),
        (is_between, ":tributary_off", kingdoms_begin, kingdoms_end),
        (assign, ":cost_for", 1500),
        (str_store_faction_name, s1, ":tributary_off"),
        (create_text_overlay, reg1, "@Tributes paid to {s1}:", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (assign, reg0, ":cost_for"),

        (val_add, ":net_change", ":cost_for"),

        (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
        (overlay_set_color, reg1, 0xFF2C2C),

        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (val_sub, ":cur_y", 27),
    (try_end),
    ##end player tribute


    #disabled: done else where now
    ## begin imperial bureaucracy
    # (try_begin),
    #     (eq, "$g_is_emperor", 1),
    #     (create_text_overlay, reg1, "@Empire maintenance:", 0),
    #     (position_set_x, pos1, 900),
    #     (position_set_y, pos1, 900),
    #     (overlay_set_size, reg1, pos1),
    #     (position_set_x, pos1, 25),
    #     (position_set_y, pos1, ":cur_y"),
    #     (overlay_set_position, reg1, pos1),
    #     (assign, ":cost_for", 0),
    #     (try_for_range, ":center_n", walled_centers_begin, walled_centers_end),
    #         (store_faction_of_party, ":fac", ":center_n"),
    #         (eq, ":fac", "$players_kingdom"),
    #   ##edicts which cause costs for any center
    #         (try_begin),
    #             (eq, "$edict9", 1),
    #             (val_add, ":cost_for", 300),
    #         (try_end),
    #         (try_begin),
    #             (eq, "$edict7", 1),
    #             (val_add, ":cost_for", 500),
    #         (try_end),
    #   ##edicts end
    #         (try_begin),
    #             (party_slot_eq, ":center_n", slot_party_type, spt_castle),

    #             (try_begin),
    #                 (eq, ":reduce_campaign_ai", 0),#hard
    #                 (val_add, ":cost_for", 1200),
    #             (else_try),
    #                 (eq, ":reduce_campaign_ai", 1),#normal
    #                 (val_add, ":cost_for", 1100),
    #             (else_try),#easy
    #                 (val_add, ":cost_for", 950),
    #             (try_end),

    #             (faction_get_slot, ":centralization", "$players_kingdom", dplmc_slot_faction_centralization),
    #             (val_mul, ":centralization", 50), # if it is -3 => -150
    #             (val_add, ":cost_for", ":centralization"),
    #             (try_begin),
    #                 (eq, "$g_apply_budget_report_to_gold", 1),
    #                 (party_get_slot, ":town_gold", ":center_n", slot_town_wealth),
    #                 (lt, ":town_gold", 10000),
    #                 (store_add,":addition", ":centralization", 1100),
    #                 (val_add, ":town_gold", ":addition"),
    #                 (party_set_slot, ":center_n", slot_town_wealth, ":town_gold"),
    #             (try_end),
    #         (else_try),
    #             (try_begin),
    #                 (eq, ":reduce_campaign_ai", 0),#hard
    #                 (val_add, ":cost_for", 5500),
    #             (else_try),
    #                 (eq, ":reduce_campaign_ai", 1),#normal
    #                 (val_add, ":cost_for", 4500),
    #             (else_try),#easy
    #                 (val_add, ":cost_for", 3500),
    #             (try_end),
    #             (try_begin),
    #                 (eq, "$edict2", 1),
    #                 (val_add, ":cost_for", 1000),
    #             (try_end),
    #             (try_begin),
    #                 (eq, "$edict4", 1),
    #                 (val_add, ":cost_for", 1000),
    #             (try_end),
    #             (faction_get_slot, ":centralization", "$players_kingdom", dplmc_slot_faction_centralization),
    #             (val_mul, ":centralization", 500), # if it is -3 => -1500
    #             (val_add, ":cost_for", ":centralization"),
    #             (try_begin),
    #                 (eq, "$g_apply_budget_report_to_gold", 1),
    #                 (party_get_slot, ":town_gold", ":center_n", slot_town_wealth),
    #                 (lt, ":town_gold", 20000),
    #                 (store_add,":addition", ":centralization", 5000),
    #                 (val_add, ":town_gold", ":addition"),
    #                 (party_set_slot, ":center_n", slot_town_wealth, ":town_gold"),
    #             (try_end),
    #         (try_end),
    #     (try_end),
    #     (val_sub, ":net_change", ":cost_for"),
    #     (val_mul, ":cost_for", -1),
    #     (assign, reg0, ":cost_for"),


    #     (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
    #     (overlay_set_color, reg1, 0xFF2C2C),

    #     (position_set_x, pos1, 900),
    #     (position_set_y, pos1, 900),
    #     (overlay_set_size, reg1, pos1),
    #     (position_set_x, pos1, 500),
    #     (position_set_y, pos1, ":cur_y"),
    #     (overlay_set_position, reg1, pos1),
    #     (val_sub, ":cur_y", 27),
    # (try_end),
    ## villa costs
    (try_begin),
        (troop_slot_eq, "trp_global_variables", g_player_villa, 2),
        (gt, "$g_player_villa_costs", 0),
        (create_text_overlay, reg1, "@Household-costs Domus Mare:", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (assign, ":cost_for_1", "$g_player_villa_costs"),
        (try_begin),
            (eq, "$g_apply_budget_report_to_gold", 1),
            (assign, "$g_player_villa_costs", 0),
        (try_end),
        (val_sub, ":net_change", ":cost_for_1"),
        (val_mul, ":cost_for_1", -1),
        (assign, reg0, ":cost_for_1"),


        (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
        (overlay_set_color, reg1, 0xFF2C2C),

        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (val_sub, ":cur_y", 27),
    (try_end),
    ##villa rents
    (try_begin),
        (troop_slot_eq, "trp_global_variables", g_player_villa, 2),
        (eq, "$g_player_rent", 1),
        (store_troop_gold, ":gold", "trp_household_villa"),
        (gt, ":gold", 0),
        (create_text_overlay, reg1, "@Rents Domus Mare:", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),

        (assign, ":cost_for4444", ":gold"),
        (try_begin),
            (eq, "$g_apply_budget_report_to_gold", 1),
            (troop_remove_gold, "trp_household_villa", ":gold"),
        (try_end),
        (val_add, ":net_change", ":cost_for4444"),
        #(val_mul, ":cost_for", -1),
        (assign, reg0, ":cost_for4444"),


        (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
        (overlay_set_color, reg1, 0x00AA00),

        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (val_sub, ":cur_y", 27),
    (try_end),
    ##spouse spendings
    (try_begin),
        (troop_slot_ge, "trp_player", slot_troop_spouse, 1),
        (troop_get_slot,":spouse", "trp_player", slot_troop_spouse),
        (troop_slot_eq, ":spouse", slot_troop_bachus, 3),

        (create_text_overlay, reg1, "@Expenditure of your spouse:", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),

        (store_random_in_range, ":cost_for6", 21000, 22000),
        (val_mul, ":cost_for6", -1),
        (assign, reg0, ":cost_for6"),
        (val_sub, ":net_change", ":cost_for6"),

        (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
        (overlay_set_color, reg1, 0xFF2C2C),



        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (val_sub, ":cur_y", 27),
    (try_end),

    #is now accounted differently
    ###money from julia papia law
    # (try_begin),
    #     (eq, "$g_is_emperor", 1),
    #     (eq, "$edict2", 1),
    #     (troop_slot_ge, "trp_player", slot_troop_renown, 200),
    #     (create_text_overlay, reg1, "@Punitive payments from the Lex Iulia et Papia:", 0),
    #     (position_set_x, pos1, 900),
    #     (position_set_y, pos1, 900),
    #     (overlay_set_size, reg1, pos1),
    #     (position_set_x, pos1, 25),
    #     (position_set_y, pos1, ":cur_y"),
    #     (overlay_set_position, reg1, pos1),

    #     (assign, ":cost_for", 1000),
    #     (try_for_range, ":center", walled_centers_begin, walled_centers_end),
    #         (store_faction_of_party, ":center_faction", ":center"),
    #         (eq, ":center_faction", "$players_kingdom"),
    #         (val_add, ":cost_for", 1000),
    #     (try_end),

    #     (try_begin),
    #         (ge, "$conducted_census"),
    #         (val_mul, ":cost_for", 125),
    #         (val_div, ":cost_for", 100),
    #     (try_end),

    #     (assign, reg0, ":cost_for"),


    #     (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
    #     (overlay_set_color, reg1, 0x00AA00),

    #     (val_add, ":net_change", ":cost_for"),

    #     (position_set_x, pos1, 900),
    #     (position_set_y, pos1, 900),
    #     (overlay_set_size, reg1, pos1),
    #     (position_set_x, pos1, 500),
    #     (position_set_y, pos1, ":cur_y"),
    #     (overlay_set_position, reg1, pos1),
    #     (val_sub, ":cur_y", 27),
    # (try_end),
    #domus augusti maintaince
    (try_begin),
        (eq, "$g_is_emperor", 1),
        (party_slot_eq, "p_town_6", slot_town_lord, "trp_player"),
        (create_text_overlay, reg1, "@Household-costs Domus Augusti:", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (store_troop_gold,":cost_for3", "trp_housholder"),
        (troop_remove_gold, "trp_housholder",":cost_for3"),
        (val_add, ":cost_for3", 10000),
        (val_mul, ":cost_for3", -1),
        (assign, reg0, ":cost_for3"),
        (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
        (overlay_set_color, reg1, 0xFF2C2C),
        (val_add, ":net_change", ":cost_for3"),

        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (val_sub, ":cur_y", 27),
    (try_end),
    ##salary for player if he is in roman service
    (try_begin),
        (ge, "$g_rank", 1),
        (assign, ":salary", 0),
        (try_begin),
            (eq, "$g_rank", 1),
            (assign, ":salary", salary_aux_1),
        (else_try),
            (eq, "$g_rank", 2),
            (assign, ":salary", salary_aux_2),
        (else_try),
            (eq, "$g_rank", 3),
            (assign, ":salary", salary_legate),
        (else_try),
            (display_message, "@You have no valid rank!"),
        (try_end),
        (store_sub, ":salary_string", "$g_rank", 1),
        (val_add, ":salary_string", "str_salary_string_1"),
        (str_store_string, s0, ":salary_string"),
        (create_text_overlay, reg1, "str_s0", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),

        (assign, reg0, ":salary"),


        (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
        (overlay_set_color, reg1, 0x00AA00),

        (val_add, ":net_change", ":salary"),

        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (val_sub, ":cur_y", 27),
    (try_end),

    (try_begin),
        (faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
        (faction_slot_eq, "fac_player_supporters_faction", slot_faction_government_type, gov_feudal),

        (create_text_overlay, reg1, "@Tributes from vassals:", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),

        (faction_get_slot, ":centralisation", "fac_player_supporters_faction", dplmc_slot_faction_centralization),
        (val_add, ":centralisation", 4),
        (faction_get_slot, ":lords", "fac_player_supporters_faction", slot_faction_num_armies),
        (val_mul, ":lords", 400),
        (val_mul, ":lords", ":centralisation"),
        (assign, reg0, ":lords"),

        (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
        (overlay_set_color, reg1, 0x00AA00),

        (val_add, ":net_change", ":lords"),

        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (val_sub, ":cur_y", 27),
    (try_end),

    (try_begin),
        (gt, "$players_kingdom", 1),
        (neg|faction_slot_eq, "$players_kingdom", slot_faction_leader, "trp_player"),
        (faction_slot_eq, "$players_kingdom", slot_faction_government_type, gov_feudal),

        (create_text_overlay, reg1, "@Tributes paid to king:", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),

        (faction_get_slot, ":centralisation", "$players_kingdom", dplmc_slot_faction_centralization),
        (val_add, ":centralisation", 4),
        (val_mul, ":centralisation", 400),
        (assign, reg0, ":centralisation"),
        (val_mul, reg0, -1),
        (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
        (overlay_set_color, reg1, 0xFF2C2C),

        (val_sub, ":net_change", ":centralisation"),

        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (val_sub, ":cur_y", 27),
    (try_end),

    ##Loans from player
    (try_begin),
        (eq, "$g_apply_budget_report_to_gold", 1),
        (troop_slot_ge, "trp_argentarius", slot_troop_wealth, 1),
        (store_current_hours, ":time"),
        (neg|troop_slot_ge, "trp_argentarius", slot_troop_leaded_party, ":time"),
        (create_text_overlay, reg1, "@Interests from loans:", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),

        (troop_get_slot, ":money", "trp_argentarius", slot_troop_wealth),
        (assign, reg22, ":money"),

        (store_random_in_range, ":r1", -3, 16),
        (store_random_in_range, ":r2", -4, 16),
        (val_add, ":r1", ":r2"),
        (val_add, ":r1", 100),
        (val_mul, ":money", ":r1"),
        (val_div, ":money", 100),
        (store_sub, reg2, ":money", reg22),

        (try_begin),
            (troop_slot_eq, "trp_argentarius", slot_troop_prisoner_of_party, 0),
            (troop_set_slot, "trp_argentarius", slot_troop_leaded_party, 0),
            (troop_set_slot, "trp_argentarius", slot_troop_wealth, 0),
            (val_add, ":net_change", ":money"),
            (assign, reg0, ":money"),
            (create_text_overlay, reg1, "str_reg0_reg2", tf_right_align|tf_single_line),
        (else_try),
            (val_add, ":time", 164),
            (troop_set_slot, "trp_argentarius", slot_troop_leaded_party, ":time"),
            (val_add, ":net_change", reg2),
            (assign, reg0, reg2),
            (troop_get_slot, reg3, "trp_argentarius", slot_troop_wealth),
            (create_text_overlay, reg1, "str_reg0_reg3", tf_right_align|tf_single_line),
        (try_end),

        (try_begin),
            (ge, reg2, 0),
            (try_begin),
                (eq, "$g_apply_budget_report_to_gold", 1),
                (call_script, "script_add_to_weekly_income", reg2),
            (try_end),
            (overlay_set_color, reg1, 0x00AA00),
        (else_try),
            (overlay_set_color, reg1, 0xFF2C2C),
        (try_end),

        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (val_sub, ":cur_y", 27),
    (try_end),
    ##End Loans from player
    ##quest about investment from player
    (try_begin),
        (eq, "$g_apply_budget_report_to_gold", 1),

        (neg|check_quest_active, "qst_investment"),
        (quest_slot_ge, "qst_investment", slot_quest_target_amount, 1),
        (store_current_day, ":cur_day"),
        (val_sub, ":cur_day", 7),
        (quest_slot_ge, "qst_investment", slot_quest_current_state, ":cur_day"),
        (quest_get_slot, ":string", "qst_investment", slot_quest_target_dna),
        (str_store_string, s22, ":string"),
        (create_text_overlay, reg1, "@Interests from investment ({s22}):", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),

        (quest_get_slot, ":money", "qst_investment", slot_quest_target_amount),
        (quest_get_slot, ":fail_chance", "qst_investment", slot_quest_failure_consequence),
        (quest_get_slot, ":interest_rate", "qst_investment", slot_quest_convince_value),

        (store_random_in_range, ":random", 0, 100),

        (try_begin),
            (le, ":random", ":fail_chance"),
            (create_text_overlay, reg1, "@Deal has failed. You receive no money back.", tf_right_align|tf_single_line),
            (overlay_set_color, reg1, 0xFF2C2C),
        (else_try),
            (val_add, ":interest_rate", 100),
            (val_mul, ":money", ":interest_rate"),
            (val_div, ":money", 100),
            (assign, reg0, ":money"),
            (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
            (overlay_set_color, reg1, 0x00AA00),
            (val_add, ":net_change", ":money"),
        (try_end),

        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (val_sub, ":cur_y", 27),

        #clear all slots
        (quest_set_slot, "qst_investment", slot_quest_target_dna, 0),
        (quest_set_slot, "qst_investment", slot_quest_target_center, 0),
        (quest_set_slot, "qst_investment", slot_quest_target_amount, 0),
        (quest_set_slot, "qst_investment", slot_quest_convince_value, 0),
        (quest_set_slot, "qst_investment", slot_quest_failure_consequence, 0),
        (quest_set_slot, "qst_investment", slot_quest_current_state, 0),
    (try_end),
    ##End quest about investment from player

    ##freelancer wages
    (try_begin),
        (quest_slot_ge, "qst_freelancing", slot_quest_freelancer_payment, 1),

        (create_text_overlay, reg1, "@Wages:", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),

        (quest_get_slot, ":wages", "qst_freelancing", slot_quest_freelancer_payment),
        (val_add, ":net_change", ":wages"),
        (assign, reg0, ":wages"),
        (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),

        (overlay_set_color, reg1, 0x00AA00),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (val_sub, ":cur_y", 27),

        (try_begin),#clear slot
            (eq, "$g_apply_budget_report_to_gold", 1),
            (quest_set_slot, "qst_freelancing", slot_quest_freelancer_payment, 0),
        (try_end),
    (try_end),
    ##End freelancer wages

    (create_mesh_overlay, reg1, "mesh_white_plane"),
    (overlay_set_color, reg1, 0x000000),
    (position_set_x, pos1, 24000),
    (position_set_y, pos1, 50),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 25),
    (store_add, ":line_y", ":cur_y", 25),
    (position_set_y, pos1, ":line_y"),
    (overlay_set_position, reg1, pos1),
    (create_text_overlay, reg1, "str_net_change", 0),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 25),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg1, pos1),
    (assign, reg0, ":net_change"),
    (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),

    (try_begin),
        (gt, reg0, 0),
        (overlay_set_color, reg1, 0x00AA00),
    (else_try),
        (lt, reg0, 0),
        (overlay_set_color, reg1, 0xFF0000),
    (try_end),

    (position_set_x, pos1, 500),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg1, pos1),
    (val_sub, ":cur_y", 27),
    (create_text_overlay, reg1, "str_earlier_wealth", 0),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 25),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg1, pos1),
    ##diplomacy begin
    (try_begin),
        (gt, "$g_player_chamberlain", 0),
        (store_troop_gold, ":player_wealth", "trp_household_possessions"),
    (else_try),
        ##diplomacy end
        (store_troop_gold, ":player_wealth", "trp_player"),
        ##diplomacy begin
    (try_end),
    ##diplomacy end
    (assign, reg0, ":player_wealth"),
    (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg1, pos1),
    (val_sub, ":cur_y", 27),
    (val_mul, ":net_change", -1),
    ##diplomacy begin
    (assign, ":cash_to_pay", 0),
    ##diplomacy end
    (try_begin),
        (ge, ":player_wealth", ":net_change"),
        (assign, ":player_wealth_dif", ":net_change"),
        (assign, ":player_new_debt_to_party_members", 0),
    (else_try),
        (assign, ":player_wealth_dif", ":player_wealth"),
        (store_sub, ":player_new_debt_to_party_members", ":net_change", ":player_wealth"),
    ##diplomacy begin
        (try_begin),
            (gt, "$g_player_chamberlain", 0),
            (store_troop_gold, ":player_inv_wealth", "trp_player"),
            (try_begin), #drawing debts from personal money
                (ge, ":player_inv_wealth", ":player_new_debt_to_party_members"),
                (assign, ":cash_to_pay", ":player_new_debt_to_party_members"),
                (assign, ":player_new_debt_to_party_members", 0),
            (else_try),
                (assign, ":cash_to_pay", ":player_inv_wealth"),
                (val_sub, ":player_new_debt_to_party_members",":player_inv_wealth"),
            (try_end),

            (try_begin),
                (eq, "$g_apply_budget_report_to_gold", 1),
                (troop_remove_gold, "trp_player", ":cash_to_pay"),
                (assign, reg0, ":cash_to_pay"),
                (display_message, "@You paid {reg0} denars in cash to liquidate a debt", message_alert), #SB : rephrase and recolor
            (try_end),
        (try_end),
        ##diplomacy end
    (try_end),
    (create_text_overlay, reg1, "str_new_wealth", 0),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 25),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg1, pos1),
    (store_sub, reg0, ":player_wealth", ":player_wealth_dif"),
    (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg1, pos1),
    (val_sub, ":cur_y", 27),

    ##diplomacy begin
    (try_begin),
        (gt, "$g_player_chamberlain", 0),
        (gt, ":cash_to_pay", 0),
        (create_text_overlay, reg1, "@Earlier cash:", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (assign, reg0, ":player_inv_wealth"),
        (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (val_sub, ":cur_y", 27),

        (create_text_overlay, reg1, "@New cash:", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (store_sub, reg0, ":player_inv_wealth", ":cash_to_pay"),
        (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (val_sub, ":cur_y", 27),
    (try_end),
    ##diplomacy end

    (try_begin),
        (gt, ":player_new_debt_to_party_members", 0),
        (create_text_overlay, reg1, "str_new_debts", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (assign, reg0, ":player_new_debt_to_party_members"),
        (create_text_overlay, reg1, "str_reg0", tf_right_align|tf_single_line),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (val_sub, ":cur_y", 27),
        (neq, "$g_apply_budget_report_to_gold", 0),
        (call_script, "script_objectionable_action", tmt_egalitarian, "str_men_unpaid"),
    (try_end),

    (set_container_overlay, -1),

    (create_button_overlay, "$g_presentation_obj_budget_report_1", "@Continue..."),
    (position_set_x, pos1, 225),
    (position_set_y, pos1, 60),
    (overlay_set_position, "$g_presentation_obj_budget_report_1", pos1),

    (try_begin),
        (eq, "$g_apply_budget_report_to_gold", 1),

        (try_begin),
            (gt, ":expierence_gain", 0),
            (assign, reg0, ":expierence_gain"),
            (display_message, "@You gain {reg0} xp from your successful business.", message_positive),
            (add_xp_as_reward, ":expierence_gain"),
        (try_end),

        (assign, "$g_player_debt_to_party_members", ":player_new_debt_to_party_members"),
        (try_begin),
            (gt, ":player_wealth_dif", 0),
            (try_begin),
                (gt, "$g_player_chamberlain", 0),
                (call_script, "script_dplmc_withdraw_from_treasury", ":player_wealth_dif"),
            (else_try),
                (troop_remove_gold, "trp_player", ":player_wealth_dif"),
            (try_end),
        (else_try),
            (val_mul, ":player_wealth_dif", -1),
            (try_begin),
                (gt, "$g_player_chamberlain", 0),
                (call_script, "script_dplmc_pay_into_treasury", ":player_wealth_dif"),
            (else_try),
                (troop_add_gold, "trp_player", ":player_wealth_dif"),
            (try_end),
        (try_end),
        (try_for_range, ":center_no", centers_begin, centers_end),
            (party_slot_eq, ":center_no", slot_town_lord, "trp_player"),
            (party_set_slot, ":center_no", slot_center_accumulated_rents, 0),
            (party_set_slot, ":center_no", slot_center_accumulated_tariffs, 0),
        (try_end),
        (assign, "$g_cur_week_half_daily_wage_payments", 0),#Reseting the weekly half wage payments
    (try_end),

    (try_begin),
        (ge, "$g_is_emperor", 1),
        (call_script, "script_generate_imperial_bugdet_report"),
    (else_try),
        (create_mesh_overlay, reg1, "mesh_pic_payment"),
        (position_set_x, pos1, 800),
        (position_set_y, pos1, 800),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 170),
        (position_set_y, pos1, 0),
        (overlay_set_position, reg1, pos1),
    (try_end),
  ]),

  (ti_on_presentation_event_state_change,[
        (store_trigger_param_1, ":object"),
        (store_trigger_param_2, ":value"),
        (try_begin),
            (eq, ":object", "$g_presentation_obj_budget_report_1"),
            (presentation_set_duration, 0),
        (else_try),
            (eq, ":object", "$g_presentation_credits_obj_1"),
            (assign, "$g_presentation_credits_obj_1_alpha", ":value"),
            # (presentation_set_duration, 0),
            (start_presentation, "prsnt_budget_report"),
        (else_try),
            (eq, ":object", "$g_presentation_credits_obj_2"),
            (assign, "$g_presentation_credits_obj_2_alpha", ":value"),
            # (presentation_set_duration, 0),
            (start_presentation, "prsnt_budget_report"),
        (else_try),
            (eq, ":object", "$g_presentation_credits_obj_3"),
            (assign, "$g_presentation_credits_obj_3_alpha", ":value"),
            # (presentation_set_duration, 0),
            (start_presentation, "prsnt_budget_report"),
        (try_end),
  ]),
]),

  ("game_before_quit", 0, mesh_load_window,
   [
     (ti_on_presentation_load,
      [
        (try_begin),
          (is_trial_version),
          (set_fixed_point_multiplier, 1000),
          (create_mesh_overlay, reg0, "mesh_quit_adv"),
          (position_set_x, pos1, -1),
          (position_set_y, pos1, -1),
          (overlay_set_position, reg0, pos1),
          (position_set_x, pos1, 1002),
          (position_set_y, pos1, 1002),
          (overlay_set_size, reg0, pos1),
          (assign, "$g_game_before_quit_state", 0),
          (presentation_set_duration, 999999),
        (try_end),
      ]),
     (ti_on_presentation_run,
       [
        (store_trigger_param_1, ":cur_time"),
        (gt, ":cur_time", 500),
        (try_begin),
          (this_or_next|key_clicked, key_space),
          (this_or_next|key_clicked, key_enter),
          (this_or_next|key_clicked, key_escape),
          (this_or_next|key_clicked, key_back_space),
          (this_or_next|key_clicked, key_left_mouse_button),
          (this_or_next|key_clicked, key_right_mouse_button),
          (this_or_next|key_clicked, key_xbox_ltrigger),
          (key_clicked, key_xbox_rtrigger),
          (try_begin),
            (eq, "$g_game_before_quit_state", 0),
            (val_add, "$g_game_before_quit_state", 1),
            (create_mesh_overlay, reg0, "mesh_quit_adv_b"),
            (position_set_x, pos1, -1),
            (position_set_y, pos1, -1),
            (overlay_set_position, reg0, pos1),
            (position_set_x, pos1, 1002),
            (position_set_y, pos1, 1002),
            (overlay_set_size, reg0, pos1),
          (else_try),
            (presentation_set_duration, 0),
          (try_end),
        (try_end),
        ]),
     ]),

  ("multiplayer_duel_start_counter", prsntf_read_only|prsntf_manual_end_only, 0, [    ]),

##diplomacy begin
  ("dplmc_autoloot_upgrade_management", 0, mesh_load_window, [
    (ti_on_presentation_load,
     [
      (set_fixed_point_multiplier, 1000),
      (presentation_set_duration, 999999),

      # done
      (create_game_button_overlay, "$g_presentation_obj_10", "str_done"),
      (position_set_x, pos1, 900),
      (position_set_y, pos1, 25),
      (overlay_set_position, "$g_presentation_obj_10", pos1),

      ## current hero
      # character picture
      (create_mesh_overlay_with_tableau_material, reg0, -1, "tableau_troop_note_mesh", "$temp"),
      (position_set_x, pos1, 500),
      (position_set_y, pos1, 500),
      (overlay_set_size, reg0, pos1),
      (position_set_x, pos1, 200),
      (position_set_y, pos1, 560),
      (overlay_set_position, reg0, pos1),

      (str_store_troop_name, s1, "$temp"),
      (store_character_level, reg2, "$temp"),
      (store_troop_health, reg1, "$temp", 1),
      (call_script, "script_dplmc_get_troop_max_hp", "$temp"),
      (str_store_string, s1, "@Name: {s1}^Level: {reg2}^HP: {reg1}/{reg0}"),


      (create_text_overlay, reg1, "@{s1}", tf_double_space),
      (position_set_x, pos1, 380),
      (position_set_y, pos1, 560),
      (overlay_set_position, reg1, pos1),

      # title
      (create_text_overlay, reg1, "@Weapon upgrade settings:", tf_center_justify|tf_vertical_align_center),
      (position_set_x, pos1, 445),
      (position_set_y, pos1, 530),
      (overlay_set_position, reg1, pos1),

      # init trp_temp_array_c
      (assign, ":sub_overlay_id", 0),
      (try_for_range_backwards, ":item_type", 0, itp_type_animal),
        (this_or_next|is_between, ":item_type", itp_type_one_handed_wpn, itp_type_goods),
        (this_or_next|is_between, ":item_type", itp_type_pistol, itp_type_animal),
        (eq, ":item_type", 0),
        (troop_set_slot, "trp_temp_array_c", ":sub_overlay_id", ":item_type"),
        (val_add, ":sub_overlay_id", 1),
      (try_end),


      # settings 1
      # set 1: wpn slot button
      (call_script, "script_create_wpn_slot_overlay", 0, 450),
      (assign, "$g_presentation_obj_1", reg1),

      (call_script, "script_create_wpn_slot_overlay", 1, 420),
      (assign, "$g_presentation_obj_2", reg1),

      (call_script, "script_create_wpn_slot_overlay", 2, 390),
      (assign, "$g_presentation_obj_3", reg1),

      (call_script, "script_create_wpn_slot_overlay", 3, 360),
      (assign, "$g_presentation_obj_4", reg1),

      # SB : damage types + meta type combo labels
      (create_combo_label_overlay, "$g_presentation_obj_sliders_1"),
      (overlay_add_item, "$g_presentation_obj_sliders_1", "str_dplmc_none"),

      (position_set_x, pos1, 465),
      (position_set_y, pos1, 450),
      (create_text_overlay, reg1, "@Damage preference", tf_single_line),
      (overlay_set_position, reg1, pos1),
      # (position_set_x, pos1, 600),
      (position_set_x, pos1, 600),
      (position_set_y, pos1, 420),
      (overlay_set_position, "$g_presentation_obj_sliders_1", pos1),
      (position_set_x, pos1, 800),
      (position_set_y, pos1, 750),
      (overlay_set_size, "$g_presentation_obj_sliders_1", pos1),
      (overlay_set_val, "$g_presentation_obj_sliders_1", 0), #by default
      # (overlay_set_alpha, "$g_presentation_obj_sliders_1", 0), #so apparently this only works for the text

      (position_set_x, pos1, 465),
      (position_set_y, pos1, 390),
      (create_text_overlay, reg1, "@Item meta-type", tf_single_line),
      (overlay_set_position, reg1, pos1),

      (position_set_x, pos1, 600),
      (position_set_y, pos1, 360),
      (create_combo_label_overlay, "$g_presentation_obj_sliders_2"),
      (overlay_set_position, "$g_presentation_obj_sliders_2", pos1),
      # (position_set_x, pos1, 600),
      (position_set_x, pos1, 800),
      (position_set_y, pos1, 750),
      (overlay_set_size, "$g_presentation_obj_sliders_2", pos1),
      (overlay_add_item, "$g_presentation_obj_sliders_2", "str_dplmc_hero_wpn_slot_no_metatype"),
      (overlay_set_val, "$g_presentation_obj_sliders_2", 0), #by default

      (assign, ":slot_value", -1),
      (assign, ":meta_value", -1),
      (assign, ":icon", -1),
      (try_begin), #set values here
        (neq, "$temp_2", -1),
        (troop_get_slot, ":slot_value", "$temp", "$temp_2"),
        (store_div, ":dmg_type", ":slot_value", meta_dmg_mask),
        (store_mod, ":meta_value", ":slot_value", meta_dmg_mask),
        (val_mod, ":slot_value", meta_itp_mask),

        (try_begin), #populate damage type slider
          (call_script, "script_cf_item_type_has_advanced_autoloot", ":slot_value"),
          (overlay_add_item, "$g_presentation_obj_sliders_1", "@cut"),
          (overlay_add_item, "$g_presentation_obj_sliders_1", "@pierce"),
          (overlay_add_item, "$g_presentation_obj_sliders_1", "@blunt"),
        (try_end),
        (overlay_set_val, "$g_presentation_obj_sliders_1", ":dmg_type"),
        # (overlay_set_alpha, "$g_presentation_obj_sliders_1", 0xff),
      (try_end),
      #populate slider with values, tooltip unnecessary since icons are directly below label
      (try_begin),
        (eq, ":slot_value", itp_type_polearm),
        (overlay_add_item, "$g_presentation_obj_sliders_2", "str_dplmc_hero_wpn_slot_lance"),
        (overlay_add_item, "$g_presentation_obj_sliders_2", "str_dplmc_hero_wpn_slot_pikes"),
        (overlay_add_item, "$g_presentation_obj_sliders_2", "str_dplmc_hero_wpn_slot_halberd"),
        (try_begin),
          (eq, ":meta_value", dplmc_itp_lance),
          (overlay_set_val, "$g_presentation_obj_sliders_2", 1),
          (assign, ":icon", "mesh_icon_lance"),
        (else_try),
          (eq, ":meta_value", dplmc_itp_pike),
          (overlay_set_val, "$g_presentation_obj_sliders_2", 2),
          (assign, ":icon", "mesh_icon_spear"),
        (else_try),
          (eq, ":meta_value", dplmc_itp_halberd),
          (overlay_set_val, "$g_presentation_obj_sliders_2", 3),
          (assign, ":icon", "mesh_icon_bardiche"),
        (try_end),
      (else_try),
        (eq, ":slot_value", itp_type_two_handed_wpn),
        (overlay_add_item, "$g_presentation_obj_sliders_2", "str_dplmc_hero_wpn_slot_morningstar"),
        (try_begin),
          (eq, ":meta_value", dplmc_itp_morningstar),
          (assign, ":icon", "mesh_icon_morningstar"),
          (overlay_set_val, "$g_presentation_obj_sliders_2", 1),
        (try_end),
      (try_end),

      #add icons
      (try_begin),
        (neq, ":icon", -1),
        (create_mesh_overlay, "$g_presentation_obj_sliders_2_val", ":icon"),
        (position_set_x, pos1, 560),
        (position_set_y, pos1, 325),
        (overlay_set_position, "$g_presentation_obj_sliders_2_val", pos1),
      (else_try), #create it anyway, but keep it blank
        (create_mesh_overlay, "$g_presentation_obj_sliders_2_val", "mesh_white_plane"),
        (overlay_set_alpha, "$g_presentation_obj_sliders_2_val", 0),
      (try_end),

      #do inventory polling, draw backing grid
      (init_position, pos2),
      (init_position, pos3),

      (assign, ":cur_x", 75),
      (position_set_y, pos1, 200),
      #downscale base meshes by 75%, bounding box by 60%
      (position_set_x, pos2, 600),
      (position_set_y, pos2, 600),
      (position_set_x, pos3, 750),
      (position_set_y, pos3, 750),
      # (store_sub, ":cur_slot", "$temp_2", dplmc_slot_upgrade_wpn_0),

      #exclude weapons, there's already objects for them
      (try_for_range, ":item_slot", ek_head, ek_food),
        (assign, ":inventory_mesh", "mesh_mp_inventory_choose"), #default bordered square
        (try_begin),
          # (is_between, ":item_slot", ek_item_0, ek_head),
          # (try_begin),
            # (eq, ":cur_slot", ":item_slot"),
            # (assign, ":inventory_mesh", "mesh_mp_inventory_choose"),
          # (else_try),
            # (assign, ":inventory_mesh", "mesh_mp_inventory_slot_equip"),
          # (try_end),
        # (else_try), #would be easier if they were in order
          (eq, ":item_slot", ek_horse),
          (troop_slot_ge, "$temp", dplmc_slot_upgrade_horse, 1),
          (assign, ":inventory_mesh", "mesh_mp_inventory_slot_horse"),
        (else_try),
          # (is_between, ":item_slot", ek_head, ek_horse),
          (troop_slot_ge, "$temp", dplmc_slot_upgrade_armor, 1),
          (try_begin),
            (eq, ":item_slot", ek_head),
            (assign, ":inventory_mesh", "mesh_mp_inventory_slot_helmet"),
          (else_try),
            (eq, ":item_slot", ek_body),
            (assign, ":inventory_mesh", "mesh_mp_inventory_slot_armor"),
          (else_try),
            (eq, ":item_slot", ek_foot),
            (assign, ":inventory_mesh", "mesh_mp_inventory_slot_boot"),
          (else_try),
            (eq, ":item_slot", ek_gloves),
            (assign, ":inventory_mesh", "mesh_mp_inventory_slot_glove"),
          (try_end),
        (try_end),
        (create_mesh_overlay, reg1, ":inventory_mesh"),
        (position_set_x, pos1, ":cur_x"),
        (position_set_y, pos1, 200),
        (overlay_set_position, reg1, pos1),
        (overlay_set_size, reg1, pos2),
        (overlay_set_alpha, reg1, 0x99), #reduce visibility to 60%
        (try_begin), #fetch actual item
          (troop_get_inventory_slot, ":item", "$temp", ":item_slot"),
          (gt, ":item", 0),
          (create_mesh_overlay_with_item_id, reg1, ":item"),
          # (store_add, ":item_x", ":cur_x", 50),
          (store_add, ":item_x", ":cur_x", 37),
          (position_set_x, pos1, ":item_x"),
          (position_set_y, pos1, 200 + 37),
          (overlay_set_position, reg1, pos1),
          (overlay_set_size, reg1, pos3),
          #store item object for mouseover effect
          (troop_set_slot, "trp_stack_selection_ids", ":item_slot", reg1),
        (try_end),
        (val_add, ":cur_x", 75),
      (try_end),

      # (position_set_y, pos1, 360),
      # (create_combo_button_overlay, "$g_presentation_obj_4"),
      # (overlay_set_position, "$g_presentation_obj_4", pos1),
      # (assign, ":sub_overlay_id", 0),
      # (call_script, "script_dplmc_get_current_item_for_autoloot", 3),
      # (try_for_range_backwards, ":item_type", 0, itp_type_animal),
        # (this_or_next|is_between, ":item_type", itp_type_one_handed_wpn, itp_type_goods),
        # (this_or_next|is_between, ":item_type", itp_type_pistol, itp_type_animal),
        # (eq, ":item_type", 0),
        # (store_add, ":out_string", "str_dplmc_hero_wpn_slot_none", ":item_type"),
        # (str_store_string, s0, ":out_string"),
        # (overlay_add_item, "$g_presentation_obj_4", s0),
        # (try_begin),
          # (troop_slot_eq, "$temp", dplmc_slot_upgrade_wpn_3, ":item_type"),
          # (overlay_set_val, "$g_presentation_obj_4", ":sub_overlay_id"),
        # (try_end),
        # (val_add, ":sub_overlay_id", 1),
      # (try_end),

      (position_set_x, pos1, 1000),
      (position_set_y, pos1, 800),
      (overlay_set_size, "$g_presentation_obj_1", pos1),
      (overlay_set_size, "$g_presentation_obj_2", pos1),
      (overlay_set_size, "$g_presentation_obj_3", pos1),
      (overlay_set_size, "$g_presentation_obj_4", pos1),
      # set 1: apply to all
      (position_set_x, pos1, 128),
      (position_set_y, pos1, 310),
      (create_image_button_overlay, "$g_presentation_obj_11", "mesh_longer_button", "mesh_longer_button_down"),
      (overlay_set_position, "$g_presentation_obj_11", pos1),
      (position_set_x, pos1, 270),
      (position_set_y, pos1, 325),
      (create_text_overlay, reg1, "@Apply to everyone", tf_center_justify|tf_vertical_align_center),
      (overlay_set_position, reg1, pos1),

      # upgrade armor and horse
      # text
      (position_set_x, pos1, 300),
      (position_set_y, pos1, 155),
      (create_text_overlay, reg1, "@Upgrade armor", tf_center_justify|tf_vertical_align_center),
      (overlay_set_position, reg1, pos1),
      (position_set_y, pos1, 105),
      (create_text_overlay, reg1, "@Upgrade horse", tf_center_justify|tf_vertical_align_center),
      (overlay_set_position, reg1, pos1),
      # checkbox
      (position_set_x, pos1, 180),
      (position_set_y, pos1, 148),
      (create_check_box_overlay, "$g_presentation_obj_13", "mesh_checkbox_off", "mesh_checkbox_on"),
      (overlay_set_position, "$g_presentation_obj_13", pos1),
      (troop_get_slot,":upg_armor", "$temp",dplmc_slot_upgrade_armor),
      (overlay_set_val, "$g_presentation_obj_13", ":upg_armor"),
      (position_set_y, pos1, 98),
      (create_check_box_overlay, "$g_presentation_obj_14", "mesh_checkbox_off", "mesh_checkbox_on"),
      (overlay_set_position, "$g_presentation_obj_14", pos1),
      (troop_get_slot,":upg_horse", "$temp",dplmc_slot_upgrade_horse),
      (overlay_set_val, "$g_presentation_obj_14", ":upg_horse"),
      # long button
      (position_set_x, pos1, 418),
      (position_set_y, pos1, 140),
      (create_image_button_overlay, "$g_presentation_obj_15", "mesh_longer_button", "mesh_longer_button_down"),
      (overlay_set_position, "$g_presentation_obj_15", pos1),
      (position_set_y, pos1, 90),
      (create_image_button_overlay, "$g_presentation_obj_16", "mesh_longer_button", "mesh_longer_button_down"),
      (overlay_set_position, "$g_presentation_obj_16", pos1),
      (position_set_x, pos1, 560),
      (position_set_y, pos1, 155),
      (create_text_overlay, reg1, "@Apply to everyone", tf_center_justify|tf_vertical_align_center),
      (overlay_set_position, reg1, pos1),
      (position_set_y, pos1, 105),
      (create_text_overlay, reg1, "@Apply to everyone", tf_center_justify|tf_vertical_align_center),
      (overlay_set_position, reg1, pos1),

      # hero list
      (assign, ":pos_x", 900),
      (assign, ":pos_y", 600),
      (assign, ":num_of_heros", 0),
      (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
      (try_for_range, ":i_stack", 1, ":num_stacks"),
        (party_stack_get_troop_id,":stack_troop","p_main_party",":i_stack"),
        (is_between, ":stack_troop", companions_begin, companions_end),
        (str_store_troop_name, s1, ":stack_troop"),
        (position_set_x, pos1, ":pos_x"),
        (position_set_y, pos1, ":pos_y"),
        (val_sub, ":pos_y", 30),
        (create_button_overlay, reg0, s1, tf_center_justify|tf_vertical_align_center),
        (overlay_set_position, reg0, pos1),

        (assign, ":trp_slot_prsnt_no", ":num_of_heros"),
        (troop_set_slot, "trp_temp_array_a", ":trp_slot_prsnt_no", reg0),
        (troop_set_slot, "trp_temp_array_b", ":trp_slot_prsnt_no", ":stack_troop"),
        (val_add, ":num_of_heros", 1),
      (try_end),
#      ####### mouse fix pos system #######
#      (call_script, "script_mouse_fix_pos_ready"),
#      ####### mouse fix pos system #######
     ]),

#    (ti_on_presentation_run,
#      [
#      ####### mouse fix pos system #######
#      (call_script, "script_mouse_fix_pos_run"),
#      ####### mouse fix pos system #######
#    ]),


    ## Mouse-over, iterate through objects in trp_stack_selection_ids
    (ti_on_presentation_mouse_enter_leave,
      [
      (store_trigger_param_1, ":object"),
      (store_trigger_param_2, ":enter_leave"),


      (try_for_range, ":item_slot", ek_item_0, ek_food),
        (troop_slot_eq, "trp_stack_selection_ids", ":item_slot", ":object"),
        (try_begin), #entering, show details
          (eq, ":enter_leave", 0),
          #find item
          (troop_get_inventory_slot, ":item_no", "$temp", ":item_slot"),
          (gt, ":item_no", -1),
          (troop_get_inventory_slot_modifier, ":imod_no", "$temp", ":item_slot"),
          (set_fixed_point_multiplier, 1000),
          (position_set_x, pos1, 560),
          (position_set_y, pos1, 310),
          (show_item_details_with_modifier, ":item_no", ":imod_no", pos1, 100),
        (else_try), #close it
          (eq, ":enter_leave", 1),
          (close_item_details),
        (try_end),
      (try_end),
      ]
    ),
    # # meta-type selector based on which combobox was last touched
    # (ti_on_presentation_mouse_press,
      # [ (store_trigger_param_1, ":object"),
        # (store_trigger_param_2, ":mouse_state"),

        # (try_begin),
          # #technically they should be sequential, but w/e
          # (eq, ":mouse_state", 0),
          # (try_begin),
            # (eq, ":object", "$g_presentation_obj_1"),
            # (assign, "$temp_2", dplmc_slot_upgrade_wpn_0),
          # (else_try),
            # (eq, ":object", "$g_presentation_obj_2"),
            # (assign, "$temp_2", dplmc_slot_upgrade_wpn_1),
          # (else_try),
            # (eq, ":object", "$g_presentation_obj_3"),
            # (assign, "$temp_2", dplmc_slot_upgrade_wpn_2),
          # (else_try),
            # (eq, ":object", "$g_presentation_obj_4"),
            # (assign, "$temp_2", dplmc_slot_upgrade_wpn_3),
          # (try_end),
        # (try_end),

      # ]
    # ),

    (ti_on_presentation_event_state_change,
     [
        (store_trigger_param_1, ":object"),
        (store_trigger_param_2, ":value"),

        (try_begin),
          (eq, ":object", "$g_presentation_obj_1"),
          (call_script, "script_update_wpn_slot_itp", dplmc_slot_upgrade_wpn_0, ":value"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_2"),
          (call_script, "script_update_wpn_slot_itp", dplmc_slot_upgrade_wpn_1, ":value"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_3"),
          (call_script, "script_update_wpn_slot_itp", dplmc_slot_upgrade_wpn_2, ":value"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_4"),
          (call_script, "script_update_wpn_slot_itp", dplmc_slot_upgrade_wpn_3, ":value"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_10"),
          (presentation_set_duration, 0),
        (else_try),
          (eq, ":object", "$g_presentation_obj_11"),
          (call_script, "script_dplmc_copy_upgrade_to_all_heroes", "$temp", dplmc_wpn_setting_1),
        (else_try),
          (eq, ":object", "$g_presentation_obj_13"),
          (troop_set_slot, "$temp", dplmc_slot_upgrade_armor, ":value"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_14"),
          (troop_set_slot, "$temp", dplmc_slot_upgrade_horse, ":value"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_15"),
          (call_script, "script_dplmc_copy_upgrade_to_all_heroes", "$temp", dplmc_armor_setting),
        (else_try),
          (eq, ":object", "$g_presentation_obj_16"),
          (call_script, "script_dplmc_copy_upgrade_to_all_heroes", "$temp", dplmc_horse_setting),
        (else_try),
          (eq, ":object", "$g_presentation_obj_sliders_1"), #damage type
          (is_between, "$temp_2", dplmc_slot_upgrade_wpn_0, dplmc_slot_upgrade_wpn_3 + 1), #valid range
          (store_mul, ":slot_value", ":value", meta_dmg_mask),
          (troop_get_slot, ":cur_value", "$temp", "$temp_2"),
          (val_mod, ":cur_value", meta_dmg_mask), #unmask
          (val_add, ":slot_value", ":cur_value"),
          (troop_set_slot, "$temp", "$temp_2", ":slot_value"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_sliders_2"), #meta-type combo label
          (is_between, "$temp_2", dplmc_slot_upgrade_wpn_0, dplmc_slot_upgrade_wpn_3 + 1), #valid range
          (store_mul, ":slot_value", ":value", meta_itp_mask),
          (troop_get_slot, ":cur_value", "$temp", "$temp_2"),

          #get lower bits
          (store_mod, ":item_type", ":cur_value", meta_itp_mask),
          (call_script, "script_cf_item_type_has_advanced_autoloot", ":item_type"),
          (val_add, ":slot_value", ":item_type"), #base type
          #get icon at this point
          (overlay_set_alpha, "$g_presentation_obj_sliders_2_val", 0),
          (try_begin),
            (eq, ":slot_value", dplmc_itp_morningstar),
            (assign, ":icon", "mesh_icon_morningstar"),
          (else_try),
            (this_or_next|eq, ":slot_value", dplmc_itp_lance),
            (this_or_next|eq, ":slot_value", dplmc_itp_pike),
            (eq, ":slot_value", dplmc_itp_halberd),
            (store_add, ":icon", "mesh_icon_morningstar", ":value"), #1 to 3
          (else_try),
            (assign, ":icon", -1),
          (try_end),
          #get higher bits
          (val_div, ":cur_value", meta_dmg_mask),
          (val_mul, ":cur_value", meta_dmg_mask),
          (val_add, ":slot_value", ":cur_value"),

          (troop_set_slot, "$temp", "$temp_2", ":slot_value"),

          (try_begin), #replacing old icon
            (gt, ":icon", 0),
            (set_fixed_point_multiplier, 1000),
            (create_mesh_overlay, reg1, ":icon"),
            (position_set_x, pos1, 560),
            (position_set_y, pos1, 325),
            (overlay_set_position, reg1, pos1),
            (assign, "$g_presentation_obj_sliders_2_val", reg1),
          (try_end),
        (try_end),

        (assign, ":num_of_heros", 0),
        (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
        (try_for_range, ":i_stack", 0, ":num_stacks"),
          (party_stack_get_troop_id,":stack_troop","p_main_party",":i_stack"),
          (is_between, ":stack_troop", companions_begin, companions_end),
          (assign, ":trp_slot_prsnt_no", ":num_of_heros"),
          (val_add, ":num_of_heros", 1),
          (troop_slot_eq, "trp_temp_array_a", ":trp_slot_prsnt_no", ":object"),
          (troop_get_slot, ":cur_troop", "trp_temp_array_b", ":trp_slot_prsnt_no"),
          (assign, "$lord_selected", ":cur_troop"),
          (assign, "$temp", ":cur_troop"),
          (set_player_troop, ":cur_troop"), # SB : set troop here, restore on exit
          (start_presentation, "prsnt_dplmc_autoloot_upgrade_management"),
        (try_end),
    ]),
  ]),


("dplmc_policy_management",0,mesh_load_window,[
  (ti_on_presentation_load,[
    (set_fixed_point_multiplier, 1000),
    (presentation_set_duration, 999999),
    ##nested diplomacy start+ insert g_presentation_obj_5, g_presentation_obj_6 and increment others

    ##Moved up here from below
    (faction_get_slot, ":centralization", "fac_player_supporters_faction", dplmc_slot_faction_centralization),
    (faction_get_slot, ":aristocracy", "fac_player_supporters_faction", dplmc_slot_faction_aristocracy),
    (faction_get_slot, ":serfdom", "fac_player_supporters_faction", dplmc_slot_faction_serfdom),
    (faction_get_slot, ":quality", "fac_player_supporters_faction", dplmc_slot_faction_quality),
    (faction_get_slot, ":mercantilism", "fac_player_supporters_faction", dplmc_slot_faction_quality),#<- dplmc+ added

    # done
    (create_game_button_overlay, "$g_presentation_obj_12", "str_done"),#<- dplmc+ changed obj_10 to obj_12
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 25),
    (overlay_set_position, "$g_presentation_obj_12", pos1),#<- dplmc_ changed obj_10 to obj_12

    #SB : add randomize
    (create_game_button_overlay, "$g_presentation_obj_11", "str_randomize"),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 125),
    (overlay_set_position, "$g_presentation_obj_11", pos1),

    # title
    (create_text_overlay, reg1, "@Select your domestic policy", tf_center_justify|tf_vertical_align_center),
    (position_set_x, pos1, 445),
    (position_set_y, pos1, 700),
    (overlay_set_position, reg1, pos1),

    (create_slider_overlay, "$g_presentation_obj_sliders_1", -3, 3),
    (create_slider_overlay, "$g_presentation_obj_sliders_2", -3, 3),
    (create_slider_overlay, "$g_presentation_obj_sliders_3", -3, 3),
    (create_slider_overlay, "$g_presentation_obj_sliders_4", -3, 3),
    (create_slider_overlay, "$g_presentation_obj_sliders_5", -3, 3),#<-dplmc+ added
    (assign, reg1, 25),
    ##dplmc+ start incremented sliders by 1... (and changed since things might not be at their initial values)
    (store_add, ":text", "str_dplmc_neither_centralize_nor_decentralized", ":centralization"),
    (create_text_overlay, "$g_presentation_obj_sliders_6", ":text"),
    (store_add, ":text", "str_dplmc_neither_aristocratic_nor_plutocratic", ":aristocracy"),
    (create_text_overlay, "$g_presentation_obj_sliders_7", ":text"),
    (store_add, ":text", "str_dplmc_mixture_serfs", ":serfdom"),
    (create_text_overlay, "$g_presentation_obj_sliders_8", ":text"),
    (store_add, ":text", "str_dplmc_mediocre_quality", ":quality"),
    (create_text_overlay, "$g_presentation_obj_sliders_9", ":text"),
    ##dplmc+ end incremented sliders by 1
    (store_add, ":text", "str_dplmc_neither_mercantilist_nor_laissez_faire", ":mercantilism"),
    (create_text_overlay, "$g_presentation_obj_sliders_10", ":text"),#<- dplmc+ added

    (create_text_overlay, "$g_presentation_obj_1", "@Centralization:"),
    (create_text_overlay, "$g_presentation_obj_2", "@Aristocracy:"),
    (create_text_overlay, "$g_presentation_obj_3", "@Slavery and Serfdom:"),
    (create_text_overlay, "$g_presentation_obj_4", "@Troop quality:"),
    (create_text_overlay, "$g_presentation_obj_5", "@Mercantilism:"),#<-- dplmc+ added
    #dplmc+ start incremented obj by 1...
    (create_text_overlay, "$g_presentation_obj_6", "str_dplmc_explain_centralization"),
    (create_text_overlay, "$g_presentation_obj_7", "str_dplmc_explain_aristocarcy"),
    (create_text_overlay, "$g_presentation_obj_8", "str_dplmc_explain_serfdom"),
    (create_text_overlay, "$g_presentation_obj_9", "str_dplmc_explain_quality"),
    (create_text_overlay, "$g_presentation_obj_10", "str_dplmc_explain_mercantilism"),

    (overlay_set_val, "$g_presentation_obj_sliders_1", ":centralization"),
    (overlay_set_val, "$g_presentation_obj_sliders_2", ":aristocracy"),
    (overlay_set_val, "$g_presentation_obj_sliders_3", ":serfdom"),
    (overlay_set_val, "$g_presentation_obj_sliders_4", ":quality"),
    (overlay_set_val, "$g_presentation_obj_sliders_5", ":mercantilism"),#<- dplmc+ added
    (position_set_x, pos1, 200),

    ##SLIDERS
    #dplmc start+ pushed all items by 150, then dropped all items by 75, then decreased the spacing from 150 to 100
    (position_set_y, pos1, 575),#750),
    (overlay_set_position, "$g_presentation_obj_sliders_1", pos1),
    (position_set_y, pos1, 450),#600),
    (overlay_set_position, "$g_presentation_obj_sliders_2", pos1),
    (position_set_y, pos1, 325),#450),
    (overlay_set_position, "$g_presentation_obj_sliders_3", pos1),
    (position_set_y, pos1, 200),#300),
    (overlay_set_position, "$g_presentation_obj_sliders_4", pos1),
    #dplmc end+ end pushed all items by 150
    (position_set_y, pos1, 75),#150), #<- dplmc+ added
    (overlay_set_position, "$g_presentation_obj_sliders_5", pos1),#<- dplmc+ added


    ##HEADERS
    (position_set_x, pos1, 100),
    #dplmc+ start pushed all items by 150, then dropped all items by 75, then changed the spacing to 100
    (position_set_y, pos1, 625),#800),
    (overlay_set_position, "$g_presentation_obj_1", pos1),
    (position_set_y, pos1, 500),#650),
    (overlay_set_position, "$g_presentation_obj_2", pos1),
    (position_set_y, pos1, 375),#500),
    (overlay_set_position, "$g_presentation_obj_3", pos1),
    (position_set_y, pos1, 250),#350),
    (overlay_set_position, "$g_presentation_obj_4", pos1),
    #dplmc+ end pushed all items by 150
    (position_set_y, pos1, 125),#200), #<- dplmc+ added
    (overlay_set_position, "$g_presentation_obj_5", pos1), #<- dplmc+ added

    ##SLIDER DESCRIPTIONS
    (position_set_x, pos1, 50),
    #dplmc+ start pushed all items by 150, and incremented obj by 1, then dropped all items by 75, then raised it 10, then changed the spacing to 100
    (position_set_y, pos1, 550),#700),
    (overlay_set_position, "$g_presentation_obj_6", pos1),
    (position_set_y, pos1, 425),#550),
    (overlay_set_position, "$g_presentation_obj_7", pos1),
    (position_set_y, pos1, 300),#400),
    (overlay_set_position, "$g_presentation_obj_8", pos1),
    (position_set_y, pos1, 175),#250),
    (overlay_set_position, "$g_presentation_obj_9", pos1),
    #dplmc+ end pushed all items by 150, and incremented obj by 1
    (position_set_y, pos1, 50),#100), #<- dplmc+ added
    (overlay_set_position, "$g_presentation_obj_10", pos1), #<- dplmc+ added

    (position_set_x, pos1, 775),
    (position_set_y, pos1, 775),
    #dplmc+ start increment obj by 1
    (overlay_set_size, "$g_presentation_obj_6", pos1),
    (overlay_set_size, "$g_presentation_obj_7", pos1),
    (overlay_set_size, "$g_presentation_obj_8", pos1),
    (overlay_set_size, "$g_presentation_obj_9", pos1),
    #dplmc+ end increment obj by 1
    (overlay_set_size, "$g_presentation_obj_10", pos1),#<- dplmc+ added

    ##SLIDER LEVEL TEXT
    (position_set_x, pos1, 400),#400),
    #dplmc+ start pushed all items by 150, and incremented sliders by 1, then dropped all items by 75, then changed the spacing to 100
    (position_set_y, pos1, 575),#750),
    (overlay_set_position, "$g_presentation_obj_sliders_6", pos1),
    (position_set_y, pos1, 450),#600),
    (overlay_set_position, "$g_presentation_obj_sliders_7", pos1),
    (position_set_y, pos1, 325),#450),
    (overlay_set_position, "$g_presentation_obj_sliders_8", pos1),
    (position_set_y, pos1, 200),#300),
    (overlay_set_position, "$g_presentation_obj_sliders_9", pos1),
    #dplmc+ end pushed all items by 150, and incremented sliders by 1
    (position_set_y, pos1, 75),#150),#<- dplmc+ added
    (overlay_set_position, "$g_presentation_obj_sliders_10", pos1),#<- dplmc+ added

    (position_set_x, pos1, 925),
    (position_set_y, pos1, 925),
    #dplmc+ start incremented sliders by 1
    (overlay_set_size, "$g_presentation_obj_sliders_6", pos1),
    (overlay_set_size, "$g_presentation_obj_sliders_7", pos1),
    (overlay_set_size, "$g_presentation_obj_sliders_8", pos1),
    (overlay_set_size, "$g_presentation_obj_sliders_9", pos1),
    #dplmc+ end incremented sliders by 1
    (overlay_set_size, "$g_presentation_obj_sliders_10", pos1),#<- dplmc+ added
  ]),
  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":object"),
    (store_trigger_param_2, ":value"),
    ##nested diplomacy start+
    #Added new option, so had to increment some sliders
    (try_begin),
      (eq, ":object", "$g_presentation_obj_sliders_1"),
      (faction_set_slot,  "fac_player_supporters_faction", dplmc_slot_faction_centralization, ":value"),
      (faction_get_slot, ":taxrate",  "fac_player_supporters_faction", slot_faction_tax_rate),
      (try_begin),
        (eq, ":value", -3),
        (val_clamp, ":taxrate", 0, 21),
      (else_try),
        (eq, ":value", -2),
        (val_clamp, ":taxrate", 0, 26),
      (else_try),
        (eq, ":value", -1),
        (val_clamp, ":taxrate", 0, 31),
      (else_try),
        (eq, ":value", 0),
        (val_clamp, ":taxrate", 0, 41),
      (else_try),
        (eq, ":value", 1),
        (val_clamp, ":taxrate", 0, 51),
      (else_try),
        (eq, ":value", 2),
        (val_clamp, ":taxrate", 0, 61),
      (else_try),
        (eq, ":value", 3),
        (val_clamp, ":taxrate", 0, 91),
      (try_end),
      (faction_set_slot,  "fac_player_supporters_faction", slot_faction_tax_rate, ":taxrate"),
      (val_add, ":value", "str_dplmc_neither_centralize_nor_decentralized"),
      (overlay_set_text, "$g_presentation_obj_sliders_6", ":value"),#dplmc+ incremented "sliders"
    (else_try),
      (eq, ":object", "$g_presentation_obj_sliders_2"),
      (faction_set_slot,  "fac_player_supporters_faction", dplmc_slot_faction_aristocracy, ":value"),
      (val_add, ":value", "str_dplmc_neither_aristocratic_nor_plutocratic"),
      (overlay_set_text, "$g_presentation_obj_sliders_7", ":value"),#dplmc+ incremented "sliders"
    (else_try),
      (eq, ":object", "$g_presentation_obj_sliders_3"),
      (faction_set_slot,  "fac_player_supporters_faction", dplmc_slot_faction_serfdom, ":value"),
      (val_add, ":value", "str_dplmc_mixture_serfs"),
      (overlay_set_text, "$g_presentation_obj_sliders_8", ":value"),#dplmc+ incremented "sliders"
    (else_try),
      (eq, ":object", "$g_presentation_obj_sliders_4"),
      (faction_set_slot,  "fac_player_supporters_faction", dplmc_slot_faction_quality, ":value"),
      (val_add, ":value", "str_dplmc_mediocre_quality"),
      (overlay_set_text, "$g_presentation_obj_sliders_9", ":value"),#dplmc+ incremented "sliders"
    #Finished incremented sliders.
    (else_try),
      #dplmc+ new option: mercantilism
      (eq, ":object", "$g_presentation_obj_sliders_5"),
      (faction_set_slot,  "fac_player_supporters_faction", dplmc_slot_faction_mercantilism, ":value"),
      (val_add, ":value", "str_dplmc_neither_mercantilist_nor_laissez_faire"),
      (overlay_set_text, "$g_presentation_obj_sliders_10", ":value"),
    #Change variable associated with "Done" button.
    (else_try),
      (eq, ":object", "$g_presentation_obj_12"),#dplmc+ changed 10 to 12
      (assign, "$g_players_policy_set", 1),
      (presentation_set_duration, 0),
    (else_try), #SB : randomize and restart presentation
      (eq, ":object", "$g_presentation_obj_11"),#dplmc+ changed 10 to 12
      (call_script, "script_dplmc_randomize_faction_domestic_policy", "fac_player_supporters_faction"),
      (start_presentation, "prsnt_dplmc_policy_management"),
    (try_end),
    ##nested diplomacy end+
  ]),
]),

  ##nested diplomacy start+
  #
  #Make it slightly harder to abuse the AI.
  #For example, some players report randomly starting wars with a faction and
  #demanding a hard-to-take castle until the AI concedes.
  #
  #See changes in logic below for specifics.
  #
  ##nested diplomacy end+
    ("dplmc_peace_terms",0,mesh_load_window,[
      (ti_on_presentation_load,
       [
        (set_fixed_point_multiplier, 1000),
        (presentation_set_duration, 999999),

        # done
        (create_game_button_overlay, "$g_presentation_obj_10", "str_done"),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 25),
        (overlay_set_position, "$g_presentation_obj_10", pos1),

        #cancel
        (create_game_button_overlay, "$g_presentation_obj_9", "@Cancel"),
        (position_set_x, pos1, 100),
        (overlay_set_position, "$g_presentation_obj_9", pos1),

        # title
        (create_text_overlay, reg1, "@Dictate the peace terms", tf_center_justify|tf_vertical_align_center),
        (position_set_x, pos1, 445),
        (position_set_y, pos1, 700),
        (overlay_set_position, reg1, pos1),

        (position_set_y, pos1, 550),
        (create_text_overlay, "$g_presentation_obj_2", "@Select the castle and the amount of money and check the boxes to activate the demand. The demands are combined if both boxes are checked."),
        (position_set_x, pos1, 50),
        (overlay_set_position, "$g_presentation_obj_2", pos1),

        (create_slider_overlay, "$g_presentation_obj_sliders_1", 10, 50),
        (overlay_set_val, "$g_presentation_obj_sliders_1", 1),
        (position_set_x, pos1, 300),
        (position_set_y, pos1, 350),
        (overlay_set_position, "$g_presentation_obj_sliders_1", pos1),
        (assign, "$demanded_money", 1000),
        (assign, "$diplomacy_var", 1),

        (create_text_overlay, "$g_presentation_obj_sliders_2", "@1000 denars"),
        (position_set_x, pos1, 500),
        (overlay_set_position, "$g_presentation_obj_sliders_2", pos1),

        (create_check_box_overlay, "$g_presentation_obj_battle_check0", "mesh_checkbox_off", "mesh_checkbox_on"),
        (position_set_x, pos1, 700),
        (overlay_set_position, "$g_presentation_obj_battle_check0", pos1),
        (overlay_set_val, "$g_presentation_obj_battle_check0", 1),

        (assign, "$demanded_castle", 0),
        (assign, ":castle_count", 0),
        (create_combo_button_overlay, "$g_presentation_obj_1"),
        (try_for_range, ":castle", castles_begin, castles_end),
		  ##diplomacy start+
		  (party_slot_eq, ":castle", slot_party_type, spt_castle),
		  ##diplomacy end+
          (store_faction_of_party, ":castle_faction", ":castle"),
          (eq, ":castle_faction", "$g_notification_menu_var1"),
          (str_store_party_name, s2, ":castle"),
          (overlay_add_item, "$g_presentation_obj_1", s2),
          (assign, "$demanded_castle", ":castle"),
          (val_add, ":castle_count", 1),
        (try_end),
        (assign, "$diplomacy_var2", 0),
        (position_set_x, pos1, 300),
        (position_set_y, pos1, 250),
        (overlay_set_position, "$g_presentation_obj_1", pos1),
        (overlay_set_val, "$g_presentation_obj_1", ":castle_count"),

        (create_check_box_overlay, "$g_presentation_obj_battle_check1", "mesh_checkbox_off", "mesh_checkbox_on"),
        (position_set_x, pos1, 700),
        (overlay_set_position, "$g_presentation_obj_battle_check1", pos1),

        ]),
      (ti_on_presentation_run,
       [
        ]),
      (ti_on_presentation_event_state_change,
       [(store_trigger_param_1, ":object"),
        (store_trigger_param_2, ":value"),

        (try_begin),
          (eq, ":object", "$g_presentation_obj_1"),

          (assign, ":cur", 0),
          (try_for_range, ":castle", castles_begin, castles_end),
            (store_faction_of_party, ":castle_faction", ":castle"),
            (eq, ":castle_faction", "$g_notification_menu_var1"),
            (try_begin),
              (eq, ":cur", ":value"),
              (assign, "$demanded_castle", ":castle"),
            (try_end),
            (val_add, ":cur", 1),
          (try_end),

        (else_try),
          (eq, ":object", "$g_presentation_obj_battle_check0"),
          (assign, "$diplomacy_var", ":value"),

        (else_try),
          (eq, ":object", "$g_presentation_obj_battle_check1"),
          (assign, "$diplomacy_var2", ":value"),

        (else_try),
          (eq, ":object", "$g_presentation_obj_sliders_1"),
          (store_mul, "$demanded_money",":value", 1000),
		  ##diplomacy start+
		  ##OLD:
          #(assign, reg0, "$demanded_money"),
          #(overlay_set_text, "$g_presentation_obj_sliders_2", "@{reg0} denars"),
		  ##NEW:
		  (assign, reg1, "$demanded_money"),
		  (overlay_set_text, "$g_presentation_obj_sliders_2", "str_reg1_denars"),
		  ##diplomacy end+

        (else_try),
          (eq, ":object", "$g_presentation_obj_9"),
          (presentation_set_duration, 0),
        (else_try),
          (eq, ":object", "$g_presentation_obj_10"),
          (presentation_set_duration, 0),

          (try_begin),
            (eq, "$diplomacy_var", 0),
            (assign, "$demanded_money", 0),
          (try_end),

          (try_begin),
            (eq, "$diplomacy_var2", 0),
            (assign, "$demanded_castle", 0),
          (try_end),

		  #
		  #Not all castles are created equal.
		  (assign, ":npc_faction", "$g_notification_menu_var1"),

		  (assign, ":player_faction", "fac_player_supporters_faction"),
		  (try_begin),
		     (neg|faction_slot_eq, ":player_faction", slot_faction_state, sfs_active),
			 (is_between, "$players_kingdom", npc_kingdoms_begin, npc_kingdoms_end),
			 (assign, ":player_faction", "$players_kingdom"),
		  (try_end),

		  #(assign, ":castle_value", 0),
		  (assign, ":was_taken_recently", 0),
		  (assign, ":would_make_lord_fiefless", 0),
		  (assign, ":distance_factor", 100),#If positive, 100 times the ratio of distance of closest friendly center to closest enemy center; if negative, 100 times the ratio of the distance of the closest enemy center to the closest friendly center.
		  (try_begin),
			(is_between, "$demanded_castle", castles_begin, castles_end),
			## (1) Determine whether or not the demanded castle was taken recently.
			(try_begin),
				#This version of Diplomacy+ saves transfer times, so we can check directly.
				(neg|party_slot_eq, "$demanded_castle", dplmc_slot_center_last_transfer_time, 0),
				(store_current_hours, ":hours_since_capture"),
				(party_get_slot, reg0, "$demanded_castle", dplmc_slot_center_last_transfer_time),
				(val_sub, ":hours_since_capture", reg0),
				(try_begin),
					#In the last month (i.e. about a war)
					(lt, ":hours_since_capture", 31 * 24),
					(assign, ":was_taken_recently", 1),
				(else_try),
					#For non-core castles, extend the definition of recent to the last three months
					(neg|party_slot_eq, "$demanded_castle", slot_center_original_faction, ":npc_faction"),
					(lt, ":hours_since_capture", 91 * 24),
					(assign, ":was_taken_recently", 1),
				(else_try),
					(assign, ":was_taken_recently", 0),
				(try_end),
			(else_try),
				#This is an old saved game, so use some rules of thumb.
				#If the player faction is the original or previous owner, it might have been taken recently.
				(this_or_next|party_slot_eq, "$demanded_castle", slot_center_original_faction, "$players_kingdom"),
				(this_or_next|party_slot_eq, "$demanded_castle", slot_center_ex_faction, "$players_kingdom"),
					(party_slot_eq, "$demanded_castle", slot_center_ex_faction, "fac_player_supporters_faction"),
				(assign, ":was_taken_recently", 1),
			(else_try),
				#If the original owner is at war with the current owner, it might have been taken recently.
				(neg|party_slot_eq, "$demanded_castle", slot_center_original_faction, ":npc_faction"),
				(party_get_slot, ":third_faction", "$demanded_castle", slot_center_original_faction),
				(is_between, ":third_faction", kingdoms_begin, kingdoms_end),
				(faction_slot_eq, ":third_faction", slot_faction_state, sfs_active),
				(store_relation, reg0, ":npc_faction", ":third_faction"),
				(lt, reg0, 0),
				(assign, ":was_taken_recently", 1),
			(else_try),
				#If the ex-owner is at war with the current owner, it might have been taken recently.
				(neg|party_slot_eq, "$demanded_castle", slot_center_ex_faction, ":npc_faction"),
				(party_get_slot, ":third_faction", "$demanded_castle", slot_center_ex_faction),
				(is_between, ":third_faction", kingdoms_begin, kingdoms_end),
				(faction_slot_eq, ":third_faction", slot_faction_state, sfs_active),
				(store_relation, reg0, ":npc_faction", ":third_faction"),
				(lt, reg0, 0),
				(assign, ":was_taken_recently", 1),
			(else_try),
				#If there is no assigned lord, it was taken recently.
				(neg|party_slot_ge, "$demanded_castle", slot_town_lord, 0),
				(assign, ":was_taken_recently", 1),
			(try_end),##End "Was taken recently?"
			## (2) Determine whether handing over the demanded castle would cost any lord his last fief.
			## (2a: At the same time, calculate the closest friendly & enemy walled centers)
			(party_slot_ge, "$demanded_castle", slot_town_lord, 1),
			(party_get_slot, ":lord_a", "$demanded_castle", slot_town_lord),
			(assign, ":lord_b", -1),
			(assign, ":would_make_lord_fiefless", 1),
			(assign, ":distance_to_friendly_fortress", 10000),
			(assign, ":distance_to_enemy_fortress", 10000),
			(try_for_range, ":center_no", centers_begin, centers_end),
				(neq, ":center_no", "$demanded_castle"),
				#Check for fieflessness
				(try_begin),
					(party_slot_eq, ":center_no", slot_village_bound_center, "$demanded_castle"),
					(neg|party_slot_eq, ":center_no", slot_town_lord, ":lord_a"),
					(party_slot_ge, ":center_no", slot_town_lord, 1),
					(party_get_slot, ":lord_b", ":center_no", slot_town_lord),
				(else_try),
					(party_slot_eq, ":center_no", slot_town_lord, ":lord_a"),
					(neg|party_slot_eq, ":center_no", slot_village_bound_center, "$demanded_castle"),
					(assign, ":would_make_lord_fiefless", 0),
				(try_end),
				#For walled centers check distance
				(this_or_next|party_slot_eq, ":center_no", slot_party_type, spt_town),
					(this_or_next|party_slot_eq, ":center_no", slot_party_type, spt_castle),

				(store_faction_of_party, ":center_faction", ":center_no"),
				(store_distance_to_party_from_party, ":cur_distance", ":center_no", "$demanded_castle"),

				(call_script, "script_dplmc_get_faction_truce_length_with_faction", ":center_faction", ":npc_faction"),
				(try_begin),
					(this_or_next|gt, reg0, dplmc_treaty_defense_days_expire),
					(eq, ":center_faction", ":npc_faction"),
					(val_min, ":distance_to_friendly_fortress", ":cur_distance"),
				(else_try),
					(store_relation, reg0, ":center_faction", ":npc_faction"),
					(val_min, ":distance_to_enemy_fortress", ":cur_distance"),
				(try_end),
			(try_end),
			#(2a, set distance factor based on closest other fortress)
			(assign, ":distance_factor", 100),
			(try_begin),
				(this_or_next|ge, ":distance_to_friendly_fortress", 10000),
					(ge, ":distance_to_enemy_fortress", 10000),
				#No fortress found for one or both
			(else_try),
				#Friendly is closer
				(lt, ":distance_to_friendly_fortress", ":distance_to_enemy_fortress"),
				(gt, ":distance_to_enemy_fortress", 25),#Within 25 ignore differences
				(val_max, ":distance_to_friendly_fortress", 1),
				(store_mul, ":distance_factor", ":distance_to_enemy_fortress", 100),
				(val_div, ":distance_factor", ":distance_to_friendly_fortress"),
				(try_begin),
					(le, ":distance_to_enemy_fortress", 50),
					(val_min, ":distance_factor", 200),
				(try_end),
			(else_try),
				#Enemy is closer
				(lt, ":distance_to_enemy_fortress", ":distance_to_friendly_fortress"),
				(gt, ":distance_to_friendly_fortress", 25),#Within 25 ignore differences
				(val_max, ":distance_to_enemy_fortress", 1),
				(store_mul, ":distance_factor", ":distance_to_friendly_fortress", 100),
				(val_div, ":distance_factor", ":distance_to_enemy_fortress"),
				(try_begin),
					(le, ":distance_to_friendly_fortress", 50),
					(val_min, ":distance_factor", 200),
				(try_end),
				(val_mul, ":distance_factor", -1),
			(try_end),##end 2a: distance factor

			(neq, ":would_make_lord_fiefless", 1),#If we already know it would make the castle owner fiefless, stop.
			(ge, ":lord_b", 1),
			(assign, ":would_make_lord_fiefless", 1),
			(try_for_range, ":center_no", centers_begin, centers_end),
				(party_slot_eq, ":center_no", slot_town_lord, ":lord_b"),
				(this_or_next|neg|is_between, ":center_no", villages_begin, villages_end),
                (neg|party_slot_eq, ":center_no", slot_village_bound_center, "$demanded_castle"),
                (assign, ":would_make_lord_fiefless", 0),
			(try_end),
		  (try_end),##end 2: would make lord fiefless?


		  ##Next line: replace fac_player_supporters_faction with :player_faction
          (call_script, "script_npc_decision_checklist_peace_or_war", "$g_notification_menu_var1", ":player_faction", -1),

		  ##Save the unmodified numbers for later
		  (assign, ":check_peace_war_result", reg0),

            (try_begin),
                (is_between, "$demanded_castle", castles_begin, castles_end),
                (store_party_size_wo_prisoners, ":demand", "$demanded_castle"),
                (val_div, ":demand", 100),#average is 500 so would be 5
            (else_try),
                (gt, "$demanded_money", 0),#25000 devided by 10000 would be 3 or 2
                (val_div, ":demand", 10000),
                (val_mul, ":demand", 2),#50000/10000*2 = 10
            (try_end),
          (assign, ":goodwill", reg0),
          (val_mul, ":goodwill", 2),
          (store_random_in_range, ":random", 0, ":demand"),

          (val_div, ":demand", -3),
          (call_script, "script_change_player_relation_with_faction", "$g_notification_menu_var1", ":demand"),
		  ##diplomacy start+
		  #Count "third party" kingdoms: kingdoms that aren't either the player's kingdom
		  #or the other kingdom in the negotiations, and that aren't allied to either.
		  #(faction_get_slot, ":npc_faction_leader", ":npc_faction", slot_faction_leader),
		  (assign, ":other_players", 0),
		  (try_for_range, ":third_faction", kingdoms_begin, kingdoms_end),
			 #Active faction
		     (faction_slot_eq, ":third_faction", slot_faction_state, sfs_active),
			 (neq, ":third_faction", ":npc_faction"),
			 (neq, ":third_faction", "fac_player_supporters_faction"),
			 (neq, ":third_faction", "$players_kingdom"),
			 #Not allied (full alliance or defensive alliance) to either faction
			 (call_script, "script_dplmc_get_faction_truce_length_with_faction", ":third_faction", ":npc_faction"),
			 (le, reg0, dplmc_treaty_defense_days_expire),
			 (call_script, "script_dplmc_get_faction_truce_length_with_faction", ":third_faction", "$players_kingdom"),
			 (le, reg0, dplmc_treaty_defense_days_expire),
			 (val_add, ":other_players", 1),
		  (try_end),
		  #Improve the AI's decision-making somewhat.
		  (try_begin),
            #This should never be reached.
				(lt, ":check_peace_war_result", 0),
                (this_or_next|is_between, "$demanded_castle", castles_begin, castles_end),
                (gt, "$demanded_money", 0),
                (str_store_string, s45, "@They don't want to conclude peace at all"),
                (jump_to_menu,"mnu_dplmc_deny_terms"),
            (else_try),
                (is_between, "$demanded_castle", castles_begin, castles_end),
				(lt, ":check_peace_war_result", 2),
            #Don't enable "fishing" for fiefs, hoping to get a lucky
            #result.  Make the chance of giving a fief zero.
                (this_or_next|party_slot_eq,"$demanded_castle",slot_center_original_faction,":npc_faction"),
                (this_or_next|eq, ":would_make_lord_fiefless", 1),
				(this_or_next|eq, ":was_taken_recently", 0),
                (eq, ":other_players", 0),
                (str_store_party_name, s46, "$demanded_castle"),
                (str_store_string, s45, "@They refuse to give you {s46} as it is part of their core territory. You may continue negotiations and ask for money instead."),
			    (jump_to_menu,"mnu_dplmc_deny_terms"),
            (else_try),
                (is_between, "$demanded_castle", castles_begin, castles_end),
            #Some things will just never be agreed to.
				#If three or more of the following are true, reject:
				#- The demanded castle was not taken recently
				#- The demanded castle is one of the faction's original castles
				#- Giving the castle would make some lords fiefless
				#- The castle has an especially large garrison
				#- Aside from the player's faction and the NPC faction (and their allies),
				#  there are no other kingdoms.
				#- The demanded castle is significantly deeper within the NPC kingdom's territory
				#  than it is close to enemy territory
                (assign, reg0, 1),
                (val_sub, reg0, ":was_taken_recently"),
                (val_max, reg0, 0),
                (try_begin),#Check: is the castle part of the faction's original territory?
                   (party_slot_eq,"$demanded_castle",slot_center_original_faction,":npc_faction"),
                   (val_add, reg0, 1),
                (try_end),
                (val_max, ":would_make_lord_fiefless", 0),
                (val_add, reg0, ":would_make_lord_fiefless"),
                (try_begin),#Check: no one else remaining?
                     (eq, ":other_players", 0),
                     (val_add, reg0, 1),
                (try_end),
                (try_begin),#Check: is it much closer to friendly centers than enemy centers?
                    (ge, ":distance_factor", 190),
                    (val_add, reg0, 1),
                (try_end),
                (val_add, ":random", reg0),#Even if less than 3 are met, other factors will still decrease likelihood of acceptance.
                (ge, reg0, 3),

                (str_store_party_name, s46, "$demanded_castle"),
                (str_store_string, s45, "@They refuse to give you {s46} as it is of strategic importance. You may continue negotiations and ask for money instead."),
                (jump_to_menu,"mnu_dplmc_deny_terms"),
            (else_try),
                #SPECIAL CASE: Two Kingdoms Remain
                (eq, ":other_players", 0),
                (this_or_next|is_between, "$demanded_castle", castles_begin, castles_end),
                (gt, "$demanded_money", 0),
                (is_between, ":npc_faction", kingdoms_begin, kingdoms_end),
                (lt, ":check_peace_war_result", 2),
                (str_store_party_name, s46, "$demanded_castle"),
                (str_store_string, s45, "@They refuse your deal as they think you demanded is too high."),
                (jump_to_menu,"mnu_dplmc_deny_terms"),
		  (else_try),
		  #fall through to other behavior
		  ##diplomacy end+
            (le, ":random", ":goodwill"),
            (try_begin),
              (is_between, "$demanded_castle", castles_begin, castles_end),
				  ##diplomacy start+
				  #Relation hit with the owner of the surrendered castle and its village,
				  #if there was a valid owner.
				  (try_begin),
					(party_slot_ge, "$demanded_castle", slot_town_lord, 1),
					(party_get_slot, reg0, ":center_no", slot_town_lord),
					(call_script, "script_change_player_relation_with_troop", reg0, -1),
				  (try_end),
				  (try_for_range, ":center_no", villages_begin, villages_end),
					(party_slot_eq, ":center_no", slot_village_bound_center, "$demanded_castle"),
					(party_slot_ge, ":center_no", slot_town_lord, 1),
					(party_get_slot, reg0, ":center_no", slot_town_lord),
					(call_script, "script_change_player_relation_with_troop", reg0, -1),
				  (try_end),
			  ##Change next to use :player_faction instead of fac_player_supporters_faction
              (call_script, "script_give_center_to_faction", "$demanded_castle", ":player_faction"),
			  ##diplomacy end+
            (try_end),
            (try_begin),
              (gt, "$demanded_money", 0),
              (call_script, "script_dplmc_pay_into_treasury", "$demanded_money"),
			  ##diplomacy start+ other faction loses money
			  #Since setting terms for surrender is a non-native feature, there is no need to make this optional.
			  (faction_get_slot, ":faction_leader", "$g_notification_menu_var1", slot_faction_leader),
			  (try_begin),
				(ge, ":faction_leader", 1),
				(neq, "$g_notification_menu_var1", "$players_kingdom"),
				(neq, "$g_notification_menu_var1", "fac_player_supporters_faction"),
				(ge, "$demanded_money", 1),
				(assign, ":cost_to_leader", "$demanded_money"),
				#(try_begin),
				#	 (faction_get_slot, ":marshall", "$g_notification_menu_var1", slot_faction_marshall),
				#	 (neq, ":marshall", "trp_player"),
				#	 (neq, ":marshall", ":faction_leader"),
				#	 (ge, ":marshall", 0),
				#	 (store_troop_gold, reg0, ":marshall"),
				#	 (store_troop_gold, reg1, ":faction_leader"),
				#	 (val_add, reg1, reg0),
				#	 (gt, reg1, 0),
				#	 (store_mul, ":cost_to_marshall", "$demanded_money", reg0),
				#	 (val_div, ":cost_to_marshall", reg1),
				#	 (store_div, reg0, "$demanded_money", 2),
				#	 (val_min, ":cost_to_marshall", reg0),#no more than 1/2
				#	 (store_mul, reg0, "$demanded_money", 3),
				#	 (val_div, reg0, 13),#no less than 3/13 (6/26 marshall, 20/26 leader)
				#	 (val_max, ":cost_to_marshall", reg0),
				#	 (gt, ":cost_to_marshall", 0),
				#	 (call_script, "script_dplmc_remove_gold_from_lord_and_holdings", ":cost_to_marshall", ":marshall"),
				#	 (val_sub, ":cost_to_leader", ":cost_to_marshall"),
				#	 (store_random_in_range, reg0, 0, 1000),
				#	 (val_add, reg0, ":cost_to_marshall"),
				#	 (val_div, reg0, 1000),
				#	 (ge, reg0, 1),
				#	 (val_mul, reg0, -1),
				#	 (call_script, "script_change_player_relation_with_troop", ":marshall", reg0),
				#(try_end),
				(ge, ":cost_to_leader", 1),
				(call_script, "script_dplmc_remove_gold_from_lord_and_holdings", ":cost_to_leader", ":faction_leader"),
				(val_div, ":cost_to_leader", 10000),
				(val_mul, ":cost_to_leader", -1),
				(call_script, "script_change_player_relation_with_troop", ":faction_leader", ":cost_to_leader"),
			  (try_end),
			  ##diplomacy end+
            (try_end),
			##diplomacy start+
            (call_script, "script_diplomacy_start_peace_between_kingdoms", "$g_notification_menu_var1", ":player_faction", 1),
			##diplomacy end+
            (presentation_set_duration, 0),
            (change_screen_return),
          (else_try),
            (str_store_party_name, s46, "$demanded_castle"),
            (str_store_string, s45, "@They refuse your deal. Either suggest something different or break up negotiations."),
            (jump_to_menu,"mnu_dplmc_deny_terms"),
          (try_end),

        (try_end),
    ]),
  ]),

  # Jrider +
  # REPORTS PRESENTATIONS 1.2 :
  # Factions relations presentation report
  # Jrider +
  # REPORTS PRESENTATIONS 1.2 :
  # Factions relations presentation report
  ("jrider_faction_relations_report", 0,
   mesh_load_window,
   [
     (ti_on_presentation_load,
      [
    (presentation_set_duration, 999999),
        (set_fixed_point_multiplier, 1000),

        # # Embed picture upper right
        # (create_mesh_overlay, reg1, "mesh_pic_castledes"),
        # (position_set_x, pos1, 180),
        # (position_set_y, pos1, 180),
        # (overlay_set_size, reg1, pos1),
        # (position_set_x, pos1, 795),
        # (position_set_y, pos1, 600),
        # (overlay_set_position, reg1, pos1),

        # # Embed picture upper left
        # (create_mesh_overlay, reg1, "mesh_pic_looted_village"),
        # (position_set_x, pos1, 170),
        # (position_set_y, pos1, 170),
        # (overlay_set_size, reg1, pos1),
        # (position_set_x, pos1, -15),
        # (position_set_y, pos1, 600),
        # (overlay_set_position, reg1, pos1),

    # Presentation title, centered at the top
    (create_text_overlay, reg1, "@_Faction Relations Report_", tf_center_justify),
    (position_set_x, pos1, 500), # Higher, means more toward the right
    (position_set_y, pos1, 670), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1500),
    (position_set_y, pos1, 1500),
    (overlay_set_size, reg1, pos1),

    # Back to menu - graphical button
    (create_game_button_overlay, reg1, "str_return"),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 23),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_jrider_faction_report_return_to_menu", reg1),

    # Set Headlines
    (assign, ":x_poshl", 215),
     (assign, ":y_pos", 597),
     (assign, ":headline_size", 0),
    (position_set_x, ":headline_size", 720),
        (position_set_y, ":headline_size", 775),

        (assign, ":hl_columnsep_size", 50),
    (position_set_x, ":hl_columnsep_size", 60),
        (position_set_y, ":hl_columnsep_size", 1600),

        (create_text_overlay, reg2, "@Player^Relation", tf_center_justify),
        (overlay_set_size, reg2, ":headline_size"),
        (position_set_x, pos1, ":x_poshl"),
        (position_set_y, pos1, ":y_pos"),
        (overlay_set_position, reg2, pos1),

        # Headlines for Faction 1, 5
        (create_text_overlay, reg2, "@Status", tf_center_justify),
        (overlay_set_size, reg2, ":headline_size"),
        (val_add, ":x_poshl", 55),
        (position_set_x, pos1, ":x_poshl"),
        (overlay_set_position, reg2, pos1),

        # create a separator column
        (create_mesh_overlay, reg1, "mesh_white_plane"),
        (overlay_set_color, reg1, 0x000000),
        (overlay_set_size, reg1, ":hl_columnsep_size"),
        (store_sub, ":line_x", ":x_poshl", 21), # set it 21 pix left of current column start
        (position_set_x, pos2, ":line_x"),
        (position_set_y, pos2, ":y_pos"),
        (overlay_set_position, reg1, pos2),

        (create_text_overlay, reg2, "@Relation", tf_center_justify),
        (overlay_set_size, reg2, ":headline_size"),
        (val_add, ":x_poshl", 110),
        (position_set_x, pos1, ":x_poshl"),
        (overlay_set_position, reg2, pos1),

        # Headlines for Faction 2, 6
        (create_text_overlay, reg2, "@Status", tf_center_justify),
        (overlay_set_size, reg2, ":headline_size"),
        (val_add, ":x_poshl", 55),
        (position_set_x, pos1, ":x_poshl"),
        (overlay_set_position, reg2, pos1),

        # create a separator column
        (create_mesh_overlay, reg1, "mesh_white_plane"),
        (overlay_set_color, reg1, 0x000000),
        (overlay_set_size, reg1, ":hl_columnsep_size"),
        (store_sub, ":line_x", ":x_poshl", 21), # set it 21 pix left of current column start
        (position_set_x, pos2, ":line_x"),
        (position_set_y, pos2, ":y_pos"),
        (overlay_set_position, reg1, pos2),

        (create_text_overlay, reg2, "@Relation", tf_center_justify),
        (overlay_set_size, reg2, ":headline_size"),
        (val_add, ":x_poshl", 110),
        (position_set_x, pos1, ":x_poshl"),
        (overlay_set_position, reg2, pos1),

        # Headlines Faction 3,7
        (create_text_overlay, reg2, "@Status", tf_center_justify),
        (overlay_set_size, reg2, ":headline_size"),
        (val_add, ":x_poshl", 55),
        (position_set_x, pos1, ":x_poshl"),
        (overlay_set_position, reg2, pos1),

        # create a separator column
        (create_mesh_overlay, reg1, "mesh_white_plane"),
        (overlay_set_color, reg1, 0x000000),
        (overlay_set_size, reg1, ":hl_columnsep_size"),
        (store_sub, ":line_x", ":x_poshl", 21), # set it 21 pix left of current column start
        (position_set_x, pos2, ":line_x"),
        (position_set_y, pos2, ":y_pos"),
        (overlay_set_position, reg1, pos2),

        (create_text_overlay, reg2, "@Relation", tf_center_justify),
        (overlay_set_size, reg2, ":headline_size"),
        (val_add, ":x_poshl", 110),
        (position_set_x, pos1, ":x_poshl"),
        (overlay_set_position, reg2, pos1),

        # Headlines Faction 4
        (create_text_overlay, reg2, "@Status", tf_center_justify),
        (overlay_set_size, reg2, ":headline_size"),
        (val_add, ":x_poshl", 55),
        (position_set_x, pos1, ":x_poshl"),
        (overlay_set_position, reg2, pos1),

        # create a separator column
        (create_mesh_overlay, reg1, "mesh_white_plane"),
        (overlay_set_color, reg1, 0x000000),
        (overlay_set_size, reg1, ":hl_columnsep_size"),
        (store_sub, ":line_x", ":x_poshl", 21), # set it 21 pix left of current column start
        (position_set_x, pos2, ":line_x"),
        (position_set_y, pos2, ":y_pos"),
        (overlay_set_position, reg1, pos2),

        (create_text_overlay, reg2, "@Relation", tf_center_justify),
        (overlay_set_size, reg2, ":headline_size"),
        (val_add, ":x_poshl", 110),
        (position_set_x, pos1, ":x_poshl"),
        (overlay_set_position, reg2, pos1),

        # clear the string globals that we'll use
         (str_clear, s9),
    (str_clear, s8),
    (str_clear, s3),
    (str_clear, s60),
    (str_clear, s61),
    (str_clear, s0),

        # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
        (create_text_overlay, reg1, s0, tf_scrollable_style_2),
        (position_set_x, pos1, 50),
        (position_set_y, pos1, 70),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 860),
        (position_set_y, pos1, 527),
        (overlay_set_area_size, reg1, pos1),
        (set_container_overlay, reg1),

        # set base position and size for lines
        (assign, ":line_size", 0),
        (assign, ":y_pos", 0),

        # set base color for line
    (assign, ":line_color", 0x000000),

        # Line faction loop begins here - fetching corresponding informations and printing the line title
        (try_for_range_backwards, ":faction_line", kingdoms_begin, kingdoms_end),
            (faction_slot_eq, ":faction_line", slot_faction_state, sfs_active), # continue if active

            # Base position for subheaders
            (assign, ":x_posfhl", 220),
            (assign, ":y_posfhl", ":y_pos"),

            # Loop other factions (columns)
            (try_for_range_backwards, ":faction_column", kingdoms_begin, kingdoms_end),
                (neq, ":faction_column", ":faction_line"),
                (faction_slot_eq, ":faction_column", slot_faction_state, sfs_active), # continue if active

                (str_store_faction_name, s8, ":faction_column"),

                # wrap y_pos if line end reached
                (try_begin),
                    (ge, ":x_poshl", 825),
                    (assign, ":x_poshl", 165),
                    (val_add, ":y_pos", 18),
                (try_end),

                # sub-faction excluding current faction line
                (try_begin),
                    # different from faction line, display status and relation with faction line
                    (neq, ":faction_column", ":faction_line"),
                    (call_script, "script_diplomacy_faction_get_diplomatic_status_with_faction", ":faction_line", ":faction_column"),
                    (assign, ":global_diplomatic_status", reg0),
                    (assign, ":extended_diplomatic_status", reg1),

                    (try_begin), # War
                        (eq, ":global_diplomatic_status", -2),
                        (str_store_string, s60, "@War"),
                        (assign, reg60, 0xDD0000),
                        (assign, reg59, 0),
                    (else_try), # Border incident
                        (eq, ":global_diplomatic_status", -1),
                        (str_store_string, s60, "@Casus Belli"),
                        (assign, reg60, 0xDD8000),
                        (assign, reg59, ":extended_diplomatic_status"),
                    (else_try), # Peace
                        (eq, ":global_diplomatic_status", 0),
                        (str_store_string, s60, "@Peace"),
                        (assign, reg60, 0xFFFFFF),
                        (assign, reg59, 0),
                    (else_try), # Truce (or agreement if usigng Diplomacy)
                        (eq, ":global_diplomatic_status", 1),
                        (str_store_string, s60, "@Truce"),
                        (assign, reg60, 0xDDDDDD),
                        (assign, reg59, ":extended_diplomatic_status"),

                        # for Diplomacy, comment if not using
                        (try_begin),
                            (ge, ":extended_diplomatic_status", 61),
                            (str_store_string, s60, "@Alliance"),
                            (assign, reg60, 0x00FF00),
                            (store_sub, reg59, ":extended_diplomatic_status", 60),
                        (else_try),
                            (ge, ":extended_diplomatic_status", 41),
                            (str_store_string, s60, "@Defense Pact"),
                            (assign, reg60, 0x00FFAA),
                            (store_sub, reg59, ":extended_diplomatic_status", 40),
                        (else_try),
                            (ge, ":extended_diplomatic_status", 21),
                            (str_store_string, s60, "@Trade Agreement"),
                            (assign, reg60, 0x00FFCC),
                            (store_sub, reg59, ":extended_diplomatic_status", 20),
                        (try_end),
                    (try_end),

                    (val_add, ":x_poshl", 55),

                     #  (assign, ":line_color", 0x000000),
                     (create_mesh_overlay, reg1, "mesh_white_plane"),
                     (overlay_set_color, reg1, ":line_color"),
                     (position_set_x, pos3, 50),
                     (position_set_y, pos3, 1800),
                     (overlay_set_size, reg1, pos3),

                     (store_sub, ":line_x", ":x_posfhl", 20), # set it 20 pix left of current column start
                     (position_set_x, pos3, ":line_x"),
                     (store_add, ":line_y", ":y_pos", 2), # set it below 2 pix of current position

                     (position_set_y, pos3, ":line_y"),
                     (overlay_set_position, reg1, pos3),

                    # diplomatic status and duration block (set at current line)
                    # add diplomatic status
                    (store_relation, ":kingdom_relation", ":faction_line", ":faction_column"),
                    (create_text_overlay, reg10, "@{s60}", tf_left_align|tf_with_outline),
                    (overlay_set_size, reg10, ":line_size"),
                    (overlay_set_color, reg10, reg60),

                    (store_sub, ":line_x", ":x_poshl", 15),
                    (position_set_x, pos1, ":line_x"),
                    (position_set_y, pos1, ":y_pos"),
                    (overlay_set_position, reg10, pos1),

                    # status duration left (same line, shift x to right)
                    (val_add, ":x_poshl", 110),
                    (create_text_overlay, reg10, "@{reg59?{reg59} days:}", tf_center_justify),
                    (overlay_set_size, reg10, ":line_size"),

                    (store_add, ":line_x", ":x_poshl", 5),
                    (position_set_x, pos1, ":line_x"),
                    (position_set_y, pos1, ":y_pos"),
                    (overlay_set_position, reg10, pos1),

                    # Faction name and relation (increase to previous line)
                    # Faction name headlines
                    (create_text_overlay, reg10, s8, tf_left_align|tf_with_outline),
                    (overlay_set_size, reg10, ":line_size"),
                    (faction_get_color, ":faction_color", ":faction_column"),
                    (overlay_set_color, reg10, ":faction_color"),

                    (store_sub, ":line_x", ":x_posfhl", 20),
                    (store_add, ":line_y", ":y_pos", 18),
                    (position_set_x, pos3, ":line_x"),
                    (position_set_y, pos3, ":line_y"),
                    (overlay_set_position, reg10, pos3),

                    # kingdom relation (same line as faction name)
                    (assign, reg0, ":kingdom_relation"),
                    (create_text_overlay, reg10, "@{reg0}", tf_center_justify),
                    (overlay_set_size, reg10, ":line_size"),

                    (store_add, ":line_x", ":x_poshl", 10),
                    (position_set_x, pos3, ":line_x"),
                    (position_set_y, pos3, ":line_y"),
                    (overlay_set_position, reg10, pos3),
                (try_end), # end select alternate display

                # increase column x position
                (val_add, ":x_posfhl", 165), # valid values 220, 385, 550, 715

                # wrap if line end for faction column name reached
                (try_begin),
                    (gt, ":x_posfhl", 715),
                    (assign, ":x_posfhl", 220),
                    (assign, ":y_posfhl", ":y_pos"),
                    (val_add, ":y_posfhl", 18),
                (try_end),

                # starting new column
                (try_begin),
                    (eq, ":x_posfhl", 220),

                    # create a sub-separator line above current line
                    (create_mesh_overlay, reg1, "mesh_white_plane"),
                    (overlay_set_color, reg1, ":line_color"),
                    (position_set_x, pos1, 32800),
                    (position_set_y, pos1, 50),
                    (overlay_set_size, reg1, pos1),

                    (position_set_x, pos1, 200),
                    (store_add, ":line_y", ":y_pos", 38), # set it 20 pix above current line
                    (position_set_y, pos1, ":line_y"),
                    (overlay_set_position, reg1, pos1),

                    (val_add, ":y_pos", 18),
                (try_end),
            (try_end), # end of column faction loop

            # Faction line information, this is a 4 line block
            # reset x postion for next beginning column and decrease y position according to line count
            (assign, ":x_poshl", 165),

            (val_add, ":y_pos", 18), # linebreak

            # create a separator for faction line
            (create_mesh_overlay, reg1, "mesh_white_plane"),
            (overlay_set_color, reg1, 0x000000),
            (position_set_x, pos1, 42000),
            (position_set_y, pos1, 60),
            (overlay_set_size, reg1, pos1),
            (position_set_x, pos1, 17),
            (store_add, ":line_y", ":y_pos", 20), # set it 20 pix above current line
            (position_set_y, pos1, ":line_y"),
            (overlay_set_position, reg1, pos1),

            # Set line title
            (str_store_faction_name, s9, ":faction_line"),
            (str_store_string, s1, "@{s9}"),
            (create_text_overlay, reg10, s1, tf_left_align|tf_with_outline),
            (faction_get_color, ":faction_color", ":faction_line"),
            (overlay_set_color, reg10, ":faction_color"),

            (position_set_x, pos3, 750),
            (position_set_y, pos3, 850),
            (overlay_set_size, reg10, pos3),

            (position_set_x, pos3, 10),
            (position_set_y, pos3, ":y_pos"),
            (overlay_set_position, reg10, pos3),

            # set position for columns
            (assign, ":x_poshl", 165),
            (assign, ":line_size", 0),
            (position_set_x, ":line_size", 700),
            (position_set_y, ":line_size", 800),

            ## Player relation (first column)
            (store_relation, reg1, "fac_player_supporters_faction", ":faction_line"),

            # no clean strings existing, doing it the same way it's done in game_menu
            (try_begin),
                (ge, reg1, 90),
                (str_store_string, s3, "@Loyal"),
            (else_try),
                (ge, reg1, 80),
                (str_store_string, s3, "@Devoted"),
            (else_try),
                (ge, reg1, 70),
                (str_store_string, s3, "@Fond"),
            (else_try),
                (ge, reg1, 60),
                (str_store_string, s3, "@Gracious"),
            (else_try),
                (ge, reg1, 50),
                (str_store_string, s3, "@Friendly"),
            (else_try),
                (ge, reg1, 40),
                (str_store_string, s3, "@Supportive"),
            (else_try),
                (ge, reg1, 30),
                (str_store_string, s3, "@Favorable"),
            (else_try),
                (ge, reg1, 20),
                (str_store_string, s3, "@Cooperative"),
            (else_try),
                (ge, reg1, 10),
                (str_store_string, s3, "@Accepting"),
            (else_try),
                (ge, reg1, 0),
                (str_store_string, s3, "@Indifferent"),
            (else_try),
                (ge, reg1, -10),
                (str_store_string, s3, "@Suspicious"),
            (else_try),
                (ge, reg1, -20),
                (str_store_string, s3, "@Grumbling"),
            (else_try),
                (ge, reg1, -30),
                (str_store_string, s3, "@Hostile"),
            (else_try),
                (ge, reg1, -40),
                (str_store_string, s3, "@Resentful"),
            (else_try),
                (ge, reg1, -50),
                (str_store_string, s3, "@Angry"),
            (else_try),
                (ge, reg1, -60),
                (str_store_string, s3, "@Hateful"),
            (else_try),
                (ge, reg1, -70),
                (str_store_string, s3, "@Revengeful"),
            (else_try),
                (str_store_string, s3, "@Vengeful"),
            (try_end),

            # Set relation to player numerical value (same line)
            (create_text_overlay, reg10, "@{reg1}", tf_right_align),
            (overlay_set_size, reg10, ":line_size"),
            (store_add, ":line_x", ":x_poshl", 20),
            (position_set_x, pos1, ":line_x"),
            (position_set_y, pos1, ":y_pos"),
            (overlay_set_position, reg10, pos1),
            (overlay_set_color, reg10, ":line_color"),

            # Set relation to player string value (second line)
            (create_text_overlay, reg10, "@{s3}", tf_right_align),
            (overlay_set_size, reg10, ":line_size"),
            (position_set_x, pos1, ":line_x"),
            (store_sub, ":line_y", ":y_pos", 20),
            (position_set_y, pos1, ":line_y"),
            (overlay_set_position, reg10, pos1),
            (overlay_set_color, reg10, ":line_color"),

            # Set Faction Coat of Arm for standard faction (left of relation string)
            (try_begin),
                (neq, ":faction_line", "fac_player_supporters_faction"),
                (store_sub, ":mesh_index", ":faction_line", kingdoms_begin),
                (val_add, ":mesh_index", "mesh_pic_recruits"),
                (create_mesh_overlay, reg10, ":mesh_index"),
                (position_set_x, pos1, 60),
                (position_set_y, pos1, 60),
                (overlay_set_size, reg10, pos1),
                (position_set_x, pos1, 165),
                (store_sub, ":line_y", ":y_pos", 37),
                (position_set_y, pos1, ":line_y"),
                (overlay_set_position, reg10, pos1),
            (try_end),

            # for current line_faction count lords and centers
            (assign, ":num_lords", 0),
            (assign, ":num_caravans", 0),
            (assign, ":num_centers", 0),
            (assign, ":unassigned_centers", 0),
            (try_for_parties, ":cur_party"),
                (store_faction_of_party, ":cur_faction", ":cur_party"),
                (eq, ":cur_faction", ":faction_line"),

                (try_begin),
                    (party_slot_eq, ":cur_party", slot_party_type, spt_kingdom_hero_party),
                    (val_add, ":num_lords", 1),
                (else_try),
                    (party_slot_eq, ":cur_party", slot_party_type, spt_kingdom_caravan),
                    (val_add, ":num_caravans", 1),
                (else_try),
                    (this_or_next|party_slot_eq, ":cur_party", slot_party_type, spt_town),
                    (this_or_next|party_slot_eq, ":cur_party", slot_party_type, spt_castle),
                    (party_slot_eq, ":cur_party", slot_party_type, spt_village),
                    (val_add, ":num_centers", 1),

                    (try_begin),
                        (party_slot_eq, ":cur_party", slot_town_lord, stl_unassigned),
                        (val_add, ":unassigned_centers", 1),
                    (try_end),
                (try_end),
            (try_end), # end of parties loop

            # Count prisoners
            (assign, ":prisoners", 0),
            (try_for_range, ":lord_id", active_npcs_begin, active_npcs_end),
                (troop_slot_eq, ":lord_id", slot_troop_occupation, slto_kingdom_hero),
                (troop_slot_ge, ":lord_id", slot_troop_prisoner_of_party, 0),
                (store_troop_faction, ":lord_faction", ":lord_id"),
                (eq, ":lord_faction", ":faction_line"),
                (val_add, ":prisoners", 1),
            (try_end),

            # add count to last line for faction line report (second, third and fourth line)
            (assign, reg0, ":num_centers"),
            (assign, reg58, ":unassigned_centers"),
            (create_text_overlay, reg10, "@{reg0} {reg58?({reg58} U) :}Centers", tf_left_align),
            (overlay_set_size, reg10, ":line_size"),
            (position_set_x, pos1, 15),
            (store_sub, ":line_y", ":y_pos", 17),
            (position_set_y, pos1, ":line_y"),
            (overlay_set_position, reg10, pos1),
            (overlay_set_color, reg10, 0x000000),

            (assign, reg0, ":num_caravans"),
            (create_text_overlay, reg10, "@{reg0} Caravans", tf_left_align),
            (overlay_set_size, reg10, ":line_size"),
            (position_set_x, pos1, 15),
            (val_sub, ":line_y", 17),
            (position_set_y, pos1, ":line_y"),
            (overlay_set_position, reg10, pos1),
            (overlay_set_color, reg10, 0x000000),

            (assign, reg60, ":num_lords"),
            (assign, reg59, ":prisoners"),
            (create_text_overlay, reg10, "@{reg60} {reg59?({reg59} P) :}Lords", tf_left_align),
            (overlay_set_size, reg10, ":line_size"),
            (position_set_x, pos1, 15),
            (val_sub, ":line_y", 17),
            (position_set_y, pos1, ":line_y"),
            (overlay_set_position, reg10, pos1),
            (overlay_set_color, reg10, 0x000000),

            # increase line for next faction block
            (val_add, ":y_pos", 18),#linebreak

        (try_end), # end of faction loop
        (set_container_overlay, -1),
   ]),
   ## END on load trigger

   ## Check for buttonpress
   (ti_on_presentation_event_state_change,
    [
        (store_trigger_param_1, ":button_pressed_id"),
        (try_begin),
             (eq, ":button_pressed_id", "$g_jrider_faction_report_return_to_menu"), # pressed  (Return to menu)
        (presentation_set_duration, 0),
    (try_end),
    ]),
   ## END presentation event state change trigger

   ## Event to process when running the presentation
   (ti_on_presentation_run,
    [
        (try_begin),
      (this_or_next|key_clicked, key_escape),
      (key_clicked, key_right_mouse_button),
      (presentation_set_duration, 0),
      (jump_to_menu, "mnu_reports"),
        (try_end),

        ]),
   ]),
##report for estates owned by player
("estate_report", 0, mesh_load_window,[
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),
    # #0. BACKROUND
    # (create_mesh_overlay, reg0, "mesh_pic_extra_intro2"),
    # (position_set_x, pos1, -1),
    # (position_set_y, pos1, -1),
    # (overlay_set_position, reg0, pos1),
    # (position_set_x, pos1, 1002),
    # (position_set_y, pos1, 1002),
    # (overlay_set_size, reg0, pos1),

    # Presentation title, centered at the top
    (create_text_overlay, reg1, "@_Estate Report_", tf_center_justify|tf_with_outline),
    (position_set_x, pos1, 500), # Higher, means more toward the right
    (position_set_y, pos1, 685), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1500),
    (position_set_y, pos1, 1500),
    (overlay_set_size, reg1, pos1),
    (overlay_set_color, reg1, message_alert),

    # Back to menu - graphical button
    (create_game_button_overlay, reg1, "str_return"),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 23),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_jrider_faction_report_return_to_menu", reg1),


    # clear the string globals that we'll use
    (str_clear, s0),
    (str_clear, s20),
    (str_clear, s21),
    (str_clear, s23),
    (str_clear, s24),
    # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
    (create_text_overlay, reg1, s0, tf_scrollable_style_2),
    (position_set_x, pos1, 50),
    (position_set_y, pos1, 70),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 860),
    (position_set_y, pos1, 527),
    (overlay_set_area_size, reg1, pos1),


    (create_text_overlay, reg0, "@Name", tf_left_align|tf_with_outline),
    (position_set_x, pos1, 85),
    (position_set_y, pos1, 620),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@Garrison", tf_left_align|tf_with_outline),
    (position_set_x, pos1, 130+130),###+220
    (position_set_y, pos1, 600),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@Prisoners,", tf_left_align|tf_with_outline),
    (position_set_x, pos1, 130+130),###+160
    (position_set_y, pos1, 620),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@Buildings", tf_left_align|tf_with_outline),
    (position_set_x, pos1, 120+130+125),###+160
    (position_set_y, pos1, 620),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@Construction Projects", tf_left_align|tf_with_outline),
    (position_set_x, pos1, 120+130+125+160),###+110
    (position_set_y, pos1, 620),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@Physician", tf_left_align|tf_with_outline),
    (position_set_x, pos1, 90+100+80+100+150+260),###+110
    (position_set_y, pos1, 620),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@Magister", tf_left_align|tf_with_outline),
    (position_set_x, pos1, 90+100+80+100+150+250+85),###+110
    (position_set_y, pos1, 620),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),

    ##get number of lines for size of the scrollable overlay
    (assign, ":num_lines", 1),
    (try_for_range, ":village", villages_begin, villages_end),
      (party_get_slot, ":latifundium", ":village", slot_center_has_latifundium),
      (ge, ":latifundium", 1),
      (val_add, ":num_lines", 1),
    (try_end),
    (position_set_x, pos1, 0),
    (store_mul, ":y_name", 300, ":num_lines"),##get y for size of the scrollable overlay
    ##text size of the table
    (position_set_x, pos2, 900),
    (position_set_y, pos2, 900),

    (set_container_overlay, reg1),#start scroll
    (try_for_range_backwards, ":village", villages_begin, villages_end),
      (party_get_slot, ":latifundium", ":village", slot_center_has_latifundium),
      (ge, ":latifundium", 1),

      (assign, ":x_name", 0),

      ##creat some lines
      (create_mesh_overlay, reg1, "mesh_white_plane"),
      (overlay_set_color, reg1, 0x000000),#line color
      (position_set_x, pos3, 180000),
      (position_set_y, pos3, 50),
      (overlay_set_size, reg1, pos3),
      (position_set_x, pos3, 0),
      (store_add, ":y_name_line", ":y_name", 16), # set it below 2 pix of current position
      (position_set_y, pos3, ":y_name_line"),
      (overlay_set_position, reg1, pos3),

      (str_store_party_name, s20, ":latifundium"),

      (create_text_overlay, reg0, "@{s20}", tf_left_align),
      (position_set_x, pos1, ":x_name"),
      (position_set_y, pos1, ":y_name"),
      (overlay_set_position, reg0, pos1),
      (overlay_set_size, reg0, pos2),
      (overlay_set_color, reg0, 0x00b300),
      (val_add, ":x_name", 215),


     # (str_store_string, s20, "@{reg1}"),

      # (create_text_overlay, reg0, "@{s20}", tf_left_align),
      # (position_set_y, pos1, ":y_name"),
      # (position_set_x, pos1, ":x_name"),
      # (overlay_set_position, reg0, pos1),
      # (overlay_set_size, reg0, pos2),

      # (val_add, ":x_name", 40),

      (party_get_num_prisoners, reg1, ":latifundium"),

      (assign, reg30, 30),
      (try_for_range, ":building", slot_lat_silk, slot_lat_building_end),
        (party_get_slot, ":time", ":latifundium", ":building"),
        (ge, ":time", 1),
        (call_script, "script_get_building_details_lat",  ":building"),
        (val_add, reg30, reg22),
      (try_end),

      (create_text_overlay, reg0, "@{reg1} (needed: {reg30})", tf_left_align),
      (position_set_y, pos1, ":y_name"),
      (position_set_x, pos1, ":x_name"),
      (overlay_set_position, reg0, pos1),
      (overlay_set_size, reg0, pos2),

      (store_party_size_wo_prisoners, reg1, ":latifundium"),
      (store_sub, ":y_name_new", ":y_name", 14),
      (create_text_overlay, reg0, "@{reg1} men", tf_left_align),
      (position_set_y, pos1, ":y_name_new"),
      (position_set_x, pos1, ":x_name"),
      (overlay_set_position, reg0, pos1),
      (overlay_set_size, reg0, pos2),

      (val_add, ":x_name", 100),
      (str_clear, s10),
      (str_clear, s11),
      (str_clear, s20),
      (str_clear, s21),
      (assign, ":counter", 0),
      (assign, ":y_name_addition", 0),
      (try_for_range_backwards, ":building", slot_lat_silk, slot_lat_building_end),
        (party_get_slot, ":time", ":latifundium", ":building"),
        (ge, ":time", 1),
        (call_script, "script_get_building_details_lat",  ":building"),
        (try_begin),
          (eq, ":building", slot_lat_temple),
          (party_get_slot, ":god", ":latifundium", slot_lat_deity),
          (store_add, ":god_string", "str_gods_begin", ":god"),
          (str_store_string, s21, ":god_string"),
          (str_store_string, s20, "@{s20} ({s21})"),
        (try_end),
        (try_begin),
          (store_mod, ":mod", ":counter", 2),
          (gt, ":counter", 1),
          (eq, ":mod", 0),
          (str_store_string, s10, "@{s20},^ {s10}"),
          (val_sub, ":y_name_addition", 14),
        (else_try),
          (str_store_string, s10, "@{s20}, {s10}"),
        (try_end),
        (val_add, ":counter", 1),
      (try_end),

      (store_add, ":y_name_new", ":y_name", ":y_name_addition"),


      (create_text_overlay, reg0, "@{s10}", tf_left_align),
      (position_set_y, pos1, ":y_name_new"),
      (position_set_x, pos1, ":x_name"),
      (overlay_set_position, reg0, pos1),
      (overlay_set_size, reg0, pos2),

      (val_add, ":x_name", 190),

      (str_clear, s10),
      (str_clear, s11),
      (str_clear, s20),
      (assign, ":counter", 0),
      (assign, ":y_name_addition2", 0),
      (try_for_range_backwards, ":building", slot_lat_silk, slot_lat_building_end),
        (party_get_slot, ":time", ":latifundium", ":building"),
        (le, ":time", -1),
        (call_script, "script_get_building_details_lat",  ":building"),
        (try_begin),
          (eq, ":building", slot_lat_temple),
          (party_get_slot, ":god", ":latifundium", slot_lat_deity),
          (store_add, ":god_string", "str_gods_begin", ":god"),
          (str_store_string, s21, ":god_string"),
          (str_store_string, s20, "@{s20} ({s21})"),
        (try_end),
        (val_abs, ":time"),
        (assign, reg10, ":time"),
        (try_begin),
          (store_mod, ":mod", ":counter", 2),
          (gt, ":counter", 1),
          (eq, ":mod", 0),
          (str_store_string, s11, "@{s20} ({reg10} days),^ {s11}"),
          (val_sub, ":y_name_addition2", 14),
        (else_try),
         (str_store_string, s11, "@{s20} ({reg10} days), {s11}"),
        (try_end),
        (val_add, ":counter", 1),
      (try_end),

      (store_add, ":y_name_new", ":y_name", ":y_name_addition2"),

      (create_text_overlay, reg0, "@{s11}", tf_left_align),
      (position_set_y, pos1, ":y_name_new"),
      (position_set_x, pos1, ":x_name"),
      (overlay_set_position, reg0, pos1),
      (overlay_set_size, reg0, pos2),

      (val_add, ":x_name", 280),

      (try_begin),
        (party_slot_eq, ":latifundium", slot_lat_doctor, 0),
        (str_store_string, s20, "@No"),
      (else_try),
        (str_store_string, s20, "@Yes"),
      (try_end),
      (create_text_overlay, reg0, "@{s20}", tf_left_align),
      (position_set_y, pos1, ":y_name"),
      (position_set_x, pos1, ":x_name"),
      (overlay_set_position, reg0, pos1),
      (overlay_set_size, reg0, pos2),

      (val_add, ":x_name", 50),

      (try_begin),
        (party_slot_eq, ":latifundium", slot_lat_teacher, 0),
        (str_store_string, s20, "@No"),
      (else_try),
        (str_store_string, s20, "@Yes"),
      (try_end),
      (create_text_overlay, reg0, "@{s20}", tf_left_align),
      (position_set_y, pos1, ":y_name"),
      (position_set_x, pos1, ":x_name"),
      (overlay_set_position, reg0, pos1),
      (overlay_set_size, reg0, pos2),

      (try_begin),
        (lt, ":y_name_addition", ":y_name_addition2"),
        (val_add, ":y_name", ":y_name_addition"),
      (else_try),
        (val_add, ":y_name", ":y_name_addition2"),
      (try_end),

      (val_sub, ":y_name", 40),
    (try_end),
    (set_container_overlay, -1),#end scroll
   ]),
   ## END on load trigger
   ## Check for buttonpress
   (ti_on_presentation_event_state_change,
    [
    (store_trigger_param_1, ":button_pressed_id"),
    (try_begin),
        (eq, ":button_pressed_id", "$g_jrider_faction_report_return_to_menu"), # pressed  (Return to menu)
        (presentation_set_duration, 0),
    (try_end),
    ]),
   ## END presentation event state change trigger

   ## Event to process when running the presentation
   (ti_on_presentation_run,
    [
    (try_begin),
      (this_or_next|key_clicked, key_escape),
      (key_clicked, key_right_mouse_button),
      (presentation_set_duration, 0),
      (jump_to_menu, "mnu_reports"),
    (try_end),]),

    (ti_on_presentation_run, [
        (try_begin),
          (key_clicked, key_escape),
          (presentation_set_duration, 0),
          (jump_to_menu, "mnu_town"),

        (else_try),
          (key_clicked, key_space),
          (set_fixed_point_multiplier, 1000),
          (mouse_get_position, pos31),

          (position_get_x, reg31, pos31),
          (position_get_y, reg32, pos31),

          (display_message, "@X: {reg31} | Y: {reg32}"),
        (try_end),
    ]),
   ]),



# ##report on vassals of player kingdom
#   ("vassal_report", 0,
#    mesh_load_window,
#    [
#      (ti_on_presentation_load,
#       [
#     (presentation_set_duration, 999999),
#     (set_fixed_point_multiplier, 1000),
#     # #0. BACKROUND
#     # (create_mesh_overlay, reg0, "mesh_pic_extra_intro2"),
#     # (position_set_x, pos1, -1),
#     # (position_set_y, pos1, -1),
#     # (overlay_set_position, reg0, pos1),
#     # (position_set_x, pos1, 1002),
#     # (position_set_y, pos1, 1002),
#     # (overlay_set_size, reg0, pos1),

#     # Presentation title, centered at the top
#     (create_text_overlay, reg1, "@_Commander Report_", tf_center_justify),
#     (position_set_x, pos1, 500), # Higher, means more toward the right
#     (position_set_y, pos1, 685), # Higher, means more toward the top
#     (overlay_set_position, reg1, pos1),
#     (position_set_x, pos1, 1500),
#     (position_set_y, pos1, 1500),
#     (overlay_set_size, reg1, pos1),

#     # Back to menu - graphical button
#     (create_game_button_overlay, reg1, "str_return"),
#     (position_set_x, pos1, 500),
#     (position_set_y, pos1, 23),
#     (overlay_set_position, reg1, pos1),
#     (assign, "$g_jrider_faction_report_return_to_menu", reg1),


#     # clear the string globals that we'll use
#     (str_clear, s0),
#     (str_clear, s20),
#     (str_clear, s21),
#     (str_clear, s23),
#     (str_clear, s24),
#     # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
#     (create_text_overlay, reg1, s0, tf_scrollable_style_2),
#     (position_set_x, pos1, 50),
#     (position_set_y, pos1, 70),
#     (overlay_set_position, reg1, pos1),
#     (position_set_x, pos1, 860),
#     (position_set_y, pos1, 527),
#     (overlay_set_area_size, reg1, pos1),


#     (create_text_overlay, reg0, "@Name", tf_left_align),
#     (position_set_x, pos1, 95),
#     (position_set_y, pos1, 645),
#     (overlay_set_position, reg0, pos1),
#     (position_set_x, pos2, 1200),
#     (position_set_y, pos2, 1200),
#     (overlay_set_size, reg0, pos2),

#     (create_text_overlay, reg0, "@Personality,", tf_left_align),
#     (position_set_x, pos1, 95+210),###+220
#     (position_set_y, pos1, 645),
#     (overlay_set_position, reg0, pos1),
#     (position_set_x, pos2, 1200),
#     (position_set_y, pos2, 1200),
#     (overlay_set_size, reg0, pos2),

#     (create_text_overlay, reg0, "@relation", tf_left_align),
#     (position_set_x, pos1, 95+210),###+220
#     (position_set_y, pos1, 615),
#     (overlay_set_position, reg0, pos1),
#     (position_set_x, pos2, 1200),
#     (position_set_y, pos2, 1200),
#     (overlay_set_size, reg0, pos2),

#     (create_text_overlay, reg0, "@Unit type,", tf_left_align),
#     (position_set_x, pos1, 95+210+130),###+160
#     (position_set_y, pos1, 645),
#     (overlay_set_position, reg0, pos1),
#     (position_set_x, pos2, 1200),
#     (position_set_y, pos2, 1200),
#     (overlay_set_size, reg0, pos2),

#     (create_text_overlay, reg0, "@party size", tf_left_align),
#     (position_set_x, pos1, 95+210+130),###+160
#     (position_set_y, pos1, 615),
#     (overlay_set_position, reg0, pos1),
#     (position_set_x, pos2, 1200),
#     (position_set_y, pos2, 1200),
#     (overlay_set_size, reg0, pos2),

#     (create_text_overlay, reg0, "@Wealth", tf_left_align),
#     (position_set_x, pos1, 95+210+130+100),###+100
#     (position_set_y, pos1, 645),
#     (overlay_set_position, reg0, pos1),
#     (position_set_x, pos2, 1200),
#     (position_set_y, pos2, 1200),
#     (overlay_set_size, reg0, pos2),

#     (create_text_overlay, reg0, "@Number of owned centers,", tf_left_align),
#     (position_set_x, pos1, 95+210+130+100+110),###+110
#     (position_set_y, pos1, 645),
#     (overlay_set_position, reg0, pos1),
#     (position_set_x, pos2, 1200),
#     (position_set_y, pos2, 1200),
#     (overlay_set_size, reg0, pos2),

#     (create_text_overlay, reg0, "@strongest owned walled center", tf_left_align),
#     (position_set_x, pos1, 95+210+130+100+110),###+110
#     (position_set_y, pos1, 615),
#     (overlay_set_position, reg0, pos1),
#     (position_set_x, pos2, 1200),
#     (position_set_y, pos2, 1200),
#     (overlay_set_size, reg0, pos2),

#     ##get number of lines for size of the scrollable overlay
#     (assign, ":num_lines", 1),
#     (try_for_range, ":npc", active_npcs_begin, active_npcs_end),
#       (troop_slot_eq, ":npc", slot_troop_occupation, slto_kingdom_hero),
#       (store_faction_of_troop, ":npc_fac", ":npc"),
#       (eq, ":npc_fac", "$players_kingdom"),
#       (val_add, ":num_lines", 1),
#     (try_end),
#     (position_set_x, pos1, 0),
#     (store_mul, ":y_name", 60, ":num_lines"),##get y for size of the scrollable overlay
#     ##text size of the table
#     (position_set_x, pos2, 900),
#     (position_set_y, pos2, 900),

#     (set_container_overlay, reg1),#start scroll
#     (try_for_range, ":npc", active_npcs_begin, active_npcs_end),
#       (troop_slot_eq, ":npc", slot_troop_occupation, slto_kingdom_hero),
#       (store_faction_of_troop, ":npc_fac", ":npc"),
#       (eq, ":npc_fac", "$players_kingdom"),
#       (str_store_troop_name, s21, ":npc"),

#       (str_store_string, s20, "@{s21}"),

#       (assign, ":x_name", 0),

#       (create_text_overlay, reg0, "@{s20}", tf_left_align),
#       (position_set_x, pos1, ":x_name"),
#       (position_set_y, pos1, ":y_name"),
#       (overlay_set_position, reg0, pos1),
#       (overlay_set_size, reg0, pos2),

#       (val_add, ":x_name", 260),

#       (troop_get_slot, ":personality", ":npc", slot_lord_reputation_type),
#       (val_add, ":personality", "str_personality_archetypes"),
#       (str_store_string, s20, ":personality"),

#       (call_script, "script_troop_get_player_relation", ":npc"),
#       (str_store_string, s20, "@{s20}^(rel: {reg0})"),

#       (create_text_overlay, reg0, "@{s20}", tf_left_align),
#       (position_set_y, pos1, ":y_name"),
#       (position_set_x, pos1, ":x_name"),
#       (overlay_set_position, reg0, pos1),
#       (overlay_set_size, reg0, pos2),

#       (val_add, ":x_name", 100),
#       (try_begin),
#         (troop_get_slot, ":legion", ":npc", slot_troop_legion),
#         (ge, ":legion", 1),
#         (store_add, ":string", "str_lover_talk", ":legion"),
#         (str_store_string, s20, ":string"),
#       (else_try),
#         (troop_get_slot, ":aux", ":npc", slot_troop_aux),
#         (ge, ":aux", "pt_cohors_aux"),
#         (val_sub, ":aux", "pt_cohors_aux"),
#         (val_add, ":aux", "str_cohors_aux"),
#         (str_store_string, s20, ":aux"),
#       (else_try),
#         (troop_slot_ge, ":npc", slot_troop_govern, 1),
#         (str_store_string, s20, "@Governor"),
#       (else_try),
#         (str_store_string, s20, "@Warlord"),
#       (try_end),

#       (try_begin),
#         (troop_get_slot, ":leaded_party", ":npc", slot_troop_leaded_party),
#         (ge, ":leaded_party", 1),
#         (party_is_active, ":leaded_party"),
#         (store_party_size_wo_prisoners, reg47, ":leaded_party"),
#         (str_store_string, s24, "@{reg47} men"),
#       (else_try),
#         (troop_get_slot, ":leaded_party", ":npc", slot_troop_prisoner_of_party),
#         (ge, ":leaded_party", 1),
#         (party_is_active, ":leaded_party"),
#         (store_faction_of_party, ":fac_party", ":leaded_party"),
#         (str_store_faction_name, s23, ":fac_party"),
#         (str_store_string, s24, "@Prisoner of {s23}"),
#       (else_try),
#         (str_store_string, s24, "@Party not active"),
#       (try_end),

#       (create_text_overlay, reg0, "@{s20}^{s24}", tf_left_align),
#       (position_set_y, pos1, ":y_name"),
#       (position_set_x, pos1, ":x_name"),
#       (overlay_set_position, reg0, pos1),
#       (overlay_set_size, reg0, pos2),

#       (val_add, ":x_name", 125),

#       (troop_get_slot, reg16, ":npc", slot_troop_wealth),



#       (str_store_string, s20, "@{reg16} denars"),

#       (create_text_overlay, reg0, "@{s20}", tf_left_align),
#       (position_set_y, pos1, ":y_name"),
#       (position_set_x, pos1, ":x_name"),
#       (overlay_set_position, reg0, pos1),
#       (overlay_set_size, reg0, pos2),

#       (val_add, ":x_name", 135),
#       (assign, reg39, 0),
#       (assign, reg38, 0),
#       (assign, reg40, 0),
#       (assign, reg41, 0),
#       (assign, ":largest_town", -1),
#       (try_for_range, ":center", castles_begin, castles_end),
#         (party_slot_eq, ":center", slot_town_lord, ":npc"),
#         (val_add, reg39, 1),
#         (store_party_size_wo_prisoners, ":size", ":center"),
#         (gt, ":size", reg40),
#         (assign, reg40, ":size"),
#         (assign, ":largest_town", ":center"),
#       (try_end),
#       (try_for_range, ":center", towns_begin, towns_end),
#         (party_slot_eq, ":center", slot_town_lord, ":npc"),
#         (val_add, reg38, 1),
#         (store_party_size_wo_prisoners, ":size", ":center"),
#         (gt, ":size", reg40),
#         (assign, reg40, ":size"),
#         (assign, ":largest_town", ":center"),
#       (try_end),
#       (try_for_range, ":center", villages_begin, villages_end),
#         (party_slot_eq, ":center", slot_town_lord, ":npc"),
#         (val_add, reg41, 1),
#       (try_end),

#       (create_text_overlay, reg0, "@Forts: {reg39}, ^Towns: {reg38}^Villages: {reg41}", tf_left_align),
#       (position_set_y, pos1, ":y_name"),
#       (position_set_x, pos1, ":x_name"),
#       (overlay_set_position, reg0, pos1),
#       (overlay_set_size, reg0, pos2),

#       (val_add, ":x_name", 100),
#       (try_begin),
#         (is_between, ":largest_town", walled_centers_begin, walled_centers_end),
#         (str_store_party_name, s20, ":largest_town"),
#         (str_store_string, s20, "@{s20},^(garrison {reg40})"),
#       (else_try),
#         (str_store_string, s20, "str_none"),
#       (try_end),
#       (create_text_overlay, reg0, "@{s20}", tf_left_align),
#       (position_set_y, pos1, ":y_name"),
#       (position_set_x, pos1, ":x_name"),
#       (overlay_set_position, reg0, pos1),
#       (overlay_set_size, reg0, pos2),

#       (val_sub, ":y_name", 60),
#     (try_end),
#     (set_container_overlay, -1),#end scroll
#    ]),
   ## END on load trigger

  #  ## Check for buttonpress
  #  (ti_on_presentation_event_state_change,
  #   [
  #       (store_trigger_param_1, ":button_pressed_id"),
  #       (try_begin),
  #            (eq, ":button_pressed_id", "$g_jrider_faction_report_return_to_menu"), # pressed  (Return to menu)
  #       (presentation_set_duration, 0),
  #   (try_end),
  #   ]),
   ## END presentation event state change trigger

  #  ## Event to process when running the presentation
  #  (ti_on_presentation_run,
  #   [
  #       (try_begin),
  #     (this_or_next|key_clicked, key_escape),
  #     (key_clicked, key_right_mouse_button),
  #     (presentation_set_duration, 0),
  #     (jump_to_menu, "mnu_reports"),
  #       (try_end),

  #       ]),
  #   (ti_on_presentation_run, [
  #       (try_begin),
  #         (key_clicked, key_escape),
  #         (presentation_set_duration, 0),
  #         (jump_to_menu, "mnu_town"),

  #       (else_try),
  #         (key_clicked, key_space),
  #         (set_fixed_point_multiplier, 1000),
  #         (mouse_get_position, pos31),

  #         (position_get_x, reg31, pos31),
  #         (position_get_y, reg32, pos31),

  #         (display_message, "@X: {reg31} | Y: {reg32}"),
  #       (try_end),
  #   ]),
  #  ]),
  # END presentation run trigger
  # END Faction relation presentation
  # Jrider -
##NEW CHARACTER REPORT

("character_report", 0,mesh_load_window,[
  (ti_on_presentation_load,[
    (presentation_set_duration,999999),
    (set_fixed_point_multiplier, 1000),

    #0. BACKROUND
    (create_mesh_overlay, reg0, "mesh_pic_character_report"),
    (position_set_x, pos1, -1),
    (position_set_y, pos1, -1),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 1002),
    (position_set_y, pos1, 1002),
    (overlay_set_size, reg0, pos1),


    # Begin common dynamic overlay
    # mesh Overlay for character portrait (global not needed)
    (create_image_button_overlay_with_tableau_material, "$g_jrider_character_portrait", -1, "tableau_troop_note_mesh", "trp_player"),
    (position_set_x, pos2, 330),
    (position_set_y, pos2, 495),
    (overlay_set_position, "$g_jrider_character_portrait", pos2),
    (position_set_x, pos2, 700), #1150
    (position_set_y, pos2, 700), #1150
    (overlay_set_size, "$g_jrider_character_portrait", pos2),

    (create_text_overlay, reg1, "@Statistics", tf_center_justify),
    (position_set_x, pos1, 700),
    (position_set_y, pos1, 690),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1300),
    (position_set_y, pos1, 1300),
    (overlay_set_size, reg1, pos1),

    (create_game_button_overlay, reg1, "@_Troop tree_"),
    (position_set_x, pos1, 700),
    (position_set_y, pos1, 640),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_1", reg1),

    (create_game_button_overlay, reg1, "@World Map"),
    (position_set_x, pos1, 860),
    (position_set_y, pos1, 640),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_2", reg1),

    (create_game_button_overlay, reg1, "@Faction Relations"),
    (position_set_x, pos1, 700),
    (position_set_y, pos1, 590),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_3", reg1),

    (create_game_button_overlay, reg1, "@Prosperity Report"),
    (position_set_x, pos1, 860),
    (position_set_y, pos1, 590),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_4", reg1),


    (create_text_overlay, reg1, "@Relationships", tf_center_justify),
    (position_set_x, pos1, 700),
    (position_set_y, pos1, 490),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1300),
    (position_set_y, pos1, 1300),
    (overlay_set_size, reg1, pos1),

    (create_game_button_overlay, reg1, "@Known Lords"),
    (position_set_x, pos1, 700),
    (position_set_y, pos1, 440),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_5", reg1),

    (create_game_button_overlay, reg1, "@Love Affairs"),
    (position_set_x, pos1, 860),
    (position_set_y, pos1, 440),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_6", reg1),

    (create_game_button_overlay, reg1, "@Companion Report"),
    (position_set_x, pos1, 700),
    (position_set_y, pos1, 390),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_8", reg1),

    (create_game_button_overlay, reg1, "@Affilitated Family"),
    (position_set_x, pos1, 860),
    (position_set_y, pos1, 390),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_7", reg1),

    (create_text_overlay, reg1, "@Management", tf_center_justify),
    (position_set_x, pos1, 700),
    (position_set_y, pos1, 290),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1300),
    (position_set_y, pos1, 1300),
    (overlay_set_size, reg1, pos1),

    (create_game_button_overlay, reg1, "@Budget Report"),
    (position_set_x, pos1, 700),
    (position_set_y, pos1, 240),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_9", reg1),

    (create_game_button_overlay, reg1, "@Faction Notes"),
    (position_set_x, pos1, 700),
    (position_set_y, pos1, 190),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_10", reg1),

    (assign, "$g_presentation_obj_15", -1),
    (try_begin),
        (ge, "$g_is_emperor", 1),
        (create_game_button_overlay, reg1, "@Legion Report"),
        (position_set_x, pos1, 700),
        (position_set_y, pos1, 140),
        (overlay_set_position, reg1, pos1),
        (assign, "$g_presentation_obj_15", reg1),
    (try_end),

    (create_game_button_overlay, reg1, "@Estate Report"),
    (position_set_x, pos1, 860),
    (position_set_y, pos1, 240),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_14", reg1),

    (create_game_button_overlay, reg1, "@Concepts"),
    (position_set_x, pos1, 860),
    (position_set_y, pos1, 190),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_11", reg1),

    ##Party info:
    (try_begin),
        (troop_get_slot, ":culture", "trp_player", slot_troop_culture),
        (neg|is_between, ":culture", "fac_culture_1", "fac_player_faction"),
        (display_message, "@ERROR: You have no valid culture! Choose a culture in the 'Select a culture menu' under the reports menu!", message_negative),
    (try_end),

    # moved to camp menu
    # (create_text_overlay, reg1, "@Party Information", tf_center_justify),
    # (position_set_x, pos1, 200),
    # (position_set_y, pos1, 250),
    # (overlay_set_position, reg1, pos1),
    # (position_set_x, pos1, 1300),
    # (position_set_y, pos1, 1300),
    # (overlay_set_size, reg1, pos1),

    # (call_script, "script_game_get_party_companion_limit", "p_main_party"),
    # (assign, reg7, reg0),
    # (party_get_morale, reg8, "p_main_party"),
    # (create_text_overlay, reg1, "@Morale: {reg8}.  Companion limit: {reg7}", tf_center_justify),
    # (position_set_x, pos1, 200),
    # (position_set_y, pos1, 215),
    # (overlay_set_position, reg1, pos1),
    # (position_set_x, pos1, 900),
    # (position_set_y, pos1, 900),
    # (overlay_set_size, reg1, pos1),


    # (create_game_button_overlay, reg1, "@Morale Report"),
    # (position_set_x, pos1, 100),
    # (position_set_y, pos1, 160),
    # (overlay_set_position, reg1, pos1),
    # (assign, "$g_presentation_obj_12", reg1),

    # (create_game_button_overlay, reg1, "@Party size Report"),
    # (position_set_x, pos1, 260),
    # (position_set_y, pos1, 160),
    # (overlay_set_position, reg1, pos1),
    # (assign, "$g_presentation_obj_13", reg1),

##Character info
    (create_text_overlay, reg1, "@Character Information", tf_center_justify),
    (position_set_x, pos1, 200),
    (position_set_y, pos1, 695),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1300),
    (position_set_y, pos1, 1300),
    (overlay_set_size, reg1, pos1),

    #size of the text
    (position_set_x, pos2, 950),
    (position_set_y, pos2, 950),

    (str_clear, s0),
    (create_text_overlay, reg1, s0, tf_double_space|tf_scrollable|tf_left_align),
    (position_set_x, pos1, 30),
    (position_set_y, pos1, 150),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 375),
    (position_set_y, pos1, 660-150),
    (overlay_set_area_size, reg1, pos1),
    (set_container_overlay, reg1),

    #get number of lines
    (assign, ":line_number", 12),
    (try_begin),
        (troop_slot_ge, "trp_senator_dummy", slot_senate_support, 1),
        (val_add, ":line_number", 1),
    (try_end),
    (try_begin),
        (gt, "$g_next_pay_time", 0),
        (val_add, ":line_number", 1),
    (try_end),
    (try_begin),
        (is_between, "$g_player_affiliated_troop", lords_begin, kingdom_ladies_end),
        (val_add, ":line_number", 1),
    (try_end),
    (try_begin),
        (ge, "$g_rank", 1),
        (val_add, ":line_number", 1),
    (try_end),
    (try_begin),
        (eq, "$g_is_emperor", 1),
        (val_add, ":line_number", 2),
    (try_end),
    (try_begin),
        (troop_slot_ge, "trp_player", slot_troop_honorary_title, 1),
        (val_add, ":line_number", 1),
    (try_end),
    (position_set_x, pos1, 0),
    (store_mul, ":cur_y", ":line_number", 27),
    #290,660
    ##culture and age
    (troop_get_slot, reg1, "trp_player", slot_troop_age),
    (troop_get_slot, ":culture", "trp_player", slot_troop_culture),
    (str_store_faction_name, s1, ":culture"),
    (create_text_overlay, reg0, "@You are {reg1} years old and {s1}.", 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos2),
    (val_sub, ":cur_y", 27),

    ##religion
    (troop_get_slot, ":god", "trp_player", slot_troop_religion),
    (try_begin),
        (ge, ":god", 1),
        (store_add, ":string", "str_gods_begin", ":god"),
        (str_store_string, s44, ":string"),
        (str_store_string, s43, "@You worship {s44}"),
    (else_try),
        (str_store_string, s43, "@You worship no special god or goddess."),
    (try_end),
    (create_text_overlay, reg0, "@{s43}", 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos2),
    (val_sub, ":cur_y", 27),

    ##books
    (try_begin),
        (gt, "$g_player_reading_book", 0),
        (player_has_item, "$g_player_reading_book"),
        (str_store_item_name, s8, "$g_player_reading_book"),
        (str_store_string, s9, "@You are currently reading {s8}."),
    (else_try),
        (assign, "$g_player_reading_book", 0),
        (str_store_string, s9, "@You are not reading any books."),
    (try_end),
    (create_text_overlay, reg0, "@{s9}", 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos2),
    (val_sub, ":cur_y", 27),

    #ship
    (try_begin),
        (party_get_current_terrain, ":cur_terrain", "p_main_party"),
        (this_or_next|eq,":cur_terrain",rt_bridge),
        (this_or_next|eq,":cur_terrain",rt_river),
        (eq,":cur_terrain",rt_water),
        (str_store_string, s22, "@You are sailing with your ship."),
    (else_try),
        (eq, "$players_ship", -1),
        (str_store_string, s22, "@You don't own a ship."),
    (else_try),
        (eq, "$players_ship", 0),
        (str_store_string, s22, "@Your ship is currently in no town."),
    (else_try),
        (str_store_party_name, s23, "$players_ship"),
        (str_store_string, s22, "@Your ship is currently in {s23}."),
    (try_end),
    (create_text_overlay, reg0, "@{s22}", 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos2),
    (val_sub, ":cur_y", 27),

    ##health
    (call_script, "script_print_health_text_to_s0", "trp_player"),
    (create_text_overlay, reg0, "@{s0}", 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos2),
    (val_sub, ":cur_y", 27),

    ###scars ###Phaiak maybe you want add some scars notes when player dont heal his wounds and lose attribute or skill points?
    (create_text_overlay, reg0, "@Scars:", 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos2),

    (quest_get_slot, reg1, "qst_vc_wounds", slot_quest_int_penalty_perma_points),
    (quest_get_slot, reg2, "qst_vc_wounds", slot_quest_cha_penalty_perma_points),
    (quest_get_slot, reg3, "qst_vc_wounds", slot_quest_str_penalty_perma_points),
    (quest_get_slot, reg4, "qst_vc_wounds", slot_quest_agi_penalty_perma_points),
    (store_add, ":number_of_scars", reg1, reg2),
    (val_add, ":number_of_scars", reg3),
    (val_add, ":number_of_scars", reg4),
    (try_begin),
        (le, ":number_of_scars", 0),
        (str_store_string, s10, "str_none"),
    (else_try),
        (assign, reg1, ":number_of_scars"),
        (str_store_string, s10, "@{reg1}"),
    (try_end),
    (create_text_overlay, reg0, "@{!}{s10}", 0),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos3, 200),
    (position_set_y, pos3, ":cur_y"),
    (overlay_set_position, reg0, pos3),
    (overlay_set_size, reg0, pos2),
    (try_begin),
        (ge, ":number_of_scars", 1),
        (overlay_set_color, reg0, 0xE12126), #red
    (else_try),
        (overlay_set_color, reg0, 0x006400), #verde oscuro se ve bien
    (try_end),
    (val_sub, ":cur_y", 27),

    (create_text_overlay, reg0, "@Wounds:", 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos2),
    (quest_get_slot, reg1, "qst_vc_wounds", slot_quest_int_penalty_fluid_points),
    (quest_get_slot, reg2, "qst_vc_wounds", slot_quest_cha_penalty_fluid_points),
    (quest_get_slot, reg3, "qst_vc_wounds", slot_quest_str_penalty_fluid_points),
    (quest_get_slot, reg4, "qst_vc_wounds", slot_quest_agi_penalty_fluid_points),
    (store_add, ":number_of_wounds", reg1, reg2),
    (val_add, ":number_of_wounds", reg3),
    (val_add, ":number_of_wounds", reg4),
    (try_begin),
        (le, ":number_of_wounds", 0),
        (str_store_string, s11, "str_none"),
    (else_try),
        (assign, reg1, ":number_of_wounds"),
        (str_store_string, s11, "@{reg1}"),
    (try_end),
    (create_text_overlay, reg0, "@{!}{s11}", 0),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos3, 200),
    (position_set_y, pos3, ":cur_y"),
    (overlay_set_position, reg0, pos3),
    (overlay_set_size, reg0, pos2),
    (try_begin),
        (ge, ":number_of_wounds", 1),
        (overlay_set_color, reg0, 0xE12126), #red
    (else_try),
        (overlay_set_color, reg0, 0x006400), #verde oscuro se ve bien
    (try_end),
    (val_sub, ":cur_y", 27),

    (create_text_overlay, reg0, "@Enemies Killed:", 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos2),

    (get_player_agent_kill_count, reg0),
    (create_text_overlay, reg0, "@{!}{reg0}", 0),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos3, 200),
    (position_set_y, pos3, ":cur_y"),
    (overlay_set_position, reg0, pos3),
    (overlay_set_size, reg0, pos2),
    (overlay_set_color, reg0, 0x006400), #verde oscuro se ve bien
    (val_sub, ":cur_y", 27),

    (create_text_overlay, reg0, "@Enemies Wounded:", 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos2),

    (get_player_agent_kill_count, reg0, 1),
    (create_text_overlay, reg0, "@{!}{reg0}", 0),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos3, 200),
    (position_set_y, pos3, ":cur_y"),
    (overlay_set_position, reg0, pos3),
    (overlay_set_size, reg0, pos2),
    (overlay_set_color, reg0, 0x006400), #verde oscuro se ve bien
    (val_sub, ":cur_y", 27),

    ##right to rule (optional)
    (create_text_overlay, reg0, "@Right to rule:", 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos2),

    (assign, reg12, "$player_right_to_rule"),
    (create_text_overlay, reg0, "@{reg12}", 0),
    (try_begin),
        (ge, reg12, 50),
        (overlay_set_color, reg0, 0x228B22),
    (else_try),
        (overlay_set_color, reg0, 0xFF0000),
    (try_end),
    (position_set_x, pos3, 200),
    (position_set_y, pos3, ":cur_y"),
    (overlay_set_position, reg0, pos3),
    (overlay_set_size, reg0, pos2),
    (val_sub, ":cur_y", 27),

    (troop_get_slot, ":renown", "trp_player", slot_troop_renown),
    (assign, reg5, ":renown"),
    (create_text_overlay, reg0, "@Character Renown:", 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos2),

	  (assign, reg12, ":renown"),
    (create_text_overlay, reg0, "@{reg12}", 0),
    (try_begin),
        (ge, reg5, 250),
        (overlay_set_color, reg0, 0x228B22),
    (else_try),
        (overlay_set_color, reg0, 0xFF0000),
    (try_end),
    (position_set_x, pos3, 200),
    (position_set_y, pos3, ":cur_y"),
    (overlay_set_position, reg0, pos3),
    (overlay_set_size, reg0, pos2),
    (val_sub, ":cur_y", 27),

    (call_script, "script_get_piety_impact"),

    (create_text_overlay, reg0, "@Piety:", 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos2),

	  (assign, reg12, "$player_piety"),
    (create_text_overlay, reg0, "@{s60} ({reg12})", 0),
    (try_begin),
        (ge, reg12, 80),
        (overlay_set_color, reg0, 0x228B22),
    (else_try),
        (le, reg12, 10),
        (overlay_set_color, reg0, 0xFF0000),
    (else_try),
        (overlay_set_color, reg0, 0xff6060),
    (try_end),
    (position_set_x, pos3, 200),
    (position_set_y, pos3, ":cur_y"),
    (overlay_set_position, reg0, pos3),
    (overlay_set_size, reg0, pos2),
    (val_sub, ":cur_y", 27),

    (create_text_overlay, reg0, "@Reputation:", 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos2),
    (call_script, "script_print_honor_to_s60"),
	  (assign, reg12, "$player_honor"),
    (create_text_overlay, reg0, "@{s60} ({reg12})", 0),
    (try_begin),
        (ge, reg12, 10),
        (overlay_set_color, reg0, 0x228B22),
    (else_try),
        (le, reg12, -10),
        (overlay_set_color, reg0, 0xFF0000),
    (try_end),
    (position_set_x, pos3, 200),
    (position_set_y, pos3, ":cur_y"),
    (overlay_set_position, reg0, pos3),
    (overlay_set_size, reg0, pos2),
    (val_sub, ":cur_y", 27),


    (troop_get_slot, reg23, "trp_senator_dummy", slot_senate_support),
    (try_begin),
        (ge, reg23, 1),
        (create_text_overlay, reg0, "@Senate support:", 0),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_size, reg0, pos2),

        (create_text_overlay, reg0, "@{reg23}", 0),
        (try_begin),
            (gt, reg23, 50),
            (overlay_set_color, reg0, 0x228B22),
        (else_try),
            (overlay_set_color, reg0, 0xFF0000),
        (try_end),

        (position_set_x, pos3, 200),
        (position_set_y, pos3, ":cur_y"),
        (overlay_set_position, reg0, pos3),
        (overlay_set_size, reg0, pos2),
        (val_sub, ":cur_y", 27),
    (try_end),

    (troop_get_slot, reg22, "trp_player", slot_troop_influence),
    (create_text_overlay, reg0, "@Influence:", 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos2),
    (create_text_overlay, reg0, "@{reg22}", 0),
    (try_begin),
        (ge, reg22, 500),
        (overlay_set_color, reg0, 0x228B22),
    (else_try),
        (overlay_set_color, reg0, 0xFF0000),
    (try_end),

    (position_set_x, pos3, 200),
    (position_set_y, pos3, ":cur_y"),
    (overlay_set_position, reg0, pos3),
    (overlay_set_size, reg0, pos2),
    (val_sub, ":cur_y", 27),

    (try_begin),
        (is_between, "$g_player_affiliated_troop", lords_begin, kingdom_ladies_end),
        (str_store_troop_name, s5, "$g_player_affiliated_troop"),
        (str_store_string, s1, "@Affiliated to {s5}"),
        (create_text_overlay, reg0, "@{s1}", 0),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_size, reg0, pos2),

        (val_sub, ":cur_y", 27),
    (try_end),
    ##diplomacy end

    (try_begin),
        (ge, "$g_rank", 1),
        (str_clear, s1),
        (try_begin),
            (eq, "$g_rank", 1),
            (assign, reg1, salary_aux_1),
            (str_store_string, s1, "@Military rank: Tribunus militaris (salary: {reg1} denars)"),
        (else_try),
            (eq, "$g_rank", 2),
            (assign, reg1, salary_aux_2),
            (str_store_string, s1, "@Military rank: Praefectus cohortis (salary: {reg1} denars)"),
        (else_try),
            (eq, "$g_rank", 3),
            (assign, reg1, salary_legate),
            (str_store_string, s1, "@Military rank: Legatus legionis (salary: {reg1} denars)"),
        (try_end),
        (create_text_overlay, reg0, "@{s1}", 0),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_size, reg0, pos2),
        (val_sub, ":cur_y", 27),
    (try_end),

    (try_begin),
        (troop_get_slot, ":title", "trp_player", slot_troop_honorary_title),
        (ge, ":title", 1),
        (val_add, ":title", "str_title_begin"),
        (str_store_string, s2, ":title"),
        (str_store_string, s1, "@You have the honorary title of {s2}."),

        (create_text_overlay, reg0, "@{s1}", 0),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_size, reg0, pos2),
        (val_sub, ":cur_y", 27),
    (try_end),

    (try_begin),
        (eq, "$g_is_emperor", 1),
        (create_text_overlay, reg0, "@Title: Imperator Caesar Augustus", 0),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_size, reg0, pos2),
        (val_sub, ":cur_y", 27),

        (call_script, "script_print_cognomen_to_s1"),

        (create_text_overlay, reg0, "@Cognomina: {s1}", 0),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_size, reg0, pos2),
        (val_sub, ":cur_y", 27),
    (try_end),

    (try_begin),
        (gt, "$g_next_pay_time", 0),
        (str_store_date, s1, "$g_next_pay_time"),
        (str_store_string, s1, "@Next pay day: {s1}"),
        (create_text_overlay, reg0, "@{s1}", 0),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_size, reg0, pos2),
        (val_sub, ":cur_y", 27),
    (try_end),

    (set_container_overlay, -1),
    #end of character report

    # Back to menu - graphical button
    (create_game_button_overlay, reg1, "str_return"),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 23),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_jrider_faction_report_return_to_menu", reg1),
  ]),
   ## END on load trigger

   ## Check for buttonpress
   (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":button_pressed_id"),
    (try_begin),
        (eq, ":button_pressed_id", "$g_jrider_faction_report_return_to_menu"), # pressed  (Return to menu)
        (assign,"$temp",6),
        (presentation_set_duration, 0),
        (jump_to_menu, "mnu_reports"),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_1"),
        (start_presentation, "prsnt_upgrade_tree_1"),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_2"),
        (assign, "$temp1", 2), # map mode
        (start_presentation, "prsnt_world_map"),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_3"),
        (start_presentation, "prsnt_jrider_faction_relations_report"),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_4"),
        (assign, "$temp", 0),
        (jump_to_menu, "mnu_dplmc_economic_report"),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_5"),
        (assign, "$temp", 0),
        (assign, "$g_jrider_pres_called_from_menu", 1),
        (assign, "$g_character_presentation_type", 1),
        (start_presentation, "prsnt_jrider_character_relation_report"),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_6"),
        (assign, "$temp", 0),
        (assign, "$g_jrider_pres_called_from_menu", 1),
        (assign, "$g_character_presentation_type", 0),
        (start_presentation, "prsnt_jrider_character_relation_report"),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_14"),
        (start_presentation, "prsnt_estate_report"),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_7"),
        (assign, "$temp", 0),
        (try_begin),
            (is_between, "$g_player_affiliated_troop", lords_begin, kingdom_ladies_end),
            (jump_to_menu, "mnu_dplmc_affiliated_family_report"),
        (else_try),
            (display_message, "@You are not affiliated to any family.", message_alert),
        (try_end),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_8"),
        (assign, "$temp", 0),

        (assign, "$temp_troop", "trp_player"),
        #clear troop's temp slots for presentation
        (try_for_range, ":stack_troop", active_npcs_including_player_begin, companions_end),
          (troop_set_slot, ":stack_troop", dplmc_slot_troop_temp_slot, 0),
        (try_end),
        (troop_set_slot, "trp_player", dplmc_slot_troop_temp_slot, 0),
        (start_presentation, "prsnt_companion_overview"),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_9"),
        (assign, "$temp", 0),
        (assign, "$g_apply_budget_report_to_gold", 0),
        (start_presentation, "prsnt_budget_report"),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_10"),
        (change_screen_notes, 2, "$players_kingdom"),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_11"),
        (change_screen_notes, 5, 0),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_15"),
        (assign, "$g_notification_menu_var1", 0),#is emperor
        (assign, "$g_notification_menu_var2", 0),#can change legates
        (start_presentation, "prsnt_legion_management"),
        # (assign, "$temp", 0),
        # (try_begin),
        #   (this_or_next|eq, "$players_kingdom", "fac_kingdom_7"),
        #   (this_or_next|troop_slot_ge, "trp_player", slot_troop_honorary_title, 1),
        #   (this_or_next|ge, "$g_rank", 1),
        #   (eq, "$g_is_emperor", 1),
        #   (start_presentation, "prsnt_roman_empire_report"),
    #   (else_try),
    #     (display_message, "@You must be part of the Roman Empire to have access to this report.", message_alert),
    #   (try_end),
    # (else_try),
    #   (eq, ":button_pressed_id", "$g_presentation_obj_11"),
    #   (assign, "$temp", 0),
    #   (try_begin),
    #     (faction_slot_eq, "fac_player_supporters_faction", slot_faction_leader, "trp_player"),
    #     (faction_slot_eq, "fac_player_supporters_faction", slot_faction_state, sfs_active),
    #     (gt, "$g_player_chancellor", 1),
    #     (start_presentation, "prsnt_vassal_report"),
    #   (else_try),
    #     (display_message, "@You must be the leader of your own kingdom to have access to this report!", message_alert),
    #     (display_message, "@And you must have a appointed a Censor", message_alert),
    #   (try_end),
    # (else_try),
    #     (eq, ":button_pressed_id", "$g_presentation_obj_12"),
    #     (assign, "$temp", 0),
    #     (jump_to_menu, "mnu_morale_report"),
    # (else_try),
    #     (eq, ":button_pressed_id", "$g_presentation_obj_13"),
    #     (assign, "$temp", 0),
    #     (jump_to_menu, "mnu_party_size_report"),
    (try_end),
  ]),
   ## END presentation event state change trigger
  (ti_on_presentation_run, [
    (try_begin),
        (key_clicked, key_escape),
        (presentation_set_duration, 0),
        (jump_to_menu, "mnu_camp"),
    (else_try),
        (key_clicked, key_space),
        (set_fixed_point_multiplier, 1000),
        (mouse_get_position, pos31),

        (position_get_x, reg31, pos31),
        (position_get_y, reg32, pos31),

        (display_message, "@X: {reg31} | Y: {reg32}"),
    (try_end),
  ]),
]),


##END CHARACTER REPORT

##New camp menu
("camp_menu", 0,mesh_load_window,[
  (ti_on_presentation_load,[
    (presentation_set_duration,999999),
    (set_fixed_point_multiplier, 1000),

    #0. BACKROUND
    (create_mesh_overlay, reg0, "mesh_pic_camp_menu"),
    (position_set_x, pos1, -1),
    (position_set_y, pos1, -1),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 1002),
    (position_set_y, pos1, 1002),
    (overlay_set_size, reg0, pos1),

    (create_text_overlay, reg1, "@Party Actions", tf_center_justify),
    (position_set_x, pos1, 700),
    (position_set_y, pos1, 690),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1300),
    (position_set_y, pos1, 1300),
    (overlay_set_size, reg1, pos1),

    (create_game_button_overlay, reg1, "@Detach parties"),
    (position_set_x, pos1, 860),
    (position_set_y, pos1, 640),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_2", reg1),

    (create_game_button_overlay, reg1, "@Meet commander"),
    (position_set_x, pos1, 700),
    (position_set_y, pos1, 640),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_3", reg1),

    (create_game_button_overlay, reg1, "@Change stance"),
    (position_set_x, pos1, 700),
    (position_set_y, pos1, 590),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_1", reg1),

    (create_game_button_overlay, reg1, "@Permanent camp"),
    (position_set_x, pos1, 860),
    (position_set_y, pos1, 590),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_4", reg1),

    (create_game_button_overlay, reg1, "@Reward troops"),
    (position_set_x, pos1, 700),
    (position_set_y, pos1, 540),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_5", reg1),

    (str_store_string, s9, "@Start foraging"),
    (try_begin),
        (eq, "$foragers_a", 1), #foragers ok
        (str_store_string, s9, "@Stop foraging"),
    (try_end),

    (create_game_button_overlay, reg1, "@{s9}"),
    (position_set_x, pos1, 860),
    (position_set_y, pos1, 540),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_6", reg1),

    (create_game_button_overlay, reg1, "@Follower party"),
    (position_set_x, pos1, 700),
    (position_set_y, pos1, 490),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_13", reg1),


    (create_game_button_overlay, reg1, "@Build fortifications"),
    (position_set_x, pos1, 860),
    (position_set_y, pos1, 490),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_15", reg1),

    (create_text_overlay, reg1, "@Miscellaneous", tf_center_justify),
    (position_set_x, pos1, 700),
    (position_set_y, pos1, 390),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1300),
    (position_set_y, pos1, 1300),
    (overlay_set_size, reg1, pos1),


    (create_game_button_overlay, reg1, "@Take an Action"),
    (position_set_x, pos1, 700),
    (position_set_y, pos1, 340),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_9", reg1),



    (create_game_button_overlay, reg1, "@Second Outfit"),
    (position_set_x, pos1, 860),
    (position_set_y, pos1, 340),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_7", reg1),


    (create_game_button_overlay, reg1, "@Auto-loot settings"),
    (position_set_x, pos1, 700),
    (position_set_y, pos1, 290),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_8", reg1),

    (create_game_button_overlay, reg1, "@Options"),
    (position_set_x, pos1, 860),
    (position_set_y, pos1, 290),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_10", reg1),

    (create_game_button_overlay, reg1, "@Wait here"),
    (position_set_x, pos1, 100),
    (position_set_y, pos1, 23),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_11", reg1),

    (create_game_button_overlay, reg1, "@Walk around"),
    (position_set_x, pos1, 260),
    (position_set_y, pos1, 23),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_12", reg1),

    (create_game_button_overlay, reg1, "@Go hunting"),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 23),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_14", reg1),

    (create_text_overlay, reg1, "@Party Effects", tf_center_justify|tf_with_outline),
    (overlay_set_color, reg1, message_alert),
    (position_set_x, pos1, 200),
    (position_set_y, pos1, 705),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1200),
    (position_set_y, pos1, 1200),
    (overlay_set_size, reg1, pos1),

    (create_text_overlay, reg1, "@Party Moral", tf_left_align|tf_with_outline),
    (overlay_set_color, reg1, message_alert),
    (position_set_x, pos1, 490),
    (position_set_y, pos1, 705),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1200),
    (position_set_y, pos1, 1200),
    (overlay_set_size, reg1, pos1),

    (create_text_overlay, reg1, "@Party Size", tf_left_align|tf_with_outline),
    (overlay_set_color, reg1, message_alert),
    (position_set_x, pos1, 490),
    (position_set_y, pos1, 430),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1200),
    (position_set_y, pos1, 1200),
    (overlay_set_size, reg1, pos1),

    #text size
    (position_set_x, pos2, 900),
    (position_set_y, pos2, 900),

    (str_clear, s0),
    (create_text_overlay, reg1, s0, tf_double_space|tf_scrollable|tf_left_align),
    (position_set_x, pos1, 25),
    (position_set_y, pos1, 290),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 400),
    (position_set_y, pos1, 400),
    (overlay_set_area_size, reg1, pos1),

    (set_container_overlay, reg1),

    #get number of lines
    (assign, ":line_number", 13),
    (store_mul, ":cur_y", ":line_number", 25),
    (val_add, ":cur_y", 15*3),

    (create_text_overlay, reg0, "@Party stance:", 0),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos1, 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),

    (str_store_string, s1, "@Default"),
    (try_begin),
        (eq, "$g_stance", 1),
        (str_store_string, s1, "@Forced march"),
    (else_try),
        (eq, "$g_stance", 2),
        (str_store_string, s1, "@Screening"),
    (try_end),
    (create_text_overlay, reg0, "@{s1}", 0),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos1, 200),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (val_sub, ":cur_y", 25),

    (create_text_overlay, reg0, "@Foraging:", 0),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos1, 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),

    (try_begin),
        (eq, "$foragers_a", 1), #foragers ok
        (str_store_string, s1, "@You send men to forage."),
    (else_try),
        (str_store_string, s1, "@None. (At least 40 men needed)"),
    (try_end),
    (create_text_overlay, reg0, "@{s1}", 0),
    (try_begin),
        (neq, "$foragers_a", 1),
        (overlay_set_color, reg0, 0xFF0000),
    (else_try),
        (overlay_set_color, reg0, 0x228B22),
    (try_end),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos1, 200),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    # (val_sub, ":cur_y", 4),

    # ##creat some lines
    # (create_mesh_overlay, reg0, "mesh_white_plane"),
    # (overlay_set_color, reg0, 0x000000),#line color
    # (position_set_x, pos4, 25000),
    # (position_set_y, pos4, 100),
    # (overlay_set_size, reg0, pos4),
    # (position_set_x, pos1, 0),
    # (position_set_y, pos1, ":cur_y"),
    # (overlay_set_position, reg0, pos1),
    (val_sub, ":cur_y", 40),

    (create_text_overlay, reg0, "@Follower Party", 0),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos1, 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (val_sub, ":cur_y", 25),

    (create_text_overlay, reg0, "@* Size:", 0),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos1, 25),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),

    (store_party_size_wo_prisoners, reg1, "p_follower_party"),
    (try_begin),
        (ge, reg1, 1),
        (str_store_string, s1, "@{reg1}"),
    (else_try),
        (str_store_string, s1, "@None. (At least 60 men needed)"),
    (try_end),
    (create_text_overlay, reg0, "@{s1}", 0),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos1, 200),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (val_sub, ":cur_y", 25),

    (create_text_overlay, reg0, "@* Wound treatment boni:", 0),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos1, 25),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),

    (assign, ":total_valor", 0),
    (party_get_num_companion_stacks, ":num_of_stacks", "p_follower_party"),
    (try_for_range, ":i", 0, ":num_of_stacks"),
        (party_stack_get_troop_id, ":stack_troop", "p_follower_party", ":i"),
        (is_between, ":stack_troop", "trp_follower_woman", "trp_caravan_master"),
        (party_stack_get_size, ":stack_size", "p_follower_party", ":i"),
        (party_stack_get_num_wounded, ":stack_wounded", "p_follower_party", ":i"),
        (val_sub, ":stack_size", ":stack_wounded"),
        (val_add, ":total_valor", ":stack_size"),
    (try_end),
    (assign, reg1, 0),
    (try_begin),
        (gt, ":total_valor", 69),
        (assign, reg1, 3),
    (else_try),
        (gt, ":total_valor", 39),
        (assign, reg1, 2),
    (else_try),
        (gt, ":total_valor", 19),
        (assign, reg1, 1),
    (try_end),
    (try_begin),
        (ge, reg1, 1),
        (str_store_string, s1, "@{reg1}"),
    (else_try),
        (str_store_string, s1, "@None."),
    (try_end),
    (create_text_overlay, reg0, "@{s1}", 0),
    (try_begin),
        (le, reg1, 0),
        (overlay_set_color, reg0, 0xFF0000),
    (else_try),
        (overlay_set_color, reg0, 0x228B22),
    (try_end),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos1, 200),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (val_sub, ":cur_y", 25),

    (create_text_overlay, reg0, "@* Surgery boni:", 0),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos1, 25),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),

    (assign, ":total_valor", 0),
    (party_get_num_companion_stacks, ":num_of_stacks", "p_follower_party"),##now p_follower_party
    (try_for_range, ":i", 0, ":num_of_stacks"),
        (party_stack_get_troop_id, ":stack_troop", "p_follower_party", ":i"),
        (eq, ":stack_troop", "trp_sword_sister"),

        (party_stack_get_size, ":stack_size", "p_follower_party", ":i"),
        (party_stack_get_num_wounded, ":stack_wounded", "p_follower_party", ":i"),
        (val_sub, ":stack_size", ":stack_wounded"),
        (val_add, ":total_valor", ":stack_size"),
    (try_end),
    (assign, reg1, 0),
    (try_begin),
        (gt, ":total_valor", 29),
        (assign, reg1, 3),
    (else_try),
        (gt, ":total_valor", 9),
        (assign, reg1, 2),
    (else_try),
        (gt, ":total_valor", 0),
        (assign, reg1, 1),
    (try_end),
    (try_begin),
        (ge, reg1, 1),
        (str_store_string, s1, "@{reg1}"),
    (else_try),
        (str_store_string, s1, "@None."),
    (try_end),
    (create_text_overlay, reg0, "@{s1}", 0),
    (try_begin),
        (le, reg1, 0),
        (overlay_set_color, reg0, 0xFF0000),
    (else_try),
        (overlay_set_color, reg0, 0x228B22),
    (try_end),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos1, 200),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    # (val_sub, ":cur_y", 4),

    ##creat some lines
    # (create_mesh_overlay, reg0, "mesh_white_plane"),
    # (overlay_set_color, reg0, 0x000000),#line color
    # (position_set_x, pos4, 25000),
    # (position_set_y, pos4, 100),
    # (overlay_set_size, reg0, pos4),
    # (position_set_x, pos1, 0),
    # (position_set_y, pos1, ":cur_y"),
    # (overlay_set_position, reg0, pos1),
    (val_sub, ":cur_y", 40),

    (create_text_overlay, reg0, "@Each 100 troops need 2 officers for efficent management.", 0),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos1, 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (val_sub, ":cur_y", 25),
    (create_text_overlay, reg0, "@Otherwise you will suffer a malus to tactic skill.", 0),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos1, 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (val_sub, ":cur_y", 25),

    (create_text_overlay, reg0, "@* Officers available:", 0),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos1, 25),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),

    (store_party_size_wo_prisoners, ":size", "p_main_party"),
    (try_begin),
        (ge, ":size", 500),
        (assign, ":size_threshold", 10),
    (else_try),
        (ge, ":size", 400),
        (assign, ":size_threshold", 8),
    (else_try),
        (ge, ":size", 300),
        (assign, ":size_threshold", 6),
    (else_try),
        (ge, ":size", 200),
        (assign, ":size_threshold", 4),
    (else_try),
        (ge, ":size", 100),
        (assign, ":size_threshold", 2),
    (else_try),
        (assign, ":size_threshold", 0),
    (try_end),
    (assign, ":total_valor", 0),
    (party_get_num_companion_stacks, ":num_of_stacks", "p_main_party"),##now p_follower_party

    (try_for_range, ":i", 0, ":num_of_stacks"),
        (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":i"),
        (call_script, "script_cf_is_low_officer", ":stack_troop"),
        (party_stack_get_size, ":stack_size", "p_main_party", ":i"),
        (party_stack_get_num_wounded, ":stack_wounded", "p_main_party", ":i"),
        (val_sub, ":stack_size", ":stack_wounded"),
        (val_add, ":total_valor", ":stack_size"),
    (try_end),
    (assign, reg1, ":total_valor"),
    (try_begin),
        (ge, reg1, 1),
        (str_store_string, s1, "@{reg1}"),
    (else_try),
        (str_store_string, s1, "@None."),
    (try_end),
    (create_text_overlay, reg0, "@{s1}", 0),
    (try_begin),
        (ge, reg1, 1),
        (overlay_set_color, reg0, 0x228B22),
    (else_try),
        (overlay_set_color, reg0, 0xFF0000),
    (try_end),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos1, 200),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (val_sub, ":cur_y", 25),

    (create_text_overlay, reg0, "@* Officers needed:", 0),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos1, 25),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),

    (assign, reg1, ":size_threshold"),
    (try_begin),
        (ge, reg1, 1),
        (str_store_string, s1, "@{reg1}"),
    (else_try),
        (str_store_string, s1, "@None."),
    (try_end),
    (create_text_overlay, reg0, "@{s1}", 0),
    (try_begin),
        (ge, reg1, 1),
        (overlay_set_color, reg0, 0xFF0000),
    (else_try),
        (overlay_set_color, reg0, 0x228B22),
    (try_end),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos1, 200),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (val_sub, ":cur_y", 25),

    (create_text_overlay, reg0, "@* Tactic skill penality:", 0),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos1, 25),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),

    (val_sub, ":total_valor", ":size_threshold"),
    (assign, reg1, 0),
    (try_begin),
        (lt, ":total_valor", 0),
        (val_max, ":total_valor", -2),
        (val_add, reg1, ":total_valor"),
    (try_end),
    (try_begin),
        (lt, reg1, 0),
        (str_store_string, s1, "@{reg1} (Lack of officers)"),
    (else_try),
        (str_store_string, s1, "@None (Sufficient)"),
    (try_end),
    (create_text_overlay, reg0, "@{s1}", 0),
    (try_begin),
        (lt, reg1, 0),
        (overlay_set_color, reg0, 0xFF0000),
    (else_try),
        (overlay_set_color, reg0, 0x228B22),
    (try_end),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos1, 200),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (val_sub, ":cur_y", 40),

    (create_text_overlay, reg0, "@High rank officers provide a leadership bonus.", 0),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos1, 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (val_sub, ":cur_y", 25),

    (try_begin),
        (troop_slot_eq, "trp_player", slot_troop_culture, "fac_culture_7"),
        (str_store_string, s1, "@This includes Vexilarius, Aquilifer, Tribunus and Primus Pilus."),
    (else_try),
        (str_store_string, s1, "@This includes all kinds of Standard Bearer."),
    (try_end),
    (create_text_overlay, reg0, "@{s1}", 0),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos1, 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (val_sub, ":cur_y", 25),

    (create_text_overlay, reg0, "@*Leadership bonus:", 0),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos1, 25),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),

    (assign, ":total_valor", 0),
    (party_get_num_companion_stacks, ":num_of_stacks", "p_main_party"),

    (try_for_range, ":i", 0, ":num_of_stacks"),
        (party_stack_get_troop_id, ":stack_troop", "p_main_party", ":i"),
        (call_script, "script_cf_is_high_officer", ":stack_troop"),
        (party_stack_get_size, ":stack_size", "p_main_party", ":i"),
        (party_stack_get_num_wounded, ":stack_wounded", "p_main_party", ":i"),
        (val_sub, ":stack_size", ":stack_wounded"),
        (val_add, ":total_valor", ":stack_size"),
    (try_end),

    (try_begin),
        (ge, ":total_valor", 4),
        (val_add, reg1, 3),
    (else_try),
        (ge, ":total_valor", 3),
        (val_add, reg1, 2),
    (else_try),
        (ge, ":total_valor", 2),
        (val_add, reg1, 1),
    (try_end),
    (try_begin),
        (ge, reg1, 1),
        (str_store_string, s1, "@{reg1}"),
    (else_try),
        (str_store_string, s1, "@None."),
    (try_end),
    (create_text_overlay, reg0, "@{s1}", 0),
    (try_begin),
        (le, reg1, 0),
        (overlay_set_color, reg0, 0xFF0000),
    (else_try),
        (overlay_set_color, reg0, 0x228B22),
    (try_end),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos1, 200),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (val_sub, ":cur_y", 25),

    (set_container_overlay, -1),


    #party moral report

    #size of the text
    (position_set_x, pos2, 900),
    (position_set_y, pos2, 900),

    (str_clear, s0),
    (create_text_overlay, reg1, s0, tf_double_space|tf_scrollable|tf_left_align),
    (position_set_x, pos1, 450),
    (position_set_y, pos1, 470),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 200),
    (position_set_y, pos1, 225),
    (overlay_set_area_size, reg1, pos1),
    (set_container_overlay, reg1),

    #get number of lines
    (position_set_x, pos1, 0),
    (assign, ":cur_y", 8*25),
    #290,660
    ##You can lead up to {reg23} troops. You can manage {reg22} troops without a party moral penalty. {s1}
    # (create_text_overlay, reg0, "@Party size limit:", 0),
    # (position_set_y, pos1, ":cur_y"),
    # (overlay_set_position, reg0, pos1),
    # (overlay_set_size, reg0, pos2),

    # (call_script, "script_game_get_party_companion_limit", "p_main_party"),
    # (assign, reg1, reg0),
    # (create_text_overlay, reg0, "@{!}{reg1}", 0),
    # (overlay_set_size, reg0, pos2),
    # (position_set_x, pos3, 200),
    # (position_set_y, pos3, ":cur_y"),
    # (overlay_set_position, reg0, pos3),
    # (overlay_set_size, reg0, pos2),
    # (overlay_set_color, reg0, 0x006400), #verde oscuro se ve bien
    # (val_sub, ":cur_y", 25),

    (call_script, "script_get_player_party_morale_values"),
    (assign, reg6, 50),
    (assign, ":sum_modifiers", reg6),

    (create_text_overlay, reg0, "@Base moral:", 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@{!}{reg6}", 0),
    (overlay_set_color, reg0, 0x228B22),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos3, 100),
    (position_set_y, pos3, ":cur_y"),
    (overlay_set_position, reg0, pos3),
    (overlay_set_size, reg0, pos2),
    (val_sub, ":cur_y", 25),

    (assign, reg1, "$g_player_party_morale_modifier_party_size"),
    (val_mul, reg1, -1),
    (val_add, ":sum_modifiers", reg1),
    (create_text_overlay, reg0, "@Party size penality:", 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@{!}{reg1}", 0),
    (try_begin),
        (lt, reg1, 0),
        (overlay_set_color, reg0, 0xFF0000),
    (try_end),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos3, 100),
    (position_set_y, pos3, ":cur_y"),
    (overlay_set_position, reg0, pos3),
    (overlay_set_size, reg0, pos2),
    (val_sub, ":cur_y", 25),

    (assign, reg1, "$g_player_party_morale_modifier_follower"),
    (val_add, ":sum_modifiers", reg1),
    (create_text_overlay, reg0, "@Follower party:", 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@{!}{reg1}", 0),
    (try_begin),
        (gt, reg1, 0),
        (overlay_set_color, reg0, 0x228B22),
    (try_end),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos3, 100),
    (position_set_y, pos3, ":cur_y"),
    (overlay_set_position, reg0, pos3),
    (overlay_set_size, reg0, pos2),
    (val_sub, ":cur_y", 25),

    (assign, reg1, "$g_player_party_morale_modifier_weariness"),
    (val_mul, reg1, -1),
    (val_add, ":sum_modifiers", reg1),

    (create_text_overlay, reg0, "@Lack of rest:", 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@{!}{reg1}", 0),
    (try_begin),
        (lt, reg1, 0),
        (overlay_set_color, reg0, 0xFF0000),
    (try_end),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos3, 100),
    (position_set_y, pos3, ":cur_y"),
    (overlay_set_position, reg0, pos3),
    (overlay_set_size, reg0, pos2),
    (val_sub, ":cur_y", 25),

    (try_begin),
        (ge, "$g_player_party_morale_modifier_no_food", 1),
        (assign, reg1, "$g_player_party_morale_modifier_no_food"),
        (val_mul, reg1, -1),
        (val_add, ":sum_modifiers", reg1),

        (create_text_overlay, reg0, "@No food:", 0),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_size, reg0, pos2),

        (create_text_overlay, reg0, "@{!}{reg1}", 0),
        (overlay_set_color, reg0, 0xFF0000),
        (overlay_set_size, reg0, pos2),
        (position_set_x, pos3, 100),
        (position_set_y, pos3, ":cur_y"),
        (overlay_set_position, reg0, pos3),
        (overlay_set_size, reg0, pos2),
        (val_sub, ":cur_y", 25),
    (else_try),
        (assign, reg1, "$g_player_party_morale_modifier_food"),
        (val_add, ":sum_modifiers", reg1),

        (create_text_overlay, reg0, "@Variety food:", 0),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_size, reg0, pos2),

        (create_text_overlay, reg0, "@{!}{reg1}", 0),
        (try_begin),
            (gt, reg1, 0),
            (overlay_set_color, reg0, 0x228B22),
        (try_end),
        (overlay_set_size, reg0, pos2),
        (position_set_x, pos3, 100),
        (position_set_y, pos3, ":cur_y"),
        (overlay_set_position, reg0, pos3),
        (overlay_set_size, reg0, pos2),
        (val_sub, ":cur_y", 25),
    (try_end),

    (assign, reg1, "$g_player_party_morale_modifier_debt"),
    (val_add, ":sum_modifiers", reg1),

    (create_text_overlay, reg0, "@Wage debt:", 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@{!}{reg1}", 0),
    (try_begin),
        (lt, reg1, 0),
        (overlay_set_color, reg0, 0xFF0000),
    (try_end),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos3, 100),
    (position_set_y, pos3, ":cur_y"),
    (overlay_set_position, reg0, pos3),
    (overlay_set_size, reg0, pos2),
    (val_sub, ":cur_y", 25),

    (assign, reg1, "$g_player_party_morale_modifier_special_items"),
    (val_add, ":sum_modifiers", reg1),
    (create_text_overlay, reg0, "@Special items:", 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@{!}{reg1}", 0),
    (try_begin),
        (gt, reg1, 0),
        (overlay_set_color, reg0, 0x228B22),
    (try_end),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos3, 100),
    (position_set_y, pos3, ":cur_y"),
    (overlay_set_position, reg0, pos3),
    (overlay_set_size, reg0, pos2),
    (val_sub, ":cur_y", 25),

    (party_get_morale, reg5, "p_main_party"),
    (store_sub, reg4, reg5, ":sum_modifiers"),

    (create_text_overlay, reg0, "@Recent events:", 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@{!}{reg4}", 0),
    (try_begin),
        (ge, reg4, 1),
        (overlay_set_color, reg0, 0x228B22),
    (else_try),
        (overlay_set_color, reg0, 0xFF0000),
    (try_end),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos3, 100),
    (position_set_y, pos3, ":cur_y"),
    (overlay_set_position, reg0, pos3),
    (overlay_set_size, reg0, pos2),
    (val_sub, ":cur_y", 4),

    ##creat some lines
    (create_mesh_overlay, reg0, "mesh_white_plane"),
    (overlay_set_color, reg0, 0x000000),#line color
    (position_set_x, pos4, 6500),
    (position_set_y, pos4, 100),
    (overlay_set_size, reg0, pos4),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (val_sub, ":cur_y", 25),


    (create_text_overlay, reg0, "@Total:", 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@{!}{reg5}", 0),
    (try_begin),
        (ge, reg5, 50),
        (overlay_set_color, reg0, 0x228B22),
    (else_try),
        (overlay_set_color, reg0, 0xFF0000),
    (try_end),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos3, 100),
    (position_set_y, pos3, ":cur_y"),
    (overlay_set_position, reg0, pos3),
    (overlay_set_size, reg0, pos2),
    (val_sub, ":cur_y", 25),

    (set_container_overlay, -1),

    #party size report

    #size of the text
    (position_set_x, pos2, 900),
    (position_set_y, pos2, 900),

    (str_clear, s0),
    (create_text_overlay, reg1, s0, tf_double_space|tf_scrollable|tf_left_align),
    (position_set_x, pos1, 450),
    (position_set_y, pos1, 270),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 200),
    (position_set_y, pos1, 150),
    (overlay_set_area_size, reg1, pos1),
    (set_container_overlay, reg1),

    #get number of lines
    (position_set_x, pos1, 0),
    (assign, ":cur_y", 4*25),

    (create_text_overlay, reg0, "@Cohort limit:", 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos2),

    (call_script, "script_get_cohort_limit", "p_main_party"),
    (store_sub, reg1, reg0, slot_cohort_1),

    (create_text_overlay, reg0, "@{!}{reg1}", 0),
    (overlay_set_color, reg0, 0xb86b14),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos3, 100),
    (position_set_y, pos3, ":cur_y"),
    (overlay_set_position, reg0, pos3),
    (overlay_set_size, reg0, pos2),
    (val_sub, ":cur_y", 25),

    (call_script, "script_game_get_party_companion_limit", "p_main_party"),
    (assign, ":total_companion_limit", reg0),

    (create_text_overlay, reg0, "@Base limit:", 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos2),

    (assign, reg1, "$g_player_party_size_modifier_base"),
    (create_text_overlay, reg0, "@{!}{reg1}", 0),
    (overlay_set_color, reg0, 0x228B22),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos3, 100),
    (position_set_y, pos3, ":cur_y"),
    (overlay_set_position, reg0, pos3),
    (overlay_set_size, reg0, pos2),
    (val_sub, ":cur_y", 25),

    (assign, reg1, "$g_player_party_morale_modifier_party_size"),
    (val_mul, reg1, -1),
    (val_add, ":sum_modifiers", reg1),
    (create_text_overlay, reg0, "@Leadership bonus:", 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos2),

    (assign, reg1, "$g_player_party_size_modifier_leadership"),
    (create_text_overlay, reg0, "@{!}{reg1}", 0),
    (try_begin),
        (gt, reg1, 0),
        (overlay_set_color, reg0, 0x228B22),
    (try_end),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos3, 100),
    (position_set_y, pos3, ":cur_y"),
    (overlay_set_position, reg0, pos3),
    (overlay_set_size, reg0, pos2),
    (val_sub, ":cur_y", 25),

    (assign, reg1, "$g_player_party_size_modifier_charisma"),
    (val_add, ":sum_modifiers", reg1),
    (create_text_overlay, reg0, "@Charisma bonus:", 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos2),

    (assign, reg1, "$g_player_party_size_modifier_charisma"),
    (create_text_overlay, reg0, "@{!}{reg1}", 0),
    (try_begin),
        (gt, reg1, 0),
        (overlay_set_color, reg0, 0x228B22),
    (try_end),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos3, 100),
    (position_set_y, pos3, ":cur_y"),
    (overlay_set_position, reg0, pos3),
    (overlay_set_size, reg0, pos2),
    (val_sub, ":cur_y", 2),

    ##creat some lines
    (create_mesh_overlay, reg0, "mesh_white_plane"),
    (overlay_set_color, reg0, 0x000000),#line color
    (position_set_x, pos4, 6500),
    (position_set_y, pos4, 100),
    (overlay_set_size, reg0, pos4),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (val_sub, ":cur_y", 25),

    (create_text_overlay, reg0, "@Total:", 0),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos2),

    (assign, reg1, ":total_companion_limit"),
    (create_text_overlay, reg0, "@{!}{reg1}", 0),
    (overlay_set_size, reg0, pos2),
    (position_set_x, pos3, 100),
    (position_set_y, pos3, ":cur_y"),
    (overlay_set_position, reg0, pos3),
    (overlay_set_size, reg0, pos2),
    (val_sub, ":cur_y", 25),

    (set_container_overlay, -1),

    # Back to menu - graphical button
    (create_game_button_overlay, reg1, "str_return"),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 23),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_jrider_faction_report_return_to_menu", reg1),
  ]),
  ## END on load trigger

  ## Check for buttonpress
  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":button_pressed_id"),
    (try_begin),
      (eq, ":button_pressed_id", "$g_jrider_faction_report_return_to_menu"), # pressed  (Return to menu)
      (assign,"$temp",6),
      (presentation_set_duration, 0),
      (jump_to_menu, "mnu_camp"),
    (else_try),
      (eq, ":button_pressed_id", "$g_presentation_obj_1"),
      (try_begin),
        (eq, "$enlisted_party", -1),#freelancer
        (val_add, "$g_stance", 1),
        (try_begin),
          (ge, "$g_stance", 3),
          (assign, "$g_stance", 0),
        (try_end),
        (call_script, "script_game_get_party_speed_multiplier", "p_main_party"),
        (assign, "$temp", 0),
        (jump_to_menu, "mnu_camp"),
      (else_try),
        (display_message, "str_freelancer_enabled", message_alert),
      (try_end),
    (else_try),
      (eq, ":button_pressed_id", "$g_presentation_obj_2"),
      (try_begin),
       (neg|party_slot_eq, "p_main_party", slot_party_on_water, 1),
       (party_get_num_attached_parties, ":num_attached_parties",  "p_main_party"),
       (ge, ":num_attached_parties", 1),
       (try_for_range_backwards, ":attached_party_rank", 0, ":num_attached_parties"),
         (party_get_attached_party_with_rank, ":attached_party", "p_main_party", ":attached_party_rank"),
         (party_detach, ":attached_party"),
         (party_relocate_near_party, ":attached_party", "p_main_party", 1),
         (party_set_slot,":attached_party",slot_party_time_service, -1),
         (str_store_party_name, s22, ":attached_party"),
         (display_message, "@{s22} has left your force.",message_alert),
       (try_end),
       (display_message, "@Parties have been detached from main party.",message_alert),
      (else_try),
       (display_message, "@No parties are attached to main party.",message_alert),
      (try_end),
    (else_try),
      (eq, ":button_pressed_id", "$g_presentation_obj_3"),
      (try_begin),
        (eq, "$enlisted_party", -1),#freelancer
        (try_begin),
          (party_get_num_attached_parties, ":num_attached_parties",  "p_main_party"),
          (ge, ":num_attached_parties", 1),
          (assign, "$temp", 0),
          (jump_to_menu, "mnu_talk_with_commanders"),
        (else_try),
          (display_message, "@No parties are attached to main party.",message_alert),
        (try_end),
      (else_try),
        (display_message, "str_freelancer_enabled", message_alert),
      (try_end),
    (else_try),
      (eq, ":button_pressed_id", "$g_presentation_obj_4"),
      (assign, "$temp", 0),
      (try_begin),
        (eq, "$enlisted_party", -1),#freelancer
        (try_begin),
          (call_script, "script_get_closest_center_and_minor", "p_main_party"),
          (assign, ":closest_town", reg0),
          (store_distance_to_party_from_party, ":distance", "p_main_party", ":closest_town"),
          (le, ":distance", 5),
          (display_message, "@Too close to a town.",message_alert),
        (else_try),
          (neg|eq, "$g_encountered_party_template", "pt_player_camp"),
          (neg|party_slot_eq, "p_main_party", slot_party_on_water, 1),
          (assign, "$temp", 0),
          (jump_to_menu, "mnu_create_pcamp"),
        (else_try),
          (display_message, "@Not possible on water.",message_alert),
        (try_end),
      (else_try),
        (display_message, "str_freelancer_enabled", message_alert),
      (try_end),
    (else_try),
      (eq, ":button_pressed_id", "$g_presentation_obj_5"),
      (try_begin),
        (eq, "$enlisted_party", -1),#freelancer
        (try_begin),
          (store_party_size_wo_prisoners, ":men", "p_main_party"),
          (ge, ":men", 2),
          (assign, "$temp", 0),
          (jump_to_menu, "mnu_extra_wage"),
        (else_try),
          (display_message, "@You need at least one troop in your party.",message_alert),
        (try_end),
      (else_try),
        (display_message, "str_freelancer_enabled", message_alert),
      (try_end),
    (else_try),
      (eq, ":button_pressed_id", "$g_presentation_obj_6"),
      (store_party_size_wo_prisoners, ":men", "p_main_party"),
      (try_begin),
        (eq, "$foragers_a", 1), #foragers ok
        (assign, "$foragers_a", 0),
        (display_message, "@Stop foraging.",message_alert),
      (else_try),
        (eq, "$enlisted_party", -1),#freelancer
        (try_begin),
          (gt, ":men", 40),
          (eq, "$foragers_a", 0), #foragers ok
          (assign, "$foragers_a", 1),
          (display_message, "@Start foraging.",message_alert),
        (else_try),
          (display_message, "@You need at least 40 men.",message_alert),
        (try_end),
      (else_try),
        (display_message, "str_freelancer_enabled", message_alert),
      (try_end),
      (assign, "$temp", 0),
      (jump_to_menu, "mnu_camp"),
    (else_try),
      (eq, ":button_pressed_id", "$g_presentation_obj_7"),
      (assign, "$temp", 0),
      (call_script, "script_copy_player_troop"),
      (change_screen_equip_other, "trp_pseudo_troop_end"),
    (else_try),
      (eq, ":button_pressed_id", "$g_presentation_obj_8"),
      (try_begin),
        (eq, "$enlisted_party", -1),#freelancer
        (try_begin),
          (call_script, "script_cf_dplmc_player_party_meets_autoloot_conditions"),
          (try_begin),
            #dplmc+ Add check if autoloot has not been initialized yet
            (call_script, "script_dplmc_initialize_autoloot", 0),#argument "0" means this does nothing if deemed unnecessary
          (try_end),
          (troop_clear_inventory, "trp_temp_troop"),
          ##diplomacy start+
          (assign, "$pool_troop", "trp_temp_troop"),
          (assign, "$dplmc_return_menu", "mnu_camp"),
          ##diplomacy end+
          (assign, "$inventory_menu_offset", 0),
                #SB : variable resets
          (assign, "$lord_selected", "trp_player"),
          (str_clear, dplmc_loot_string),
          (assign, "$temp", 0),
          (jump_to_menu, "mnu_dplmc_manage_loot_pool"),
        (else_try),
          (display_message, "@Auto-loot requires Inventory Management or Looting at rank 2.",message_alert),
        (try_end),
      (else_try),
        (display_message, "str_freelancer_enabled", message_alert),
      (try_end),
    (else_try),
      (eq, ":button_pressed_id", "$g_presentation_obj_9"),
      (try_begin),
        (neg|party_slot_eq, "p_main_party", slot_party_on_water, 1),
        (assign, "$temp", 0),
        (jump_to_menu, "mnu_camp_action"),
      (else_try),
        (display_message, "@You must be on land!",message_alert),
      (try_end),
    (else_try),
      (eq, ":button_pressed_id", "$g_presentation_obj_10"),
      (assign, reg60, 0),
      (start_presentation, "prsnt_vc_options"),
    (else_try),
      (eq, ":button_pressed_id", "$g_presentation_obj_11"),
      (try_begin),
        (eq, "$enlisted_party", -1),#freelancer
        (try_begin),
          (neg|party_slot_eq, "p_main_party", slot_party_on_water, 1),
          (assign, "$temp", 0),
          (jump_to_menu, "mnu_camp_action_rest"),
        (else_try),
          (display_message, "@You must be on land!", message_alert),
        (try_end),
      (else_try),
        (display_message, "str_freelancer_enabled", message_alert),
      (try_end),
    (else_try),
      (eq, ":button_pressed_id", "$g_presentation_obj_12"),
      (try_begin),
        (eq, "$enlisted_party", -1),#freelancer
        (assign, "$temp", 0),
        (set_jump_mission,"mt_camp"),
        (call_script, "script_setup_camp_scene"),
        (change_screen_mission),
      (else_try),
        (display_message, "str_freelancer_enabled", message_alert),
      (try_end),
    (else_try),
      (eq, ":button_pressed_id", "$g_presentation_obj_13"),
      (try_begin),
        (eq, "$enlisted_party", -1),#freelancer
        (try_begin),
          (store_party_size_wo_prisoners, ":size", "p_main_party"),
          (lt, ":size", 60),
          (display_message, "@You need at least 60 men in your party.", message_alert),
        (else_try),
          (try_begin),
            (store_party_size_wo_prisoners,":size", "p_follower_party"),
            (le, ":size", 0),
            (jump_to_menu, "mnu_hire_follower_party"),
          (else_try),
            (assign, "$temp", 0),
            (jump_to_menu, "mnu_follower_party"),
          (try_end),
        (try_end),
      (else_try),
        (display_message, "str_freelancer_enabled", message_alert),
      (try_end),
    (else_try),
      (eq, ":button_pressed_id", "$g_presentation_obj_14"),
      (try_begin),
        (eq, "$enlisted_party", -1),#freelancer
        (party_get_current_terrain,":terrain", "p_main_party"),
        (try_begin),
          (neq, ":terrain", rt_desert),
          (neq, ":terrain", rt_desert_forest),
          (neq, ":terrain", rt_water),
          (neq, ":terrain", rt_bridge),
          (neq, ":terrain", rt_river),
          (jump_to_menu, "mnu_go_hunting"),
        (else_try),
          (display_message, "@You can't go hunting here."),
        (try_end),
      (else_try),
        (display_message, "str_freelancer_enabled", message_alert),
      (try_end),

    (else_try),
      (eq, ":button_pressed_id", "$g_presentation_obj_15"),
      (try_begin),
        (eq, "$enlisted_party", -1),#freelancer
        (try_begin),
          (troop_slot_ge, "trp_global_variables", g_player_trench, 1),
          (display_message, "@You have already build fortifications!", message_alert),
        (else_try),
          (neg|party_slot_eq, "p_main_party", slot_party_on_water, 1),
          (assign, "$temp", 0),
          (store_party_size_wo_prisoners, ":size", "p_main_party"),
          (ge, ":size", 40),
          (troop_slot_eq, "trp_player", slot_troop_culture, "fac_culture_7"),
          (jump_to_menu, "mnu_camp_action_rest_fort"),
          #(troop_set_slot, "trp_global_variables", g_player_trench, 1),
        (else_try),
          (neg|party_slot_eq, "p_main_party", slot_party_on_water, 1),
          (display_message, "@You must be on land!", message_alert),
        (else_try),
          (display_message, "@You need at least 40 troops and must be of Roman culture.", message_alert),
        (try_end),
      (else_try),
        (display_message, "str_freelancer_enabled", message_alert),
      (try_end),

    (try_end),
  ]),
   ## END presentation event state change trigger
  (ti_on_presentation_run, [
    (try_begin),
        (key_clicked, key_escape),
        (presentation_set_duration, 0),
        (jump_to_menu, "mnu_camp"),
    (else_try),
        (key_clicked, key_space),
        (set_fixed_point_multiplier, 1000),
        (mouse_get_position, pos31),

        (position_get_x, reg31, pos31),
        (position_get_y, reg32, pos31),

        (display_message, "@X: {reg31} | Y: {reg32}"),
    (try_end),
  ]),
]),

##New town management menu
("center_management", 0,0,[
  (ti_on_presentation_load,[
    (presentation_set_duration,999999),
    (set_fixed_point_multiplier, 1000),

    #0. BACKROUND
    (create_mesh_overlay, reg0, "mesh_mp_ui_bg"),
    (position_set_x, pos1, -1),
    (position_set_y, pos1, -1),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 1002),
    (position_set_y, pos1, 1002),
    (overlay_set_size, reg0, pos1),

    (str_store_party_name, s0, "$g_encountered_party"),
    (create_text_overlay, reg1, "str_s0", tf_center_justify),
    (position_set_x, pos1, 120),
    (position_set_y, pos1, 695),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1500),
    (position_set_y, pos1, 1500),
    (overlay_set_size, reg1, pos1),

    #info
    (party_get_slot, reg1, "$g_encountered_party", slot_town_prosperity),
    (party_get_slot, reg2, "$g_encountered_party", slot_town_wealth),
    (party_get_slot, reg3, "$g_encountered_party", slot_center_capital),
    (party_get_slot, reg4, "$g_encountered_party", slot_center_player_relation),
    (store_party_size_wo_prisoners, reg5, "$g_encountered_party"),
    (party_get_num_prisoners, reg6, "$g_encountered_party"),
    (try_begin),
        (eq, reg6, 0),
        (str_store_string, s2, "str_none"),
    (else_try),
        (str_store_string, s2, "@{reg6} men"),
    (try_end),

    (party_get_slot, ":center_culture", "$g_encountered_party", slot_center_culture),
    (str_store_faction_name, s61, ":center_culture"),

    (str_store_string, s1, "@Culture:{s61}^Prosperity: {reg1}.^Town wealth: {reg3}.^Budget of the town counsel: {reg2}.^Relation: {reg4}.^Garrison size: {reg5} men.^Prisoners: {s2}."),
    (create_text_overlay, reg0, "@{s1}", tf_double_space|tf_scrollable|tf_left_align),
    #(overlay_set_color, reg0, 0x000000),
    (position_set_x, pos1, 30),
    (position_set_y, pos1, 390),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 1100),
    (position_set_y, pos1, 1100),
    (overlay_set_size, reg0, pos1),
    (position_set_x, pos1, 300),
    (position_set_y, pos1, 300),
    (overlay_set_area_size, reg0, pos1),
#info END

#buttons on the left side:
    (try_begin),
        (eq, reg63, 1),
        (create_game_button_overlay, reg1, "@Settle Veterans."),
        (position_set_x, pos1, 100),
        (position_set_y, pos1, 140),
        (overlay_set_position, reg1, pos1),
        (assign, "$g_presentation_obj_1", reg1),
    (else_try),
        (assign, "$g_presentation_obj_1", -1),
    (try_end),

    (create_game_button_overlay, reg1, "@Economic Details."),
    (position_set_x, pos1, 100),
    (position_set_y, pos1, 140-65),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_14", reg1),

    (create_game_button_overlay, reg1, "@Extort subjects."),
    (position_set_x, pos1, 100),
    (position_set_y, pos1, 140+65),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_2", reg1),

    (create_game_button_overlay, reg1, "@Manage Decrees."),
    (position_set_x, pos1, 100),
    (position_set_y, pos1, 140+65+65),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_3", reg1),

    (str_clear, s10),
    (try_begin),
        (neg|party_slot_ge, "$g_encountered_party", slot_town_lord, 0),
        (store_faction_of_party, ":castle_faction", "$g_encountered_party"),
        (eq, "$players_kingdom", ":castle_faction"),

        (eq, "$g_encountered_party", "$g_castle_requested_by_player"),

        (str_store_string, s10, "str_retrieve_garrison_warning"),
    (else_try),
        (neg|party_slot_ge, "$g_encountered_party", slot_town_lord, 0),
        (store_faction_of_party, ":castle_faction", "$g_encountered_party"),
        (eq, "$players_kingdom", ":castle_faction"),

        (store_party_size_wo_prisoners, ":party_size", "$g_encountered_party"),
        (eq, ":party_size", 0),

        (str_store_string, s10, "str_retrieve_garrison_warning"),
    (try_end),

    (try_begin),
        (call_script, "script_cf_can_manage_garrision", "$g_encountered_party"),
        (create_game_button_overlay, reg1, "@Manage the garrison"),
        (position_set_x, pos1, 100),
        (position_set_y, pos1, 140+65+65+65),
        (overlay_set_position, reg1, pos1),
        (assign, "$g_presentation_obj_4", reg1),
    (else_try),
        (assign, "$g_presentation_obj_4", -1),
    (try_end),

    (create_game_button_overlay, reg1, "@Manage buildings."),
    (position_set_x, pos1, 100),
    (position_set_y, pos1, 140+65+65+65+65),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_6", reg1),

    (try_begin),
        (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
        (create_text_overlay, reg1, "@Set tax rate", tf_center_justify),
        (position_set_x, pos1, 100),
        (position_set_y, pos1, 140+65+65+65+65+65+35),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 1300),
        (position_set_y, pos1, 1300),
        (overlay_set_size, reg1, pos1),

        (create_combo_button_overlay, "$g_presentation_obj_5"),
        (position_set_x, pos1, 140),
        (position_set_y, pos1, 140+65+65+65+65+65-5),
        (overlay_set_position, "$g_presentation_obj_5", pos1),
        (position_set_x, pos1, 700),
        (position_set_y, pos1, 900),
        (overlay_set_size, "$g_presentation_obj_5", pos1),

        (overlay_add_item, "$g_presentation_obj_5", "str_dplmc_tax_very_low"),
        (overlay_add_item, "$g_presentation_obj_5", "str_dplmc_tax_low"),
        (overlay_add_item, "$g_presentation_obj_5", "str_dplmc_tax_normal"),
        (overlay_add_item, "$g_presentation_obj_5", "str_dplmc_tax_high"),
        (overlay_add_item, "$g_presentation_obj_5", "str_dplmc_tax_very_high"),
        (party_get_slot,":taxrate", "$g_encountered_party", dplmc_slot_center_taxation),
        (try_begin),
            (eq, ":taxrate", -50),
            (overlay_set_val, "$g_presentation_obj_5", 0),
        (else_try),
            (eq, ":taxrate", -25),
            (overlay_set_val, "$g_presentation_obj_5", 1),
        (else_try),
            (eq, ":taxrate", 0),
            (overlay_set_val, "$g_presentation_obj_5", 2),
        (else_try),
            (eq, ":taxrate", 25),
            (overlay_set_val, "$g_presentation_obj_5", 3),
        (else_try),
            (eq, ":taxrate", 50),
            (overlay_set_val, "$g_presentation_obj_5", 4),
        (try_end),
    (try_end),

##button to leave on the right side
    (create_game_button_overlay, reg1, "@Go Back."),
    (position_set_x, pos1, 800),
    (position_set_y, pos1, 25),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_jrider_faction_report_return_to_menu", reg1),

###container for buildings
   #5. CONTAINER for buildings and decres
    (try_begin),#economic information
        (eq, "$g_presentation_next_presentation", 4),
        (create_text_overlay, reg1, "@Economic Information", tf_center_justify),
        (position_set_x, pos1, 625),
        (position_set_y, pos1, 690),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 1500),
        (position_set_y, pos1, 1500),
        (overlay_set_size, reg1, pos1),

        (create_text_overlay, reg1, "@Here you find additional information about the wealth and expected tax income of the settlement. Certain effects are not simultaneous and need time to apply! Rent is calculated as follows: Wealth and income or upkeep from buildings is added together, then the modifiers are applied. A taxrate of 60% means that you will get 60% of the total wealth of the settlement.", tf_double_space|tf_scrollable|tf_center_justify),
        (position_set_x, pos1, 350),
        (position_set_y, pos1, 70),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 600),
        (position_set_y, pos1, 600),
        (overlay_set_area_size, reg1, pos1),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (assign, "$g_presentation_obj_8", reg1),

        #get data
        (call_script, "script_center_get_capital", "$g_encountered_party"),

        #container showing info about production sides
        (assign, ":number_of_lines", 6),
        (try_for_range, ":production_side", slot_center_head_cattle, slot_production_sources_end),
            (party_slot_ge, "$g_encountered_party", ":production_side", 1),
            (val_add, ":number_of_lines", 1),
        (try_end),
        (store_mul, ":y_name", ":number_of_lines", 20),

        (str_clear, s0),
        (create_text_overlay, reg1, s0, tf_scrollable),
        (position_set_x, pos1, 225),
        (position_set_y, pos1, 50),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 225),
        (position_set_y, pos1, 500),
        (overlay_set_area_size, reg1, pos1),
        (set_container_overlay, reg1),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, 0),
        (position_set_x, pos2, 900),
        (position_set_y, pos2, 900),

        (create_text_overlay, reg1, "@Agriculture:", tf_with_outline),
        (overlay_set_color, reg1, message_alert),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, ":y_name"),
        (overlay_set_position, reg1, pos1),
        (overlay_set_size, reg1, pos2),
        (val_sub, ":y_name", 20),
        (call_script, "script_prsnt_vc_menu_helper_gap"),##line

        (try_for_range, ":production_side", slot_center_head_cattle, slot_center_fishing_fleet),
            (party_get_slot, reg22, "$g_encountered_party", ":production_side"),
            (gt, reg22, 0),
            (val_sub, ":production_side", slot_center_head_cattle),
            (store_add, ":string", ":production_side", "str_slot_center_head_cattle"),
            (str_store_string, s3, ":string"),
            (create_text_overlay, reg1, "@{s3}: {reg22}", 0),
            (position_set_x, pos1, 0),
            (position_set_y, pos1, ":y_name"),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),
            #gap
            (val_sub, ":y_name", 20),
        (try_end),

        (create_text_overlay, reg1, "@Wealth from Agriculture: {reg50}", 0),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, ":y_name"),
        (overlay_set_position, reg1, pos1),
        (overlay_set_size, reg1, pos2),
        (overlay_set_color, reg1, 0x228B22),
        (val_sub, ":y_name", 20),

        (create_text_overlay, reg1, "@Special Resources:", tf_with_outline),
        (overlay_set_color, reg1, message_alert),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, ":y_name"),
        (overlay_set_position, reg1, pos1),
        (overlay_set_size, reg1, pos2),
        (val_sub, ":y_name", 20),
        (call_script, "script_prsnt_vc_menu_helper_gap"),##line
        (try_for_range, ":production_side", slot_center_fishing_fleet, slot_center_mills),
            (party_get_slot, reg22, "$g_encountered_party", ":production_side"),
            (gt, reg22, 0),
            (val_sub, ":production_side", slot_center_head_cattle),
            (store_add, ":string", ":production_side", "str_slot_center_head_cattle"),
            (str_store_string, s3, ":string"),
            (create_text_overlay, reg1, "@{s3}: {reg22}", 0),
            (position_set_x, pos1, 0),
            (position_set_y, pos1, ":y_name"),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),
            #gap
            (val_sub, ":y_name", 20),
        (try_end),

        (create_text_overlay, reg1, "@Wealth from Special Resources: {reg52}", 0),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, ":y_name"),
        (overlay_set_position, reg1, pos1),
        (overlay_set_size, reg1, pos2),
        (overlay_set_color, reg1, 0x228B22),
        (val_sub, ":y_name", 20),

        (create_text_overlay, reg1, "@Production Sides:", tf_with_outline),
        (overlay_set_color, reg1, message_alert),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, ":y_name"),
        (overlay_set_position, reg1, pos1),
        (overlay_set_size, reg1, pos2),
        (val_sub, ":y_name", 20),
        (call_script, "script_prsnt_vc_menu_helper_gap"),##line

        (try_for_range, ":production_side", slot_center_mills, slot_production_sources_end),
            (party_get_slot, reg22, "$g_encountered_party", ":production_side"),
            (gt, reg22, 0),
            (val_sub, ":production_side", slot_center_head_cattle),
            (store_add, ":string", ":production_side", "str_slot_center_head_cattle"),
            (str_store_string, s3, ":string"),
            (create_text_overlay, reg1, "@{s3}: {reg22}", 0),
            (position_set_x, pos1, 0),
            (position_set_y, pos1, ":y_name"),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),
            #gap
            (val_sub, ":y_name", 20),
        (try_end),

        (create_text_overlay, reg1, "@Wealth from Production Sides: {reg51}", 0),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, ":y_name"),
        (overlay_set_position, reg1, pos1),
        (overlay_set_size, reg1, pos2),
        (overlay_set_color, reg1, 0x228B22),
        (val_sub, ":y_name", 20),

        (set_container_overlay, -1),
        #end container showing info about production sides

        #container showing info about building effects
        (assign, ":number_of_lines", 0),
        (try_for_range, ":improvement", village_improvements_begin, walled_center_improvements_end),
            (this_or_next|eq, ":improvement", slot_center_has_fire_fighter),
            (this_or_next|eq, ":improvement", slot_center_has_school),
            (this_or_next|eq, ":improvement", slot_center_has_messenger_post),
            (this_or_next|eq, ":improvement", slot_center_has_guard),
            (this_or_next|eq, ":improvement", slot_center_has_hosptial),
            (this_or_next|eq, ":improvement", slot_center_has_training_grounds),
            (this_or_next|eq, ":improvement", slot_center_has_manor),
            (this_or_next|eq, ":improvement", slot_center_has_slave_market),
            (this_or_next|eq, ":improvement", slot_center_has_fish_pond),
            (this_or_next|eq, ":improvement", slot_center_has_port),
            (this_or_next|eq, ":improvement", slot_center_has_fishport),
            (this_or_next|eq, ":improvement", slot_center_has_roads),
            (eq, ":improvement", slot_center_has_trader),
            (party_get_slot, reg22, "$g_encountered_party", ":improvement"),
            (gt, reg22, 0),
            (val_add, ":number_of_lines", 1),
        (try_end),
        (try_for_range, ":decree", slot_center_decree_curfew, slot_center_decree_beggingban+1),
            (neq, ":decree", slot_center_decree_law_enforcement),
            (party_get_slot, reg22, "$g_encountered_party", ":decree"),
            (gt, reg22, 0),
            (val_add, ":number_of_lines", 1),
        (try_end),
        (store_mul, ":y_name", ":number_of_lines", 20),

        (str_clear, s0),
        (create_text_overlay, reg1, s0, tf_scrollable),
        (position_set_x, pos1, 475),
        (position_set_y, pos1, 50),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 250),
        (position_set_y, pos1, 500),
        (overlay_set_area_size, reg1, pos1),
        (set_container_overlay, reg1),

        (position_set_x, pos1, 0),
        (position_set_y, pos1, 0),
        (position_set_x, pos2, 900),
        (position_set_y, pos2, 900),

        (create_text_overlay, reg1, "@Building Effects:", tf_with_outline),
        (overlay_set_color, reg1, message_alert),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, ":y_name"),
        (overlay_set_position, reg1, pos1),
        (overlay_set_size, reg1, pos2),
        (val_sub, ":y_name", 20),
        (call_script, "script_prsnt_vc_menu_helper_gap"),##line

        (try_for_range, ":improvement", village_improvements_begin, walled_center_improvements_end),
            (this_or_next|eq, ":improvement", slot_center_has_fire_fighter),
            (this_or_next|eq, ":improvement", slot_center_has_school),
            (this_or_next|eq, ":improvement", slot_center_has_messenger_post),
            (this_or_next|eq, ":improvement", slot_center_has_guard),
            (this_or_next|eq, ":improvement", slot_center_has_hosptial),
            (this_or_next|eq, ":improvement", slot_center_has_training_grounds),
            (this_or_next|eq, ":improvement", slot_center_has_manor),
            (this_or_next|eq, ":improvement", slot_center_has_slave_market),
            (this_or_next|eq, ":improvement", slot_center_has_fish_pond),
            (this_or_next|eq, ":improvement", slot_center_has_port),
            (this_or_next|eq, ":improvement", slot_center_has_fishport),
            (this_or_next|eq, ":improvement", slot_center_has_roads),
            (eq, ":improvement", slot_center_has_trader),
            (party_slot_ge, "$g_encountered_party", ":improvement", 1),
            (try_begin),#costs for fire fighters
                (eq, ":improvement", slot_center_has_fire_fighter),
                (assign, reg22, -500),
            (else_try),
                (eq, ":improvement", slot_center_has_school),
                (assign, reg22, -500),
            (else_try),
                (eq, ":improvement", slot_center_has_messenger_post),
                (assign, reg22, -250),
            (else_try),
                (eq, ":improvement", slot_center_has_guard),
                (assign, reg22, -300),
            (else_try),
                (eq, ":improvement", slot_center_has_hosptial),
                (assign, reg22, -1000),
            (else_try),
                (eq, ":improvement", slot_center_has_training_grounds),
                (assign, reg22, -1000),
            (else_try),
                (eq, ":improvement", slot_center_has_manor),
                (assign, reg22, -500),
            (else_try),
                (eq, ":improvement", slot_center_has_slave_market),
                (assign, reg22, 1500),
            (else_try),
                (eq, ":improvement", slot_center_has_fish_pond),
                (assign, reg22, 600),
            (else_try),
                (eq, ":improvement", slot_center_has_port),
                (assign, reg22, 2500),
            (else_try),
                (eq, ":improvement", slot_center_has_fishport),
                (assign, reg22, 500),
            (else_try),
                (eq, ":improvement", slot_center_has_roads),
                (assign, reg22, 2000),
            (else_try),
                (eq, ":improvement", slot_center_has_trader),
                (assign, reg22, 1000),
            (try_end),

            (call_script, "script_get_improvement_details", ":improvement", "$g_encountered_party"),
            (create_text_overlay, reg1, "@{s0}: {reg22} denars to rents", 0),
            (position_set_x, pos1, 0),
            (position_set_y, pos1, ":y_name"),

            (try_begin),
                (ge, reg22, 0),
                (overlay_set_color, reg1, 0x228B22),
            (else_try),
                (overlay_set_color, reg1, 0xFF0000),
            (try_end),

            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),
            #gap
            (val_sub, ":y_name", 20),
        (else_try),
            (party_slot_ge, "$g_encountered_party", ":improvement", 1),
            (this_or_next|eq, ":improvement", slot_center_has_loom),
            (this_or_next|eq, ":improvement", slot_center_has_industry),
            (eq, ":improvement", slot_center_has_smith),

            (call_script, "script_get_improvement_details", ":improvement", "$g_encountered_party"),
            (create_text_overlay, reg1, "@{s0}: +20% to production", 0),
            (position_set_x, pos1, 0),
            (position_set_y, pos1, ":y_name"),

            (overlay_set_color, reg1, 0x228B22),

            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),
            #gap
            (val_sub, ":y_name", 20),
        (try_end),

        (create_text_overlay, reg1, "@Decree Effects:", tf_with_outline),
        (overlay_set_color, reg1, message_alert),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, ":y_name"),
        (overlay_set_position, reg1, pos1),
        (overlay_set_size, reg1, pos2),
        (val_sub, ":y_name", 20),
        (call_script, "script_prsnt_vc_menu_helper_gap"),##line

        (try_for_range, ":decree", slot_center_decree_curfew, slot_center_decree_beggingban+1),
            (neq, ":decree", slot_center_decree_law_enforcement),
            (party_slot_ge, "$g_encountered_party", ":decree", 1),


            (try_begin),#costs for fire fighters
                (eq, ":decree", slot_center_decree_curfew),
                (assign, reg22, -500),
            (else_try),
                (eq, ":decree", slot_center_decree_control),
                (assign, reg22, -500),
            (else_try),
                (eq, ":decree", slot_center_decree_garbage_collection),
                (assign, reg22, -1000),
            (else_try),
                (eq, ":decree", slot_center_decree_housing),
                (assign, reg22, -5000),
            (try_end),

            (call_script, "script_get_decree_details", ":decree"),
            (create_text_overlay, reg1, "@{s30}: {reg22} denars to rents", 0),
            (position_set_x, pos1, 0),
            (position_set_y, pos1, ":y_name"),

            (try_begin),
                (ge, reg22, 0),
                (overlay_set_color, reg1, 0x228B22),
            (else_try),
                (overlay_set_color, reg1, 0xFF0000),
            (try_end),

            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),
            #gap
            (val_sub, ":y_name", 20),
        (try_end),


        (set_container_overlay, -1),
        #end container showing info about building effects

        #container showing info about effects of modifiers
        (assign, ":number_of_lines", 4),
        (store_mul, ":y_name", ":number_of_lines", 20),

        (str_clear, s0),
        (create_text_overlay, reg1, s0, tf_scrollable),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 50),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 200),
        (position_set_y, pos1, 500),
        (overlay_set_area_size, reg1, pos1),

        (set_container_overlay, reg1),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, 0),
        (position_set_x, pos2, 900),
        (position_set_y, pos2, 900),

        (create_text_overlay, reg1, "@Modifiers:", tf_with_outline),
        (overlay_set_color, reg1, message_alert),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, ":y_name"),
        (overlay_set_position, reg1, pos1),
        (overlay_set_size, reg1, pos2),
        (val_sub, ":y_name", 20),
        (call_script, "script_prsnt_vc_menu_helper_gap"),##line

        (faction_get_slot, reg22, "$g_encountered_party_faction", dplmc_slot_faction_aristocracy),
        (val_mul, reg22, -1),
        (val_add, reg22, 125),
        (val_mul, reg22, 100),
        (val_div, reg22, 125),
        (val_sub, reg22, 100),

        (create_text_overlay, reg1, "@Faction politics: {reg22}%", 0),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, ":y_name"),
        (overlay_set_position, reg1, pos1),
        (overlay_set_size, reg1, pos2),
        (try_begin),
            (ge, reg22, 0),
            (overlay_set_color, reg1, 0x228B22),
        (else_try),
            (overlay_set_color, reg1, 0xFF0000),
        (try_end),
        (val_sub, ":y_name", 20),


        (party_get_slot, reg22, "$g_encountered_party", slot_town_prosperity),
        (val_add, reg22, 20),
        (val_sub, reg22, 100),
        (create_text_overlay, reg1, "@Prosperity modifier: {reg22}%", 0),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, ":y_name"),
        (overlay_set_position, reg1, pos1),
        (overlay_set_size, reg1, pos2),
        (try_begin),
            (ge, reg22, 0),
            (overlay_set_color, reg1, 0x228B22),
        (else_try),
            (overlay_set_color, reg1, 0xFF0000),
        (try_end),
        (val_sub, ":y_name", 20),
        # (call_script, "script_prsnt_vc_menu_helper_gap"),##line

        (party_get_slot, reg2, "$g_encountered_party", dplmc_slot_center_taxation),
        (val_add, reg2, 100),
        (val_mul, reg2, 60),
        (val_div, reg2, 100),
        (assign, ":tax_rate", reg2),
        (create_text_overlay, reg1, "@Tax rate: {reg2}%", 0),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, ":y_name"),
        (try_begin),
            (ge, reg2, 0),
            (overlay_set_color, reg1, 0x228B22),
        (else_try),
            (overlay_set_color, reg1, 0xFF0000),
        (try_end),
        (overlay_set_position, reg1, pos1),
        (overlay_set_size, reg1, pos2),
        (val_sub, ":y_name", 20),

        (party_get_slot, ":disease", "$g_encountered_party", slot_center_disease),
        (call_script, "script_get_event_details", ":disease"),
        (store_sub, reg2, reg0, 100),
        (create_text_overlay, reg1, "@Disease: {reg2}% ({s0})", 0),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, ":y_name"),
        (try_begin),
            (ge, reg2, 0),
            (overlay_set_color, reg1, 0x228B22),
        (else_try),
            (overlay_set_color, reg1, 0xFF0000),
        (try_end),
        (overlay_set_position, reg1, pos1),
        (overlay_set_size, reg1, pos2),
        (val_sub, ":y_name", 20),

        (party_get_slot, ":event", "$g_encountered_party", slot_center_event),
        (call_script, "script_get_event_details", ":event"),
        (store_sub, reg3, reg0, 100),
        (create_text_overlay, reg1, "@Event: {reg3}% ({s0}{reg3?, ~ {reg2} weeks):}", 0),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, ":y_name"),
        (try_begin),
            (ge, reg3, 0),
            (overlay_set_color, reg1, 0x228B22),
        (else_try),
            (overlay_set_color, reg1, 0xFF0000),
        (try_end),
        (overlay_set_position, reg1, pos1),
        (overlay_set_size, reg1, pos2),
        (val_sub, ":y_name", 20),

        (call_script, "script_get_region_modifier", "$g_encountered_party"),
        (store_sub, reg2, reg0, 100),
        (create_text_overlay, reg1, "@Regional effects: {reg2}%", 0),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, ":y_name"),
        (try_begin),
            (ge, reg2, 0),
            (overlay_set_color, reg1, 0x228B22),
        (else_try),
            (overlay_set_color, reg1, 0xFF0000),
        (try_end),
        (overlay_set_position, reg1, pos1),
        (overlay_set_size, reg1, pos2),
        (val_sub, ":y_name", 20),

        (try_begin),
            (party_get_slot, ":lord", "$g_encountered_party", slot_town_lord),
            (ge, ":lord", 0),
            (troop_get_slot, ":culture", ":lord", slot_troop_culture),
            (neg|party_slot_eq, "$g_encountered_party", slot_center_culture, ":culture"),

            (create_text_overlay, reg1, "@Wrong culture of governor: -20%", 0),
            (position_set_x, pos1, 0),
            (position_set_y, pos1, ":y_name"),
            (overlay_set_color, reg1, 0xFF0000),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),
            (val_sub, ":y_name", 20),
        (try_end),

        (val_mul, reg49, ":tax_rate"),
        (val_div, reg49, 100),

        (create_text_overlay, reg1, "@Total estimate for rents: {reg49}", 0),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, ":y_name"),
        (try_begin),
            (ge, reg49, 0),
            (overlay_set_color, reg1, 0x228B22),
        (else_try),
            (overlay_set_color, reg1, 0xFF0000),
        (try_end),
        (overlay_set_position, reg1, pos1),
        (overlay_set_size, reg1, pos2),
        (val_sub, ":y_name", 20),

        (set_container_overlay, -1),
        #container showing info about effects of modifiers

    (else_try),  #extort
        (eq, "$g_presentation_next_presentation", 3),
        (create_text_overlay, reg1, "@Options", tf_center_justify),
        (position_set_x, pos1, 700),
        (position_set_y, pos1, 690),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 1500),
        (position_set_y, pos1, 1500),
        (overlay_set_size, reg1, pos1),

        (create_text_overlay, reg1, "@Be aware, your actions will have a price. Your reputation will suffer and the relation and prosperity of the center will be lowered, which will have a negative impact on your future taxes.", tf_double_space|tf_scrollable|tf_center_justify),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 70),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 400),
        (position_set_y, pos1, 600),
        (overlay_set_area_size, reg1, pos1),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (assign, "$g_presentation_obj_8", reg1),

        (str_clear, s0),
        (create_text_overlay, "$g_presentation_obj_admin_panel_container", s0, tf_scrollable),
        (position_set_x, pos1, 635),
        (position_set_y, pos1, 80),
        (overlay_set_position, "$g_presentation_obj_admin_panel_container", pos1),
        (position_set_x, pos1, 330),
        (position_set_y, pos1, 535),
        (overlay_set_area_size, "$g_presentation_obj_admin_panel_container", pos1),
        (set_container_overlay, "$g_presentation_obj_admin_panel_container"),

        #lines
        (position_set_x, pos1, 0),
        (position_set_y, pos1, 40*4),
        (call_script, "script_prsnt_vc_menu_helper_gap"),##line
        (try_for_range, ":action", extort_tax, extort_end),
            (store_add, ":string", "str_extort_tax", ":action"),
            (val_sub, ":string", 1),
            (str_store_string, s3, ":string"),
            (create_text_overlay, reg1, s3, 0),
            (overlay_set_color, reg1, 0x000000),
            (overlay_set_position, reg1, pos1),
            (position_set_x, pos2, 900),
            (position_set_y, pos2, 900),
            (overlay_set_size, reg1, pos2),
            (troop_set_slot, "trp_zendar_chest", ":action", reg1),#store object
            #gap
            (position_get_y, ":y", pos1),
            (val_sub, ":y", 30),
            (position_set_y, pos1, ":y"),
        (try_end),
        (call_script, "script_prsnt_vc_menu_helper_gap"),##line
        (set_container_overlay, -1),

    (else_try),#decress
        (eq, "$g_presentation_next_presentation", 2),
        (create_text_overlay, reg1, "@Decrees", tf_center_justify),
        (position_set_x, pos1, 700),
        (position_set_y, pos1, 690),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 1500),
        (position_set_y, pos1, 1500),
        (overlay_set_size, reg1, pos1),

        (str_clear, s0),
        (create_text_overlay, "$g_presentation_obj_admin_panel_container", s0, tf_scrollable),
        (position_set_x, pos1, 635),
        (position_set_y, pos1, 90),
        (overlay_set_position, "$g_presentation_obj_admin_panel_container", pos1),
        (position_set_x, pos1, 330),
        (position_set_y, pos1, 535),
        (overlay_set_area_size, "$g_presentation_obj_admin_panel_container", pos1),
        (set_container_overlay, "$g_presentation_obj_admin_panel_container"),

        #lines
        (position_set_x, pos1, 0),
        (position_set_y, pos1, 40*6),
        (call_script, "script_prsnt_vc_menu_helper_gap"),##line
        (try_for_range, ":decree", slot_center_decree_curfew, slot_center_decree_beggingban+1),
            (party_get_slot, reg4, "$g_encountered_party", ":decree"),
            (val_min, reg4, 1),
            (call_script, "script_get_decree_details", ":decree"),
            (str_store_string, s3, "@{reg4?{s30} (issued):{s30} }"),
            (create_text_overlay, reg1, s3, 0),
            (try_begin),
                (eq, reg4,1),#if issued make green
                (overlay_set_color, reg1, 0x11C114), #green
            (else_try),
                (overlay_set_color, reg1, 0x000000), #Black
            (try_end),
            (overlay_set_position, reg1, pos1),
            (position_set_x, pos2, 900),
            (position_set_y, pos2, 900),
            (overlay_set_size, reg1, pos2),
            (troop_set_slot, "trp_zendar_chest", ":decree", reg1),#store object
            #gap
            (position_get_y, ":y", pos1),
            (val_sub, ":y", 30),
            (position_set_y, pos1, ":y"),
        (try_end),
        (call_script, "script_prsnt_vc_menu_helper_gap"),##line
        (set_container_overlay, -1),

    (else_try),#buildings
        (eq, "$g_presentation_next_presentation", 1),

        (create_text_overlay, reg1, "@Buildings", tf_center_justify),
        (position_set_x, pos1, 700),
        (position_set_y, pos1, 690),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 1500),
        (position_set_y, pos1, 1500),
        (overlay_set_size, reg1, pos1),

        (str_clear, s0),
        (create_text_overlay, "$g_presentation_obj_admin_panel_container", s0, tf_scrollable),
        (position_set_x, pos1, 635),
        (position_set_y, pos1, 90),
        (overlay_set_position, "$g_presentation_obj_admin_panel_container", pos1),
        (position_set_x, pos1, 330),
        (position_set_y, pos1, 535),
        (overlay_set_area_size, "$g_presentation_obj_admin_panel_container", pos1),
        (set_container_overlay, "$g_presentation_obj_admin_panel_container"),

        (try_begin),
            (party_slot_eq, "$g_encountered_party", slot_party_type, spt_village),
            (store_mul, ":length", number_of_buildings_village, 40),
            (assign, ":loop_begin", village_improvements_begin),
            (assign, ":loop_end", village_improvements_end),
        (else_try),
            (store_mul, ":length", number_of_buildings_town, 40),
            (assign, ":loop_begin", walled_center_improvements_begin),
            (assign, ":loop_end", walled_center_improvements_end),
        (try_end),
        #lines
        (position_set_x, pos1, 0),
        (position_set_y, pos1, ":length"),
        (call_script, "script_prsnt_vc_menu_helper_gap"),##line
        (try_for_range, ":building", ":loop_begin", ":loop_end"),
            (assign, ":c", 0),
            (str_clear, s44),
            (try_begin),
                (eq, ":building", slot_center_rome_rebuild),
                (try_begin),
                    (eq, "$g_encountered_party", "p_town_6"),
                    (ge, "$g_fire", 1),
                (else_try),
                    (assign, ":c", 1),
                (try_end),
            (else_try),
                (eq, ":building", slot_center_has_temple),
                (neg|troop_slot_ge, "trp_player", slot_troop_religion, 0),
                (assign, ":c", 1),
            (else_try),
                (eq, ":building", slot_center_has_port),
                (party_slot_eq, "$g_encountered_party", slot_town_port, 0),
                (assign, ":c", 1),
            (else_try),
                (eq, ":building", slot_center_has_fishport),
                (party_slot_eq, "$g_encountered_party", slot_center_fishing_fleet, 0),
                (assign, ":c", 1),
            (else_try),
                (eq, ":building", slot_center_has_iron_mine),
                (party_slot_eq, "$g_encountered_party", slot_center_iron_deposits, 0),
                (assign, ":c", 1),
            # (else_try),
            #     (eq, ":building", slot_center_has_quarry),
            #     (party_slot_eq, "$g_encountered_party", slot_center_iron_deposits, 0),
            #     (assign, ":c", 1),
            (else_try),
                (eq, ":building", slot_center_has_silver_mine),
                (party_slot_eq, "$g_encountered_party", slot_center_silver_deposits, 0),
                (assign, ":c", 1),
            (else_try),
                (eq, ":building", slot_center_has_temple),
                (troop_slot_eq, "trp_player", slot_troop_religion, 0),
                (assign, ":c", 1),
            (else_try),
                (this_or_next|eq, ":building", slot_center_change_culture_village),
                (eq, ":building", slot_center_change_culture_town),
                (try_begin),
                    (troop_get_slot, ":culture", "trp_player", slot_troop_culture),
                    (party_slot_eq, "$g_encountered_party", slot_center_culture, ":culture"),
                    (assign, ":c", 1),
                (else_try),
                    (str_store_faction_name, s44, ":culture"),
                (try_end),
                (str_store_string, s44, "@({s44})"),
            (try_end),
            (eq, ":c", 0),

            (party_get_slot, reg4, "$g_encountered_party", ":building"),
            (val_min, reg4, 1),

            (try_begin),
                (this_or_next|eq, reg4, 1),
                (this_or_next|party_slot_eq, "$g_encountered_party", slot_center_current_improvement_2, ":building"),
                (party_slot_eq, "$g_encountered_party", slot_center_current_improvement, ":building"),
                (party_get_slot, "$temp4_1", "$g_encountered_party", slot_center_has_temple_god),
            (else_try),
                (eq, ":building", slot_center_has_temple),
                (troop_get_slot, "$temp4_1", "trp_player", slot_troop_religion),
            (try_end),

            (str_clear, s33),
            (try_begin),
                (party_slot_eq, "$g_encountered_party", slot_center_current_improvement_2, ":building"),
                (call_script, "script_get_improvement_details", ":building", "$g_encountered_party"),
                (store_current_hours, ":cur_hours"),
                (party_get_slot, ":finish_time", "$g_encountered_party", slot_center_improvement_2_end_hour),
                (val_sub, ":finish_time", ":cur_hours"),
                (store_div, reg8, ":finish_time", 24),
                (val_max, reg8, 1),
                (store_sub, reg9, reg8, 1),
                (str_store_string, s33, "@(under construction, {reg8} day{reg9?s:} remaining.)"),
            (else_try),
                (party_slot_eq, "$g_encountered_party", slot_center_current_improvement, ":building"),
                (call_script, "script_get_improvement_details", ":building", "$g_encountered_party"),
                (store_current_hours, ":cur_hours"),
                (party_get_slot, ":finish_time", "$g_encountered_party", slot_center_improvement_end_hour),
                (val_sub, ":finish_time", ":cur_hours"),
                (store_div, reg8, ":finish_time", 24),
                (val_max, reg8, 1),
                (store_sub, reg9, reg8, 1),
                (str_store_string, s33, "@(under construction, {reg8} day{reg9?s:} remaining.)"),
            (try_end),
            (call_script, "script_get_improvement_details",":building", "$g_encountered_party"),

            (str_store_string, s3, "@{reg4?{s0} (built):{s0} {s44} {s33} }"),

            (create_text_overlay, reg1, s3, 0),
            (try_begin),
                (eq, reg4,1),#if build make it green
                (overlay_set_color, reg1, 0x11C114), #green
            (else_try),
                (neg|str_is_empty, s33),#if its currently building make it some yellow
                (overlay_set_color, reg1, 0xC17B11), #
            (else_try),
                (overlay_set_color, reg1, 0x000000), #Black
            (try_end),
            (overlay_set_position, reg1, pos1),
            (position_set_x, pos2, 900),
            (position_set_y, pos2, 900),
            (overlay_set_size, reg1, pos2),
            (troop_set_slot, "trp_zendar_chest", ":building", reg1),#store object
            #gap
            (position_get_y, ":y", pos1),
            (val_sub, ":y", 30),
            (position_set_y, pos1, ":y"),
        (try_end),
        (call_script, "script_prsnt_vc_menu_helper_gap"),##line
        (set_container_overlay, -1),
    (try_end),
##end container

    #DESCRIPTION for buildings
    #headline
    (create_text_overlay, reg1, "str_empty_string", tf_center_justify),
    (position_set_x, pos1, 390),
    (position_set_y, pos1, 600),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1200),
    (position_set_y, pos1, 1200),
    (overlay_set_size, reg1, pos1),
    (assign, "$g_presentation_obj_7", reg1),

    (create_text_overlay, reg1, "str_empty_string", tf_double_space|tf_scrollable|tf_center_justify),
    (position_set_x, pos1, 270),
    (position_set_y, pos1, 0),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 250),
    (position_set_y, pos1, 600),
    (overlay_set_area_size, reg1, pos1),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (assign, "$g_presentation_obj_8", reg1),


    (create_mesh_overlay, reg1, "mesh_pic_settlement_display"),
    (position_set_x, pos1, 390),
    (position_set_y, pos1, 150),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 500),
    (overlay_set_size, reg1, pos1),
    (overlay_set_display, reg1, 0),
    (assign, "$g_presentation_obj_20", reg1),
    # (call_script, "script_get_improvement_details", "$g_improvement_type"),
    # (create_game_button_overlay, reg1, "@Destroy {s0}."),
    # (position_set_x, pos1, 300),
    # (position_set_y, pos1, 140+65+65+65+65),
    # (overlay_set_position, reg1, pos1),
    # (assign, "$g_presentation_obj_9", reg1),
  ]),
   ## END on load trigger
  (ti_on_presentation_mouse_enter_leave,[
    (store_trigger_param_1, ":object"),
    (str_clear, s10),
    (str_clear, s11),
    (assign, ":value", 0),
    (overlay_set_color, "$g_presentation_obj_7", 0x000000),
    (assign, ":material", "str_default_material"),
    (try_begin),#extort
        (eq, "$g_presentation_next_presentation", 3),
        (try_for_range, ":action", extort_tax,extort_end),
            (troop_slot_eq, "trp_zendar_chest", ":action", ":object"),
            (assign, "$temp", ":action"),
            (str_store_party_name, s39, "$g_encountered_party"),
            (try_begin),
                (this_or_next|eq, ":action", extort_tax),
                (eq, ":action", extort_toll),
                (party_get_slot, ":capital", "$g_encountered_party", slot_center_capital),
                (store_mul, "$temp2", ":capital", 1),
                (val_div, "$temp2", 3),
                (assign, reg30, "$temp2"),

                (call_script, "script_get_max_skill_of_player_party", "skl_trade"),
                (assign, ":max_skill", reg0),
                (assign, reg2, reg0),
                (assign, ":max_skill_owner", reg1),
                (str_clear, s1),
                (try_begin),
                    (eq, ":max_skill_owner", "trp_player"),
                    (assign, reg3, 1),
                (else_try),
                    (assign, reg3, 0),
                    (str_store_troop_name, s1, ":max_skill_owner"),
                (try_end),
                (store_sub, "$temp3", 24, ":max_skill"),
                (assign, reg40, "$temp3"),
            (else_try),
                (eq, ":action", extort_concile),
                (party_get_slot, reg31, "$g_encountered_party", slot_town_wealth),
                (assign, "$temp2", reg31),
                (assign, "$temp3", 2),
            (try_end),

            (store_add, ":title", ":action", "str_extort_tax"),
            (store_add, ":description", ":action", "str_extort_tax_xp"),
            (val_sub, ":title", 1),
            (val_sub, ":description", 1),
            (str_store_string, s10, ":title"),
            (str_store_string, s11, ":description"),
        (try_end),
    (else_try),#decrees
        (eq, "$g_presentation_next_presentation", 2),
        (try_for_range, ":decree", slot_center_decree_curfew,slot_center_decree_beggingban+1),
            (troop_slot_eq, "trp_zendar_chest", ":decree", ":object"),
            (try_begin),
                (party_slot_eq, "$g_encountered_party", ":decree", 0),
                (call_script, "script_get_decree_details", ":decree"),

                (assign, reg0, decree_cost),
                (assign, "$temp", 2),#issue it
                (assign, "$g_improvement_type", ":decree"),
                (str_store_string, s10, s30),
                (str_store_string, s11, s31),
            (else_try),
                (call_script, "script_get_decree_details", ":decree"),
                (str_store_string, s10, s30),
                (str_store_string, s11, s31),
                (str_store_string, s11, "@{s11}^^This decree is currently issueed."),
                (assign, "$temp", 1),#revoke it
                (assign, "$g_improvement_type", ":decree"),
            (try_end),
        (try_end),
    (else_try),#buildings
        (eq, "$g_presentation_next_presentation", 1),
        # (is_between, "$g_improvement_type", village_improvements_begin, walled_center_improvements_end),
        (try_for_range, ":building", village_improvements_begin,walled_center_improvements_end),

            (assign, ":c", 0),
            (str_clear, s44),
            (try_begin),
                (eq, ":building", slot_center_rome_rebuild),
                (try_begin),
                    (eq, "$g_encountered_party", "p_town_6"),
                    (ge, "$g_fire", 1),
                (else_try),
                    (assign, ":c", 1),
                (try_end),
            (else_try),
                (party_slot_eq, "$g_encountered_party", slot_party_type, spt_village),
                (neg|is_between, ":building", village_improvements_begin, village_improvements_end),
                (assign, ":c", 1),
            (else_try),
                (this_or_next|party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
                (party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle),
                (neg|is_between, ":building", walled_center_improvements_begin, walled_center_improvements_end),
                (assign, ":c", 1),
                (eq, ":building", slot_center_has_temple),
                (neg|troop_slot_ge, "trp_player", slot_troop_religion, 0),
                (assign, ":c", 1),
            (else_try),
                (eq, ":building", slot_center_has_port),
                (party_slot_eq, "$g_encountered_party", slot_town_port, 0),
                (assign, ":c", 1),
            (else_try),
                (eq, ":building", slot_center_has_fishport),
                (party_slot_eq, "$g_encountered_party", slot_center_fishing_fleet, 0),
                (assign, ":c", 1),
            (else_try),
                (eq, ":building", slot_center_has_iron_mine),
                (party_slot_eq, "$g_encountered_party", slot_center_iron_deposits, 0),
                (assign, ":c", 1),
            # (else_try),
            #     (eq, ":building", slot_center_has_quarry),
            #     (party_slot_eq, "$g_encountered_party", slot_center_iron_deposits, 0),
            #     (assign, ":c", 1),
            (else_try),
                (eq, ":building", slot_center_has_silver_mine),
                (party_slot_eq, "$g_encountered_party", slot_center_silver_deposits, 0),
                (assign, ":c", 1),
            (else_try),
                (eq, ":building", slot_center_has_temple),
                (troop_slot_eq, "trp_player", slot_troop_religion, 0),
                (assign, ":c", 1),
            (else_try),
                (this_or_next|eq, ":building", slot_center_change_culture_village),
                (eq, ":building", slot_center_change_culture_town),
                (troop_get_slot, ":culture", "trp_player", slot_troop_culture),
                (party_slot_eq, "$g_encountered_party", slot_center_culture, ":culture"),
                (assign, ":c", 1),
            (try_end),
            (eq, ":c", 0),

            (troop_slot_eq, "trp_zendar_chest", ":building", ":object"),
            (try_begin),
                (party_slot_eq,"$g_encountered_party", slot_center_current_improvement_2, ":building"),
                (call_script, "script_get_improvement_details", ":building", "$g_encountered_party"),
                (store_current_hours, ":cur_hours"),
                (party_get_slot, ":finish_time", "$g_encountered_party", slot_center_improvement_2_end_hour),
                (val_sub, ":finish_time", ":cur_hours"),
                (store_div, reg8, ":finish_time", 24),
                (val_max, reg8, 1),
                (store_sub, reg9, reg8, 1),
                (call_script, "script_get_improvement_details", ":building", "$g_encountered_party"),
                (str_store_string, s10, s0),
                (str_store_string, s11, s1),
                (str_store_string, s11, "@{s11}^^Under construction: {reg8} day{reg9?s:} remaining."),
                (assign, "$temp", 4),
                (assign, "$g_improvement_type", ":building"),
                (assign, ":value", 1),
                (call_script, "script_get_improvement_picture", ":building", "trp_player", "$g_encountered_party"),
                (assign, ":material", reg0),
            (else_try),
                (party_slot_eq,"$g_encountered_party", slot_center_current_improvement, ":building"),
                (call_script, "script_get_improvement_details", ":building", "$g_encountered_party"),
                (store_current_hours, ":cur_hours"),
                (party_get_slot, ":finish_time", "$g_encountered_party", slot_center_improvement_end_hour),
                (val_sub, ":finish_time", ":cur_hours"),
                (store_div, reg8, ":finish_time", 24),
                (val_max, reg8, 1),
                (store_sub, reg9, reg8, 1),
                (call_script, "script_get_improvement_details", ":building", "$g_encountered_party"),
                (str_store_string, s10, s0),
                (str_store_string, s11, s1),
                (str_store_string, s11, "@{s11}^^Under construction: {reg8} day{reg9?s:} remaining."),
                (assign, "$temp", 3),
                (assign, "$g_improvement_type", ":building"),
                (assign, ":value", 1),
                (call_script, "script_get_improvement_picture", ":building", "trp_player", "$g_encountered_party"),
                (assign, ":material", reg0),
            (else_try),
                (party_slot_eq, "$g_encountered_party", ":building", 0),
                (call_script, "script_get_improvement_details", ":building", "$g_encountered_party"),
                (assign, ":improvement_cost", reg0),
                (assign, ":improvement_time", reg40),

                (str_store_string, s4, s0),
                (str_store_string, s19, s1),
                (call_script, "script_get_max_skill_of_player_party", "skl_engineer"),
                (assign, ":max_skill", reg0),
                (assign, ":max_skill_owner", reg1),
                (assign, reg2, ":max_skill"),

                (party_get_num_prisoners, ":num_prisoners", "$g_encountered_party"), #possibly up to 100
                (val_div, ":num_prisoners", 5), ##5 prisoners improve by 1%
                (val_clamp, ":num_prisoners", 0, 31),
                (store_sub, ":num_prisoners_modifier", 100, ":num_prisoners"),

                ##new code:
                ##same code applies for CAI
                (store_faction_of_party, ":faction_no", "$g_encountered_party"),
                (faction_get_slot, ":serfdom", ":faction_no", dplmc_slot_faction_serfdom),

                (val_add, ":serfdom", 3),
                (store_sub, ":modifer", 100, ":serfdom"),
                (val_mul, ":max_skill", 2),##20 or so
                (store_sub, ":modifer2", 160, ":max_skill"),

                (val_mul, ":improvement_time", ":modifer"),
                (val_div, ":improvement_time", 100),
                (val_mul, ":improvement_cost", ":modifer"),
                (val_div, ":improvement_cost", 100),

                (val_mul, ":improvement_time", ":num_prisoners_modifier"),
                (val_div, ":improvement_time", 100),

                (val_mul, ":improvement_time", ":modifer2"),
                (val_div, ":improvement_time", 160),
                (val_mul, ":improvement_cost", ":modifer2"),
                (val_div, ":improvement_cost", 160),
                (assign, reg44, ":max_skill"),#skill
                (assign, reg45, ":serfdom"),#politic
                (assign, reg46, ":num_prisoners"),#prisoner

                (assign, reg5, ":improvement_cost"),
                (assign, reg6, ":improvement_time"),

                #SB : tableau at bottom
                (try_begin),
                    (eq, ":max_skill_owner", "trp_player"),
                    (assign, reg3, 1),
                (else_try),
                    (assign, reg3, 0),
                    (str_store_troop_name, s3, ":max_skill_owner"),
                (try_end),

                #SB : assign globals to be safe
                (assign, "$temp", 2),#build it
                (assign, "$g_improvement_type", ":building"),
                (assign, "$diplomacy_var", ":improvement_cost"),
                (assign, "$diplomacy_var2", ":improvement_time"),
                (assign, "$lord_selected", ":max_skill_owner"),

                (call_script, "script_get_improvement_details", ":building", "$g_encountered_party"),
                (str_store_string, s10, s0),
                (str_store_string, s11, s1),
                (str_store_string, s11, "@{s11}^^As the party member with the highest engineer skill ({reg2}), {reg3?you reckon:{s3} reckons} that building the {s4} will cost you {reg5} denars (base cost {reg0}) and will take {reg6} days  (base time {reg40}).^^The building time and costs are modified by: Skill: {reg44}%, slave politic of the realm: {reg45}%. Additionally, the building time is modified by the number of prisoners in the town: {reg46}%."),
                (assign, ":value", 1),
                (call_script, "script_get_improvement_picture", ":building", "trp_player", "$g_encountered_party"),
                (assign, ":material", reg0),
            (else_try),
                (call_script, "script_get_improvement_details", ":building", "$g_encountered_party"),
                (str_store_string, s10, s0),
                (str_store_string, s11, s1),

                (str_clear, s33),
                (try_begin),
                    (eq, ":building", slot_center_has_barracks),
                    (party_get_slot, ":builder", "$g_encountered_party", ":building"),
                    (ge, ":builder", 1),
                    (try_begin),
                        (eq, ":builder", 1),
                        (assign, ":builder", "trp_player"),
                    (try_end),
                    (troop_get_slot, ":player_culture", "trp_player", slot_troop_culture),
                    (neg|troop_slot_eq, ":builder", slot_troop_culture, ":player_culture"),
                    (str_store_string, s33, "@WRONG CULTURE. NO BUILDING EFFECTS!^^Destroy the building and build an equivalent building of your culture!"),
                (try_end),

                (str_store_string, s11, "@{s11}^^This building has already been built.^^{s33}^^{s33}"),
                (assign, "$temp", 1),#build it
                (assign, "$g_improvement_type", ":building"),
                (assign, ":value", 1),
                (party_get_slot, ":builder", "$g_encountered_party", ":building"),
                (call_script, "script_get_improvement_picture", ":building", ":builder", "$g_encountered_party"),
                (assign, ":material", reg0),
            (try_end),
        (try_end),
    (try_end),
    (overlay_set_text, "$g_presentation_obj_7", s10),
    (overlay_set_text, "$g_presentation_obj_8", s11),
    (overlay_set_display, "$g_presentation_obj_20", ":value"),
    (try_begin),
        (is_between, ":material", "str_pic_settlement_silvermine", "str_war_cry"),
        (str_store_string, s0, ":material"),
        (overlay_set_material, "$g_presentation_obj_20", s0),
    (try_end),
  ]),
  ## Check for buttonpress
  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":button_pressed_id"),
    (store_trigger_param_2, ":value"),
    (try_begin),
        (eq, ":button_pressed_id", "$g_jrider_faction_report_return_to_menu"), # pressed  (Return to menu)
        (presentation_set_duration, 0),
        (jump_to_menu, "$g_next_menu"),
        (finish_mission),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_1"),
        (try_begin),
            (store_party_size_wo_prisoners,":num_men", "p_main_party"),
            (ge, ":num_men", 200),
            (assign, reg0, 0),
            (try_begin),
                (troop_get_slot, ":culture", "trp_player", slot_troop_culture),
                (party_slot_eq, "$g_encountered_party", slot_center_culture, ":culture"),
                (assign, reg0, 1),
            (else_try),
                (party_slot_ge, "$g_encountered_party", slot_center_player_relation,0), #relation to 0
                (assign, reg0, 1),
            (try_end),
            (eq, reg0, 0),
            (try_begin),
                (assign, reg0, 0),
                (try_begin),
                    (store_faction_of_party, ":fac", "$g_encountered_party"),
                    (faction_slot_eq, ":fac", slot_faction_leader, "trp_player"),
                    (faction_slot_ge, ":fac", dplmc_slot_faction_centralization, 3),
                    (assign, reg0, 1),
                (else_try),
                    (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
                    (assign, reg0, 1),
                (try_end),
                (eq, reg0, 1),
                (presentation_set_duration, 0),
                (jump_to_menu, "mnu_repopulate"),
                (finish_mission),
            (else_try),
                (display_message, "str_center_manage_denied",message_alert),
            (try_end),
        (else_try),
            (display_message, "@You need at least 200 men and a negative relation with the settlement or the settlement has different culture than yours.", message_alert),
        (try_end),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_2"),
        (try_begin),
            (assign, reg0, 0),
            (try_begin),
                (store_faction_of_party, ":fac", "$g_encountered_party"),
                (faction_slot_eq, ":fac", slot_faction_leader, "trp_player"),
                (faction_slot_ge, ":fac", dplmc_slot_faction_centralization, 3),
                (assign, reg0, 1),
            (else_try),
                (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
                (assign, reg0, 1),
            (try_end),
            (eq, reg0, 1),
            (presentation_set_duration, 0),
            (assign, "$g_presentation_next_presentation", 3),
            (assign, "$g_improvement_type", -1),
            (start_presentation, "prsnt_center_management"),
            #(jump_to_menu, "mnu_center_extort"),
            #(finish_mission),
        (else_try),
             (display_message, "str_center_manage_denied", message_alert),
        (try_end),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_3"),
        (try_begin),
            (is_between, "$g_encountered_party", walled_centers_begin, walled_centers_end),##no decrees in villages
            (try_begin),
                (assign, reg0, 0),
                (try_begin),
                    (store_faction_of_party, ":fac", "$g_encountered_party"),
                    (faction_slot_eq, ":fac", slot_faction_leader, "trp_player"),
                    (faction_slot_ge, ":fac", dplmc_slot_faction_centralization, 3),
                    (assign, reg0, 1),
                (else_try),
                    (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
                    (assign, reg0, 1),
                (try_end),
                (eq, reg0, 1),
                (assign, "$g_presentation_next_presentation", 2),
                (assign, "$g_improvement_type", -1),
               # (presentation_set_duration, 0),
                (start_presentation, "prsnt_center_management"),
              #  (presentation_set_duration, 0),
              #  (jump_to_menu, "mnu_center_decrees"),
               # (finish_mission),
            (else_try),
                (display_message, "str_center_manage_denied", message_alert),
            (try_end),
        (else_try),
            (display_message, "@Decrees can only be issued in towns or forts.", message_alert),
        (try_end),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_14"),
        (assign, "$g_presentation_next_presentation", 4),
        (assign, "$g_improvement_type", -1),
        (start_presentation, "prsnt_center_management"),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_4"),
        (try_begin),
            # (this_or_next|party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
            # (this_or_next|party_slot_ge, "$g_encountered_party", slot_center_has_manor, 1),
            # (party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle),
            # (party_get_slot, ":town_lord", "$g_encountered_party", slot_town_lord),
            # (str_clear, s10),
            # (assign, ":player_can_draw_from_garrison", 0),
            # (try_begin), #option 1 - player is town lord
                # (eq, ":town_lord", "trp_player"),
                # (assign, ":player_can_draw_from_garrison", 1),
            # (else_try), #option 2 - town is unassigned and part of the player faction
                # (store_faction_of_party, ":faction", "$g_encountered_party"),
                # (eq, ":faction", "fac_player_supporters_faction"),
                # (neg|party_slot_ge, "$g_encountered_party", slot_town_lord, active_npcs_begin), #ie, zero or -1

                # (assign, ":player_can_draw_from_garrison", 1),
            # (else_try), #option 3 - town was captured by player
                # (lt, ":town_lord", 0), #ie, unassigned
                # (store_faction_of_party, ":castle_faction", "$g_encountered_party"),
                # (eq, "$players_kingdom", ":castle_faction"),

                # (eq, "$g_encountered_party", "$g_castle_requested_by_player"),

                # (str_store_string, s10, "str_retrieve_garrison_warning"),
                # (assign, ":player_can_draw_from_garrison", 1),
            # (else_try),
                # (lt, ":town_lord", 0), #ie, unassigned
                # (store_faction_of_party, ":castle_faction", "$g_encountered_party"),
                # (eq, "$players_kingdom", ":castle_faction"),

                # (store_party_size_wo_prisoners, ":party_size", "$g_encountered_party"),
                # (eq, ":party_size", 0),

                # (str_store_string, s10, "str_retrieve_garrison_warning"),
                # (assign, ":player_can_draw_from_garrison", 1),
            # (else_try),
                # (party_slot_ge, "$g_encountered_party", slot_town_lord, active_npcs_begin),
                # (store_faction_of_party, ":castle_faction", "$g_encountered_party"),
                # (eq, "$players_kingdom", ":castle_faction"),
                # ##diplomacy start+ can arise if using this to represent polygamy
                # (this_or_next|troop_slot_eq, ":town_lord", slot_troop_spouse, "trp_player"),
                # (troop_slot_eq, "trp_player", slot_troop_spouse, ":town_lord"),
                # (this_or_next|is_between, ":town_lord", heroes_begin, kingdom_ladies_end),
                # ##diplomacy end+
                # (troop_slot_eq, "trp_player", slot_troop_spouse, ":town_lord"),
                # (assign, ":player_can_draw_from_garrison", 1),
            # (try_end),
            # (eq, ":player_can_draw_from_garrison", 1),
            #(change_screen_exchange_members,1),
            (call_script, "script_cf_can_manage_garrision", "$g_encountered_party"),
            (jump_to_menu, "mnu_garrison_management"),
            (presentation_set_duration, 0),
            (finish_mission),
        (else_try),
            (display_message, "str_center_manage_denied", message_alert),
        (try_end),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_5"),
        (try_begin),
            (eq, ":value", 0),
            (party_set_slot, "$g_encountered_party", dplmc_slot_center_taxation, -50),
        (else_try),
            (eq, ":value", 1),
            (party_set_slot, "$g_encountered_party", dplmc_slot_center_taxation, -25),
        (else_try),
            (eq, ":value", 2),
            (party_set_slot, "$g_encountered_party", dplmc_slot_center_taxation, 0),
        (else_try),
            (eq, ":value", 3),
            (party_set_slot, "$g_encountered_party", dplmc_slot_center_taxation, 25),
        (else_try),
            (eq, ":value", 4),
            (party_set_slot, "$g_encountered_party", dplmc_slot_center_taxation, 50),
        (try_end),
        (assign, "$g_improvement_type", -1),
        (start_presentation, "prsnt_center_management"),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_6"),
        (try_begin),
            (assign, reg0, 0),
            (try_begin),
                (store_faction_of_party, ":fac", "$g_encountered_party"),
                (faction_slot_eq, ":fac", slot_faction_leader, "trp_player"),
                (faction_slot_ge, ":fac", dplmc_slot_faction_centralization, 1),
                (assign, reg0, 1),
            (else_try),
                (party_slot_eq, "$g_encountered_party", slot_town_lord, "trp_player"),
                (assign, reg0, 1),
            (try_end),
            (eq, reg0, 1),
            (assign, "$g_presentation_next_presentation", 1),
            (assign, "$g_improvement_type", -1),
           # (presentation_set_duration, 0),
            (start_presentation, "prsnt_center_management"),
        (else_try),
            (display_message, "str_center_manage_denied", message_alert),
        (try_end),
    (try_end),
  ]),
  ## END presentation event state change trigger
  (ti_on_presentation_run, [
    (try_begin),
        (key_clicked, key_escape),
        (presentation_set_duration, 0),
        (jump_to_menu, "$g_next_menu"),
        (finish_mission),
    (else_try),
        (key_clicked, key_space),
        (set_fixed_point_multiplier, 1000),
        (mouse_get_position, pos31),

        (position_get_x, reg31, pos31),
        (position_get_y, reg32, pos31),

        (display_message, "@X: {reg31} | Y: {reg32}"),
    (try_end),
  ]),
  (ti_on_presentation_mouse_press, [
    (store_trigger_param_1, ":object_id"),
    (try_begin),
        (eq, "$g_presentation_next_presentation", 3),
        (troop_slot_eq, "trp_zendar_chest", "$temp", ":object_id"),
        (is_between, "$temp", extort_tax, extort_end),
        (str_store_party_name, s39, "$g_encountered_party"),

        (call_script, "script_get_max_skill_of_player_party", "skl_trade"),
        (str_clear, s1),
        (assign, ":max_skill_owner", reg1),
        (try_begin),
            (eq, ":max_skill_owner", "trp_player"),
            (assign, reg3, 1),
        (else_try),
            (assign, reg3, 0),
            (str_store_troop_name, s1, ":max_skill_owner"),
        (try_end),
        (assign, reg31, "$temp2"),
        (assign, reg40, "$temp3"),
        (store_add, ":description", "$temp", "str_extort_tax_xp"),
        (val_sub, ":description", 1),
        (str_store_string, s44, ":description"),
        (question_box, s44),
    (else_try),
        (eq, "$g_presentation_next_presentation", 2),
        (troop_slot_eq, "trp_zendar_chest", "$g_improvement_type", ":object_id"),
        (try_begin),
            (eq, "$temp", 1),
            (call_script, "script_get_decree_details", "$g_improvement_type"),
            (assign, reg0, decree_cost),
            (question_box, "@Do you wish to revoke {s30}? It would cost you {reg0} denars."),
            #(assign, "$g_improvement_type", -1),
            (start_presentation, "prsnt_center_management"),
        (else_try),
            (eq, "$temp", 2),
            (party_slot_eq, "$g_encountered_party", "$g_improvement_type", 0),
            (call_script, "script_get_decree_details", "$g_improvement_type"),
            (assign, reg0, decree_cost),
            (question_box, "@Issuing a decree costs {reg0} denars. Do you wish to issue {s30}?"),
            #(assign, "$g_improvement_type", -1),
            (start_presentation, "prsnt_center_management"),
        (try_end),
    (else_try),
        (eq, "$g_presentation_next_presentation", 1),
        (is_between, "$g_improvement_type", village_improvements_begin, walled_center_improvements_end),
        (assign, ":c", 0),
        (str_clear, s44),
        (try_begin),
            (eq, "$g_improvement_type", slot_center_rome_rebuild),
            (try_begin),
                (eq, "$g_encountered_party", "p_town_6"),
                (ge, "$g_fire", 1),
            (else_try),
                (assign, ":c", 1),
            (try_end),
        (else_try),
            (party_slot_eq, "$g_encountered_party", slot_party_type, spt_village),
            (neg|is_between, "$g_improvement_type", village_improvements_begin, village_improvements_end),
            (assign, ":c", 1),
        (else_try),
            (this_or_next|party_slot_eq, "$g_encountered_party", slot_party_type, spt_town),
            (party_slot_eq, "$g_encountered_party", slot_party_type, spt_castle),
            (neg|is_between, "$g_improvement_type", walled_center_improvements_begin, walled_center_improvements_end),
            (assign, ":c", 1),
        (else_try),
            (eq, "$g_improvement_type", slot_center_has_temple),
            (neg|troop_slot_ge, "trp_player", slot_troop_religion, 0),
            (assign, ":c", 1),
        (else_try),
            (eq, "$g_improvement_type", slot_center_has_port),
            (party_slot_eq, "$g_encountered_party", slot_town_port, 0),
            (assign, ":c", 1),
        (else_try),
            (eq, "$g_improvement_type", slot_center_has_fishport),
            (party_slot_eq, "$g_encountered_party", slot_center_fishing_fleet, 0),
            (assign, ":c", 1),
        (else_try),
            (eq, "$g_improvement_type", slot_center_has_iron_mine),
            (party_slot_eq, "$g_encountered_party", slot_center_iron_deposits, 0),
            (assign, ":c", 1),
        # (else_try),
        #     (eq, "$g_improvement_type", slot_center_has_quarry),
        #     (party_slot_eq, "$g_encountered_party", slot_center_iron_deposits, 0),
        #     (assign, ":c", 1),
        (else_try),
            (eq, "$g_improvement_type", slot_center_has_silver_mine),
            (party_slot_eq, "$g_encountered_party", slot_center_silver_deposits, 0),
            (assign, ":c", 1),
        (else_try),
            (eq, "$g_improvement_type", slot_center_has_temple),
            (troop_slot_eq, "trp_player", slot_troop_religion, 0),
            (assign, ":c", 1),
        (else_try),
            (this_or_next|eq, "$g_improvement_type", slot_center_change_culture_village),
            (eq, "$g_improvement_type", slot_center_change_culture_town),
            (troop_get_slot, ":culture", "trp_player", slot_troop_culture),
            (party_slot_eq, "$g_encountered_party", slot_center_culture, ":culture"),
            (assign, ":c", 1),
        (try_end),
        (eq, ":c", 0),

        (troop_slot_eq, "trp_zendar_chest", "$g_improvement_type", ":object_id"),
        (try_begin),
            (eq, "$temp", 4),
            (question_box, "@Do you wish to cancle the building of {s0}? You will get some money back, though it will upset the local population."),
            (start_presentation, "prsnt_center_management"),
        (else_try),
            (eq, "$temp", 3),
            (question_box, "@Do you wish to cancle the building of {s0}? You will get some money back, though it will upset the local population."),
            (start_presentation, "prsnt_center_management"),
        (else_try),
            (eq, "$temp", 1),
            (try_begin),
                (neq, "$g_improvement_type", slot_center_has_irigation),
                (neq, "$g_improvement_type", slot_center_has_farms),
                (neq, "$g_improvement_type", slot_center_has_cattle),
                (neq, "$g_improvement_type", slot_center_has_fishport),
                (neq, "$g_improvement_type", slot_center_rome_rebuild),
                (neq, "$g_improvement_type", slot_center_has_port),
                (neq, "$g_improvement_type", slot_center_has_quarry),
                (neq, "$g_improvement_type", slot_center_has_iron_mine),
                (neq, "$g_improvement_type", slot_center_has_silver_mine),
                (neq, "$g_improvement_type", slot_center_change_culture_village),
                (neq, "$g_improvement_type", slot_center_change_culture_town),
                (call_script, "script_get_improvement_details", "$g_improvement_type", "$g_encountered_party"),
                (val_mul, reg0, 3),
                (val_div, reg0, 5),
                (question_box, "@{s0} has already been built. You wish to destroy it? You would regain {reg0} denars."),
                (start_presentation, "prsnt_center_management"),
                #(display_message, "@The building has already been built.", message_alert),
            (else_try),
                (dialog_box, "@This building cannot be destroyed."),
                (start_presentation, "prsnt_center_management"),
            (try_end),
        (else_try),
            (party_slot_ge, "$g_encountered_party", slot_center_current_improvement, 1),#is building something
            (party_slot_ge, "$g_encountered_party", slot_center_current_improvement_2, 1),#is building something
            (dialog_box, "@You can construct only two building at the same time."),
            (start_presentation, "prsnt_center_management"),
        (else_try),
            (eq, "$temp", 2),
            (party_slot_eq, "$g_encountered_party", "$g_improvement_type", 0),
            (try_begin),
                (eq, "$g_improvement_type", slot_center_has_slave_market),
                (store_faction_of_party, ":fac", "$current_town"),
                (faction_slot_eq, ":fac", dplmc_slot_faction_serfdom, -3),
                (dialog_box, "@Your faction's policies regarding slavery doesn't allow the construction of a slave market."),
                (start_presentation, "prsnt_center_management"),
            (else_try),
                (call_script, "script_get_improvement_details", "$g_improvement_type", "$g_encountered_party"),
                (assign, reg0, "$diplomacy_var"),
                (assign, reg1, "$diplomacy_var2"),
                (question_box, "@Building a {s0} would cost you {reg0} denars and take {reg1} days. Do you wish to proceed?"),
                (start_presentation, "prsnt_center_management"),
            (try_end),
        (try_end),
    (try_end),
    # (try_end),
  ]),
    # (ti_question_answered, [
        # (display_message, "@{s0} has been destroyed. You gained {reg0} of denars.", message_alert),
        # (store_trigger_param_1, ":answer"),
        # (eq, ":answer", 0),
        # (display_message, "@{s0} has been destroyed. You gained {reg0} of denars.", message_alert),
        # (try_begin),
            # (eq, "$temp", 1),#destroy a building
            # (call_script, "script_get_improvement_details", "$g_improvement_type"),
            # (val_mul, reg0, 3),
            # (val_div, reg0, 5),
            # (display_message, "@{s0} has been destroyed. You gained {reg0} of denars.", message_alert),
            # (troop_add_gold, "trp_player", reg0),
            # (party_set_slot, "$g_encountered_party", "$g_improvement_type", 0),
            # (assign, "$temp", 0),
        # (else_try),

        # (try_end),
    # ]),
]),

##diplomacy end
##diplomacy start+
##Custom player kingdom vassal titles, credit Caba`drin start
#(Updated 2011-04-24, to use Caba`drin's 2011-04-20 bug-fix and update)
# See http://forums.taleworlds.com/index.php/topic,148259.0.html
("dplmc_set_vassal_title",0,mesh_load_window, [
      (ti_on_presentation_load,
       [(set_fixed_point_multiplier, 1000),
        (str_clear, s1),
        (str_clear, s2),

        (create_text_overlay, reg0, "@How will your male vassals be known?", tf_center_justify),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 600),
        (overlay_set_position, reg0, pos1),
        (create_text_overlay, reg0, "@How will your female vassals be known?", tf_center_justify),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 400),
        (overlay_set_position, reg0, pos1),

        (create_simple_text_box_overlay, "$g_presentation_obj_name_kingdom_1"),
        (position_set_x, pos1, 400),
        (position_set_y, pos1, 500),
        (overlay_set_position, "$g_presentation_obj_name_kingdom_1", pos1),
        (try_begin),
          (troop_slot_eq, "trp_heroes_end", 0, 1), #Pick a slot
          (str_store_troop_name, s0, "trp_heroes_end"),
        (else_try), #SB : str_clear, offset for npc kingdom titles
          (str_clear, s0),
          (store_sub, ":string", "$players_kingdom", kingdoms_begin),
          (val_add, ":string", "str_faction_title_male_player"),
          (str_store_string, s0, ":string"),
        (try_end),
        (overlay_set_text, "$g_presentation_obj_name_kingdom_1", s0),

        (create_simple_text_box_overlay, reg0),
        (position_set_x, pos1, 400),
        (position_set_y, pos1, 300),
        (overlay_set_position, reg0, pos1),
        (try_begin),
          (troop_slot_eq, "trp_heroes_end", 1, 1), #Pick a slot
          (str_store_troop_name_plural, s0, "trp_heroes_end"),
        (else_try),  #SB : str_clear
          (str_clear, s0),
          (store_sub, ":string", "$players_kingdom", kingdoms_begin),
          (val_add, ":string", "str_faction_title_female_player"),
          (str_store_string, s0, ":string"),
        (try_end),
        (overlay_set_text, reg0, s0),

        #SB : use actual buttons and center
        (create_game_button_overlay, reg0, "str_done", tf_center_justify),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 150),
        (overlay_set_position, reg0, pos1),

        (create_game_button_overlay, reg0, "str_reset_to_default", tf_center_justify),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 100),
        (overlay_set_position, reg0, pos1),

        #SB : add tableau figures to the sides
        (assign, ":left_figure", "trp_quick_battle_6_player"),
        (assign, ":right_figure", "trp_knight_1_1_wife"),

        (assign, ":left_score", 0),
        (assign, ":right_score", 0),
        (assign, "$lord_selected", 0),
        #show spouses first
        (try_begin),
          (troop_get_slot, ":spouse", "trp_player", slot_troop_spouse),
          (is_between, ":spouse", heroes_begin, heroes_end),
          (try_begin),
            (call_script, "script_cf_dplmc_troop_is_female", ":spouse"),
            (assign, ":right_figure", ":spouse"),
            (assign, ":right_score", 9999),
          (else_try),
            (assign, ":left_figure", ":spouse"),
            (assign, ":left_score", 9999),
          (try_end),
        (try_end),
        #otherwise criteria is highest renown/age
        (try_for_range, ":troop_no", heroes_begin, heroes_end),
          (store_faction_of_troop, ":faction_no", ":troop_no"),
          (eq, ":faction_no", "$players_kingdom"),
          (troop_get_slot, ":occupation", ":troop_no", slot_troop_occupation),
          (try_begin),
            (eq, ":occupation", slto_kingdom_hero),
            (troop_get_slot, ":renown", ":troop_no", slot_troop_renown),
            (try_begin), #female lords
              (call_script, "script_cf_dplmc_troop_is_female", ":troop_no"),
              (lt, ":right_score", ":renown"),
              (assign, ":right_figure", ":troop_no"),
            (else_try),
              (lt, ":left_score", ":renown"),
              (assign, ":left_figure", ":troop_no"),
            (try_end),
          (else_try),
            (eq, ":occupation", slto_kingdom_lady),
            (troop_get_slot, ":renown", ":troop_no", slot_troop_age),
            (lt, ":right_score", ":renown"),
            (assign, ":right_figure", ":troop_no"),
          (try_end),
        (try_end),
        (init_position, pos1),
        #480x320 instead of 600x600 for retirement tableau
        (create_mesh_overlay_with_tableau_material, reg1, -1, "tableau_dplmc_lord_profile", ":left_figure"),
        (position_set_x, pos1, 10),
        (position_set_y, pos1, 100),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),

        (create_mesh_overlay_with_tableau_material, reg1, -1, "tableau_dplmc_lord_profile", ":right_figure"),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 100),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg1, pos1),
        (presentation_set_duration, 999999),
        ]),
      (ti_on_presentation_event_state_change,
       [(store_trigger_param_1, ":object"),
        (try_begin),
          (eq, ":object", "$g_presentation_obj_name_kingdom_1"),
          (str_store_string, s1, s0), #Male Title
        (else_try),
          (store_add, ":overlay", "$g_presentation_obj_name_kingdom_1", 1),
          (eq, ":object", ":overlay"),
          (str_store_string, s2, s0), ##Female Title
        (else_try),
          (val_add, ":overlay", 1),
          (eq, ":object", ":overlay"), #Custom
          (try_begin),
            (neg|str_is_empty, s1),
            (troop_set_name, "trp_heroes_end", s1),
            (troop_set_slot, "trp_heroes_end", 0, 1),
            (try_for_range, ":lord_lady", lords_begin, lords_end),
                (store_troop_faction, ":faction", ":lord_lady"),
                (eq, ":faction", "$players_kingdom"), #SB : change to players_kingdom, flip next script params
                (call_script, "script_troop_set_title_according_to_faction", ":lord_lady", "fac_player_supporters_faction"),
            (try_end),
          (try_end),
          (try_begin),
            (neg|str_is_empty, s2),
            (troop_set_plural_name, "trp_heroes_end", s2),
            (troop_set_slot, "trp_heroes_end", 1, 1),
            (try_for_range, ":lord_lady", kingdom_ladies_begin, kingdom_ladies_end),
                (store_troop_faction, ":faction", ":lord_lady"),
                (eq, ":faction", "$players_kingdom"), #SB : chance to players_kingdom
                (call_script, "script_troop_set_title_according_to_faction", ":lord_lady", "fac_player_supporters_faction"),
            (try_end),
          (try_end),
          (try_begin),
            (this_or_next|neg|str_is_empty, s1),
            (neg|str_is_empty, s2),
            (try_for_range, ":lord_lady", companions_begin, companions_end),
                (store_troop_faction, ":faction", ":lord_lady"),
                (eq, ":faction", "$players_kingdom"), #SB : chance to players_kingdom
                (troop_slot_eq, ":lord_lady", slot_troop_occupation, slto_kingdom_hero),
                (call_script, "script_troop_set_title_according_to_faction", ":lord_lady", "fac_player_supporters_faction"),
            (try_end),
          (try_end),
          (presentation_set_duration, 0),
        (else_try),
          (val_add, ":overlay", 1),
          (eq, ":object", ":overlay"), #Default
          (troop_set_slot, "trp_heroes_end", 0, 0),
          (troop_set_slot, "trp_heroes_end", 1, 0),
          (try_for_range, ":lord_lady", lords_begin, kingdom_ladies_end),
           # (neg|is_between, ":lord_lady", pretenders_begin, pretenders_end),
            (store_troop_faction, ":faction", ":lord_lady"),
            (eq, ":faction", "$players_kingdom"),
            (call_script, "script_troop_set_title_according_to_faction", ":lord_lady", ":faction"),
          (try_end),
          (try_for_range, ":lord_lady", companions_begin, companions_end),
            (store_troop_faction, ":faction", ":lord_lady"),
            (eq, ":faction", "$players_kingdom"),
            (troop_slot_eq, ":lord_lady", slot_troop_occupation, slto_kingdom_hero),
            (call_script, "script_troop_set_title_according_to_faction", ":lord_lady", ":faction"),
          (try_end),
          (presentation_set_duration, 0),
        (try_end),
        ]),
      ]),
##Custom player kingdom vassal titles, credit Caba`drin end

##Auto-Sell, credit rubik (Custom Commander) begin
##Adds global variables:
#  $g_sell_items_when_leaving, renamed to g_dplmc_sell_items_when_leaving
#  $g_auto_sell_price_limit, renamed to g_dplmc_auto_sell_price_limit
##Adds slot:
#  slot_item_type_not_for_sell, renamed to dplmc_slot_item_type_not_for_sell
  ("dplmc_auto_sell_options", 0, mesh_load_window, [
    (ti_on_presentation_load,
      [
        (presentation_set_duration, 999999),
        (set_fixed_point_multiplier, 1000),

        ## do auto-sell automaticly when leaving
        (create_text_overlay, reg0, "@Sell items automatically when leaving:", tf_vertical_align_center),
        (position_set_x, pos1, 170),
        (position_set_y, pos1, 660),
        (overlay_set_position, reg0, pos1),

        (create_check_box_overlay, "$g_presentation_obj_1", "mesh_checkbox_off", "mesh_checkbox_on"),
        (position_set_x, pos1, 150),
        (position_set_y, pos1, 652),
        (overlay_set_position, "$g_presentation_obj_1", pos1),
        (overlay_set_val, "$g_presentation_obj_1", "$g_dplmc_sell_items_when_leaving"),

        ## price_limit
        (create_text_overlay, reg0, "@Price limit for auto-sell:", tf_vertical_align_center),
        (position_set_x, pos1, 150),
        (position_set_y, pos1, 610),
        (overlay_set_position, reg0, pos1),

        (create_number_box_overlay, "$g_presentation_obj_2", 10, 10000),
        (position_set_x, pos1, 600),
        (position_set_y, pos1, 596),
        (overlay_set_val, "$g_presentation_obj_2", "$g_dplmc_auto_sell_price_limit"),
        (overlay_set_position, "$g_presentation_obj_2", pos1),

        # done
        (create_game_button_overlay, "$g_presentation_obj_3", "str_done"),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 25),
        (overlay_set_position, "$g_presentation_obj_3", pos1),

        ## Item types
        (create_text_overlay, reg0, "@Item types for auto-sell:", tf_vertical_align_center),
        (position_set_x, pos1, 150),
        (position_set_y, pos1, 578),
        (overlay_set_position, reg0, pos1),

        # select all
        (create_image_button_overlay, "$g_presentation_obj_5", "mesh_drop_button_child", "mesh_drop_button_child_down"),
        (position_set_x, pos1, 160),
        (position_set_y, pos1, 528),
        (overlay_set_position, "$g_presentation_obj_5", pos1),
        (create_text_overlay, reg1, "@Select all", tf_center_justify|tf_vertical_align_center),
        (position_set_x, pos1, 265),
        (position_set_y, pos1, 538),
        (overlay_set_position, reg1, pos1),

        # select invert
        (create_image_button_overlay, "$g_presentation_obj_6", "mesh_drop_button_child", "mesh_drop_button_child_down"),
        (position_set_x, pos1, 385),
        (position_set_y, pos1, 528),
        (overlay_set_position, "$g_presentation_obj_6", pos1),
        (create_text_overlay, reg1, "@Select invert", tf_center_justify|tf_vertical_align_center),
        (position_set_x, pos1, 490),
        (position_set_y, pos1, 538),
        (overlay_set_position, reg1, pos1),

        (assign, ":pos_x", 160),
        (assign, ":pos_y", 500),
        (try_for_range, ":cur_type", 0, 20),
          (store_add, ":cur_item_type", itp_type_horse, ":cur_type"),
          (neq, ":cur_item_type", itp_type_goods),
          (neq, ":cur_item_type", itp_type_animal),
          (neq, ":cur_item_type", itp_type_book),
          # button
          (position_set_x, pos1, ":pos_x"),
          (position_set_y, pos1, ":pos_y"),
          (create_mesh_overlay, reg1, "mesh_drop_button_child"),
          (overlay_set_position, reg1, pos1),
          # text
          (store_add, ":text_pos_x", ":pos_x", 120),
          (store_add, ":text_pos_y", ":pos_y", 10),
          (position_set_x, pos1, ":text_pos_x"),
          (position_set_y, pos1, ":text_pos_y"),
          (store_add, ":out_string", "str_dplmc_hero_wpn_slot_horse", ":cur_type"),#<- dplmc+ added "dplmc" prefix
          (str_store_string, s1, ":out_string"),
          (create_text_overlay, reg1, "@{s1}", tf_center_justify|tf_vertical_align_center),
          (overlay_set_position, reg1, pos1),
          # checkbox
          (store_add, ":checkbox_pos_x", ":pos_x", 0),
          (store_add, ":checkbox_pos_y", ":pos_y", 4),
          (position_set_x, pos1, ":checkbox_pos_x"),
          (position_set_y, pos1, ":checkbox_pos_y"),
          (create_check_box_overlay, reg1, "mesh_checkbox_off", "mesh_checkbox_on"),
          (overlay_set_position, reg1, pos1),
          (store_add, ":item_type", itp_type_horse, ":cur_type"),
          (item_get_slot, ":for_sell", ":item_type", dplmc_slot_item_type_not_for_sell),
          (store_sub, ":for_sell", 1, ":for_sell"),
          (overlay_set_val, reg1, ":for_sell"),
          (troop_set_slot, "trp_temp_array_b", ":cur_type", reg1),
          # focous
          (val_add, ":pos_x", 225),
          (try_begin),
            (eq, ":pos_x", 835),
            (assign, ":pos_x", 160),
            (val_sub, ":pos_y", 28),
          (try_end),
        (try_end),

        ####### mouse fix pos system #######
        #(call_script, "script_mouse_fix_pos_ready"),
        ####### mouse fix pos system #######
      ]),

      #(ti_on_presentation_run,
        #[
        ####### mouse fix pos system #######
        #(call_script, "script_mouse_fix_pos_run"),
        ####### mouse fix pos system #######
      #]),

    (ti_on_presentation_event_state_change,
      [
        (store_trigger_param_1, ":object"),
        (store_trigger_param_2, ":value"),

        (try_begin),
          (eq, ":object", "$g_presentation_obj_1"),
          (assign, "$g_dplmc_sell_items_when_leaving", ":value"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_2"),
          (assign, "$g_dplmc_auto_sell_price_limit", ":value"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_3"),
          (presentation_set_duration, 0),
        (else_try),
          ## select all
          (eq, ":object", "$g_presentation_obj_5"),
          (try_for_range, ":cur_type", 0, 20),
            (store_add, ":cur_item_type", itp_type_horse, ":cur_type"),
            (neq, ":cur_item_type", itp_type_goods),
            (neq, ":cur_item_type", itp_type_animal),
            (neq, ":cur_item_type", itp_type_book),
            (item_set_slot, ":cur_item_type", dplmc_slot_item_type_not_for_sell, 0),
            (troop_get_slot, ":dest_checkbox", "trp_temp_array_b", ":cur_type"),
            (overlay_set_val, ":dest_checkbox", 1),
          (try_end),
        (else_try),
          ## select invert
          (eq, ":object", "$g_presentation_obj_6"),
          (try_for_range, ":cur_type", 0, 20),
            (store_add, ":cur_item_type", itp_type_horse, ":cur_type"),
            (neq, ":cur_item_type", itp_type_goods),
            (neq, ":cur_item_type", itp_type_animal),
            (neq, ":cur_item_type", itp_type_book),
            (item_get_slot, ":for_sell", ":cur_item_type", dplmc_slot_item_type_not_for_sell),
            (val_add, ":for_sell", 1),
            (val_mod, ":for_sell", 2),
            (item_set_slot, ":cur_item_type", dplmc_slot_item_type_not_for_sell, ":for_sell"),
            (troop_get_slot, ":dest_checkbox", "trp_temp_array_b", ":cur_type"),
            (store_sub, ":dest_val", 1, ":for_sell"),
            (overlay_set_val, ":dest_checkbox", ":dest_val"),
          (try_end),
        (try_end),

        ## checkboxes
        (try_for_range, ":slot_item_type_checkbox", 0, 20),
          (troop_slot_eq, "trp_temp_array_b", ":slot_item_type_checkbox", ":object"),
          (store_add, ":item_type", itp_type_horse, ":slot_item_type_checkbox"),
          (store_sub, ":for_sell", 1, ":value"),
          (item_set_slot, ":item_type", dplmc_slot_item_type_not_for_sell, ":for_sell"),
        (try_end),
      ]),
    ]),
##auto-sell, credit rubik (Custom Commander) end

##Auto-Buy-Food shopping list management credit rubik (Custom Commander), end
##
##Global variables used:
##   $g_buy_foods_when_leaving changed to $g_dplmc_buy_food_when_leaving
##
##Slots used:
##   slot_item_food_portion, renamed to dplmc_slot_item_food_portion
  ("dplmc_shopping_list_of_food", 0, mesh_load_window, [
    (ti_on_presentation_load,
      [
        (presentation_set_duration, 999999),
        (set_fixed_point_multiplier, 1000),

        ## back
        (create_game_button_overlay, "$g_presentation_obj_1", "str_done"),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 25),
        (overlay_set_position, "$g_presentation_obj_1", pos1),

        ## buy food automatically when leaving
        (create_text_overlay, reg0, "@Buy food automatically when leaving:", tf_vertical_align_center),
        (position_set_x, pos1, 170),
        (position_set_y, pos1, 690),
        (overlay_set_position, reg0, pos1),

        (create_check_box_overlay, "$g_presentation_obj_2", "mesh_checkbox_off", "mesh_checkbox_on"),
        (position_set_x, pos1, 150),
        (position_set_y, pos1, 682),
        (overlay_set_position, "$g_presentation_obj_2", pos1),
        (overlay_set_val, "$g_presentation_obj_2", "$g_dplmc_buy_food_when_leaving"),

        (assign, ":pos_x", 60),
        (assign, ":pos_y", 550),
        (try_for_range, ":cur_food", food_begin, food_end),
          # frame
          (create_mesh_overlay, reg1, "mesh_inv_slot"),
          (position_set_x, pos1, 800),
          (position_set_y, pos1, 800),
          (overlay_set_size, reg1, pos1),
          (position_set_x, pos1, ":pos_x"),
          (position_set_y, pos1, ":pos_y"),
          (overlay_set_position, reg1, pos1),
          # back ground
          (create_mesh_overlay, reg1, "mesh_mp_inventory_choose"),
          (position_set_x, pos1, 640),
          (position_set_y, pos1, 640),
          (overlay_set_size, reg1, pos1),
          (position_set_x, pos1, ":pos_x"),
          (position_set_y, pos1, ":pos_y"),
          (overlay_set_position, reg1, pos1),
          # item overlay
          (troop_set_slot, "trp_temp_array_a", ":cur_food", reg1),
          (create_mesh_overlay_with_item_id, reg1, ":cur_food"),
          (position_set_x, pos1, 800),
          (position_set_y, pos1, 800),
          (overlay_set_size, reg1, pos1),
          (store_add, ":item_x", ":pos_x", 40),
          (store_add, ":item_y", ":pos_y", 40),
          (position_set_x, pos1, ":item_x"),
          (position_set_y, pos1, ":item_y"),
          (overlay_set_position, reg1, pos1),
          (troop_set_slot, "trp_temp_array_b", ":cur_food", reg1),
          # text *
          (create_text_overlay, reg1, "@*", tf_center_justify|tf_vertical_align_center),
          (store_add, ":text_x", ":pos_x", 100),
          (store_add, ":text_y", ":pos_y", 40),
          (position_set_x, pos1, ":text_x"),
          (position_set_y, pos1, ":text_y"),
          (overlay_set_position, reg1, pos1),
          # number_box
          (create_number_box_overlay, reg1, 0, 5),
          (store_add, ":number_box_x", ":pos_x", 115),
          (store_add, ":number_box_y", ":pos_y", 30),
          (position_set_x, pos1, ":number_box_x"),
          (position_set_y, pos1, ":number_box_y"),
          (overlay_set_position, reg1, pos1),
          (item_get_slot, ":food_portion", ":cur_food", dplmc_slot_item_food_portion),
          (overlay_set_val, reg1, ":food_portion"),
          (troop_set_slot, "trp_temp_array_c", ":cur_food", reg1),
          # next
          (val_add, ":pos_x", 240),
          (try_begin),
            (eq, ":pos_x", 1020),
            (assign, ":pos_x", 60),
            (val_sub, ":pos_y", 120),
          (try_end),
        (try_end),

        ####### mouse fix pos system #######
        #(call_script, "script_mouse_fix_pos_ready"),
        ####### mouse fix pos system #######
      ]),

    #(ti_on_presentation_run,
      #[
        ####### mouse fix pos system #######
        #(call_script, "script_mouse_fix_pos_run"),
        ####### mouse fix pos system #######
    #]),

    (ti_on_presentation_mouse_enter_leave,
      [
      (store_trigger_param_1, ":object"),
      (store_trigger_param_2, ":enter_leave"),

      (try_begin),
        (eq, ":enter_leave", 0),
        #SB : show actual modifier
        (try_begin),
          (is_between, "$current_town", towns_begin, towns_end),
          (party_get_slot, ":merchant", "$current_town", slot_town_merchant),
        (else_try),
          (is_between, "$current_town", villages_begin, villages_end),
          (party_get_slot, ":merchant", "$current_town", slot_town_elder),
        (else_try),
          (assign, ":merchant", -1),
        (try_end),
        (try_for_range, ":cur_food", food_begin, food_end),
          (troop_slot_eq, "trp_temp_array_a", ":cur_food", ":object"),
          (troop_get_slot, ":target_obj", "trp_temp_array_b", ":cur_food"),
          (overlay_get_position, pos0, ":target_obj"),
          (try_begin),
            (le, ":merchant", 0),
            (show_item_details, ":cur_food", pos0, 100),
          (else_try),
            (call_script, "script_dplmc_get_item_buy_price_factor", ":cur_food", "$current_town", "trp_player", ":merchant"),
            (show_item_details, ":cur_food", pos0, reg0),
          (try_end),
          (assign, "$g_current_opened_item_details", ":cur_food"),
        (try_end),
      (else_try),
        (try_for_range, ":cur_food", food_begin, food_end),
          (troop_slot_eq, "trp_temp_array_a", ":cur_food", ":object"),
          (try_begin),
            (eq, "$g_current_opened_item_details", ":cur_food"),
            (close_item_details),
          (try_end),
        (try_end),
      (try_end),
    ]),

    (ti_on_presentation_event_state_change,
      [
        (store_trigger_param_1, ":object"),
        (store_trigger_param_2, ":value"),

        (try_for_range, ":cur_food", food_begin, food_end),
          (troop_slot_eq, "trp_temp_array_c", ":cur_food", ":object"),
          (item_set_slot, ":cur_food", dplmc_slot_item_food_portion, ":value"),
        (try_end),

        (try_begin),
          (eq, ":object", "$g_presentation_obj_2"),
          (assign, "$g_dplmc_buy_food_when_leaving", ":value"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_1"),
          (presentation_set_duration, 0),
        (try_end),
    ]),
  ]),
##Auto-Buy-Food shopping list management credit rubik (Custom Commander), end

# Jrider +
  ##############################################################################
  # REPORT PRESENTATIONS v1.2
  ## Character relations report
  ("jrider_character_relation_report", 0,
   mesh_message_window,
   [
     ## Load Presentation
     (ti_on_presentation_load,
      # generic_ti_on_load +
      [
    (presentation_set_duration, 999999),
        (set_fixed_point_multiplier, 1000),

        (str_clear, s0),
        (str_clear, s1),

        # Character presentation type variations
        (try_begin),
            ###############################
            ## Courtship Relations presentation
            (eq, "$g_character_presentation_type", 0),

            # Set presentation title string
            (str_store_string, s0, "@_Courtship progress and love affairs_"),

            # Set size of listbox
            (assign, ":base_scroll_y", 160),
            (assign, ":base_scroll_size_y", 480),
            (assign, ":base_candidates_y", 0), # scrollable area size minus (one line size + 2) 430

            # Set storage index
            (assign, "$g_base_character_presentation_storage_index", 1000),

            # presentation specific extra overlays
            (call_script, "script_generate_known_poems_string"),

            # Extra text area for knowns poems (filling once so we use a register), filled from s1 generated in script call
            (create_text_overlay, reg1, s1, tf_left_align),
            (position_set_x, pos1, 590), # position
            (position_set_y, pos1, 55),
            (overlay_set_position, reg1, pos1),
            (position_set_x, pos1, 760), # size
            (position_set_y, pos1, 860),
            (overlay_set_size, reg1, pos1),
            (overlay_set_color, reg1, 0x000000), # color
        (else_try),
            ###############################
            ## Lord Relations presentation
            (eq, "$g_character_presentation_type", 1),

            # Set presentation title string
            (str_store_string, s0, "@_Known Lords by Relation_"),

            # Set size of listbox
            (assign, ":base_scroll_y", 110),
            (assign, ":base_scroll_size_y", 550),
            (assign, ":base_candidates_y", 0), # scrollable area size minus 530

            # Set storage index
            (assign, "$g_base_character_presentation_storage_index", 2000),
        (else_try),
            ###############################
            ## Player and Companions presentation
            (eq, "$g_character_presentation_type", 2),

            # Set presentation title string
            (str_store_string, s0, "@_Character & Companions_"),

            # Set size of listbox
            (assign, ":base_scroll_y", 110),
            (assign, ":base_scroll_size_y", 550),
            (assign, ":base_candidates_y", 0), # scrollable area size minus (one line size + 2) 530

            # Set storage index
            (assign, "$g_base_character_presentation_storage_index", 3000),

            # Extra area for equipment display
            (assign, ":inv_bar_size", 0),
            (position_set_x, ":inv_bar_size", 400),
            (position_set_y, ":inv_bar_size", 400),

            (create_mesh_overlay, reg1, "mesh_mp_inventory_left"),
            (position_set_x, pos1, 67),
            (position_set_y, pos1, 300),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, ":inv_bar_size"),

            (create_mesh_overlay, reg1, "mesh_mp_inventory_right"),
            (position_set_x, pos1, 450),
            (position_set_y, pos1, 330),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, ":inv_bar_size"),
        (try_end),
        # END of presentation type specific init and static overlay

        ###############################
        # Create common overlays
        # set foreground mesh overlay (has some transparency in it, so can't use it directly)
        (create_mesh_overlay, reg1, "mesh_game_log_window"),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, 0),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 1000),
        (position_set_y, pos1, 1000),
        (overlay_set_size, reg1, pos1),

    # Presentation title overlay, centered at the top of right pane (from s0, presentation type specific)
        (create_text_overlay, reg1, s0, tf_center_justify),
        (overlay_set_color, reg1, 0x000000),
        (position_set_x, pos1, 740), # Higher, means more toward the right
        (position_set_y, pos1, 680), # Higher, means more toward the top
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 1200),
        (position_set_y, pos1, 1200),
        (overlay_set_size, reg1, pos1),

    # Done button
        (create_game_button_overlay, "$g_jrider_faction_report_return_to_menu", "@_Done_"),
        (position_set_x, pos1, 290),
        (position_set_y, pos1, 10),
        (overlay_set_position, "$g_jrider_faction_report_return_to_menu", pos1),

        # Character Information text to fill when an entry is clicked in the list
        (create_text_overlay, "$g_jrider_character_information_text", "str_space", tf_left_align),
        (overlay_set_color, "$g_jrider_character_information_text", 0x000000),
        (position_set_x, pos1, 55), # Higher, means more toward the right
        (position_set_y, pos1, 95), # Higher, means more toward the top
        (overlay_set_position, "$g_jrider_character_information_text", pos1),
        (position_set_x, pos1, 850), # smaller means smaller font
        (position_set_y, pos1, 850),
        (overlay_set_size, "$g_jrider_character_information_text", pos1),

        # Character selection listbox overlay
        # use scrollable text area with global reference so objects can be put inside using overlay_set_container
        (create_text_overlay, "$g_jrider_character_relation_listbox", "str_empty_string", tf_scrollable_style_2),
        (overlay_set_color, "$g_jrider_character_relation_listbox", 0x000000), # color
        (position_set_x, pos1, 590),
        (position_set_y, pos1, ":base_scroll_y"),
        (overlay_set_position, "$g_jrider_character_relation_listbox", pos1),
        (position_set_x, pos1, 335),
        (position_set_y, pos1, ":base_scroll_size_y"),
        (overlay_set_area_size, "$g_jrider_character_relation_listbox", pos1),

        # Faction filter
        (create_combo_button_overlay, "$g_jrider_character_faction_filter", "str_empty_string",0),
        (position_set_x, pos1, 507),
        (position_set_y, pos1, 680),
        (overlay_set_position, "$g_jrider_character_faction_filter", pos1),
        (position_set_x, pos1, 670),
        (position_set_y, pos1, 770),
        (overlay_set_size, "$g_jrider_character_faction_filter", pos1),

        # add elements to filter button
        (overlay_add_item, "$g_jrider_character_faction_filter", "@Your supporters"),
        (try_for_range, ":faction_no", npc_kingdoms_begin, kingdoms_end), #SB : add loop
          (call_script, "script_faction_get_adjective_to_s10", ":faction_no"),
          (overlay_add_item, "$g_jrider_character_faction_filter", "@{s10}s"),
        (try_end),
        (overlay_add_item, "$g_jrider_character_faction_filter", "@All Factions"),

        # Set initial value for selection box
        (try_begin),
            (this_or_next|eq, "$g_jrider_pres_called_from_menu", 1),
            (eq, "$g_jrider_faction_filter", -1),

            (assign, "$g_jrider_faction_filter", -1),
            (overlay_set_val, "$g_jrider_character_faction_filter", 18),
        (else_try),
            (overlay_set_val, "$g_jrider_character_faction_filter", "$g_jrider_faction_filter"),
        (try_end),

        ###############################
        # Populate lists
        # Init presentation common global variables
        (assign, "$num_charinfo_candidates", 0),

        # Fill listbox (overlay_add_item and extra storage)
        (call_script, "script_fill_relation_canditate_list_for_presentation", "$g_character_presentation_type", ":base_candidates_y"),
        (assign, "$g_jrider_reset_selected_on_faction", 0),
        # stop if there's no candidate
        (gt, "$num_charinfo_candidates", 0),

        # get extra information from storage
        (store_add, ":current_storage_index", "$g_base_character_presentation_storage_index", "$g_latest_character_relation_entry"),
        (troop_get_slot, "$character_info_id", "trp_temp_array_c", ":current_storage_index"),

        # Fill text information for current entry and update text information overlay
        (call_script, "script_generate_extended_troop_relation_information_string", "$character_info_id"),
        (overlay_set_text, "$g_jrider_character_information_text", s1),

        # color selected entry
        (overlay_set_color, "$g_jrider_last_checked_indicator", 0x000000),
        (overlay_set_alpha, "$g_jrider_last_checked_indicator", 0x44),

        # Begin common dynamic overlay
        # mesh Overlay for character portrait (global not needed)
        (create_image_button_overlay_with_tableau_material, "$g_jrider_character_portrait", -1, "tableau_troop_note_mesh", "$character_info_id"),
        (position_set_x, pos2, 100),
        (position_set_y, pos2, 350),
        (overlay_set_position, "$g_jrider_character_portrait", pos2),
        (position_set_x, pos2, 970), #1150
        (position_set_y, pos2, 970), #1150
        (overlay_set_size, "$g_jrider_character_portrait", pos2),

        # mesh Overlay for faction coat of arms
        (try_begin),
            (store_troop_faction, ":troop_faction", "$character_info_id"),
            (neq, ":troop_faction", "fac_player_supporters_faction"),
            (is_between, ":troop_faction", kingdoms_begin, kingdoms_end),
            (store_sub, ":faction_mesh_index", ":troop_faction", kingdoms_begin),
            (val_add, ":faction_mesh_index", "mesh_pic_recruits"),

            (create_mesh_overlay, "$g_jrider_faction_coat_of_arms", ":faction_mesh_index"),
            (position_set_x, pos3, 150),
            (position_set_y, pos3, 600),
            (overlay_set_position, "$g_jrider_faction_coat_of_arms", pos3),
            (position_set_x, pos3, 250),
            (position_set_y, pos3, 250),
            (overlay_set_size, "$g_jrider_faction_coat_of_arms", pos3),
        (try_end),

        # Begin presentation type specific dynamic overlay
        # equipement meshes for character/companions
        (try_begin),
            (eq, "$g_character_presentation_type", 2),

            (assign, ":base_inv_slot_x", 452),
            (assign, ":base_inv_slot_y", 536),

            (try_for_range, ":item_eq", 0, 9),
            # loop equipment slots
                (troop_get_inventory_slot, reg1, "$character_info_id", ":item_eq"),

                (try_begin),
                    (eq, ":item_eq", 4),
                    (assign, ":base_inv_slot_x", 68),
                    (assign, ":base_inv_slot_y", 557),
                (try_end),
                (try_begin),
                    (lt, reg1, 1),
                    # empty... assign default mesh
                   (try_begin),
                       (lt, ":item_eq", 4),
                       (assign, ":mesh_id", "mesh_mp_inventory_slot_equip"),
                   (else_try),
                       (eq, ":item_eq", 4),
                       (assign, ":mesh_id", "mesh_mp_inventory_slot_helmet"),
                   (else_try),
                       (eq, ":item_eq", 5),
                       (assign, ":mesh_id", "mesh_mp_inventory_slot_armor"),
                   (else_try),
                       (eq, ":item_eq", 6),
                       (assign, ":mesh_id", "mesh_mp_inventory_slot_boot"),
                   (else_try),
                       (eq, ":item_eq", 7),
                       (assign, ":mesh_id", "mesh_mp_inventory_slot_glove"),
                   (else_try),
                       (eq, ":item_eq", 8),
                       (assign, ":mesh_id", "mesh_mp_inventory_slot_horse"),
                   (try_end),

                   (create_mesh_overlay, reg11, ":mesh_id"),
                   (overlay_set_size, reg11, ":inv_bar_size"),

                   (position_set_x, pos1, ":base_inv_slot_x"),
                   (position_set_y, pos1, ":base_inv_slot_y"),
                   (overlay_set_position, reg11, pos1),

                   (troop_set_slot, "trp_temp_array_a", ":item_eq", -1),
                   (store_add, ":item_eq_id", ":item_eq", 10),
                   (troop_set_slot, "trp_temp_array_a", ":item_eq_id", -1),
                # end missing item
                (else_try),
                    (create_mesh_overlay_with_item_id, reg10, reg1),
                    (position_set_x, pos1, 450),
                    (position_set_y, pos1, 450),
                    (overlay_set_size, reg10, pos1),

                    (store_add, ":item_inv_slot_x", ":base_inv_slot_x", 25),
                    (store_add, ":item_inv_slot_y", ":base_inv_slot_y", 25),

                    (position_set_x, pos1, ":item_inv_slot_x"),
                    (position_set_y, pos1, ":item_inv_slot_y"),
                    (overlay_set_position, reg10, pos1),

                    # save id for reuse
                    (troop_set_slot, "trp_temp_array_a", ":item_eq", reg10),
                    (store_add, ":item_eq_id", ":item_eq", 10),
                    (troop_set_slot, "trp_temp_array_a", ":item_eq_id", reg1),
                # real items
                (try_end),
                (val_sub, ":base_inv_slot_y", 51),
            (try_end),
            # end loop equipments slots
        (try_end),

        # do an update if called from menu and reset init variable
        (try_begin),
            (eq, "$g_jrider_pres_called_from_menu", 1),
            (assign, "$g_jrider_pres_called_from_menu", 0),
        (try_end),
    ]),
    # end presentation load

    ## Mouse-over
    (ti_on_presentation_mouse_enter_leave,
      [
      (store_trigger_param_1, ":object"),
      (store_trigger_param_2, ":enter_leave"),

      (try_begin),
          (eq, "$g_character_presentation_type", 2),
          (try_begin),
              (eq, ":enter_leave", 0),
              (try_for_range, ":slot_no", 0, 9),
                  (troop_slot_eq, "trp_temp_array_a", ":slot_no", ":object"),
                  (store_add, ":slot_no_eq", ":slot_no", 10),
                  (troop_get_slot, ":item_no", "trp_temp_array_a", ":slot_no_eq"),

                  (set_fixed_point_multiplier, 1000),

                  (position_set_x,pos0,740),
                  (position_set_y,pos0,235),
                  (show_item_details, ":item_no", pos0, 100),
              (try_end),
          (else_try),
              (try_for_range, ":slot_no", 0, 9),
                (troop_slot_eq, "trp_temp_array_a", ":slot_no", ":object"),
                (close_item_details),
              (try_end),
          (try_end),
      (try_end),
    ]),
    # end mouseover

    ## Check for buttonpress
    (ti_on_presentation_event_state_change,
     [
        (store_trigger_param_1, ":object"), # object
        (store_trigger_param_2, ":value"),  # value

        (try_begin),
          # pressed  (Return to menu)
          (eq, ":object", "$g_jrider_faction_report_return_to_menu"),

          (try_begin),
              (neq, "$num_charinfo_candidates", 0),
              (overlay_set_text, "$g_jrider_character_information_text", "str_empty_string"),
              (overlay_set_alpha, "$g_jrider_last_checked_indicator", 0),
          (try_end),
          (presentation_set_duration, 0),
        (else_try),
          # Faction filter
          (eq, ":object", "$g_jrider_character_faction_filter"),
          (try_begin),
            (eq, ":value", 18),
            (assign, "$g_jrider_faction_filter", -1),
          (else_try),
            (assign, "$g_jrider_faction_filter", ":value"),
          (try_end),

          # reset selected to first
          (assign, "$g_jrider_reset_selected_on_faction", 1000),

          # restart presentation to take filters into account
          (start_presentation, "prsnt_jrider_character_relation_report"),

        (else_try),
          (neq, ":object", "$g_jrider_character_information_text"),
          (neq, ":object", "$g_jrider_character_portrait"),
          (neq, ":object", "$g_jrider_character_relation_listbox"),
          #(neq, ":object", "$g_jrider_faction_coat_of_arms"),
          # clicked on list entry
          # get storage index + base storage index
          (store_add, ":storage_button_id", ":object", "$g_base_character_presentation_storage_index"),
          (troop_get_slot, ":character_number", "trp_temp_array_b", ":storage_button_id"),

          (overlay_set_alpha, "$g_jrider_last_checked_indicator", 0),
          (overlay_set_color, "$g_jrider_last_checked_indicator", 0x000000),

          # update last entry and check variables
          (assign, "$g_latest_character_relation_entry", ":character_number"),
          (assign, "$g_jrider_last_checked_indicator", ":object"),

          # color selected entry
          (overlay_set_color, "$g_jrider_last_checked_indicator", 0x000000),
          (overlay_set_alpha, "$g_jrider_last_checked_indicator", 0x44),

          # get troop information from storage to update text
          (val_add, ":character_number", "$g_base_character_presentation_storage_index"),
          (troop_get_slot, "$character_info_id", "trp_temp_array_c", ":character_number"),

          # restart presentation to update picture and text
          (start_presentation, "prsnt_jrider_character_relation_report"),
    (try_end),
     ] # + generic_ti_on_presentation_event_state_change
     ),
     # end event state change

    ## Event to process when running the presentation
    (ti_on_presentation_run,
     # generic_ti_on_presentation_run +
     [
        (try_begin),
          (this_or_next|key_clicked, key_escape),
          (key_clicked, key_right_mouse_button),
          (presentation_set_duration, 0),
          (jump_to_menu, "mnu_reports"),
        (try_end),

        ]),
     # end presentation run
     ]),
    ###################################
    # Character relation presentation end
# Jrider -


##diplomacy end+

##SB : camera key selection
("redefine_keys", prsntf_manual_end_only, mesh_cb_ui_main, [
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    (call_script, "script_init_keys_array"),

    (try_for_range, ":strings", s1, s9),
      (str_clear, ":strings"),
    (try_end),
    (try_for_range, ":cur_slot", 0, len(keys)),
      (troop_get_slot, ":key_no", "trp_temp_array_a", ":cur_slot"),
      (store_add, ":dest_string", "str_key_0", ":cur_slot"),
      (try_begin),
        (eq, ":key_no", "$g_camera_adjust_add"),
        (str_store_string, s1, ":dest_string"),
      (else_try),
        (eq, ":key_no", "$g_camera_adjust_sub"),
        (str_store_string, s2, ":dest_string"),
      (else_try),
        (eq, ":key_no", "$g_cam_tilt_left"),
        (str_store_string, s3, ":dest_string"),
      (else_try),
        (eq, ":key_no", "$g_cam_tilt_right"),
        (str_store_string, s4, ":dest_string"),
      (else_try),
        (eq, ":key_no", "$g_camera_rot_up"),
        (str_store_string, s5, ":dest_string"),
      (else_try),
        (eq, ":key_no", "$g_camera_rot_down"),
        (str_store_string, s6, ":dest_string"),
      (else_try),
        (eq, ":key_no", "$g_camera_rot_left"),
        (str_store_string, s7, ":dest_string"),
      (else_try),
        (eq, ":key_no", "$g_camera_rot_right"),
        (str_store_string, s8, ":dest_string"),
      (try_end),
    (try_end),

    (assign, "$temp", -1),
    # (store_mul, ":cur_troop", "$g_player_troop", 2),
    (create_mesh_overlay_with_tableau_material, reg0, -1, "tableau_game_party_window", "trp_player"),
    (position_set_x, pos1, 350),
    (position_set_y, pos1, 125),
    (overlay_set_position, reg0, pos1),

    ## toggle default
    (create_text_overlay, reg1, "@Default camera mode", tf_center_justify),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 650),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1500),
    (position_set_y, pos1, 1500),
    (overlay_set_size, reg1, pos1),
    (create_combo_label_overlay, "$g_dplmc_cam_activated"),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 600),
    (overlay_set_position, "$g_dplmc_cam_activated", pos1),
    # (position_set_x, pos1, 2000),
    # (position_set_y, pos1, 2000),
    # (overlay_set_size, "$g_dplmc_cam_activated", pos1),

    (overlay_add_item, "$g_dplmc_cam_activated", "@Keyboard"),
    (overlay_add_item, "$g_dplmc_cam_activated", "@Mouse"),
    (overlay_add_item, "$g_dplmc_cam_activated", "@Follower"),
    (store_sub, ":value", "$g_dplmc_cam_default", 1),
    (overlay_set_val, "$g_dplmc_cam_activated", ":value"),

    ## buttons
    (create_text_overlay, reg1, "@Raise camera", tf_center_justify),
    (position_set_x, pos1, 200),
    (position_set_y, pos1, 600),
    (overlay_set_position, reg1, pos1),
    (create_game_button_overlay, "$g_presentation_obj_1", s1),
    (position_set_x, pos1, 200),
    (position_set_y, pos1, 550),
    (overlay_set_position, "$g_presentation_obj_1", pos1),


    (create_text_overlay, reg1, "@Lower camera", tf_center_justify),
    (position_set_x, pos1, 200),
    (position_set_y, pos1, 400),
    (overlay_set_position, reg1, pos1),
    (create_game_button_overlay, "$g_presentation_obj_2", s2),
    (position_set_x, pos1, 200),
    (position_set_y, pos1, 350),
    (overlay_set_position, "$g_presentation_obj_2", pos1),

    (try_begin),
      (eq, "$g_dplmc_cam_default", camera_mouse),
      (create_text_overlay, reg1, "@Lower sensitivity", tf_center_justify),
    (else_try),
      (eq, "$g_dplmc_cam_default", camera_keyboard),
      (create_text_overlay, reg1, "@Tilt left", tf_center_justify),
    (else_try),
      (eq, "$g_dplmc_cam_default", camera_follow),
      (create_text_overlay, reg1, "@Prev troop", tf_center_justify),
    (try_end),
    (position_set_x, pos1, 100),
    (position_set_y, pos1, 500),
    (overlay_set_position, reg1, pos1),
    (create_game_button_overlay, "$g_presentation_obj_3", s3),
    (position_set_x, pos1, 100),
    (position_set_y, pos1, 450),
    (overlay_set_position, "$g_presentation_obj_3", pos1),

    (try_begin),
      (eq, "$g_dplmc_cam_default", camera_mouse),
      (create_text_overlay, reg1, "@Raise sensitivity", tf_center_justify),
    (else_try),
      (eq, "$g_dplmc_cam_default", camera_keyboard),
      (create_text_overlay, reg1, "@Tilt right", tf_center_justify),
    (else_try),
      (eq, "$g_dplmc_cam_default", camera_follow),
      (create_text_overlay, reg1, "@Next troop", tf_center_justify),
    (try_end),
    (position_set_x, pos1, 300),
    (position_set_y, pos1, 500),
    (overlay_set_position, reg1, pos1),
    (create_game_button_overlay, "$g_presentation_obj_4", s4),
    (position_set_x, pos1, 300),
    (position_set_y, pos1, 450),
    (overlay_set_position, "$g_presentation_obj_4", pos1),

    (try_begin),
      (eq, "$g_dplmc_cam_default", camera_follow),
      (create_text_overlay, reg1, "@Zoom in", tf_center_justify),
    (else_try),
      (create_text_overlay, reg1, "@Rotate up", tf_center_justify),
    (try_end),
    (position_set_x, pos1, 800),
    (position_set_y, pos1, 600),
    (overlay_set_position, reg1, pos1),
    (create_game_button_overlay, "$g_presentation_obj_11", s5),
    (position_set_x, pos1, 800),
    (position_set_y, pos1, 550),
    (overlay_set_position, "$g_presentation_obj_11", pos1),

    (try_begin),
      (eq, "$g_dplmc_cam_default", camera_follow),
      (create_text_overlay, reg1, "@Zoom out", tf_center_justify),
    (else_try),
      (create_text_overlay, reg1, "@Rotate down", tf_center_justify),
    (try_end),
    (position_set_x, pos1, 800),
    (position_set_y, pos1, 400),
    (overlay_set_position, reg1, pos1),
    (create_game_button_overlay, "$g_presentation_obj_12", s6),
    (position_set_x, pos1, 800),
    (position_set_y, pos1, 350),
    (overlay_set_position, "$g_presentation_obj_12", pos1),

    (try_begin),
      (neq, "$g_dplmc_cam_default", camera_follow),
      (create_text_overlay, reg1, "@Rotate left", tf_center_justify),
      (position_set_x, pos1, 700),
      (position_set_y, pos1, 500),
      (overlay_set_position, reg1, pos1),
    (try_end),

    (create_game_button_overlay, "$g_presentation_obj_13", s7),
    (position_set_x, pos1, 700),
    (position_set_y, pos1, 450),
    (overlay_set_position, "$g_presentation_obj_13", pos1),

    (try_begin),
      (neq, "$g_dplmc_cam_default", camera_follow),
      (create_text_overlay, reg1, "@Rotate right", tf_center_justify),
      (position_set_x, pos1, 900),
      (position_set_y, pos1, 500),
      (overlay_set_position, reg1, pos1),
    (try_end),

    (create_game_button_overlay, "$g_presentation_obj_14", s8),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 450),
    (overlay_set_position, "$g_presentation_obj_14", pos1),

    (create_text_overlay, "$g_presentation_obj_item_select_next", "@Press a key", tf_center_justify|tf_with_outline),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 450),
    (overlay_set_position, "$g_presentation_obj_item_select_next", pos1),
    (position_set_x, pos1, 2000),
    (position_set_y, pos1, 2000),
    (overlay_set_size, "$g_presentation_obj_item_select_next", pos1),
    (overlay_set_color, "$g_presentation_obj_item_select_next", 0xFFFFFF), #white since we have black bg
    (overlay_set_display, "$g_presentation_obj_item_select_next", 0),

    # done
    (create_game_button_overlay, "$g_close_equipment_selection", "str_done"),
    (position_set_x, pos1, 800),
    (position_set_y, pos1, 125),
    (overlay_set_position, "$g_close_equipment_selection", pos1),

    # reset
    (create_game_button_overlay, "$g_show_no_more_respawns_remained", "str_reset_to_default"),
    (position_set_x, pos1, 800),
    (position_set_y, pos1, 200),
    (overlay_set_position, "$g_show_no_more_respawns_remained", pos1),

    # description
    (store_sub, ":string", "$g_dplmc_cam_default", 1),
    (val_add, ":string", "str_camera_keyboard"),
    (create_text_overlay, reg1, ":string", tf_scrollable),
    (position_set_x, pos1, 40),
    (position_set_y, pos1, 60),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 260),
    (position_set_y, pos1, 240),
    (overlay_set_area_size, reg1, pos1),
  ]),

  (ti_on_presentation_run,[
    ####### mouse fix pos system #######
    #(call_script, "script_mouse_fix_pos_run"),
    ####### mouse fix pos system #######

    #When key is held down, change actual camera values?

    (try_begin),
      (gt, "$temp", -1),
      (overlay_set_display, "$g_presentation_obj_item_select_next", 1),
    (else_try),
      (overlay_set_display, "$g_presentation_obj_item_select_next", 0),
    (try_end),
    (try_for_range, ":cur_slot", 0, len(keys)),
      (troop_get_slot, ":key_no", "trp_temp_array_a", ":cur_slot"),
      (key_clicked, ":key_no"),
      (gt, "$temp", -1),
      (try_begin),
        (eq, "$temp", "$g_presentation_obj_1"),
        (assign, "$g_camera_adjust_add", ":key_no"),
      (else_try),
        (eq, "$temp", "$g_presentation_obj_2"),
        (assign, "$g_camera_adjust_sub", ":key_no"),
      (else_try),
        (eq, "$temp", "$g_presentation_obj_3"),
        (assign, "$g_cam_tilt_left", ":key_no"),
      (else_try),
        (eq, "$temp", "$g_presentation_obj_4"),
        (assign, "$g_cam_tilt_right", ":key_no"),
      (else_try),
        (eq, "$temp", "$g_presentation_obj_11"),
        (assign, "$g_camera_rot_up", ":key_no"),
      (else_try),
        (eq, "$temp", "$g_presentation_obj_12"),
        (assign, "$g_camera_rot_down", ":key_no"),
      (else_try),
        (eq, "$temp", "$g_presentation_obj_13"),
        (assign, "$g_camera_rot_left", ":key_no"),
      (else_try),
        (eq, "$temp", "$g_presentation_obj_14"),
        (assign, "$g_camera_rot_right", ":key_no"),
      (try_end),
      (store_add, ":dest_string", "str_key_0", ":cur_slot"),
      (str_store_string, s1, ":dest_string"),
      (overlay_set_text, "$temp", s1),
      (overlay_set_alpha, "$temp", 0xff),
      (assign, "$temp", -1),
    (try_end),
  ]),

  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":object"),

    (set_fixed_point_multiplier, 1000),
    (try_begin),
      (eq, ":object", "$g_show_no_more_respawns_remained"),
      (call_script, "script_setup_camera_keys"),
    (else_try), #toggling camera mode means reloading string descriptions
      (eq, ":object", "$g_dplmc_cam_activated"),
      (store_trigger_param_2, ":value"),
      (store_add, "$g_dplmc_cam_default", ":value", 1),
    (else_try),
      (eq, ":object", "$g_close_equipment_selection"),
      # provide actual exit conditions
      (assign, "$g_presentation_next_presentation", -1),
      # (try_begin),
        # (gt, "$g_presentation_next_presentation", 0),
        # (presentation_set_duration, 0),
        # (start_presentation, "$g_presentation_next_presentation"),
      # (else_try),
        # (presentation_set_duration, 0),
      # (try_end),
    (else_try),
      (gt, ":object", -1),
        #reset to black
      (overlay_set_alpha, "$g_presentation_obj_1", 0xff),
      (overlay_set_alpha, "$g_presentation_obj_2", 0xff),
      (overlay_set_alpha, "$g_presentation_obj_3", 0xff),
      (overlay_set_alpha, "$g_presentation_obj_4", 0xff),

      (overlay_set_alpha, "$g_presentation_obj_11",0xff),
      (overlay_set_alpha, "$g_presentation_obj_12",0xff),
      (overlay_set_alpha, "$g_presentation_obj_13",0xff),
      (overlay_set_alpha, "$g_presentation_obj_14",0xff),
      (assign, "$temp", ":object"),
      (overlay_set_alpha, "$temp", 0x80),
    (try_end),
    (try_begin),#done/reset
      (eq, ":object", "$g_close_equipment_selection"),
      (assign, "$temp", 0),
      (presentation_set_duration, 0),
    (else_try),
      (this_or_next|eq, ":object", "$g_show_no_more_respawns_remained"),
      (eq, ":object", "$g_dplmc_cam_activated"),
      (assign, "$temp", 0),
      (start_presentation, "prsnt_redefine_keys"),
    (try_end),
  ]),
]),

#SB : custom commander presentation for kingdom management and export/import, not battle stuff
("companion_overview", 0, mesh_load_window, [
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    # font size
    (position_set_x, pos10, 925),
    (position_set_y, pos10, 925),

    (create_game_button_overlay, "$g_presentation_obj_2", "str_done"),
    (position_set_x, pos1, 870),
    (position_set_y, pos1, 10),
    (overlay_set_position, "$g_presentation_obj_2", pos1),
    (overlay_set_color, "$g_presentation_obj_2", 0xFFFFFF),

    (assign, "$g_presentation_obj_4", -1),
    (try_begin),
      (is_between, "$temp_troop", companions_begin, companions_end),
      (troop_get_slot, ":party", "$temp_troop", slot_troop_leaded_party),
      (party_is_active, ":party"),
      (create_game_button_overlay, "$g_presentation_obj_4", "@Send a message"),
      (position_set_x, pos1, 430),
      (position_set_y, pos1, 10),
      (overlay_set_position, "$g_presentation_obj_4", pos1),
      (overlay_set_color, "$g_presentation_obj_4", 0xFFFFFF),
    (try_end),

    (assign, "$g_presentation_obj_3", -1),
    (try_begin),
      (neq, "$temp_troop", "trp_player"),
      (create_game_button_overlay, "$g_presentation_obj_3", "@Export/Import"),
      (position_set_x, pos1, 650),
      (position_set_y, pos1, 10),
      (overlay_set_position, "$g_presentation_obj_3", pos1),
      (overlay_set_color, "$g_presentation_obj_3", 0xFFFFFF),
    (try_end),

    (assign, ":pos_x", 150),
    (assign, ":pos_y", 0),
    (try_for_range, ":stack_troop", active_npcs_including_player_begin, kingdom_ladies_end),
      (assign, reg1, 0),
      (try_begin),
        (this_or_next|troop_slot_eq, "trp_player", slot_troop_spouse, ":stack_troop"),
        (this_or_next|eq, ":stack_troop", active_npcs_including_player_begin), #player placeholder
        (troop_slot_eq, ":stack_troop", slot_troop_occupation, slto_player_companion),
        (assign, reg1, 1),
      (else_try),
        (troop_slot_eq, ":stack_troop", slot_troop_occupation, slto_kingdom_hero),
        (is_between, ":stack_troop", companions_begin, companions_end),
        (assign, reg1, 1),
      (try_end),
      (eq, reg1, 1),
      (val_add, ":pos_y", 30),
    (try_end),

    (str_clear, s0),
    (create_text_overlay, "$g_presentation_obj_admin_panel_container", s0, tf_scrollable),
    (position_set_x, pos1, 705),
    (position_set_y, pos1, 50),
    (overlay_set_position, "$g_presentation_obj_admin_panel_container", pos1),
    (position_set_x, pos1, 375),
    (position_set_y, pos1, 675),
    (overlay_set_area_size, "$g_presentation_obj_admin_panel_container", pos1),
    (set_container_overlay, "$g_presentation_obj_admin_panel_container"),

    (try_for_range, ":stack_troop", active_npcs_including_player_begin, kingdom_ladies_end),
      (assign, reg1, 0),
      (try_begin),
        (this_or_next|troop_slot_eq, "trp_player", slot_troop_spouse, ":stack_troop"),
        (this_or_next|eq, ":stack_troop", active_npcs_including_player_begin), #player placeholder
        (troop_slot_eq, ":stack_troop", slot_troop_occupation, slto_player_companion),
        (assign, reg1, 1),
      (else_try),
        (troop_slot_eq, ":stack_troop", slot_troop_occupation, slto_kingdom_hero),
        (is_between, ":stack_troop", companions_begin, companions_end),
        (assign, reg1, 1),
      (try_end),
      (eq, reg1, 1),

      (try_begin),
        (eq, ":stack_troop", active_npcs_including_player_begin),
        (assign, ":stack_troop", "trp_player"),
      (try_end),

      (position_set_x, pos1, ":pos_x"),
      (position_set_y, pos1, ":pos_y"),
      (val_sub, ":pos_y", 30),

      (try_begin),
        (neq, ":stack_troop", "trp_player"),
        (call_script, "script_companion_get_mission_string", ":stack_troop"),
        (str_store_string, s0, "@{s4} ({s5})"),
      (else_try),
        (str_store_troop_name, s4, ":stack_troop"),
        (str_store_string, s0, "@{s4} (You)"),
      (try_end),
      (create_button_overlay, ":obj", s0, tf_center_justify),
      (try_begin),
        (eq, ":stack_troop", "$temp_troop"),
        (overlay_set_alpha, ":obj", 0xCC),
      (else_try),
        (overlay_set_alpha, ":obj", 0x99),
      (try_end),
      (overlay_set_size, ":obj", pos10),

      (overlay_set_position, ":obj", pos1),
      (try_begin),
        (troop_is_wounded, ":stack_troop"),
        (overlay_set_color, ":obj", 0xFF0000),
      (try_end),
      (troop_set_slot, ":stack_troop", dplmc_slot_troop_temp_slot, ":obj"),
    (try_end),
    (set_container_overlay, -1),
    ################

    (store_mul, ":cur_troop", "$temp_troop", 2), #with weapons
    (create_image_button_overlay_with_tableau_material, "$g_presentation_obj_1", -1, "tableau_game_party_window", ":cur_troop"),
    (position_set_x, pos1, 675),
    (position_set_y, pos1, 900),
    (overlay_set_size, "$g_presentation_obj_1", pos1),
    (position_set_x, pos1, -25),
    (position_set_y, pos1, 50),
    (overlay_set_position, "$g_presentation_obj_1", pos1),

    (try_begin), #vital statistics like killcount/renown/honor/rtr
    (else_try),
      (troop_slot_eq, "$temp_troop", slot_troop_occupation, slto_kingdom_hero),
      (call_script, "script_troop_get_player_relation", "$temp_troop"),
      (assign, reg1, reg0),
      (str_store_string, s2, "str_relation_reg1"),
      (str_clear, s0),
      (try_begin), #too lazy to get custom vassal titles, use the nicely formatted presets
        (call_script, "script_cf_dplmc_troop_is_female", "$temp_troop"),
        (str_store_string, s1, "str_faction_title_female_player"),
      (else_try),
        (str_store_string, s1, "str_faction_title_male_player"),
      (try_end),
      (call_script, "script_print_troop_owned_centers_in_numbers_to_s0", "$temp_troop"),
      (troop_get_slot, reg2, "$temp_troop", slot_troop_renown),
      (str_store_string, s0, "@ Renown: {reg2}^{s2}^{s1}of {s0}"),
    (try_end),

    (assign, ":cur_x", 0),
    (assign, ":cur_y", 0),

    (str_clear, s0),
    (create_text_overlay, reg0, s0, tf_scrollable),
    (position_set_x, pos1, 125),
    (position_set_y, pos1, 90),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 225),
    (position_set_y, pos1, 200),
    (overlay_set_area_size, reg0, pos1),
    (set_container_overlay, reg0),

    (try_begin),
      (neq, "$temp_troop", "trp_player"),

      (try_begin),
        (main_party_has_troop, "$temp_troop"),
        (str_store_string, s1, "@Morale:"),
        (create_text_overlay, reg0, s1, tf_double_space),
        (position_set_x, pos1, ":cur_x"),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_size, reg0, pos10),

        (call_script, "script_dplmc_npc_morale", "$temp_troop", 0),
        (assign, reg3, reg0),
        (create_text_overlay, reg0, "@{reg3}", tf_double_space),
        (val_add, ":cur_x", 50),
        (position_set_x, pos1, ":cur_x"),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_size, reg0, pos10),
        (try_begin),
          (ge, reg3, 65),
          (overlay_set_color, reg0, 0x004000),
        (else_try),
          (le, reg3, 25),
          (overlay_set_color, reg0, 0xC62D42),
        (else_try),
          (overlay_set_color, reg0, 0x667B68),
        (try_end),
        (val_sub, ":cur_x", 50),
        (val_add, ":cur_y", 25),
      (try_end),

      (str_clear, s0),
      (try_begin),
        (call_script, "script_companion_get_mission_string", "$temp_troop"),

        (str_store_string, s1, "@Mission:"),
        (create_text_overlay, reg0, s1, tf_double_space),
        (position_set_x, pos1, ":cur_x"),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_size, reg0, pos10),

        (neg|str_is_empty, s0),
        (create_text_overlay, reg0, "@{s8}", tf_double_space),
        (val_add, ":cur_x", 50),
        (position_set_x, pos1, ":cur_x"),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_size, reg0, pos10),
        (overlay_set_color, reg0, 0x004000),
        (val_sub, ":cur_x", 50),
        (val_add, ":cur_y", 25),

        (str_store_string, s1, "@Location:"),
        (create_text_overlay, reg0, s1, tf_double_space),
        (position_set_x, pos1, ":cur_x"),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_size, reg0, pos10),

        (neg|str_is_empty, s0),
        (create_text_overlay, reg0, "@{s5}", tf_double_space),
        (val_add, ":cur_x", 50),
        (position_set_x, pos1, ":cur_x"),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_size, reg0, pos10),
        (overlay_set_color, reg0, 0x004000),
        (val_sub, ":cur_x", 50),
        (val_add, ":cur_y", 25),
      (try_end),
    (try_end),

    (str_store_string, s1, "@Health:"),
    (create_text_overlay, reg0, s1, tf_double_space),
    (position_set_x, pos1, ":cur_x"),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos10),

    (store_troop_health, reg3, "$temp_troop", 1),
    (store_troop_health, reg2, "$temp_troop", 0),
    (call_script, "script_dplmc_get_troop_max_hp", "$temp_troop"),

    (create_text_overlay, reg0, "@{reg3} / {reg0} ({reg2} %)", tf_double_space),
    (val_add, ":cur_x", 50),
    (position_set_x, pos1, ":cur_x"),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos10),

    (try_begin),
      (gt, reg2, 90),
      (overlay_set_color, reg0, 0x004000),
    (else_try),
      (lt, reg2, 20),
      (overlay_set_color, reg0, 0xC62D42),
    (else_try),
      (overlay_set_color, reg0, 0x667B68),
    (try_end),
    (val_sub, ":cur_x", 50),
    (val_add, ":cur_y", 25),

    (str_store_string, s1, "@Level:"),
    (create_text_overlay, reg0, s1, tf_double_space),
    (position_set_x, pos1, ":cur_x"),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos10),

    (store_character_level, reg3, "$temp_troop"),
    (create_text_overlay, reg0, "@{reg3}", tf_double_space),
    (val_add, ":cur_x", 50),
    (position_set_x, pos1, ":cur_x"),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos10),
    (try_begin),
      (gt, reg3, 10),
      (overlay_set_color, reg0, 0x004000),
    (else_try),
      (overlay_set_color, reg0, 0x667B68),
    (try_end),
    (val_sub, ":cur_x", 50),
    (val_add, ":cur_y", 25),

    (val_add, ":cur_y", 10),

    (str_store_string, s1, "@Other information:"),
    (create_text_overlay, reg0, s1, tf_double_space),
    (position_set_x, pos1, ":cur_x"),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos10),
    (overlay_set_color, reg0, 0x4C6CA8),

    (set_container_overlay, -1),

    (assign, ":init_pos_x", 219),
    (assign, ":init_pos_y", 683),
    (assign, ":cur_troop", "$temp_troop"),

    (store_add, ":pos_x", ":init_pos_x", 140),
    (store_add, ":pos_y", ":init_pos_y", 2),
    (position_set_x, pos1, 259),
    (position_set_y, pos1, ":init_pos_y"),
    (create_text_overlay, reg1, "@Arms", tf_center_justify),
    (overlay_set_position, reg1, pos1),

    (create_text_overlay, reg1, "@Outfit", tf_center_justify),
    (store_add, ":pos_x", ":init_pos_x", -55),
    (store_add, ":pos_y", ":init_pos_y", 2),
    (position_set_x, pos1, ":pos_x"),
    (position_set_y, pos1, ":pos_y"),
    (overlay_set_position, reg1, pos1),

    (create_text_overlay, reg1, "@Horse", tf_center_justify),
    (store_add, ":pos_x", ":init_pos_x", -140),
    (store_add, ":pos_y", ":init_pos_y", -278),
    (position_set_x, pos1, ":pos_x"),
    (position_set_y, pos1, ":pos_y"),
    (overlay_set_position, reg1, pos1),

    (assign, "$g_current_opened_item_details", -1),

    (assign, ":pos_x", ":init_pos_x"),
    (assign, ":pos_y", ":init_pos_y"),
    (try_for_range, ":slot_no", ek_item_0, ek_food),
      (try_begin),
        (eq, ":slot_no", ek_head),
        (val_sub, ":pos_x", 96),
        (assign, ":pos_y", ":init_pos_y"),
      (else_try),
        (eq, ":slot_no", ek_gloves),
        (val_sub, ":pos_x", 95),
        (store_sub, ":pos_y", ":init_pos_y", 85),
      (else_try),
        (eq, ":slot_no", ek_horse),
        (val_sub, ":pos_y", 108),
      (try_end),
      (val_sub, ":pos_y", 85),

      (troop_get_inventory_slot, ":cur_item", ":cur_troop", ":slot_no"),
      (position_set_x, pos1, ":pos_x"),
      (position_set_y, pos1, ":pos_y"),
      (store_add, ":item_x", ":pos_x", 40),
      (store_add, ":item_y", ":pos_y", 40),
      (try_begin), # item mesh
        (lt, ":cur_item", 0),
        (assign, ":cur_item", 0),
        (troop_set_slot, "trp_temp_array_c", ":slot_no", -1),
      (else_try),
        (create_mesh_overlay_with_item_id, reg1, ":cur_item"), #this has the problem of not respecting alternative imod meshes
        (position_set_x, pos1, 780),
        (position_set_y, pos1, 780),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, ":item_x"),
        (position_set_y, pos1, ":item_y"),
        (overlay_set_position, reg1, pos1),
        (troop_set_slot, "trp_temp_array_c", ":slot_no", reg1),
      (try_end),
      (create_mesh_overlay, reg1, "mesh_mp_inventory_choose"),
      (store_sub, ":item_x", ":pos_x", 4),
      (store_sub, ":item_y", ":pos_y", 4),
      (position_set_x, pos1, ":item_x"),
      (position_set_y, pos1, ":item_y"),
      (overlay_set_position, reg1, pos1),
      (position_set_x, pos1, 712),
      (position_set_y, pos1, 650),
      (overlay_set_size, reg1, pos1),
      (overlay_set_alpha, reg1, 0xFF),
    (try_end),

    (str_clear, s5),
    (str_clear, s6),
    (str_clear, s7),
    (str_clear, s18),
    (str_clear, s19),
    (str_clear, s20),
    (try_begin),
      (eq, "$temp_troop", "trp_player"),
      (str_store_string, s5, "@Always remember the following:"),
      (str_store_string, s6, "@Acta non verba!"),
      (str_store_string, s7, "@Abducet praedam, qui occurit prior!"),
      (str_store_string, s18, "@{s5}^^{s6}^^{s7}"),
    (else_try),
      (is_between, "$temp_troop", companions_begin, companions_end),
      (try_begin),
        (eq, "$temp_troop", "trp_mathildiz"),
        (str_store_string, s18, "str_npc39_backstory_a"),
      (else_try),
        (eq, "$temp_troop", "trp_turakina"),
        (str_store_string, s18, "str_npc41_backstory_a"),
      (else_try),
        (troop_get_slot, ":home", "$temp_troop", slot_troop_home),
        (ge, ":home", 1),
        (troop_get_slot, ":first_met", "$temp_troop", slot_troop_first_encountered),
        (troop_get_slot, ":recap", "$temp_troop", slot_troop_home_recap),
        (troop_get_slot, ":backstory", "$temp_troop", slot_troop_backstory_b),
        (troop_get_slot, ":signup", "$temp_troop", slot_troop_signup_2),
        (str_store_party_name, s20, ":first_met"),
        (str_store_party_name, s21, ":home"),
        (str_store_string, s5, ":recap"),
        (str_store_string, s6, ":backstory"),
        (str_store_string, s7, ":signup"),
        (str_store_string, s18, "@{s5}^^{s6}^^{s7}"),
      (else_try),
        (str_store_string, s5, "str_npc35_home_intro"),
        (str_store_string, s6, "str_npc35_backstory_a"),
        (str_store_string, s18, "@{s5}^^{s6}"),
      (try_end),
    (try_end),

    (try_begin),
      (neg|str_is_empty, s18),
      (create_text_overlay, ":obj", "@{s18}", tf_scrollable),
      (position_set_x, pos1, 320),
      (position_set_y, pos1, 580),
      (overlay_set_position, ":obj", pos1),
      (position_set_x, pos1, 385),
      (position_set_y, pos1, 145),
      (overlay_set_area_size, ":obj", pos1),
      (overlay_set_size, ":obj", pos10),
    (try_end),

    (assign, ":cur_x", 0),
    (assign, ":cur_y", 175),

    (str_clear, s0),
    (create_text_overlay, reg0, s0, tf_scrollable),
    (position_set_x, pos1, 350),
    (position_set_y, pos1, 50),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 375),
    (position_set_y, pos1, 525),
    (overlay_set_area_size, reg0, pos1),
    (set_container_overlay, reg0),

    (try_for_range_backwards, ":attribute", ca_strength, ca_charisma + 1),
      (store_add, ":string", ":attribute", "str_mcc_str"),
      (str_store_string, s20, ":string"),

      (create_text_overlay, reg0, "@{s20}:", tf_double_space),
      (position_set_x, pos1, ":cur_x"),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, reg0, pos1),
      (overlay_set_size, reg0, pos10),

      (store_attribute_level, reg1, "$temp_troop", ":attribute"),
      (create_text_overlay, reg0, "@{reg1}", tf_double_space),
      (val_add, ":cur_x", 40),
      (position_set_x, pos1, ":cur_x"),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, reg0, pos1),
      (overlay_set_size, reg0, pos10),
      (try_begin),
        (gt, reg1, 0),
        (overlay_set_color, reg0, 0x004000),
      (else_try),
        (overlay_set_color, reg0, 0x667B68),
      (try_end),
      (val_sub, ":cur_x", 40),
      (val_add, ":cur_y", 25),
    (try_end),
    (create_text_overlay, reg0, "@Attributes:", tf_double_space),
    (position_set_x, pos1, ":cur_x"),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos10),
    (overlay_set_color, reg0, 0x4C6CA8),
    (val_add, ":cur_y", 40),

    (try_for_range_backwards, ":prof", wpt_one_handed_weapon, wpt_firearm + 1),
      (store_add, ":string", ":prof", "str_wpt_one_handed_weapon"),
      (str_store_string, s20, ":string"),

      (create_text_overlay, reg0, "@{s20}:", tf_double_space),
      (position_set_x, pos1, ":cur_x"),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, reg0, pos1),
      (overlay_set_size, reg0, pos10),

      (store_proficiency_level, reg1, "$temp_troop", ":prof"),
      (create_text_overlay, reg0, "@{reg1}", tf_double_space),
      (val_add, ":cur_x", 135),
      (position_set_x, pos1, ":cur_x"),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, reg0, pos1),
      (overlay_set_size, reg0, pos10),
      (try_begin),
        (gt, reg1, 0),
        (overlay_set_color, reg0, 0x004000),
      (else_try),
        (overlay_set_color, reg0, 0x667B68),
      (try_end),
      (val_sub, ":cur_x", 135),
      (val_add, ":cur_y", 25),
    (try_end),
    (create_text_overlay, reg0, "@Proficiencies:", tf_double_space),
    (position_set_x, pos1, ":cur_x"),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos10),
    (overlay_set_color, reg0, 0x4C6CA8),

    (assign, ":cur_y", 0),
    (assign, ":cur_x", 200),

    (try_for_range_backwards, ":skill", skl_trade, skl_ironflesh + 1),
      (neq, ":skill", "skl_reserved_1"),
      (neq, ":skill", "skl_reserved_2"),
      (neq, ":skill", "skl_reserved_3"),
      (neq, ":skill", "skl_reserved_5"),
      (neq, ":skill", "skl_reserved_6"),
      (neq, ":skill", "skl_reserved_7"),
      (neq, ":skill", "skl_reserved_8"),
      (neq, ":skill", "skl_reserved_9"),
      (neq, ":skill", "skl_reserved_10"),
      (neq, ":skill", "skl_reserved_11"),
      (neq, ":skill", "skl_reserved_12"),
      (neq, ":skill", "skl_reserved_13"),
      (neq, ":skill", "skl_reserved_14"),
      (neq, ":skill", "skl_reserved_15"),
      (neq, ":skill", "skl_reserved_16"),
      (neq, ":skill", "skl_reserved_17"),
      (neq, ":skill", "skl_reserved_18"),
      (store_add, ":string", "str_skl_trade", ":skill"),
      (str_store_string, s20, ":string"),

      (create_text_overlay, reg0, "@{s20}:", tf_double_space),
      (position_set_x, pos1, ":cur_x"),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, reg0, pos1),
      (overlay_set_size, reg0, pos10),

      (store_skill_level, reg1, ":skill", "$temp_troop"),
      (create_text_overlay, reg0, "@{reg1}", tf_double_space),
      (val_add, ":cur_x", 140),
      (position_set_x, pos1, ":cur_x"),
      (position_set_y, pos1, ":cur_y"),
      (overlay_set_position, reg0, pos1),
      (overlay_set_size, reg0, pos10),
      (try_begin),
        (gt, reg1, 0),
        (overlay_set_color, reg0, 0x004000),
      (else_try),
        (overlay_set_color, reg0, 0x667B68),
      (try_end),
      (val_sub, ":cur_x", 140),
      (val_add, ":cur_y", 20),
    (try_end),
    (create_text_overlay, reg0, "@Skills:", tf_double_space),
    (position_set_x, pos1, ":cur_x"),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg0, pos1),
    (overlay_set_size, reg0, pos10),
    (overlay_set_color, reg0, 0x4C6CA8),

    (set_container_overlay, -1),
  ]),
  ##show details
  (ti_on_presentation_mouse_enter_leave,[
    (store_trigger_param_1, ":object"),
    (store_trigger_param_2, ":enter_leave"),
    (try_for_range, ":item_slot", ek_item_0, ek_food),
      (troop_slot_eq, "trp_temp_array_c", ":item_slot", ":object"),
      (try_begin), #entering, show details
        (eq, ":enter_leave", 0),
        #find item
        (troop_get_inventory_slot, ":item_no", "$temp_troop", ":item_slot"),
        (gt, ":item_no", -1),
        (troop_get_inventory_slot_modifier, ":imod_no", "$temp_troop", ":item_slot"),
        (overlay_get_position, pos1, ":object"),
        (show_item_details_with_modifier, ":item_no", ":imod_no", pos1, 100),
      (else_try), #close it
        (eq, ":enter_leave", 1),
        (close_item_details),
      (try_end),
    (try_end),
  ]),

  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":object"),

    (try_begin), #tableau clicked
      (eq, ":object", "$g_presentation_obj_1"),
      (change_screen_notes, 1, "$temp_troop"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_4"),
      (jump_to_menu, "mnu_send_message_to_companion"),
      (presentation_set_duration, 0),
    (else_try), #done
      (eq, ":object", "$g_presentation_obj_2"),
      (presentation_set_duration, 0),
      (jump_to_menu, "mnu_reports"),
    (else_try), #export/import
      (eq, ":object", "$g_presentation_obj_3"),
      (jump_to_menu, "mnu_export_import"),
      (set_player_troop, "$temp_troop"),
      (presentation_set_duration, 0),
    (try_end),

    (try_for_range, ":stack_troop", active_npcs_including_player_begin, kingdom_ladies_end),
      (assign, reg1, 0),
      (try_begin),
        (this_or_next|troop_slot_eq, "trp_player", slot_troop_spouse, ":stack_troop"),
        (this_or_next|eq, ":stack_troop", active_npcs_including_player_begin), #player placeholder
        (troop_slot_eq, ":stack_troop", slot_troop_occupation, slto_player_companion),
        (assign, reg1, 1),
      (else_try),
        (troop_slot_eq, ":stack_troop", slot_troop_occupation, slto_kingdom_hero),
        (is_between, ":stack_troop", companions_begin, companions_end),
        (assign, reg1, 1),
      (try_end),
      (eq, reg1, 1),

      (try_begin),
        (eq, ":stack_troop", active_npcs_including_player_begin),
        (assign, ":stack_troop", "trp_player"),
      (try_end),
      (troop_slot_eq, ":stack_troop", dplmc_slot_troop_temp_slot, ":object"),

      (assign, "$temp_troop", ":stack_troop"),
      (start_presentation, "prsnt_companion_overview"),
    (try_end),
  ]),
]),


  #called from various menus with $g_presentation_input:
  # $g_encountered_party as the party
  # $g_talk_troop as the troop
  # $g_cheat_selected_faction as the faction
  #and $g_presentation_state as the slot index
  ("modify_slots", 0, 0, [
    (ti_on_presentation_load,
      [ (set_show_messages, 0),
        (presentation_set_duration, 999999),
        (set_fixed_point_multiplier, 1000),

        (create_mesh_overlay, reg0, "mesh_message_window"),
        (position_set_x, pos1, 224),
        (position_set_y, pos1, 230),
        (overlay_set_position, reg0, pos1),

        (try_begin),
          (eq, "$g_presentation_input", rename_center),
          (party_get_slot, ":slot_value", "$g_encountered_party", "$g_presentation_state"),
        (else_try),
          (eq, "$g_presentation_input", rename_companion),
          (troop_get_slot, ":slot_value", "$g_talk_troop", "$g_presentation_state"),
        (else_try),
          (eq, "$g_presentation_input", rename_kingdom),
          (faction_get_slot, ":slot_value", "$g_cheat_selected_faction", "$g_presentation_state"),
        (try_end),
        (assign, reg1, ":slot_value"),
        (create_text_overlay, reg0, "@{reg1}^value", tf_center_justify|tf_vertical_align_center),
        (position_set_x, pos1, 630),
        (position_set_y, pos1, 320),
        (overlay_set_position, reg0, pos1),

        (assign, reg2, "$g_presentation_state"),
        (create_text_overlay, reg0, "@{reg2}^index", tf_center_justify|tf_vertical_align_center),
        (position_set_x, pos1, 370),
        (position_set_y, pos1, 320),
        (overlay_set_position, reg0, pos1),

        (position_set_x, pos1, 340),
        (position_set_y, pos1, 380),
        (create_number_box_overlay, "$g_presentation_obj_1", 0, 1000),
        (overlay_set_position, "$g_presentation_obj_1", pos1),
        (overlay_set_val, "$g_presentation_obj_1", "$g_presentation_state"),

        (position_set_x, pos1, 600),
        (position_set_y, pos1, 380),
        (create_number_box_overlay, "$g_presentation_obj_2", -10000, 10000), #probably sufficient
        (overlay_set_position, "$g_presentation_obj_2", pos1),
        (overlay_set_val, "$g_presentation_obj_2", ":slot_value"),

        # (create_game_button_overlay, "$g_presentation_obj_3", "str_done"),
        (try_begin),
          (eq, "$g_presentation_input", rename_center),
          (str_store_party_name, s1, "$g_encountered_party"),
        (else_try),
          (eq, "$g_presentation_input", rename_companion),
          (str_store_troop_name, s1, "$g_talk_troop"),
        (else_try),
          (eq, "$g_presentation_input", rename_kingdom),
          (str_store_faction_name, s1, "$g_cheat_selected_faction"),
        (try_end),
        (create_game_button_overlay, "$g_presentation_obj_3", s1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 250),
        (overlay_set_position, "$g_presentation_obj_3", pos1),
      ]),

    (ti_on_presentation_event_state_change,
      [
        (store_trigger_param_1, ":object"),
        (store_trigger_param_2, ":value"),

        (try_begin), #change slots
          (eq, ":object", "$g_presentation_obj_1"),
          (assign, "$g_presentation_state", ":value"),
          (start_presentation, "prsnt_modify_slots"),
        (else_try), #change values
          (eq, ":object", "$g_presentation_obj_2"),
          (try_begin),
            (eq, "$g_presentation_input", rename_center),
            (party_set_slot, "$g_encountered_party", "$g_presentation_state", ":value"),
          (else_try),
            (eq, "$g_presentation_input", rename_companion),
            (troop_set_slot, "$g_talk_troop", "$g_presentation_state", ":value"),
          (else_try),
            (eq, "$g_presentation_input", rename_kingdom),
            (faction_set_slot, "$g_cheat_selected_faction", "$g_presentation_state", ":value"),
          (try_end),
          # (start_presentation, "prsnt_modify_slots"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_3"),
          (set_show_messages, 1),
          (presentation_set_duration, 0),
        (try_end),
    ]),
  ]),

  ("deposit_withdraw_money", 0, 0, [
    (ti_on_presentation_load,
      [ (set_show_messages, 0),
        (presentation_set_duration, 999999),
        (set_fixed_point_multiplier, 1000),
        # (call_script, "script_get_chest_troop", "$current_town"),
        # (assign, ":chest_troop", reg0),
        (store_troop_gold, ":account_money", "$pool_troop"),
        (store_troop_gold, ":player_money", "trp_player"),

        (create_mesh_overlay, reg0, "mesh_message_window"),
        (position_set_x, pos1, 224),
        (position_set_y, pos1, 230),
        (overlay_set_position, reg0, pos1),

        #string qualifiers
        (try_begin),
          (eq, "$pool_troop", "trp_household_possessions"),
          (assign, reg5, 1),
        (else_try),
          (assign, reg5, 0),
        (try_end),
        (assign, reg6, ":account_money"),
        (create_text_overlay, reg0, "@{reg6}^money in the {reg5?treasury:chest}", tf_center_justify|tf_vertical_align_center),
        (position_set_x, pos1, 370),
        (position_set_y, pos1, 320),
        (overlay_set_position, reg0, pos1),

        (assign, reg4, ":player_money"),
        (create_text_overlay, reg0, "@{reg4}^money in your inventory", tf_center_justify|tf_vertical_align_center),
        (position_set_x, pos1, 630),
        (position_set_y, pos1, 320),
        (overlay_set_position, reg0, pos1),

        (create_combo_button_overlay, "$g_presentation_obj_1"),
        (position_set_x, pos1, 480),
        (position_set_y, pos1, 380),
        (overlay_set_position, "$g_presentation_obj_1", pos1),
        (position_set_x, pos1, 800),
        (position_set_y, pos1, 800),
        (overlay_set_size, "$g_presentation_obj_1", pos1),
        (overlay_add_item, "$g_presentation_obj_1", "@Withdraw"),
        (overlay_add_item, "$g_presentation_obj_1", "@Deposit"),
        (overlay_set_val, "$g_presentation_obj_1", 1),

        (position_set_x, pos1, 600),
        (position_set_y, pos1, 380),
        (val_add, ":player_money", 1),
        (create_number_box_overlay, "$g_presentation_obj_2", 0, ":player_money"),
        (overlay_set_position, "$g_presentation_obj_2", pos1),
        (overlay_set_val, "$g_presentation_obj_2", 0),
        (overlay_set_display, "$g_presentation_obj_2", 1),
        (val_add, ":account_money", 1),
        (create_number_box_overlay, "$g_presentation_obj_3", 0, ":account_money"),
        (overlay_set_position, "$g_presentation_obj_3", pos1),
        (overlay_set_val, "$g_presentation_obj_3", 0),
        (overlay_set_display, "$g_presentation_obj_3", 0),

        (create_game_button_overlay, "$g_presentation_obj_5", "str_done"),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 250),
        (overlay_set_position, "$g_presentation_obj_5", pos1),
      ]),

   #crashes when you access inventory, see if we can skip out
   (ti_on_presentation_run,
    [
        (try_begin),
          (this_or_next|game_key_clicked, gk_inventory_window),
          (this_or_next|game_key_clicked, gk_character_window),
          (game_key_clicked, gk_action),
          (presentation_set_duration, 0),
        (try_end),
   ]),
    (ti_on_presentation_event_state_change,
      [
        (store_trigger_param_1, ":object"),
        (store_trigger_param_2, ":value"),

        (try_begin),
          (eq, ":object", "$g_presentation_obj_1"),
          (try_begin),
            (eq, ":value", 1),
            (overlay_set_display, "$g_presentation_obj_2", 1),
            (overlay_set_display, "$g_presentation_obj_3", 0),
          (else_try),
            (overlay_set_display, "$g_presentation_obj_2", 0),
            (overlay_set_display, "$g_presentation_obj_3", 1),
          (try_end),
        (else_try),
          (this_or_next|eq, ":object", "$g_presentation_obj_2"),
          (eq, ":object", "$g_presentation_obj_3"),
          (gt, ":value", 0),
          # (call_script, "script_get_chest_troop", "$current_town"),
          # (assign, ":chest_troop", reg0),
          (try_begin),
            (eq, ":object", "$g_presentation_obj_2"),
            (troop_remove_gold, "trp_player",":value"),
            (troop_add_gold, "$pool_troop", ":value"),
          (else_try),
            (eq, ":object", "$g_presentation_obj_3"),
            (troop_remove_gold, "$pool_troop",":value"),
            (troop_add_gold, "trp_player", ":value"),
          (try_end),
          (start_presentation, "prsnt_deposit_withdraw_money"),
        (else_try),
          (eq, ":object", "$g_presentation_obj_5"),
          (set_show_messages, 1),
          (presentation_set_duration, 0),
        (try_end),
    ]),
  ]),


("order_display", prsntf_read_only,0,[
    (ti_on_presentation_load, [
        (set_fixed_point_multiplier, 1000),

        (try_for_range, ":slot", 0, 9),
          (troop_set_slot, "trp_multiplayer_profile_troop_male", ":slot", -1),  #recycle for order array
        (try_end),

        (assign, ":num_orders", 0),
        (assign, ":y_position", 564),
        (try_begin), #Figure out which orders to display, set strings
          (eq, "$gk_order", 0),
          (str_store_string, s1, "@F4 - Complex formations"),
          (assign, ":num_orders", 1),
          (assign, ":y_position", 474),	#564 - 3 * 30
        (else_try),
          (eq, "$gk_order", gk_order_2),
          (str_store_string, s1, "@F7 - Memorize div. placement"),
          (str_store_string, s2, "@F8 - Default division placement"),
          (assign, ":num_orders", 2),
          (assign, ":y_position", 384),	#564 - 6 * 30
        (else_try),
          (eq, "$gk_order", gk_order_4),
          (str_store_string, s1, "@F4 - Ranks"),
          (str_store_string, s2, "@F5 - Shield Wall"),
          (str_store_string, s3, "@F6 - Wedge"),
          (str_store_string, s4, "@F7 - Square"),
          (str_store_string, s5, "@F8 - No Formation"),
          (assign, ":num_orders", 5),
        (try_end),
        (assign, "$menu_by_gk_order", "$gk_order"),

        (try_for_range, ":i", 0, ":num_orders"),
          (try_begin),
            (eq, ":i", 0),
            (str_store_string_reg, s0, s1),
          (else_try),
            (eq, ":i", 1),
            (str_store_string_reg, s0, s2),
          (else_try),
            (eq, ":i", 2),
            (str_store_string_reg, s0, s3),
          (else_try),
            (eq, ":i", 3),
            (str_store_string_reg, s0, s4),
          (else_try),
            (eq, ":i", 4),
            (str_store_string_reg, s0, s5),
          (try_end),
          (create_text_overlay, ":overlay", s0),
          (overlay_set_color, ":overlay", 0xFFFFFF),
          (position_set_x, pos1, 1000),
          (position_set_y, pos1, 1000),
          (overlay_set_size, ":overlay", pos1),
          (position_set_x, pos1, 1),
          (position_set_y, pos1, ":y_position"),
          (overlay_set_position, ":overlay", pos1),

          (troop_set_slot, "trp_multiplayer_profile_troop_male", ":i", ":overlay"),
          (val_sub, ":y_position", 30),
        (try_end),
        (store_mul, ":add_back", 30, ":num_orders"),
        (val_add, ":y_position", ":add_back"),
        (val_sub, ":y_position", 4),
        (try_for_range, ":i", 0, ":num_orders"),
          (create_mesh_overlay, ":overlay", "mesh_order_frame"),
          (position_set_x, pos1, 700),
          (position_set_y, pos1, 700),
          (overlay_set_size, ":overlay", pos1),

          (position_set_x, pos1, 0),
          (position_set_y, pos1, ":y_position"),
          (overlay_set_position, ":overlay", pos1),

          (val_sub, ":y_position", 30),
        (try_end),

        (try_begin),
          # (neq, "$gk_order", 0),
          # (neq, "$gk_order", gk_order_1),
          # (neq, "$gk_order", gk_order_2),
          # (neq, "$gk_order", gk_order_3),
          (eq, "$gk_order", gk_order_4),
          (create_mesh_overlay, ":overlay", "mesh_white_plane"),
          (overlay_set_color, ":overlay", 0),
          (overlay_set_alpha, ":overlay", 0x10),
          (position_set_x, pos1, 14000),
          (position_set_y, pos1, 4500),
          (overlay_set_size, ":overlay", pos1),

          (position_set_x, pos1, 0),
          (position_set_y, pos1, 498),
          (overlay_set_position, ":overlay", pos1),
        (try_end),

        (presentation_set_duration, 999999),
    ]),

    (ti_on_presentation_run, [
        (store_trigger_param_1, ":cur_time"),
        (gt, ":cur_time", 250), #0.25 Second after Pres. Start
        (try_begin),
          (this_or_next|game_key_clicked, gk_order_1),
          (this_or_next|game_key_clicked, gk_order_2),
          (this_or_next|game_key_clicked, gk_order_3), #Order Keys not used by Expanded Orders
          (this_or_next|game_key_clicked, gk_view_orders),
          (this_or_next|game_key_clicked, gk_group0_hear),
          (this_or_next|game_key_clicked, gk_group1_hear),
          (this_or_next|game_key_clicked, gk_group2_hear),
          (this_or_next|game_key_clicked, gk_group3_hear),
          (this_or_next|game_key_clicked, gk_group4_hear),
          (this_or_next|game_key_clicked, gk_group5_hear),
          (this_or_next|game_key_clicked, gk_group6_hear),
          (this_or_next|game_key_clicked, gk_group7_hear),
          (this_or_next|game_key_clicked, gk_group8_hear),
          (this_or_next|game_key_clicked, gk_everyone_hear),
          (this_or_next|game_key_clicked, gk_reverse_order_group),
          (game_key_clicked, gk_everyone_around_hear),
          (presentation_set_duration, 0),
        (try_end),
        (try_begin),
          (assign, ":key", -1),
          (try_begin),
            (game_key_clicked, gk_order_4),
            (assign, ":key", 4),
          (else_try),
            (game_key_clicked, gk_order_5),
            (assign, ":key", 5),
          (else_try),
            (game_key_clicked, gk_order_6),
            (assign, ":key", 6),
          (else_try),
            (key_clicked, key_f7),
            (assign, ":key", 7),
          (else_try),
            (key_clicked, key_f8),
            (assign, ":key", 8),
          (try_end),
          (neq, ":key", -1),
          (try_begin),
            (eq, "$menu_by_gk_order", 0),
            (presentation_set_duration, 0),
          (else_try),
            (eq, "$menu_by_gk_order", gk_order_4),
            (assign, ":min_key", 4),
            (assign, ":max_key", 8),

            (store_sub, ":num_orders", ":max_key", ":min_key"),
            (val_add, ":num_orders", 1),
            (store_sub, ":key_pressed", ":key", ":min_key"),
            (is_between, ":key_pressed", 0, ":num_orders"),
            (try_for_range, ":i", 0, ":num_orders"),
              (troop_get_slot, ":overlay", "trp_multiplayer_profile_troop_male", ":i"),
              (try_begin),
                (neq, ":i", ":key_pressed"),
                (overlay_animate_to_alpha, ":overlay", 400, 0x00),
                (val_add, ":overlay", ":num_orders"),
                (overlay_animate_to_alpha, ":overlay", 400, 0x00),
              (else_try),
                (overlay_animate_to_alpha, ":overlay", 1100, 0x00),
                (val_add, ":overlay", ":num_orders"),
                (overlay_animate_to_alpha, ":overlay", 1100, 0x00),
              (try_end),
            (try_end),
            (presentation_set_duration, 200),
            (close_order_menu),
            (assign, "$native_opening_menu", 0),
          (try_end),
        (try_end),
    ]),
]),

#update for formations and fixes
("battle",0,0,[
    (ti_on_presentation_load,
      [(set_fixed_point_multiplier, 1000),
        (assign, "$g_formation_group0_selected", 0),
        (assign, "$g_formation_group1_selected", 0),
        (assign, "$g_formation_group2_selected", 0),
        (assign, "$g_formation_group3_selected", 0),
        (assign, "$g_formation_group4_selected", 0),
        (assign, "$g_formation_group5_selected", 0),
        (assign, "$g_formation_group6_selected", 0),
        (assign, "$g_formation_group7_selected", 0),
        (assign, "$g_formation_group8_selected", 0),
        (assign, "$g_presentation_obj_battle_but0", -1),
        (assign, "$g_presentation_obj_battle_but1", -1),
        (assign, "$g_presentation_obj_battle_but2", -1),
        (assign, "$g_presentation_obj_battle_but3", -1),
        (assign, "$g_presentation_obj_battle_but4", -1),
        (assign, "$g_presentation_obj_battle_but5", -1),
        (assign, "$g_presentation_obj_battle_but6", -1),
        (assign, "$g_presentation_obj_battle_but7", -1),
        (assign, "$g_presentation_obj_battle_but8", -1),
        (str_clear, s7),
        (close_order_menu),
        (assign, "$native_opening_menu", 0),

        (try_for_agents, ":agent_no"),
          (agent_set_slot, ":agent_no", slot_agent_map_overlay_id, 0),
        (try_end),

        #tactical cam
        (create_text_overlay, reg1, "@Strategy Camera: press the Enter key.'", tf_center_justify), #arriba centrado
        # (overlay_set_color, reg1, 0x996633), #saddle brown, se ve bien
        # (overlay_set_color, reg1, 0xB7AA9C), #sandstone, demasiado grisaceo
        #(overlay_set_color, reg1, 0xA28A56), #tan
        #(overlay_set_color, reg1, 0xE12126), #Atomic Red muy leible
        #(overlay_set_color, reg1, 0xD5D3B6), #Fawn se ve poco
        #  (overlay_set_color, reg1, 0x9ACD32), #Yellow green se ve regular
        #(overlay_set_color, reg1, 0xFFDD21), #Primrose Yellow se ve bien
        ##        (overlay_set_color, reg1, 0xD5C7B6), #Beige se ve poco
        ##        (overlay_set_color, reg1, 0x0x777777), #Traffic Grey se ve bien
        (overlay_set_color, reg1, 0xFFFFFF), #White se ve bien
        #(overlay_set_color, reg1, 0x000000), #Black se ve bien
        (position_set_x, pos1, 810),
        (position_set_y, pos1, 240),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),

        ###

        (get_player_agent_no, ":player_agent"),
        (agent_get_troop_id, ":player_troop_id", ":player_agent"),

        (position_set_y, pos1, 700),
        (create_text_overlay, reg1, "@Orders", tf_center_justify|tf_single_line|tf_with_outline),
        # (overlay_set_color, reg1, 0xFFAAAAAA),
        (overlay_set_color, reg1, 0xE12126), #Atomic Red muy leible
        (position_set_x, pos1, 270),
        (overlay_set_position, reg1, pos1),
        (create_text_overlay, reg1, "@Mount", tf_center_justify|tf_single_line|tf_with_outline),
        # (overlay_set_color, reg1, 0xFFAAAAAA),
        (overlay_set_color, reg1, 0xE12126), #Atomic Red muy leible
        (position_set_x, pos1, 410),
        (overlay_set_position, reg1, pos1),
        (create_text_overlay, reg1, "@Attack Order", tf_center_justify|tf_single_line|tf_with_outline),
        #   (overlay_set_color, reg1, 0xFFAAAAAA),
        (overlay_set_color, reg1, 0xE12126), #Atomic Red muy leible
        (position_set_x, pos1, 550),
        (overlay_set_position, reg1, pos1),

        (assign, "$group0_has_troops", 0),
        (assign, "$group1_has_troops", 0),
        (assign, "$group2_has_troops", 0),
        (assign, "$group3_has_troops", 0),
        (assign, "$group4_has_troops", 0),
        (assign, "$group5_has_troops", 0),
        (assign, "$group6_has_troops", 0),
        (assign, "$group7_has_troops", 0),
        (assign, "$group8_has_troops", 0),
        (party_get_num_companion_stacks, ":num_stacks", "p_main_party"),
        (assign, "$num_classes", 0),
        (try_for_range, ":troop_iterator", 0, ":num_stacks"),
          (party_stack_get_troop_id, ":cur_troop_id", "p_main_party", ":troop_iterator"),
          (troop_get_class, ":troop_class", ":cur_troop_id"),
          (neq, ":player_troop_id", ":cur_troop_id"),
          (try_begin),
            (eq, ":troop_class", 0),
            (try_begin),
              (neq, "$group0_has_troops", 1),
              (val_add, "$num_classes", 1),
            (try_end),
            (assign, "$group0_has_troops", 1),
          (else_try),
            (eq, ":troop_class", 1),
            (try_begin),
              (neq, "$group1_has_troops", 1),
              (val_add, "$num_classes", 1),
            (try_end),
            (assign, "$group1_has_troops", 1),
          (else_try),
            (eq, ":troop_class", 2),
            (try_begin),
              (neq, "$group2_has_troops", 1),
              (val_add, "$num_classes", 1),
            (try_end),
            (assign, "$group2_has_troops", 1),
          (else_try),
            (eq, ":troop_class", 3),
            (try_begin),
              (neq, "$group3_has_troops", 1),
              (val_add, "$num_classes", 1),
            (try_end),
            (assign, "$group3_has_troops", 1),
          (else_try),
            (eq, ":troop_class", 4),
            (try_begin),
              (neq, "$group4_has_troops", 1),
              (val_add, "$num_classes", 1),
            (try_end),
            (assign, "$group4_has_troops", 1),
          (else_try),
            (eq, ":troop_class", 5),
            (try_begin),
              (neq, "$group5_has_troops", 1),
              (val_add, "$num_classes", 1),
            (try_end),
            (assign, "$group5_has_troops", 1),
          (else_try),
            (eq, ":troop_class", 6),
            (try_begin),
              (neq, "$group6_has_troops", 1),
              (val_add, "$num_classes", 1),
            (try_end),
            (assign, "$group6_has_troops", 1),
          (else_try),
            (eq, ":troop_class", 7),
            (try_begin),
              (neq, "$group7_has_troops", 1),
              (val_add, "$num_classes", 1),
            (try_end),
            (assign, "$group7_has_troops", 1),
          (else_try),
            (eq, ":troop_class", 8),
            (try_begin),
              (neq, "$group8_has_troops", 1),
              (val_add, "$num_classes", 1),
            (try_end),
            (assign, "$group8_has_troops", 1),
          (try_end),
        (try_end),

        (assign, ":stat_position_x", 0),
        (assign, ":stat_position_y", 653),
        (assign, ":stat_position_check_x", 20),
        (assign, ":stat_position_check_y", 662),
        (assign, ":stat_position_name_x", 50),
        (assign, ":stat_position_name_y", 660),
        (try_begin),
          (eq, "$group0_has_troops", 1),
          (create_image_button_overlay, "$g_presentation_obj_battle_but0", "mesh_white_plane", "mesh_white_plane"),
          (position_set_x, pos1, ":stat_position_x"),
          (position_set_y, pos1, ":stat_position_y"),
          (overlay_set_position, "$g_presentation_obj_battle_but0", pos1),
          (val_add, ":stat_position_y", -40),

          (position_set_x, pos1, 32500),
          (position_set_y, pos1, 2000),
          (overlay_set_size, "$g_presentation_obj_battle_but0", pos1),
          (overlay_set_alpha, "$g_presentation_obj_battle_but0", 0),
          # (overlay_set_color, "$g_presentation_obj_battle_but0", 0xFFFF00),
          (overlay_set_color, "$g_presentation_obj_battle_but0", 0xA28A56),

          (create_check_box_overlay, "$g_presentation_obj_battle_check0", "mesh_checkbox_off", "mesh_checkbox_on"),
          (position_set_x, pos2, ":stat_position_check_x"),
          (position_set_y, pos2, ":stat_position_check_y"),
          (overlay_set_position, "$g_presentation_obj_battle_check0", pos2),
          (val_add, ":stat_position_check_y", -40),

          (create_text_overlay, "$g_presentation_obj_battle_name0", s7, 0),
          (position_set_x, pos3, ":stat_position_name_x"),
          (position_set_y, pos3, ":stat_position_name_y"),
          (overlay_set_position, "$g_presentation_obj_battle_name0", pos3),

          (val_add, ":stat_position_name_y", -40),

          (create_text_overlay, "$g_presentation_but0_movement", s7, tf_center_justify),
          (create_text_overlay, "$g_presentation_but0_riding", s7, tf_center_justify),
          (create_text_overlay, "$g_presentation_but0_weapon_usage", s7, tf_center_justify),
        (try_end),
        (try_begin),
          (eq, "$group1_has_troops", 1),
          (create_image_button_overlay, "$g_presentation_obj_battle_but1", "mesh_white_plane", "mesh_white_plane"),
          (position_set_x, pos1, ":stat_position_x"),
          (position_set_y, pos1, ":stat_position_y"),
          (overlay_set_position, "$g_presentation_obj_battle_but1", pos1),
          (val_add, ":stat_position_y", -40),

          (position_set_x, pos1, 32500),
          (position_set_y, pos1, 2000),
          (overlay_set_size, "$g_presentation_obj_battle_but1", pos1),
          (overlay_set_alpha, "$g_presentation_obj_battle_but1", 0),
          # (overlay_set_color, "$g_presentation_obj_battle_but1", 0xFFFF00),
          (overlay_set_color, "$g_presentation_obj_battle_but1", 0xA28A56),

          (create_check_box_overlay, "$g_presentation_obj_battle_check1", "mesh_checkbox_off", "mesh_checkbox_on"),
          (position_set_x, pos2, ":stat_position_check_x"),
          (position_set_y, pos2, ":stat_position_check_y"),
          (overlay_set_position, "$g_presentation_obj_battle_check1", pos2),
          (val_add, ":stat_position_check_y", -40),

          (create_text_overlay, "$g_presentation_obj_battle_name1", s7, 0),
          (position_set_x, pos3, ":stat_position_name_x"),
          (position_set_y, pos3, ":stat_position_name_y"),
          (overlay_set_position, "$g_presentation_obj_battle_name1", pos3),
          (val_add, ":stat_position_name_y", -40),

          (create_text_overlay, "$g_presentation_but1_movement", s7, tf_center_justify),
          (create_text_overlay, "$g_presentation_but1_riding", s7, tf_center_justify),
          (create_text_overlay, "$g_presentation_but1_weapon_usage", s7, tf_center_justify),
        (try_end),
        (try_begin),
          (eq, "$group2_has_troops", 1),
          (create_image_button_overlay, "$g_presentation_obj_battle_but2", "mesh_white_plane", "mesh_white_plane"),
          (position_set_x, pos1, ":stat_position_x"),
          (position_set_y, pos1, ":stat_position_y"),
          (overlay_set_position, "$g_presentation_obj_battle_but2", pos1),
          (val_add, ":stat_position_y", -40),

          (position_set_x, pos1, 32500),
          (position_set_y, pos1, 2000),
          (overlay_set_size, "$g_presentation_obj_battle_but2", pos1),
          (overlay_set_alpha, "$g_presentation_obj_battle_but2", 0),
          # (overlay_set_color, "$g_presentation_obj_battle_but2", 0xFFFF00),
          (overlay_set_color, "$g_presentation_obj_battle_but2", 0xA28A56),

          (create_check_box_overlay, "$g_presentation_obj_battle_check2", "mesh_checkbox_off", "mesh_checkbox_on"),
          (position_set_x, pos2, ":stat_position_check_x"),
          (position_set_y, pos2, ":stat_position_check_y"),
          (overlay_set_position, "$g_presentation_obj_battle_check2", pos2),
          (val_add, ":stat_position_check_y", -40),

          (create_text_overlay, "$g_presentation_obj_battle_name2", s7, 0),
          (position_set_x, pos3, ":stat_position_name_x"),
          (position_set_y, pos3, ":stat_position_name_y"),
          (overlay_set_position, "$g_presentation_obj_battle_name2", pos3),
          (val_add, ":stat_position_name_y", -40),

          (create_text_overlay, "$g_presentation_but2_movement", s7, tf_center_justify),
          (create_text_overlay, "$g_presentation_but2_riding", s7, tf_center_justify),
          (create_text_overlay, "$g_presentation_but2_weapon_usage", s7, tf_center_justify),
        (try_end),
        (try_begin),
          (eq, "$group3_has_troops", 1),
          (create_image_button_overlay, "$g_presentation_obj_battle_but3", "mesh_white_plane", "mesh_white_plane"),
          (position_set_x, pos1, ":stat_position_x"),
          (position_set_y, pos1, ":stat_position_y"),
          (overlay_set_position, "$g_presentation_obj_battle_but3", pos1),
          (val_add, ":stat_position_y", -40),

          (position_set_x, pos1, 32500),
          (position_set_y, pos1, 2000),
          (overlay_set_size, "$g_presentation_obj_battle_but3", pos1),
          (overlay_set_alpha, "$g_presentation_obj_battle_but3", 0),
          #   (overlay_set_color, "$g_presentation_obj_battle_but3", 0xFFFF00),
          (overlay_set_color, "$g_presentation_obj_battle_but3", 0xA28A56),

          (create_check_box_overlay, "$g_presentation_obj_battle_check3", "mesh_checkbox_off", "mesh_checkbox_on"),
          (position_set_x, pos2, ":stat_position_check_x"),
          (position_set_y, pos2, ":stat_position_check_y"),
          (overlay_set_position, "$g_presentation_obj_battle_check3", pos2),
          (val_add, ":stat_position_check_y", -40),

          (create_text_overlay, "$g_presentation_obj_battle_name3", s7, 0),
          (position_set_x, pos3, ":stat_position_name_x"),
          (position_set_y, pos3, ":stat_position_name_y"),
          (overlay_set_position, "$g_presentation_obj_battle_name3", pos3),
          (val_add, ":stat_position_name_y", -40),

          (create_text_overlay, "$g_presentation_but3_movement", s7, tf_center_justify),
          (create_text_overlay, "$g_presentation_but3_riding", s7, tf_center_justify),
          (create_text_overlay, "$g_presentation_but3_weapon_usage", s7, tf_center_justify),
        (try_end),
        (try_begin),
          (eq, "$group4_has_troops", 1),
          (create_image_button_overlay, "$g_presentation_obj_battle_but4", "mesh_white_plane", "mesh_white_plane"),
          (position_set_x, pos1, ":stat_position_x"),
          (position_set_y, pos1, ":stat_position_y"),
          (overlay_set_position, "$g_presentation_obj_battle_but4", pos1),
          (val_add, ":stat_position_y", -40),

          (position_set_x, pos1, 32500),
          (position_set_y, pos1, 2000),
          (overlay_set_size, "$g_presentation_obj_battle_but4", pos1),
          (overlay_set_alpha, "$g_presentation_obj_battle_but4", 0),
          # (overlay_set_color, "$g_presentation_obj_battle_but4", 0xFFFF00),
          (overlay_set_color, "$g_presentation_obj_battle_but4", 0xA28A56),

          (create_check_box_overlay, "$g_presentation_obj_battle_check4", "mesh_checkbox_off", "mesh_checkbox_on"),
          (position_set_x, pos2, ":stat_position_check_x"),
          (position_set_y, pos2, ":stat_position_check_y"),
          (overlay_set_position, "$g_presentation_obj_battle_check4", pos2),
          (val_add, ":stat_position_check_y", -40),

          (create_text_overlay, "$g_presentation_obj_battle_name4", s7, 0),
          (position_set_x, pos3, ":stat_position_name_x"),
          (position_set_y, pos3, ":stat_position_name_y"),
          (overlay_set_position, "$g_presentation_obj_battle_name4", pos3),
          (val_add, ":stat_position_name_y", -40),

          (create_text_overlay, "$g_presentation_but4_movement", s7, tf_center_justify),
          (create_text_overlay, "$g_presentation_but4_riding", s7, tf_center_justify),
          (create_text_overlay, "$g_presentation_but4_weapon_usage", s7, tf_center_justify),
        (try_end),
        (try_begin),
          (eq, "$group5_has_troops", 1),
          (create_image_button_overlay, "$g_presentation_obj_battle_but5", "mesh_white_plane", "mesh_white_plane"),
          (position_set_x, pos1, ":stat_position_x"),
          (position_set_y, pos1, ":stat_position_y"),
          (overlay_set_position, "$g_presentation_obj_battle_but5", pos1),
          (val_add, ":stat_position_y", -40),

          (position_set_x, pos1, 32500),
          (position_set_y, pos1, 2000),
          (overlay_set_size, "$g_presentation_obj_battle_but5", pos1),
          (overlay_set_alpha, "$g_presentation_obj_battle_but5", 0),
          #  (overlay_set_color, "$g_presentation_obj_battle_but5", 0xFFFF00),
          (overlay_set_color, "$g_presentation_obj_battle_but5", 0xA28A56),

          (create_check_box_overlay, "$g_presentation_obj_battle_check5", "mesh_checkbox_off", "mesh_checkbox_on"),
          (position_set_x, pos2, ":stat_position_check_x"),
          (position_set_y, pos2, ":stat_position_check_y"),
          (overlay_set_position, "$g_presentation_obj_battle_check5", pos2),
          (val_add, ":stat_position_check_y", -40),

          (create_text_overlay, "$g_presentation_obj_battle_name5", s7, 0),
          (position_set_x, pos3, ":stat_position_name_x"),
          (position_set_y, pos3, ":stat_position_name_y"),
          (overlay_set_position, "$g_presentation_obj_battle_name5", pos3),
          (val_add, ":stat_position_name_y", -40),

          (create_text_overlay, "$g_presentation_but5_movement", s7, tf_center_justify),
          (create_text_overlay, "$g_presentation_but5_riding", s7, tf_center_justify),
          (create_text_overlay, "$g_presentation_but5_weapon_usage", s7, tf_center_justify),
        (try_end),
        (try_begin),
          (eq, "$group6_has_troops", 1),
          (create_image_button_overlay, "$g_presentation_obj_battle_but6", "mesh_white_plane", "mesh_white_plane"),
          (position_set_x, pos1, ":stat_position_x"),
          (position_set_y, pos1, ":stat_position_y"),
          (overlay_set_position, "$g_presentation_obj_battle_but6", pos1),
          (val_add, ":stat_position_y", -40),

          (position_set_x, pos1, 32500),
          (position_set_y, pos1, 2000),
          (overlay_set_size, "$g_presentation_obj_battle_but6", pos1),
          (overlay_set_alpha, "$g_presentation_obj_battle_but6", 0),
          #   (overlay_set_color, "$g_presentation_obj_battle_but6", 0xFFFF00),
          (overlay_set_color, "$g_presentation_obj_battle_but6", 0xA28A56),

          (create_check_box_overlay, "$g_presentation_obj_battle_check6", "mesh_checkbox_off", "mesh_checkbox_on"),
          (position_set_x, pos2, ":stat_position_check_x"),
          (position_set_y, pos2, ":stat_position_check_y"),
          (overlay_set_position, "$g_presentation_obj_battle_check6", pos2),
          (val_add, ":stat_position_check_y", -40),

          (create_text_overlay, "$g_presentation_obj_battle_name6", s7, 0),
          (position_set_x, pos3, ":stat_position_name_x"),
          (position_set_y, pos3, ":stat_position_name_y"),
          (overlay_set_position, "$g_presentation_obj_battle_name6", pos3),
          (val_add, ":stat_position_name_y", -40),

          (create_text_overlay, "$g_presentation_but6_movement", s7, tf_center_justify),
          (create_text_overlay, "$g_presentation_but6_riding", s7, tf_center_justify),
          (create_text_overlay, "$g_presentation_but6_weapon_usage", s7, tf_center_justify),
        (try_end),
        (try_begin),
          (eq, "$group7_has_troops", 1),
          (create_image_button_overlay, "$g_presentation_obj_battle_but7", "mesh_white_plane", "mesh_white_plane"),
          (position_set_x, pos1, ":stat_position_x"),
          (position_set_y, pos1, ":stat_position_y"),
          (overlay_set_position, "$g_presentation_obj_battle_but7", pos1),
          (val_add, ":stat_position_y", -40),

          (position_set_x, pos1, 32500),
          (position_set_y, pos1, 2000),
          (overlay_set_size, "$g_presentation_obj_battle_but7", pos1),
          (overlay_set_alpha, "$g_presentation_obj_battle_but7", 0),
          # (overlay_set_color, "$g_presentation_obj_battle_but7", 0xFFFF00),
          (overlay_set_color, "$g_presentation_obj_battle_but7", 0xA28A56),

          (create_check_box_overlay, "$g_presentation_obj_battle_check7", "mesh_checkbox_off", "mesh_checkbox_on"),
          (position_set_x, pos2, ":stat_position_check_x"),
          (position_set_y, pos2, ":stat_position_check_y"),
          (overlay_set_position, "$g_presentation_obj_battle_check7", pos2),
          (val_add, ":stat_position_check_y", -40),

          (create_text_overlay, "$g_presentation_obj_battle_name7", s7, 0),
          (position_set_x, pos3, ":stat_position_name_x"),
          (position_set_y, pos3, ":stat_position_name_y"),
          (overlay_set_position, "$g_presentation_obj_battle_name7", pos3),
          (val_add, ":stat_position_name_y", -40),

          (create_text_overlay, "$g_presentation_but7_movement", s7, tf_center_justify),
          (create_text_overlay, "$g_presentation_but7_riding", s7, tf_center_justify),
          (create_text_overlay, "$g_presentation_but7_weapon_usage", s7, tf_center_justify),
        (try_end),
        (try_begin),
          (eq, "$group8_has_troops", 1),
          (create_image_button_overlay, "$g_presentation_obj_battle_but8", "mesh_white_plane", "mesh_white_plane"),
          (position_set_x, pos1, ":stat_position_x"),
          (position_set_y, pos1, ":stat_position_y"),
          (overlay_set_position, "$g_presentation_obj_battle_but8", pos1),
          (val_add, ":stat_position_y", -40),

          (position_set_x, pos1, 32500),
          (position_set_y, pos1, 2000),
          (overlay_set_size, "$g_presentation_obj_battle_but8", pos1),
          (overlay_set_alpha, "$g_presentation_obj_battle_but8", 0),
          #   (overlay_set_color, "$g_presentation_obj_battle_but8", 0xFFFF00),
          (overlay_set_color, "$g_presentation_obj_battle_but8", 0xA28A56), #tan
          #    (overlay_set_color, "$g_presentation_obj_battle_but8", 0xFFFF00), #yellow background

          (create_check_box_overlay, "$g_presentation_obj_battle_check8", "mesh_checkbox_off", "mesh_checkbox_on"),
          (position_set_x, pos2, ":stat_position_check_x"),
          (position_set_y, pos2, ":stat_position_check_y"),
          (overlay_set_position, "$g_presentation_obj_battle_check8", pos2),
          (val_add, ":stat_position_check_y", -40),

          (create_text_overlay, "$g_presentation_obj_battle_name8", s7, 0),
          (position_set_x, pos3, ":stat_position_name_x"),
          (position_set_y, pos3, ":stat_position_name_y"),
          (overlay_set_position, "$g_presentation_obj_battle_name8", pos3),
          (val_add, ":stat_position_name_y", -40),

          (create_text_overlay, "$g_presentation_but8_movement", s7, tf_center_justify),
          (create_text_overlay, "$g_presentation_but8_riding", s7, tf_center_justify),
          (create_text_overlay, "$g_presentation_but8_weapon_usage", s7, tf_center_justify),
        (try_end),

        (get_player_agent_no, ":player_agent"),
        (agent_get_team, ":player_team", ":player_agent"),

        (call_script, "script_update_order_panel", ":player_team"),

        #(create_button_overlay, "$g_presentation_obj_battle_10", "@Hold This Position", tf_center_justify),
        #(create_button_overlay, "$g_presentation_obj_battle_11", "@Follow Me", tf_center_justify),
        #(create_button_overlay, "$g_presentation_obj_battle_12", "@Charge", tf_center_justify),
        #(create_button_overlay, "$g_presentation_obj_battle_13", "@Advance", tf_center_justify),
        #(create_button_overlay, "$g_presentation_obj_battle_14", "@Fall Back", tf_center_justify),
        #(create_button_overlay, "$g_presentation_obj_battle_15", "@Stand Closer", tf_center_justify),
        #(create_button_overlay, "$g_presentation_obj_battle_16", "@Spread Out", tf_center_justify),
        #(create_button_overlay, "$g_presentation_obj_battle_17", "@Stand Ground", tf_center_justify),
        #(create_button_overlay, "$g_presentation_obj_battle_18", "@Mount", tf_center_justify),
        #(create_button_overlay, "$g_presentation_obj_battle_19", "@Dismount", tf_center_justify),
        #(create_button_overlay, "$g_presentation_obj_battle_20", "@Use Any Weapon", tf_center_justify),
        #(create_button_overlay, "$g_presentation_obj_battle_21", "@Use Blunt Weapons", tf_center_justify),
        #(create_button_overlay, "$g_presentation_obj_battle_28", "@Hold Your Fire", tf_center_justify),
        #(create_button_overlay, "$g_presentation_obj_battle_29", "@Fire At Will", tf_center_justify),

        (assign, ":y_position_for_order_buttons", 640),
        (assign, ":addition_y_position", "$num_classes"),
        (val_mul, ":addition_y_position", -40),
        (val_add, ":y_position_for_order_buttons", ":addition_y_position"),

        (create_listbox_overlay, "$g_presentation_obj_battle_10", "str_space", 0),
        (create_listbox_overlay, "$g_presentation_obj_battle_11", "str_space", 0),
        (create_listbox_overlay, "$g_presentation_obj_battle_12", "str_space", 0),
        (create_listbox_overlay, "$g_presentation_obj_battle_13", "str_space", 0),
        ###color
        (overlay_set_color, "$g_presentation_obj_battle_10", 0xFFFFFF),
        (overlay_set_color, "$g_presentation_obj_battle_11", 0xFFFFFF),
        (overlay_set_color, "$g_presentation_obj_battle_12", 0xFFFFFF),
        (overlay_set_color, "$g_presentation_obj_battle_13", 0xFFFFFF),
        ####
        (overlay_add_item, "$g_presentation_obj_battle_10", "@Retreat"),
        (overlay_add_item, "$g_presentation_obj_battle_10", "@Stand Ground"),
        ##(overlay_add_item, "$g_presentation_obj_battle_10", "@Spread Out"),
        ##(overlay_add_item, "$g_presentation_obj_battle_10", "@Stand Closer"),
        ##(overlay_add_item, "$g_presentation_obj_battle_10", "@Fall Back"),
        ##(overlay_add_item, "$g_presentation_obj_battle_10", "@Advance"),
        (overlay_add_item, "$g_presentation_obj_battle_10", "@Charge"),
        (overlay_add_item, "$g_presentation_obj_battle_10", "@Follow Me"),
        (overlay_add_item, "$g_presentation_obj_battle_10", "@Hold This Position"),

        (create_button_overlay, "$g_presentation_obj_battle_14", "@Spread Out", tf_center_justify|tf_single_line|tf_with_outline),
        (overlay_set_color, "$g_presentation_obj_battle_14", 0xFFFFFFFF),
        (create_button_overlay, "$g_presentation_obj_battle_15", "@Stand Closer", tf_center_justify|tf_single_line|tf_with_outline),
        (overlay_set_color, "$g_presentation_obj_battle_15", 0xFFFFFFFF),
        (create_button_overlay, "$g_presentation_obj_battle_16", "@Fall Back", tf_center_justify|tf_single_line|tf_with_outline),
        (overlay_set_color, "$g_presentation_obj_battle_16", 0xFFFFFFFF),
        (create_button_overlay, "$g_presentation_obj_battle_17", "@Advance", tf_center_justify|tf_single_line|tf_with_outline),
        (overlay_set_color, "$g_presentation_obj_battle_17", 0xFFFFFFFF),

        (position_set_x, pos1, 600),
        (position_set_y, pos1, 600),
        (overlay_set_size, "$g_presentation_obj_battle_10", pos1),

        (val_add, ":y_position_for_order_buttons", -51),
        (position_set_x, pos1, 205),
        (position_set_y, pos1, ":y_position_for_order_buttons"),
        (val_add, ":y_position_for_order_buttons", 51),
        (overlay_set_position, "$g_presentation_obj_battle_10", pos1),
        # (overlay_set_color, "$g_presentation_obj_battle_10", 0xA28A56), #tan

        (overlay_set_alpha, "$g_presentation_obj_battle_10", 0x60),
        (overlay_set_val, "$g_presentation_obj_battle_10", "$g_latest_order_1"),

        (val_add, ":y_position_for_order_buttons", -40), #new
        (position_set_x, pos1, 130), #new
        (position_set_y, pos1, ":y_position_for_order_buttons"), #new
        (val_add, ":y_position_for_order_buttons", 40), #new
        (overlay_set_position, "$g_presentation_obj_battle_14", pos1), #new
        #(overlay_set_alpha, "$g_presentation_obj_battle_14", 0x60), #new

        (val_add, ":y_position_for_order_buttons", -20), #new
        (position_set_x, pos1, 130), #new
        (position_set_y, pos1, ":y_position_for_order_buttons"), #new
        (val_add, ":y_position_for_order_buttons", 20), #new
        (overlay_set_position, "$g_presentation_obj_battle_15", pos1), #new
        #(overlay_set_alpha, "$g_presentation_obj_battle_15", 0x60), #new

        (val_add, ":y_position_for_order_buttons", -0), #new
        (position_set_x, pos1, 130), #new
        (position_set_y, pos1, ":y_position_for_order_buttons"), #new
        (val_add, ":y_position_for_order_buttons", 0), #new
        (overlay_set_position, "$g_presentation_obj_battle_16", pos1), #new
        #(overlay_set_alpha, "$g_presentation_obj_battle_16", 0x60), #new

        (val_add, ":y_position_for_order_buttons", 20), #new
        (position_set_x, pos1, 130), #new
        (position_set_y, pos1, ":y_position_for_order_buttons"), #new
        (val_add, ":y_position_for_order_buttons", -20), #new
        (overlay_set_position, "$g_presentation_obj_battle_17", pos1), #new
        #(overlay_set_alpha, "$g_presentation_obj_battle_17", 0x60), #new



        (overlay_add_item, "$g_presentation_obj_battle_11", "@Dismount"),
        (overlay_add_item, "$g_presentation_obj_battle_11", "@Mount"),

        (position_set_x, pos1, 600),
        (position_set_y, pos1, 600),
        (overlay_set_size, "$g_presentation_obj_battle_11", pos1),

        (position_set_x, pos1, 350),
        (position_set_y, pos1, ":y_position_for_order_buttons"),
        (overlay_set_position, "$g_presentation_obj_battle_11", pos1),

        (overlay_set_alpha, "$g_presentation_obj_battle_11", 0x60),
        #  (overlay_set_color, "$g_presentation_obj_battle_11", 0xA28A56), #tan
        (overlay_set_val, "$g_presentation_obj_battle_11", "$g_latest_order_2"),



        (overlay_add_item, "$g_presentation_obj_battle_12", "@Fire At Will"),
        (overlay_add_item, "$g_presentation_obj_battle_12", "@Hold Your Fire"),

        (position_set_x, pos1, 600),
        (position_set_y, pos1, 600),
        (overlay_set_size, "$g_presentation_obj_battle_12", pos1),

        (position_set_x, pos1, 495),
        (position_set_y, pos1, ":y_position_for_order_buttons"),
        (overlay_set_position, "$g_presentation_obj_battle_12", pos1),

        (overlay_set_alpha, "$g_presentation_obj_battle_12", 0x60),
        #  (overlay_set_color, "$g_presentation_obj_battle_12", 0xA28A56), #tan
        (overlay_set_val, "$g_presentation_obj_battle_12", "$g_latest_order_3"),



        (overlay_add_item, "$g_presentation_obj_battle_13", "@Use Blunt Weapons"),
        (overlay_add_item, "$g_presentation_obj_battle_13", "@Use Any Weapon"),

        (position_set_x, pos1, 600),
        (position_set_y, pos1, 600),
        (overlay_set_size, "$g_presentation_obj_battle_13", pos1),

        (val_add, ":y_position_for_order_buttons", -35),
        (position_set_x, pos1, 495),
        (position_set_y, pos1, ":y_position_for_order_buttons"),
        (val_add, ":y_position_for_order_buttons", 35),
        (overlay_set_position, "$g_presentation_obj_battle_13", pos1),

        (overlay_set_alpha, "$g_presentation_obj_battle_13", 0x60),
        #   (overlay_set_color, "$g_presentation_obj_battle_13", 0xA28A56), #tan
        (overlay_set_val, "$g_presentation_obj_battle_13", "$g_latest_order_4"),



        (create_text_overlay, "$g_presentation_obj_battle_22", "str_us_", 0),
        (create_text_overlay, "$g_presentation_obj_battle_23", "str_allies_", 0),
        (create_text_overlay, "$g_presentation_obj_battle_24", "str_enemies_", 0),
        (create_text_overlay, "$g_presentation_obj_battle_25", "@Ready", tf_center_justify),
        (create_text_overlay, "$g_presentation_obj_battle_26", "@Wounded", tf_center_justify),
        (create_text_overlay, "$g_presentation_obj_battle_28", "str_routed", tf_center_justify),
        (create_text_overlay, "$g_presentation_obj_battle_27", "@Dead", tf_center_justify),
        ##colores
        (overlay_set_color, "$g_presentation_obj_battle_22", 0xFFFFFF),
        (overlay_set_color, "$g_presentation_obj_battle_23", 0xFFFFFF),
        (overlay_set_color, "$g_presentation_obj_battle_24", 0xFFFFFF),
        (overlay_set_color, "$g_presentation_obj_battle_25", 0xFFFFFF),
        (overlay_set_color, "$g_presentation_obj_battle_26", 0xFFFFFF),
        (overlay_set_color, "$g_presentation_obj_battle_27", 0xFFFFFF),
        (overlay_set_color, "$g_presentation_obj_battle_28", 0xFFFFFF),
        #####
        (create_text_overlay, "$g_battle_us_ready", s7, tf_center_justify),
        (create_text_overlay, "$g_battle_us_wounded", s7, tf_center_justify),
        (create_text_overlay, "$g_battle_us_routed", s7, tf_center_justify),
        (create_text_overlay, "$g_battle_us_dead", s7, tf_center_justify),

        (create_text_overlay, "$g_battle_enemies_ready", s7, tf_center_justify),
        (create_text_overlay, "$g_battle_enemies_wounded", s7, tf_center_justify),
        (create_text_overlay, "$g_battle_enemies_routed", s7, tf_center_justify),
        (create_text_overlay, "$g_battle_enemies_dead", s7, tf_center_justify),

        (create_text_overlay, "$g_battle_allies_ready", s7, tf_center_justify),
        (create_text_overlay, "$g_battle_allies_wounded", s7, tf_center_justify),
        (create_text_overlay, "$g_battle_allies_routed", s7, tf_center_justify),
        (create_text_overlay, "$g_battle_allies_dead", s7, tf_center_justify),

        #colores
        (overlay_set_color, "$g_battle_us_ready", 0x000000), #black
        #  (overlay_set_color, "$g_battle_us_ready", 0x006400), #verde oscuro se ve bien
        (overlay_set_color, "$g_battle_us_wounded", 0xE12126), #Atomic Red muy leible
        (overlay_set_color, "$g_battle_us_routed", 0xE12126), #Atomic Red muy leible
        (overlay_set_color, "$g_battle_us_dead", 0xE12126), #Atomic Red muy leible

        (overlay_set_color, "$g_battle_enemies_ready", 0x000000), #black
        (overlay_set_color, "$g_battle_enemies_wounded", 0xE12126), #Atomic Red muy leible
        (overlay_set_color, "$g_battle_enemies_routed", 0xE12126), #Atomic Red muy leible
        (overlay_set_color, "$g_battle_enemies_dead", 0xE12126), #Atomic Red muy leible

        (overlay_set_color, "$g_battle_allies_ready", 0x000000), #black
        (overlay_set_color, "$g_battle_allies_wounded", 0xE12126), #Atomic Red muy leible
        (overlay_set_color, "$g_battle_allies_routed", 0xE12126), #Atomic Red muy leible
        (overlay_set_color, "$g_battle_allies_dead", 0xE12126), #Atomic Red muy leible
        ###
        ###fondo
        ##     (create_mesh_overlay, reg0, "mesh_white_plane"),
        ##        (overlay_set_color, reg0, 0),
        ##      (position_set_x, pos1, -1),
        ##      (position_set_y, pos1, -1),
        ##      (overlay_set_position, reg0, pos1),
        ##      (position_set_x, pos1, 1002),
        ##      (position_set_y, pos1, 1002),
        ##      (overlay_set_size, reg0, pos1),
        ##        (overlay_set_alpha, reg0, 0x44),
        ##        (overlay_set_color, reg0, 0xFFFFFF),#fondo blanco
        ###
        (create_image_button_overlay, "$g_battle_report_plane", "mesh_white_plane", "mesh_white_plane"),
        (overlay_set_color, "$g_battle_report_plane", 0),
        (position_set_x, pos1, 15500),
        (position_set_y, pos1, 6000),
        (overlay_set_size, "$g_battle_report_plane", pos1),
        (position_set_x, pos1, 672),
        (position_set_y, pos1, 275),
        (overlay_set_position, "$g_battle_report_plane", pos1),
        (overlay_set_alpha, "$g_battle_report_plane", 0x54),
        # (overlay_set_color, "$g_battle_report_plane", 0x1166BB),#fondo azulado
        (overlay_set_color, "$g_battle_report_plane", 0xA28A56), #tan


        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),

        (overlay_set_size, "$g_presentation_obj_battle_14", pos1), #new
        (overlay_set_size, "$g_presentation_obj_battle_15", pos1), #new
        (overlay_set_size, "$g_presentation_obj_battle_16", pos1), #new
        (overlay_set_size, "$g_presentation_obj_battle_17", pos1), #new

        (overlay_set_size, "$g_presentation_obj_battle_22", pos1),
        (overlay_set_size, "$g_presentation_obj_battle_23", pos1),
        (overlay_set_size, "$g_presentation_obj_battle_24", pos1),
        (overlay_set_size, "$g_presentation_obj_battle_25", pos1),
        (overlay_set_size, "$g_presentation_obj_battle_26", pos1),
        (overlay_set_size, "$g_presentation_obj_battle_27", pos1),
        (overlay_set_size, "$g_presentation_obj_battle_28", pos1),
        (overlay_set_size, "$g_battle_us_ready", pos1),
        (overlay_set_size, "$g_battle_us_wounded", pos1),
        (overlay_set_size, "$g_battle_us_routed", pos1),
        (overlay_set_size, "$g_battle_us_dead", pos1),
        (overlay_set_size, "$g_battle_enemies_ready", pos1),
        (overlay_set_size, "$g_battle_enemies_wounded", pos1),
        (overlay_set_size, "$g_battle_enemies_routed", pos1),
        (overlay_set_size, "$g_battle_enemies_dead", pos1),
        (overlay_set_size, "$g_battle_allies_ready", pos1),
        (overlay_set_size, "$g_battle_allies_wounded", pos1),
        (overlay_set_size, "$g_battle_allies_routed", pos1),
        (overlay_set_size, "$g_battle_allies_dead", pos1),

        (assign, ":stat_position_x", 675),
        (assign, ":stat_position_y", 280),

        (val_add, ":stat_position_x", 70),
        (val_add, ":stat_position_y", 90),
        (position_set_x, pos1, ":stat_position_x"),
        (position_set_y, pos1, ":stat_position_y"),
        (overlay_set_position, "$g_presentation_obj_battle_25", pos1),
        (val_add, ":stat_position_x", 70),
        (position_set_x, pos1, ":stat_position_x"),
        (overlay_set_position, "$g_presentation_obj_battle_26", pos1),
        (val_add, ":stat_position_x", 70),
        (position_set_x, pos1, ":stat_position_x"),
        (overlay_set_position, "$g_presentation_obj_battle_28", pos1),
        (val_add, ":stat_position_x", 70),
        (position_set_x, pos1, ":stat_position_x"),
        (overlay_set_position, "$g_presentation_obj_battle_27", pos1),

        (val_add, ":stat_position_x", -280),
        (val_add, ":stat_position_y", -30),
        (position_set_x, pos1, ":stat_position_x"),
        (position_set_y, pos1, ":stat_position_y"),
        (overlay_set_position, "$g_presentation_obj_battle_22", pos1),
        (val_add, ":stat_position_y", -30),
        (position_set_y, pos1, ":stat_position_y"),
        (overlay_set_position, "$g_presentation_obj_battle_23", pos1),
        (val_add, ":stat_position_y", -30),
        (position_set_y, pos1, ":stat_position_y"),
        (overlay_set_position, "$g_presentation_obj_battle_24", pos1),

        (get_scene_boundaries, pos2, pos3),
        (position_transform_position_to_local, pos4, pos2, pos3),
        (set_fixed_point_multiplier, 1000),
        (position_get_x, ":map_width", pos4),
        (position_get_y, ":map_height", pos4),
        (set_fixed_point_multiplier, 1000),
        (store_div, ":map_ratio", ":map_height", 100),
        (store_div, ":map_ratio", ":map_width", ":map_ratio"),
        (try_begin),
          (gt, ":map_ratio", 100),
          (assign, "$g_battle_map_width", 300),
          (store_div, "$g_battle_map_scale", ":map_width", "$g_battle_map_width"),
          (store_div, "$g_battle_map_height", ":map_height", "$g_battle_map_scale"),
        (else_try),
          (assign, "$g_battle_map_height", 300),
          (store_div, "$g_battle_map_scale", ":map_height", "$g_battle_map_height"),
          (store_div, "$g_battle_map_width", ":map_width", "$g_battle_map_scale"),
        (try_end),

        (create_image_button_overlay, "$g_battle_map_plane", "mesh_white_plane", "mesh_white_plane"),
        (overlay_set_color, "$g_battle_map_plane", 0),
        (store_add, ":map_bordered_width", "$g_battle_map_width", 20),
        (store_add, ":map_bordered_height", "$g_battle_map_height", 20),
        (store_mul, ":map_scale_x", ":map_bordered_width", 50),
        (store_mul, ":map_scale_y", ":map_bordered_height", 50),
        (position_set_x, pos1, ":map_scale_x"),
        (position_set_y, pos1, ":map_scale_y"),
        (overlay_set_size, "$g_battle_map_plane", pos1),
        (store_sub, ":map_pos_x", 990, ":map_bordered_width"),
        (store_sub, ":map_pos_y", 740, ":map_bordered_height"),
        (position_set_x, pos1, ":map_pos_x"),
        (position_set_y, pos1, ":map_pos_y"),
        (overlay_set_position, "$g_battle_map_plane", pos1),
        (overlay_set_alpha, "$g_battle_map_plane", 0x44),

        (create_mesh_overlay, "$g_battle_map_infantry_order_flag", "mesh_flag_infantry"),
        (create_mesh_overlay, "$g_battle_map_archers_order_flag", "mesh_flag_archers"),
        (create_mesh_overlay, "$g_battle_map_cavalry_order_flag", "mesh_flag_cavalry"),
        (overlay_set_alpha, "$g_battle_map_infantry_order_flag", 0),
        (overlay_set_alpha, "$g_battle_map_archers_order_flag", 0),
        (overlay_set_alpha, "$g_battle_map_cavalry_order_flag", 0),
        (create_mesh_overlay, "$g_battle_map_spears_order_flag", "mesh_flag_spears"),
        (create_mesh_overlay, "$g_battle_map_skirmishers_order_flag", "mesh_flag_skirmishers"),
        (create_mesh_overlay, "$g_battle_map_horsemen_order_flag", "mesh_flag_horsemen"),
        (overlay_set_alpha, "$g_battle_map_spears_order_flag", 0),
        (overlay_set_alpha, "$g_battle_map_skirmishers_order_flag", 0),
        (overlay_set_alpha, "$g_battle_map_horsemen_order_flag", 0),
        (create_mesh_overlay, "$g_battle_map_d7_order_flag", "mesh_flag_d7"),
        (create_mesh_overlay, "$g_battle_map_d8_order_flag", "mesh_flag_d8"),
        (create_mesh_overlay, "$g_battle_map_d9_order_flag", "mesh_flag_d9"),
        (overlay_set_alpha, "$g_battle_map_d7_order_flag", 0),
        (overlay_set_alpha, "$g_battle_map_d8_order_flag", 0),
        (overlay_set_alpha, "$g_battle_map_d9_order_flag", 0),

        (call_script, "script_update_order_panel_checked_classes"),
        (call_script, "script_update_order_panel_statistics_and_map"),

        (presentation_set_duration, 999999),
    ]),
    (ti_on_presentation_event_state_change,
      [(store_trigger_param_1, ":object"),
        (store_trigger_param_2, ":value"),
        (get_player_agent_no, ":player_agent"),
        (agent_get_team, ":player_team", ":player_agent"),

        (assign, ":update_listeners", 0),
        (try_begin),
          (eq, "$group0_has_troops", 1),
          (eq, ":object", "$g_presentation_obj_battle_check0"),
          (assign, ":update_listeners", 1),
          (assign, "$g_formation_group0_selected", ":value"),
          (try_begin),
            (eq, ":value", 1),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but0", 250, 0x44),
          (else_try),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but0", 250, 0),
          (try_end),
        (else_try),
          (eq, "$group1_has_troops", 1),
          (eq, ":object", "$g_presentation_obj_battle_check1"),
          (assign, ":update_listeners", 1),
          (assign, "$g_formation_group1_selected", ":value"),
          (try_begin),
            (eq, ":value", 1),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but1", 250, 0x44),
          (else_try),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but1", 250, 0),
          (try_end),
        (else_try),
          (eq, "$group2_has_troops", 1),
          (eq, ":object", "$g_presentation_obj_battle_check2"),
          (assign, ":update_listeners", 1),
          (assign, "$g_formation_group2_selected", ":value"),
          (try_begin),
            (eq, ":value", 1),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but2", 250, 0x44),
          (else_try),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but2", 250, 0),
          (try_end),
        (else_try),
          (eq, "$group3_has_troops", 1),
          (eq, ":object", "$g_presentation_obj_battle_check3"),
          (assign, ":update_listeners", 1),
          (assign, "$g_formation_group3_selected", ":value"),
          (try_begin),
            (eq, ":value", 1),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but3", 250, 0x44),
          (else_try),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but3", 250, 0),
          (try_end),
        (else_try),
          (eq, "$group4_has_troops", 1),
          (eq, ":object", "$g_presentation_obj_battle_check4"),
          (assign, ":update_listeners", 1),
          (assign, "$g_formation_group4_selected", ":value"),
          (try_begin),
            (eq, ":value", 1),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but4", 250, 0x44),
          (else_try),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but4", 250, 0),
          (try_end),
        (else_try),
          (eq, "$group5_has_troops", 1),
          (eq, ":object", "$g_presentation_obj_battle_check5"),
          (assign, ":update_listeners", 1),
          (assign, "$g_formation_group5_selected", ":value"),
          (try_begin),
            (eq, ":value", 1),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but5", 250, 0x44),
          (else_try),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but5", 250, 0),
          (try_end),
        (else_try),
          (eq, "$group6_has_troops", 1),
          (eq, ":object", "$g_presentation_obj_battle_check6"),
          (assign, ":update_listeners", 1),
          (assign, "$g_formation_group6_selected", ":value"),
          (try_begin),
            (eq, ":value", 1),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but6", 250, 0x44),
          (else_try),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but6", 250, 0),
          (try_end),
        (else_try),
          (eq, "$group7_has_troops", 1),
          (eq, ":object", "$g_presentation_obj_battle_check7"),
          (assign, ":update_listeners", 1),
          (assign, "$g_formation_group7_selected", ":value"),
          (try_begin),
            (eq, ":value", 1),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but7", 250, 0x44),
          (else_try),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but7", 250, 0),
          (try_end),
        (else_try),
          (eq, "$group8_has_troops", 1),
          (eq, ":object", "$g_presentation_obj_battle_check8"),
          (assign, ":update_listeners", 1),
          (assign, "$g_formation_group8_selected", ":value"),
          (try_begin),
            (eq, ":value", 1),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but8", 250, 0x44),
          (else_try),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but8", 250, 0),
          (try_end),
        (else_try),
          (eq, ":object", "$g_presentation_obj_battle_but0"),
          (assign, ":update_listeners", 1),

          (assign, "$g_formation_group0_selected", 1),
          (overlay_animate_to_alpha, "$g_presentation_obj_battle_but0", 250, 0x44),
          (overlay_set_val, "$g_presentation_obj_battle_check0", 1),

          (try_begin),
            (eq, "$group1_has_troops", 1),
            (assign, "$g_formation_group1_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check1", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but1", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group2_has_troops", 1),
            (assign, "$g_formation_group2_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check2", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but2", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group3_has_troops", 1),
            (assign, "$g_formation_group3_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check3", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but3", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group4_has_troops", 1),
            (assign, "$g_formation_group4_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check4", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but4", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group5_has_troops", 1),
            (assign, "$g_formation_group5_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check5", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but5", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group6_has_troops", 1),
            (assign, "$g_formation_group6_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check6", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but6", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group7_has_troops", 1),
            (assign, "$g_formation_group7_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check7", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but7", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group8_has_troops", 1),
            (assign, "$g_formation_group8_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check8", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but8", 250, 0),
          (try_end),
        (else_try),
          (eq, ":object", "$g_presentation_obj_battle_but1"),
          (assign, ":update_listeners", 1),

          (assign, "$g_formation_group1_selected", 1),
          (overlay_animate_to_alpha, "$g_presentation_obj_battle_but1", 250, 0x44),
          (overlay_set_val, "$g_presentation_obj_battle_check1", 1),

          (try_begin),
            (eq, "$group0_has_troops", 1),
            (assign, "$g_formation_group0_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check0", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but0", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group2_has_troops", 1),
            (assign, "$g_formation_group2_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check2", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but2", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group3_has_troops", 1),
            (assign, "$g_formation_group3_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check3", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but3", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group4_has_troops", 1),
            (assign, "$g_formation_group4_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check4", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but4", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group5_has_troops", 1),
            (assign, "$g_formation_group5_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check5", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but5", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group6_has_troops", 1),
            (assign, "$g_formation_group6_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check6", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but6", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group7_has_troops", 1),
            (assign, "$g_formation_group7_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check7", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but7", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group8_has_troops", 1),
            (assign, "$g_formation_group8_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check8", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but8", 250, 0),
          (try_end),
        (else_try),
          (eq, ":object", "$g_presentation_obj_battle_but2"),
          (assign, ":update_listeners", 1),

          (assign, "$g_formation_group2_selected", 1),
          (overlay_animate_to_alpha, "$g_presentation_obj_battle_but2", 250, 0x44),
          (overlay_set_val, "$g_presentation_obj_battle_check2", 1),

          (try_begin),
            (eq, "$group0_has_troops", 1),
            (assign, "$g_formation_group0_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check0", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but0", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group1_has_troops", 1),
            (assign, "$g_formation_group1_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check1", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but1", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group3_has_troops", 1),
            (assign, "$g_formation_group3_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check3", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but3", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group4_has_troops", 1),
            (assign, "$g_formation_group4_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check4", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but4", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group5_has_troops", 1),
            (assign, "$g_formation_group5_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check5", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but5", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group6_has_troops", 1),
            (assign, "$g_formation_group6_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check6", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but6", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group7_has_troops", 1),
            (assign, "$g_formation_group7_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check7", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but7", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group8_has_troops", 1),
            (assign, "$g_formation_group8_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check8", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but8", 250, 0),
          (try_end),
        (else_try),
          (eq, ":object", "$g_presentation_obj_battle_but3"),
          (assign, ":update_listeners", 1),

          (assign, "$g_formation_group3_selected", 1),
          (overlay_animate_to_alpha, "$g_presentation_obj_battle_but3", 250, 0x44),
          (overlay_set_val, "$g_presentation_obj_battle_check3", 1),

          (try_begin),
            (eq, "$group0_has_troops", 1),
            (assign, "$g_formation_group0_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check0", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but0", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group1_has_troops", 1),
            (assign, "$g_formation_group1_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check1", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but1", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group2_has_troops", 1),
            (assign, "$g_formation_group2_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check2", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but2", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group4_has_troops", 1),
            (assign, "$g_formation_group4_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check4", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but4", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group5_has_troops", 1),
            (assign, "$g_formation_group5_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check5", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but5", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group6_has_troops", 1),
            (assign, "$g_formation_group6_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check6", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but6", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group7_has_troops", 1),
            (assign, "$g_formation_group7_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check7", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but7", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group8_has_troops", 1),
            (assign, "$g_formation_group8_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check8", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but8", 250, 0),
          (try_end),
        (else_try),
          (eq, ":object", "$g_presentation_obj_battle_but4"),
          (assign, ":update_listeners", 1),

          (assign, "$g_formation_group4_selected", 1),
          (overlay_animate_to_alpha, "$g_presentation_obj_battle_but4", 250, 0x44),
          (overlay_set_val, "$g_presentation_obj_battle_check4", 1),

          (try_begin),
            (eq, "$group0_has_troops", 1),
            (assign, "$g_formation_group0_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check0", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but0", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group1_has_troops", 1),
            (assign, "$g_formation_group1_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check1", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but1", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group2_has_troops", 1),
            (assign, "$g_formation_group2_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check2", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but2", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group3_has_troops", 1),
            (assign, "$g_formation_group3_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check3", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but3", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group5_has_troops", 1),
            (assign, "$g_formation_group5_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check5", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but5", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group6_has_troops", 1),
            (assign, "$g_formation_group6_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check6", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but6", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group7_has_troops", 1),
            (assign, "$g_formation_group7_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check7", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but7", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group8_has_troops", 1),
            (assign, "$g_formation_group8_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check8", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but8", 250, 0),
          (try_end),
        (else_try),
          (eq, ":object", "$g_presentation_obj_battle_but5"),
          (assign, ":update_listeners", 1),

          (assign, "$g_formation_group5_selected", 1),
          (overlay_animate_to_alpha, "$g_presentation_obj_battle_but5", 250, 0x44),
          (overlay_set_val, "$g_presentation_obj_battle_check5", 1),

          (try_begin),
            (eq, "$group0_has_troops", 1),
            (assign, "$g_formation_group0_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check0", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but0", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group1_has_troops", 1),
            (assign, "$g_formation_group1_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check1", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but1", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group2_has_troops", 1),
            (assign, "$g_formation_group2_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check2", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but2", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group3_has_troops", 1),
            (assign, "$g_formation_group3_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check3", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but3", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group4_has_troops", 1),
            (assign, "$g_formation_group4_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check4", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but4", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group6_has_troops", 1),
            (assign, "$g_formation_group6_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check6", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but6", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group7_has_troops", 1),
            (assign, "$g_formation_group7_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check7", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but7", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group8_has_troops", 1),
            (assign, "$g_formation_group8_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check8", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but8", 250, 0),
          (try_end),
        (else_try),
          (eq, ":object", "$g_presentation_obj_battle_but6"),
          (assign, ":update_listeners", 1),

          (assign, "$g_formation_group6_selected", 1),
          (overlay_animate_to_alpha, "$g_presentation_obj_battle_but6", 250, 0x44),
          (overlay_set_val, "$g_presentation_obj_battle_check6", 1),

          (try_begin),
            (eq, "$group0_has_troops", 1),
            (assign, "$g_formation_group0_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check0", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but0", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group1_has_troops", 1),
            (assign, "$g_formation_group1_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check1", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but1", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group2_has_troops", 1),
            (assign, "$g_formation_group2_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check2", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but2", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group3_has_troops", 1),
            (assign, "$g_formation_group3_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check3", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but3", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group4_has_troops", 1),
            (assign, "$g_formation_group4_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check4", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but4", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group5_has_troops", 1),
            (assign, "$g_formation_group5_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check5", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but5", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group7_has_troops", 1),
            (assign, "$g_formation_group7_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check7", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but7", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group8_has_troops", 1),
            (assign, "$g_formation_group8_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check8", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but8", 250, 0),
          (try_end),
        (else_try),
          (eq, ":object", "$g_presentation_obj_battle_but7"),
          (assign, ":update_listeners", 1),

          (assign, "$g_formation_group7_selected", 1),
          (overlay_animate_to_alpha, "$g_presentation_obj_battle_but7", 250, 0x44),
          (overlay_set_val, "$g_presentation_obj_battle_check7", 1),

          (try_begin),
            (eq, "$group0_has_troops", 1),
            (assign, "$g_formation_group0_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check0", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but0", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group1_has_troops", 1),
            (assign, "$g_formation_group1_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check1", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but1", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group2_has_troops", 1),
            (assign, "$g_formation_group2_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check2", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but2", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group3_has_troops", 1),
            (assign, "$g_formation_group3_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check3", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but3", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group4_has_troops", 1),
            (assign, "$g_formation_group4_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check4", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but4", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group5_has_troops", 1),
            (assign, "$g_formation_group5_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check5", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but5", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group6_has_troops", 1),
            (assign, "$g_formation_group6_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check6", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but6", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group8_has_troops", 1),
            (assign, "$g_formation_group8_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check8", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but8", 250, 0),
          (try_end),
        (else_try),
          (eq, ":object", "$g_presentation_obj_battle_but8"),
          (assign, ":update_listeners", 1),

          (assign, "$g_formation_group8_selected", 1),
          (overlay_animate_to_alpha, "$g_presentation_obj_battle_but8", 250, 0x44),
          (overlay_set_val, "$g_presentation_obj_battle_check8", 1),

          (try_begin),
            (eq, "$group0_has_troops", 1),
            (assign, "$g_formation_group0_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check0", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but0", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group1_has_troops", 1),
            (assign, "$g_formation_group1_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check1", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but1", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group2_has_troops", 1),
            (assign, "$g_formation_group2_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check2", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but2", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group3_has_troops", 1),
            (assign, "$g_formation_group3_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check3", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but3", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group4_has_troops", 1),
            (assign, "$g_formation_group4_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check4", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but4", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group5_has_troops", 1),
            (assign, "$g_formation_group5_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check5", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but5", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group6_has_troops", 1),
            (assign, "$g_formation_group6_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check6", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but6", 250, 0),
          (try_end),
          (try_begin),
            (eq, "$group7_has_troops", 1),
            (assign, "$g_formation_group7_selected", 0),
            (overlay_set_val, "$g_presentation_obj_battle_check7", 0),
            (overlay_animate_to_alpha, "$g_presentation_obj_battle_but7", 250, 0),
          (try_end),
        (else_try),
          (eq, ":object", "$g_presentation_obj_battle_14"),
          (call_script, "script_team_give_order_from_order_panel", ":player_agent", mordr_spread_out),
        (else_try),
          (eq, ":object", "$g_presentation_obj_battle_15"),
          (call_script, "script_team_give_order_from_order_panel", ":player_agent", mordr_stand_closer),
        (else_try),
          (eq, ":object", "$g_presentation_obj_battle_16"),
          (call_script, "script_team_give_order_from_order_panel", ":player_agent", mordr_fall_back),
        (else_try),
          (eq, ":object", "$g_presentation_obj_battle_17"),
          (call_script, "script_team_give_order_from_order_panel", ":player_agent", mordr_advance),
        (else_try),
          (eq, ":object", "$g_presentation_obj_battle_10"),
          (try_begin),
            (eq, ":value", 4),
            (call_script, "script_team_give_order_from_order_panel", ":player_agent", mordr_hold),
            (call_script, "script_update_order_panel", ":player_team"),
            (assign, "$g_latest_order_1", 4),
          (else_try),
            (eq, ":value", 3),
            (call_script, "script_team_give_order_from_order_panel", ":player_agent", mordr_follow),
            (call_script, "script_update_order_panel", ":player_team"),
            (assign, "$g_latest_order_1", 3),
          (else_try),
            (eq, ":value", 2),
            (call_script, "script_team_give_order_from_order_panel", ":player_agent", mordr_charge),
            (call_script, "script_update_order_panel", ":player_team"),
            ##          (else_try),
            ##            (eq, ":value", 4),
            ##            (call_script, "script_team_give_order_from_order_panel", ":player_agent", mordr_advance),
            ##            (call_script, "script_update_order_panel", ":player_team"),
            ##          (else_try),
            ##            (eq, ":value", 3),
            ##            (call_script, "script_team_give_order_from_order_panel", ":player_agent", mordr_fall_back),
            ##            (call_script, "script_update_order_panel", ":player_team"),
            ##          (else_try),
            ##            (eq, ":value", 2),
            ##            (call_script, "script_team_give_order_from_order_panel", ":player_agent", mordr_stand_closer),
            ##            (call_script, "script_update_order_panel", ":player_team"),
            ##          (else_try),
            ##            (eq, ":value", 1),
            ##            (call_script, "script_team_give_order_from_order_panel", ":player_agent", mordr_spread_out),
            ##            (call_script, "script_update_order_panel", ":player_team"),
            (assign, "$g_latest_order_1", 2),
          (else_try),
            (eq, ":value", 1),
            (call_script, "script_team_give_order_from_order_panel", ":player_agent", mordr_stand_ground),
            (call_script, "script_update_order_panel", ":player_team"),
            (assign, "$g_latest_order_1", 1),
          (else_try),
            (eq, ":value", 0),
            (call_script, "script_team_give_order_from_order_panel", ":player_agent", mordr_retreat),
            (call_script, "script_update_order_panel", ":player_team"),
            (assign, "$g_latest_order_1", 0),
          (try_end),
        (else_try),
          (eq, ":object", "$g_presentation_obj_battle_11"),
          (try_begin),
            (eq, ":value", 1),
            (call_script, "script_team_give_order_from_order_panel", ":player_agent", mordr_mount),
            (call_script, "script_update_order_panel", ":player_team"),
            (assign, "$g_latest_order_2", 1),
          (else_try),
            (eq, ":value", 0),
            (call_script, "script_team_give_order_from_order_panel", ":player_agent", mordr_dismount),
            (call_script, "script_update_order_panel", ":player_team"),
            (assign, "$g_latest_order_2", 0),
          (try_end),
        (else_try),
          (eq, ":object", "$g_presentation_obj_battle_12"),
          (try_begin),
            (eq, ":value", 1),
            (call_script, "script_team_give_order_from_order_panel", ":player_agent", mordr_hold_fire),
            (call_script, "script_update_order_panel", ":player_team"),
            (assign, "$g_latest_order_3", 1),
          (else_try),
            (eq, ":value", 0),
            (call_script, "script_team_give_order_from_order_panel", ":player_agent", mordr_fire_at_will),
            (call_script, "script_update_order_panel", ":player_team"),
            (assign, "$g_latest_order_3", 0),
          (try_end),
        (else_try),
          (eq, ":object", "$g_presentation_obj_battle_13"),
          (try_begin),
            (eq, ":value", 1),
            (call_script, "script_team_give_order_from_order_panel", ":player_agent", mordr_use_any_weapon),
            (call_script, "script_update_order_panel", ":player_team"),
            (assign, "$g_latest_order_4", 1),
          (else_try),
            (eq, ":value", 0),
            (call_script, "script_team_give_order_from_order_panel", ":player_agent", mordr_use_blunt_weapons),
            (call_script, "script_update_order_panel", ":player_team"),
            (assign, "$g_latest_order_4", 0),
          (try_end),
        (else_try),
          (eq, ":object", "$g_battle_map_plane"),
          (get_scene_boundaries, pos2, pos3),
          (mouse_get_position, pos1),
          (set_fixed_point_multiplier, 1000),
          (position_get_x, ":mouse_x", pos1),
          (position_get_y, ":mouse_y", pos1),
          (store_sub, ":map_x", 980, "$g_battle_map_width"),
          (store_sub, ":map_y", 730, "$g_battle_map_height"),
          (val_sub, ":mouse_x", ":map_x"),
          (val_sub, ":mouse_y", ":map_y"),
          (val_clamp, ":mouse_x", 0, "$g_battle_map_width"),
          (val_clamp, ":mouse_y", 0, "$g_battle_map_height"),
          (val_mul, ":mouse_x", "$g_battle_map_scale"),
          (val_mul, ":mouse_y", "$g_battle_map_scale"),
          (set_fixed_point_multiplier, 1000),
          (position_set_x, pos1, ":mouse_x"),
          (position_set_y, pos1, ":mouse_y"),
          (position_transform_position_to_parent, pos3, pos2, pos1),
          (try_begin),
            (eq, "$g_formation_group0_selected", 1),
            (team_give_order, ":player_team", 0, mordr_hold),
            (team_set_order_position, ":player_team", 0, pos3),
          (try_end),
          (try_begin),
            (eq, "$g_formation_group1_selected", 1),
            (team_give_order, ":player_team", 1, mordr_hold),
            (team_set_order_position, ":player_team", 1, pos3),
          (try_end),
          (try_begin),
            (eq, "$g_formation_group2_selected", 1),
            (team_give_order, ":player_team", 2, mordr_hold),
            (team_set_order_position, ":player_team", 2, pos3),
          (try_end),
          (try_begin),
            (eq, "$g_formation_group3_selected", 1),
            (team_give_order, ":player_team", 3, mordr_hold),
            (team_set_order_position, ":player_team", 3, pos3),
          (try_end),
          (try_begin),
            (eq, "$g_formation_group4_selected", 1),
            (team_give_order, ":player_team", 4, mordr_hold),
            (team_set_order_position, ":player_team", 4, pos3),
          (try_end),
          (try_begin),
            (eq, "$g_formation_group5_selected", 1),
            (team_give_order, ":player_team", 5, mordr_hold),
            (team_set_order_position, ":player_team", 5, pos3),
          (try_end),
          (try_begin),
            (eq, "$g_formation_group6_selected", 1),
            (team_give_order, ":player_team", 6, mordr_hold),
            (team_set_order_position, ":player_team", 6, pos3),
          (try_end),
          (try_begin),
            (eq, "$g_formation_group7_selected", 1),
            (team_give_order, ":player_team", 7, mordr_hold),
            (team_set_order_position, ":player_team", 7, pos3),
          (try_end),
          (try_begin),
            (eq, "$g_formation_group8_selected", 1),
            (team_give_order, ":player_team", 8, mordr_hold),
            (team_set_order_position, ":player_team", 8, pos3),
          (try_end),
          # formations by motomataru chief
          # TODO: script off and use HOLD OVER THERE functionality from formations_mission_templates to attack enemies or set up selected divisions in army formation
          (assign, ":fixed_point_multiplier", 1),
          (convert_to_fixed_point, ":fixed_point_multiplier"),
          (set_fixed_point_multiplier, 100),
          (call_script, "script_division_reset_places"),
          (call_script, "script_process_place_divisions"),
          (set_fixed_point_multiplier, ":fixed_point_multiplier"),
          # end formations
          (call_script, "script_update_order_flags_on_map"),
          (call_script, "script_update_order_panel", ":player_team"),
        (try_end),

        (try_begin),
          (eq, ":update_listeners", 1),
          (team_set_order_listener, ":player_team", -1),
          (try_begin),
            (this_or_next|eq, "$g_formation_group0_selected", 1),
            (eq, "$group0_has_troops", 0),
            (this_or_next|eq, "$g_formation_group1_selected", 1),
            (eq, "$group1_has_troops", 0),
            (this_or_next|eq, "$g_formation_group2_selected", 1),
            (eq, "$group2_has_troops", 0),
            (this_or_next|eq, "$g_formation_group3_selected", 1),
            (eq, "$group3_has_troops", 0),
            (this_or_next|eq, "$g_formation_group4_selected", 1),
            (eq, "$group4_has_troops", 0),
            (this_or_next|eq, "$g_formation_group5_selected", 1),
            (eq, "$group5_has_troops", 0),
            (this_or_next|eq, "$g_formation_group6_selected", 1),
            (eq, "$group6_has_troops", 0),
            (this_or_next|eq, "$g_formation_group7_selected", 1),
            (eq, "$group7_has_troops", 0),
            (this_or_next|eq, "$g_formation_group8_selected", 1),
            (eq, "$group8_has_troops", 0),
            (team_set_order_listener, ":player_team", grc_everyone),
          (else_try),
            (assign, ":to_add", 0),

            (try_begin),
              (eq, "$g_formation_group0_selected", 1),
              (team_set_order_listener, ":player_team", 0, ":to_add"),
              (assign, ":to_add", 1),
            (try_end),
            (try_begin),
              (eq, "$g_formation_group1_selected", 1),
              (team_set_order_listener, ":player_team", 1, ":to_add"),
              (assign, ":to_add", 1),
            (try_end),
            (try_begin),
              (eq, "$g_formation_group2_selected", 1),
              (team_set_order_listener, ":player_team", 2, ":to_add"),
              (assign, ":to_add", 1),
            (try_end),
            (try_begin),
              (eq, "$g_formation_group3_selected", 1),
              (team_set_order_listener, ":player_team", 3, ":to_add"),
              (assign, ":to_add", 1),
            (try_end),
            (try_begin),
              (eq, "$g_formation_group4_selected", 1),
              (team_set_order_listener, ":player_team", 4, ":to_add"),
              (assign, ":to_add", 1),
            (try_end),
            (try_begin),
              (eq, "$g_formation_group5_selected", 1),
              (team_set_order_listener, ":player_team", 5, ":to_add"),
              (assign, ":to_add", 1),
            (try_end),
            (try_begin),
              (eq, "$g_formation_group6_selected", 1),
              (team_set_order_listener, ":player_team", 6, ":to_add"),
              (assign, ":to_add", 1),
            (try_end),
            (try_begin),
              (eq, "$g_formation_group7_selected", 1),
              (team_set_order_listener, ":player_team", 7, ":to_add"),
              (assign, ":to_add", 1),
            (try_end),
            (try_begin),
              (eq, "$g_formation_group8_selected", 1),
              (team_set_order_listener, ":player_team", 8, ":to_add"),
              (assign, ":to_add", 1),
            (try_end),
          (try_end),
        (try_end),
    ]),
    (ti_on_presentation_mouse_enter_leave,
      [(store_trigger_param_1, ":object"),
        (store_trigger_param_2, ":enter_leave"),
        (try_begin),
          (eq, ":object", "$g_presentation_obj_battle_but0"),
          (try_begin),
            (eq, ":enter_leave", 0),
            (overlay_animate_to_color, "$g_presentation_but0_movement", 250, 0xFFFFFF),
            (overlay_animate_to_color, "$g_presentation_but0_riding", 250, 0xFFFFFF),
            (overlay_animate_to_color, "$g_presentation_but0_weapon_usage", 250, 0xFFFFFF),
            (overlay_animate_to_color, "$g_presentation_obj_battle_name0", 250, 0xFFFFFF),
          (else_try),
            (overlay_animate_to_color, "$g_presentation_but0_movement", 250, 0),
            (overlay_animate_to_color, "$g_presentation_but0_riding", 250, 0),
            (overlay_animate_to_color, "$g_presentation_but0_weapon_usage", 250, 0),
            (overlay_animate_to_color, "$g_presentation_obj_battle_name0", 250, 0),
          (try_end),
        (else_try),
          (eq, ":object", "$g_presentation_obj_battle_but1"),
          (try_begin),
            (eq, ":enter_leave", 0),
            (overlay_animate_to_color, "$g_presentation_but1_movement", 250, 0xFFFFFF),
            (overlay_animate_to_color, "$g_presentation_but1_riding", 250, 0xFFFFFF),
            (overlay_animate_to_color, "$g_presentation_but1_weapon_usage", 250, 0xFFFFFF),
            (overlay_animate_to_color, "$g_presentation_obj_battle_name1", 250, 0xFFFFFF),
          (else_try),
            (overlay_animate_to_color, "$g_presentation_but1_movement", 250, 0),
            (overlay_animate_to_color, "$g_presentation_but1_riding", 250, 0),
            (overlay_animate_to_color, "$g_presentation_but1_weapon_usage", 250, 0),
            (overlay_animate_to_color, "$g_presentation_obj_battle_name1", 250, 0),
          (try_end),
        (else_try),
          (eq, ":object", "$g_presentation_obj_battle_but2"),
          (try_begin),
            (eq, ":enter_leave", 0),
            (overlay_animate_to_color, "$g_presentation_but2_movement", 250, 0xFFFFFF),
            (overlay_animate_to_color, "$g_presentation_but2_riding", 250, 0xFFFFFF),
            (overlay_animate_to_color, "$g_presentation_but2_weapon_usage", 250, 0xFFFFFF),
            (overlay_animate_to_color, "$g_presentation_obj_battle_name2", 250, 0xFFFFFF),
          (else_try),
            (overlay_animate_to_color, "$g_presentation_but2_movement", 250, 0),
            (overlay_animate_to_color, "$g_presentation_but2_riding", 250, 0),
            (overlay_animate_to_color, "$g_presentation_but2_weapon_usage", 250, 0),
            (overlay_animate_to_color, "$g_presentation_obj_battle_name2", 250, 0),
          (try_end),
        (else_try),
          (eq, ":object", "$g_presentation_obj_battle_but3"),
          (try_begin),
            (eq, ":enter_leave", 0),
            (overlay_animate_to_color, "$g_presentation_but3_movement", 250, 0xFFFFFF),
            (overlay_animate_to_color, "$g_presentation_but3_riding", 250, 0xFFFFFF),
            (overlay_animate_to_color, "$g_presentation_but3_weapon_usage", 250, 0xFFFFFF),
            (overlay_animate_to_color, "$g_presentation_obj_battle_name3", 250, 0xFFFFFF),
          (else_try),
            (overlay_animate_to_color, "$g_presentation_but3_movement", 250, 0),
            (overlay_animate_to_color, "$g_presentation_but3_riding", 250, 0),
            (overlay_animate_to_color, "$g_presentation_but3_weapon_usage", 250, 0),
            (overlay_animate_to_color, "$g_presentation_obj_battle_name3", 250, 0),
          (try_end),
        (else_try),
          (eq, ":object", "$g_presentation_obj_battle_but4"),
          (try_begin),
            (eq, ":enter_leave", 0),
            (overlay_animate_to_color, "$g_presentation_but4_movement", 250, 0xFFFFFF),
            (overlay_animate_to_color, "$g_presentation_but4_riding", 250, 0xFFFFFF),
            (overlay_animate_to_color, "$g_presentation_but4_weapon_usage", 250, 0xFFFFFF),
            (overlay_animate_to_color, "$g_presentation_obj_battle_name4", 250, 0xFFFFFF),
          (else_try),
            (overlay_animate_to_color, "$g_presentation_but4_movement", 250, 0),
            (overlay_animate_to_color, "$g_presentation_but4_riding", 250, 0),
            (overlay_animate_to_color, "$g_presentation_but4_weapon_usage", 250, 0),
            (overlay_animate_to_color, "$g_presentation_obj_battle_name4", 250, 0),
          (try_end),
        (else_try),
          (eq, ":object", "$g_presentation_obj_battle_but5"),
          (try_begin),
            (eq, ":enter_leave", 0),
            (overlay_animate_to_color, "$g_presentation_but5_movement", 250, 0xFFFFFF),
            (overlay_animate_to_color, "$g_presentation_but5_riding", 250, 0xFFFFFF),
            (overlay_animate_to_color, "$g_presentation_but5_weapon_usage", 250, 0xFFFFFF),
            (overlay_animate_to_color, "$g_presentation_obj_battle_name5", 250, 0xFFFFFF),
          (else_try),
            (overlay_animate_to_color, "$g_presentation_but5_movement", 250, 0),
            (overlay_animate_to_color, "$g_presentation_but5_riding", 250, 0),
            (overlay_animate_to_color, "$g_presentation_but5_weapon_usage", 250, 0),
            (overlay_animate_to_color, "$g_presentation_obj_battle_name5", 250, 0),
          (try_end),
        (else_try),
          (eq, ":object", "$g_presentation_obj_battle_but6"),
          (try_begin),
            (eq, ":enter_leave", 0),
            (overlay_animate_to_color, "$g_presentation_but6_movement", 250, 0xFFFFFF),
            (overlay_animate_to_color, "$g_presentation_but6_riding", 250, 0xFFFFFF),
            (overlay_animate_to_color, "$g_presentation_but6_weapon_usage", 250, 0xFFFFFF),
            (overlay_animate_to_color, "$g_presentation_obj_battle_name6", 250, 0xFFFFFF),
          (else_try),
            (overlay_animate_to_color, "$g_presentation_but6_movement", 250, 0),
            (overlay_animate_to_color, "$g_presentation_but6_riding", 250, 0),
            (overlay_animate_to_color, "$g_presentation_but6_weapon_usage", 250, 0),
            (overlay_animate_to_color, "$g_presentation_obj_battle_name6", 250, 0),
          (try_end),
        (else_try),
          (eq, ":object", "$g_presentation_obj_battle_but7"),
          (try_begin),
            (eq, ":enter_leave", 0),
            (overlay_animate_to_color, "$g_presentation_but7_movement", 250, 0xFFFFFF),
            (overlay_animate_to_color, "$g_presentation_but7_riding", 250, 0xFFFFFF),
            (overlay_animate_to_color, "$g_presentation_but7_weapon_usage", 250, 0xFFFFFF),
            (overlay_animate_to_color, "$g_presentation_obj_battle_name7", 250, 0xFFFFFF),
          (else_try),
            (overlay_animate_to_color, "$g_presentation_but7_movement", 250, 0),
            (overlay_animate_to_color, "$g_presentation_but7_riding", 250, 0),
            (overlay_animate_to_color, "$g_presentation_but7_weapon_usage", 250, 0),
            (overlay_animate_to_color, "$g_presentation_obj_battle_name7", 250, 0),
          (try_end),
        (else_try),
          (eq, ":object", "$g_presentation_obj_battle_but8"),
          (try_begin),
            (eq, ":enter_leave", 0),
            (overlay_animate_to_color, "$g_presentation_but8_movement", 250, 0xFFFFFF),
            (overlay_animate_to_color, "$g_presentation_but8_riding", 250, 0xFFFFFF),
            (overlay_animate_to_color, "$g_presentation_but8_weapon_usage", 250, 0xFFFFFF),
            (overlay_animate_to_color, "$g_presentation_obj_battle_name8", 250, 0xFFFFFF),
          (else_try),
            (overlay_animate_to_color, "$g_presentation_but8_movement", 250, 0),
            (overlay_animate_to_color, "$g_presentation_but8_riding", 250, 0),
            (overlay_animate_to_color, "$g_presentation_but8_weapon_usage", 250, 0),
            (overlay_animate_to_color, "$g_presentation_obj_battle_name8", 250, 0),
          (try_end),
        (try_end),
    ]),
    # (ti_on_presentation_run,
    # [(store_trigger_param_1, ":cur_time"),
    # (try_begin),
    # (this_or_next|game_key_clicked, gk_group0_hear),  wiped out anyway by battle menu presentation
    # (this_or_next|game_key_clicked, gk_group1_hear),
    # (this_or_next|game_key_clicked, gk_group2_hear),
    # (this_or_next|game_key_clicked, gk_group3_hear),
    # (this_or_next|game_key_clicked, gk_group4_hear),
    # (this_or_next|game_key_clicked, gk_group5_hear),
    # (this_or_next|game_key_clicked, gk_group6_hear),
    # (this_or_next|game_key_clicked, gk_group7_hear),
    # (this_or_next|game_key_clicked, gk_group8_hear),
    # (this_or_next|game_key_clicked, gk_everyone_hear),
    # (game_key_clicked, gk_reverse_order_group),
    # (call_script, "script_update_order_panel_checked_classes"),
    # (try_end),
    # (try_begin),
    # (this_or_next|game_key_clicked, gk_order_1),  wiped out anyway by battle menu presentation
    # (this_or_next|game_key_clicked, gk_order_2),
    # (this_or_next|game_key_clicked, gk_order_3),
    # (this_or_next|game_key_clicked, gk_order_4),
    # (this_or_next|game_key_clicked, gk_order_5),
    # (game_key_clicked, gk_order_6),
    # (get_player_agent_no, ":player_agent"),
    # (agent_get_team, ":player_team", ":player_agent"),
    # (call_script, "script_update_order_panel", ":player_team"),
    # (try_end),
    # (try_begin),
    # (gt, ":cur_time", 200),
    # (game_key_clicked, gk_view_orders),
    # (try_for_agents, ":cur_agent"),  done on load
    # (agent_set_slot, ":cur_agent", slot_agent_map_overlay_id, 0),
    # (try_end),
    # (presentation_set_duration, 0), done in mt now
    # (try_end),
    # ]),
]),


("food_options", 0, mesh_load_window, [
    (ti_on_presentation_load, [
        (presentation_set_duration, 999999),
        (set_fixed_point_multiplier, 1000),

        (create_text_overlay, "$g_presentation_food_start", "@Food Consumption", tf_center_justify),
        (position_set_x, pos0, Screen_Width/2),
        #  (position_set_y, pos0, Screen_Title_Height),
        (position_set_y, pos0, 600),
        (overlay_set_position, "$g_presentation_food_start", pos0),

        #  (assign, ":y_pos", Screen_Title_Height-Screen_Text_Height-Screen_Text_Height),
        (assign, ":y_pos", 450),
        (assign, ":x_pos", 50),

        (position_set_x, pos1, 800),
        (position_set_y, pos1, 800),


        #Disable formations option
        (try_for_range, ":item", "itm_raw_date_fruit", food_end),
            (neq, ":item", "itm_furs"),

            (try_begin),
                (gt, ":x_pos", 900),
                (assign, ":x_pos", 50),
                (val_sub, ":y_pos", 100),
            (try_end),

            (position_set_x, pos0, ":x_pos"),
            (position_set_y, pos0, ":y_pos"),
            (create_image_button_overlay, ":cur_obj", "mesh_mp_inventory_slot_empty", "mesh_mp_inventory_slot_empty"),
            (overlay_set_size, ":cur_obj", pos1),
            (overlay_set_position, ":cur_obj", pos0),
            (create_mesh_overlay_with_item_id, reg0, ":item"),
            (store_add, ":item_x", ":x_pos", 50),
            (store_add, ":item_y", ":y_pos", 50),
            (position_set_x, pos2, ":item_x"),
            (position_set_y, pos2, ":item_y"),
            (overlay_set_position, reg0, pos2),
            (val_add, ":x_pos", 100),
        (try_end),

        # This is for Done button
        (assign, "$food_options_overlay_exit", 0), # forced initialization
        (create_game_button_overlay, "$food_options_overlay_exit", "str_done"),
        (position_set_x, pos1, 2*Screen_Width/3),
        (position_set_y, pos1, Screen_Border_Width),
        (overlay_set_position, "$food_options_overlay_exit", pos1),
    ]),

    (ti_on_presentation_run, [
        (try_begin),
          (this_or_next|key_clicked, key_escape),
          (key_clicked, key_xbox_start),
          (presentation_set_duration, 0),
        (try_end),
    ]),

    (ti_on_presentation_event_state_change, [
        (store_trigger_param_1, ":object"),
        #(store_trigger_param_2, ":value"),

        (try_begin),
          (eq, ":object", "$food_options_overlay_exit"),
          (presentation_set_duration, 0),
        (else_try),
          (store_sub, ":selected_food", ":object", "$g_presentation_food_start"),
          (val_div, ":selected_food", 2),
          (try_begin),
            (gt, ":selected_food", 0),
            (val_add, ":selected_food", 1),
          (try_end),
          (val_add, ":selected_food", "itm_raw_date_fruit"),
          (str_store_item_name, s0, ":selected_food"),

          (try_begin),
            (item_get_slot, reg1, ":selected_food", slot_item_edible),
            (val_clamp, reg1, 0, 2),
            (store_sub, reg1, 1, reg1),
            (item_set_slot, ":selected_food", slot_item_edible, reg1),
          (try_end),

          (display_message, "@Your party will {reg1?now:no longer} consume {s0}"),
        (try_end),
    ]),
]),

# # screen write
# ("screen_write",prsntf_read_only,0,[
	# (ti_on_presentation_load,
	# [
	# (assign, "$g_presentation_obj_1", -1),
	# (assign, "$g_presentation_obj_2", -1),

	# (assign, "$g_presentation_obj_1_alpha", 0),
        # (assign, "$g_presentation_obj_2_alpha", 0),


		# (mission_cam_set_screen_color, 0xFF000000), #Blackout the screen first
	# ]),
	# (ti_on_presentation_run,
	# [
	# (store_trigger_param_1, ":cur_time"),
        # (set_fixed_point_multiplier, 1000),
        # (presentation_set_duration, 1000000),

		# (try_begin),

		  # (lt, "$g_presentation_obj_1", 0),
          # (str_store_string, s1, "str_date_string"),#first string
          # (create_text_overlay, "$g_presentation_obj_1", s1, tf_center_justify|tf_double_space|tf_vertical_align_center),
		  # (overlay_set_color, "$g_presentation_obj_1", 0xFF0000),
          # (overlay_set_alpha, "$g_presentation_obj_1", 0),
          # (position_set_x, pos1, 1750),
          # (position_set_y, pos1, 1750),
          # (overlay_set_size, "$g_presentation_obj_1", pos1),
          # (position_set_x, pos1, 500),
          # (position_set_y, pos1, 375),
          # (overlay_set_position, "$g_presentation_obj_1", pos1),
          # (overlay_animate_to_alpha, "$g_presentation_obj_1", 2000, 0xFF),

		  # (else_try),

		   # (gt, ":cur_time", 4000), # was 6000 = 6 sec, now 4 sec,
          # (lt, "$g_presentation_obj_2", 0), #then second string
          # (str_store_string, s2, "str_place_string"),
          # (create_text_overlay, "$g_presentation_obj_2", s2, tf_center_justify|tf_double_space|tf_vertical_align_center),
		  # (overlay_set_color, "$g_presentation_obj_2", 0xFF0000),
          # (overlay_set_alpha, "$g_presentation_obj_2", 0),
          # (position_set_x, pos1, 1500),
          # (position_set_y, pos1, 1500),
          # (overlay_set_size, "$g_presentation_obj_2", pos1),
          # (position_set_x, pos1, 500),
          # (position_set_y, pos1, 295),
          # (overlay_set_position, "$g_presentation_obj_2", pos1),
          # (overlay_animate_to_alpha, "$g_presentation_obj_2", 2000, 0xFF),

		  # (else_try),

		   # (gt, ":cur_time", 6500), #was 7500
		   # (eq, "$g_presentation_obj_1_alpha", 0),
          # (assign, "$g_presentation_obj_1_alpha", 1),
		  # (overlay_animate_to_alpha, "$g_presentation_obj_1", 1500, 0x00), #lose the string1

		  # (else_try),

		   # (gt, ":cur_time", 7500), #was 8500
		   # (eq, "$g_presentation_obj_2_alpha", 0),
          # (assign, "$g_presentation_obj_2_alpha", 1),
		  # (overlay_animate_to_alpha, "$g_presentation_obj_2", 1500, 0x00),#lose the string2

		  # (else_try),

		   # (gt, ":cur_time", 9000), #was 11000

		    # (mission_cam_animate_to_screen_color, 0x00000000, 3000), # bright the screen in 3 seconds


		  # (else_try),

		# (gt, ":cur_time", 13000), # was 15000
		  # (presentation_set_duration, 0), #end the party

		  # (try_end),
		  # ]),
		 # ]),
# # screen write ends

# screen write
("screen_write2",prsntf_read_only,0,[
	(ti_on_presentation_load,[
	  (assign, "$g_presentation_obj_1", -1),
    (assign, "$g_presentation_obj_2", -1),

    (assign, "$g_presentation_obj_1_alpha", 0),
    (assign, "$g_presentation_obj_2_alpha", 0),
		(mission_cam_set_screen_color, 0xFF000000), #Blackout the screen first
	]),

	(ti_on_presentation_run,[
    (store_trigger_param_1, ":cur_time"),
    (set_fixed_point_multiplier, 1000),
    (presentation_set_duration, 1000000),
    (try_begin),
        (lt, "$g_presentation_obj_1", 0),
        (store_current_hours, ":hours"),
        (call_script, "script_game_get_date_text",0,":hours"),
        #(str_store_string, s1, "str_date_string"),#first string
        (create_text_overlay, "$g_presentation_obj_1", s1, tf_center_justify|tf_double_space|tf_vertical_align_center),
        (overlay_set_color, "$g_presentation_obj_1", 0xFF0000),
        (overlay_set_alpha, "$g_presentation_obj_1", 0),
        (position_set_x, pos1, 1750),
        (position_set_y, pos1, 1750),
        (overlay_set_size, "$g_presentation_obj_1", pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 375),
        (overlay_set_position, "$g_presentation_obj_1", pos1),
        (overlay_animate_to_alpha, "$g_presentation_obj_1", 2000, 0xFF),
    (else_try),
        (gt, ":cur_time", 4000), # was 6000 = 6 sec, now 4 sec,
        (lt, "$g_presentation_obj_2", 0), #then second string
        (str_store_party_name, s33, "$current_town"),
        (str_store_string, s2, "@{s33}"),
        (create_text_overlay, "$g_presentation_obj_2", s2, tf_center_justify|tf_double_space|tf_vertical_align_center),
        (overlay_set_color, "$g_presentation_obj_2", 0xFF0000),
        (overlay_set_alpha, "$g_presentation_obj_2", 0),
        (position_set_x, pos1, 1500),
        (position_set_y, pos1, 1500),
        (overlay_set_size, "$g_presentation_obj_2", pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 295),
        (overlay_set_position, "$g_presentation_obj_2", pos1),
        (overlay_animate_to_alpha, "$g_presentation_obj_2", 2000, 0xFF),
    (else_try),
        (gt, ":cur_time", 6500), #was 7500
        (eq, "$g_presentation_obj_1_alpha", 0),
        (assign, "$g_presentation_obj_1_alpha", 1),
        (overlay_animate_to_alpha, "$g_presentation_obj_1", 1500, 0x00), #lose the string1
    (else_try),
        (gt, ":cur_time", 7500), #was 8500
        (eq, "$g_presentation_obj_2_alpha", 0),
        (assign, "$g_presentation_obj_2_alpha", 1),
        (overlay_animate_to_alpha, "$g_presentation_obj_2", 1500, 0x00),#lose the string2
    (else_try),
        (gt, ":cur_time", 9000), #was 11000
        (mission_cam_animate_to_screen_color, 0x00000000, 3000), # bright the screen in 3 seconds
    (else_try),
        (gt, ":cur_time", 13000), # was 15000
        (presentation_set_duration, 0), #end the party
    (try_end),
  ]),
]),


############
####Siege warfare
("infiltrationandsabotage",0,mesh_load_window,[
    (ti_on_presentation_load,
      [(presentation_set_duration,999999),
        (set_fixed_point_multiplier, 1000),
        #(store_faction_of_party,"$g_presentation_center_faction","$g_encountered_party"),
        (party_get_slot,":party_type","$g_encountered_party",slot_party_type),

        (try_begin),
          (eq,":party_type",spt_castle),
          (str_store_string,s2,"@fort"),
        (else_try),
          (eq,":party_type",spt_town),
          (str_store_string,s2,"@town"),
        (else_try),
          (eq,":party_type",spt_village),
          (str_store_string,s2,"@village"),
        (try_end),
        #
        (create_text_overlay, reg1, "@Infiltration", tf_center_justify),
        (overlay_set_color, reg1, 0xFFFF2222), #rojo
        #(overlay_set_color, reg1, 0xDDDDDD),
        (position_set_x, pos1, 260),
        (position_set_y, pos1, 580),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 1400),
        (position_set_y, pos1, 1400),
        (overlay_set_size, reg1, pos1),
        (create_text_overlay, reg1, "@A good way to hasten the fall of the {s2} is to infiltrate it with a group of men to damage the defences, food stores, water supplies or loyalty of the defenders. It is a difficult and risky maneuver, almost suicidal. " +
        "Those you send in have low chances of returning, but if successful, they could cause great damage to the enemy. They need 600 denars for their troubles. What type of sabotage would you like them to cause?", tf_center_justify|tf_double_space|tf_scrollable),
        #  (overlay_set_color, reg1, 0xDDDDDD),
        (position_set_x, pos1, 80),
        (position_set_y, pos1, 180),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 340),
        (position_set_y, pos1, 340),
        (overlay_set_area_size, reg1, pos1),
        (position_set_x, pos1, 800),
        (position_set_y, pos1, 800),
        (overlay_set_size, reg1, pos1),

        # ###mesh de fondo
        # (create_mesh_overlay, reg0, "mesh_pic_extra_intro2"),
        # (position_set_x, pos1, -1),
        # (position_set_y, pos1, -1),
        # (overlay_set_position, reg0, pos1),
        # (position_set_x, pos1, 1002),
        # (position_set_y, pos1, 1002),
        # (overlay_set_size, reg0, pos1),

        #                                                            ##############  CANCEL  ###############
        ## basicos
        ##        (create_game_button_overlay, "$g_presentation_obj_1", "str_continue"),
        ##        (position_set_x, pos1, 900),
        ##        (position_set_y, pos1, 25),
        ##        (overlay_set_position, "$g_presentation_obj_1", pos1),

        (create_game_button_overlay,"$g_presentation_obj_2","str_cancel",tf_center_justify),
        (position_set_x, pos1, 650),
        (position_set_y, pos1, 25),
        (overlay_set_position, "$g_presentation_obj_2", pos1),

        (try_begin),
          (ge,"$g_presentations_next_presentation",-1),
          #poison water
          (create_game_button_overlay,"$g_presentation_obj_3","@Poison the {s2}'s water.",tf_center_justify),
          (position_set_x, pos1, 700),
          (position_set_y, pos1, 330),
          (overlay_set_position, "$g_presentation_obj_3", pos1),
          (position_set_x, pos1, 290),(position_set_y, pos1, 50),
          (overlay_set_size, "$g_presentation_obj_3", pos1),
          #kill cattle
          (create_game_button_overlay,"$g_presentation_obj_4","@Kill the {s2}'s livestock.",tf_center_justify),
          (position_set_x, pos1, 700),
          (position_set_y, pos1, 260),
          (overlay_set_position, "$g_presentation_obj_4", pos1),
          (position_set_x, pos1, 290),(position_set_y, pos1, 50),
          (overlay_set_size, "$g_presentation_obj_4", pos1),
          #burn food
          (create_game_button_overlay,"$g_presentation_obj_5","@Burn the {s2}'s food.",tf_center_justify),
          (position_set_x, pos1, 700),
          (position_set_y, pos1, 190),
          (overlay_set_position, "$g_presentation_obj_5", pos1),
          (position_set_x, pos1, 290),(position_set_y, pos1, 50),
          (overlay_set_size, "$g_presentation_obj_5", pos1),
          #damage morale
          (create_game_button_overlay,"$g_presentation_obj_6","@Subvert the defenders.",tf_center_justify),
          (position_set_x, pos1, 700),
          (position_set_y, pos1, 120),
          (overlay_set_position, "$g_presentation_obj_6", pos1),
          (position_set_x, pos1, 290),(position_set_y, pos1, 50),
          (overlay_set_size, "$g_presentation_obj_6", pos1),
        (try_end),

        #cost
        (try_begin),
          (eq,"$g_presentations_next_presentation",-1),
          (str_store_string,s4,"@____"),
          (str_store_string,s5,"@____"),
        (else_try),
          (ge,"$g_presentations_next_presentation",0),
          (create_text_overlay,"$g_presentation_obj_9",s4,tf_center_justify|tf_double_space|tf_scrollable),
          (position_set_x,pos1,600),
          (position_set_y,pos1,240),
          (overlay_set_position,"$g_presentation_obj_9",pos1),
          (position_set_x, pos1, 350),
          (position_set_y, pos1, 300),
          (overlay_set_area_size, "$g_presentation_obj_9", pos1),
          (position_set_x, pos1, 800),
          (position_set_y, pos1, 800),
          (overlay_set_size, "$g_presentation_obj_9", pos1),

          (create_game_button_overlay,"$g_presentation_obj_10",s5,tf_center_justify),
          (position_set_x,pos1,870),
          (position_set_y,pos1,25),
          (overlay_set_position,"$g_presentation_obj_10",pos1),
        (else_try),
          (eq,"$g_presentations_next_presentation",-2),
          (create_text_overlay,"$g_presentation_obj_9",s4,tf_left_align),
          (position_set_x,pos1,150),
          (position_set_y,pos1,150),
          (overlay_set_position,"$g_presentation_obj_9",pos1),
        (try_end),
    ]),

    (ti_on_presentation_event_state_change,
      [(store_trigger_param_1, ":object"),
        (store_troop_gold,":cur_wealth","trp_player"),
        (try_begin),
          (eq,"$g_presentation_obj_2",":object"), #cancel
          (assign,"$g_presentations_next_presentation",-1),
          (assign,"$cur_choice",5),
          (presentation_set_duration,0),
        (else_try),
          (eq,"$g_presentation_obj_3",":object"), #water
          (val_add,"$g_presentations_next_presentation",1),
          (str_store_string,s5,"str_give_order"),
          (str_store_string,s4,"str_water_poison_im"),
          (assign,"$cur_choice",1),
          (start_presentation,"prsnt_infiltrationandsabotage"),
        (else_try),
          (eq,"$g_presentation_obj_4",":object"), #cattle
          (val_add,"$g_presentations_next_presentation",1),
          (str_store_string,s5,"str_give_order"),
          (str_store_string,s4,"str_cattle_kill_im"),
          (assign,"$cur_choice",2),
          (start_presentation,"prsnt_infiltrationandsabotage"),
        (else_try),
          (eq,"$g_presentation_obj_5",":object"),
          (val_add,"$g_presentations_next_presentation",1),
          (str_store_string,s5,"str_give_order"),
          (str_store_string,s4,"str_food_burn_im"),
          (assign,"$cur_choice",3),
          (start_presentation,"prsnt_infiltrationandsabotage"),
        (else_try),
          (eq,"$g_presentation_obj_6",":object"),
          (val_add,"$g_presentations_next_presentation",1),
          (str_store_string,s5,"str_give_order"),
          (str_store_string,s4,"str_people_morale_im"),
          (assign,"$cur_choice",4),
          (start_presentation,"prsnt_infiltrationandsabotage"),
        (else_try),
          (eq,"$g_presentation_obj_10",":object"),
          (try_begin),
            (ge,":cur_wealth",600),
            (try_begin),
              (eq,"$cur_choice",1),
              (party_set_slot,"$g_encountered_party",slot_center_infiltration_type,1), #water
              (assign, "$g_infiltracion_interna", 1),
              (str_store_string,s4,"@A group of chosen men will be sent to poison the water supplies.",tf_left_align),
              (troop_remove_gold,"trp_player",600),
              (assign,"$g_presentations_next_presentation",-1),
              (assign,"$cur_choice",5),
              (presentation_set_duration,0),
            (else_try),
              (eq,"$cur_choice",2), #catle
              (party_set_slot,"$g_encountered_party",slot_center_infiltration_type,2),
              (assign, "$g_infiltracion_interna", 1),
              (troop_remove_gold,"trp_player",600),
              (str_store_string,s4,"@A group of chosen men will be sent to kill the cattle.",tf_left_align),
              (assign,"$cur_choice",5),
              (assign,"$g_presentations_next_presentation",-1),
              (presentation_set_duration,0),
            (else_try),
              (eq,"$cur_choice",3), #food
              (party_set_slot,"$g_encountered_party",slot_center_infiltration_type,3),
              (troop_remove_gold,"trp_player",600),
              (assign, "$g_infiltracion_interna", 1),
              (str_store_string,s4,"@A group of chosen men will be sent to burn the granaries.",tf_left_align),
              (assign,"$cur_choice",5),
              (assign,"$g_presentations_next_presentation",-1),
              (presentation_set_duration,0),
            (else_try),
              (eq,"$cur_choice",4), #morale
              (party_set_slot,"$g_encountered_party",slot_center_infiltration_type,4),
              (str_store_string,s4,"@A group of chosen men will be sent to subvert the defenders.",tf_left_align),
              (assign, "$g_infiltracion_interna", 1),
              (troop_remove_gold,"trp_player",600),
              (assign,"$g_presentations_next_presentation",-1),
              (assign,"$cur_choice",5),
              (presentation_set_duration,0),
            (try_end),
          (else_try),
            (le,":cur_wealth",499),
            (str_store_string,s4,"@You do not have the 600 denars to pay for this mission.",tf_left_align),
            (assign,"$g_presentations_next_presentation",-1),
            (assign,"$cur_choice",0),
            (start_presentation,"prsnt_infiltrationandsabotage"),
          (try_end),
        (try_end),

    ]),
]),

("world_map", 0, mesh_load_window, [
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    ## initialization part begin
    # presentation obj: begin from top left corner
    (assign, ":init_pos_x", 10), # init x
    (assign, ":init_pos_y", 730), # init y

    # world map, X: -180 t0 180  Y: -145 t0 145
    (assign, ":min_map_x", -297*1000),
    (assign, ":max_map_x", 310*1000),
    (assign, ":min_map_y", -225*1000),
    (assign, ":max_map_y", 210*1000),
    # also begin from top left corner
    (assign, ":init_map_x", ":min_map_x"), # init map_x
    (assign, ":init_map_y", ":max_map_y"), # init map_y

    # move length of p_temp_party, total_cols and total_rows
    (assign, ":party_move_length_x", 2750*(520/360)),
    (assign, ":party_move_length_y", 2750*(535/290)),
    (store_sub, ":total_cols", ":max_map_x", ":min_map_x"),
    (store_sub, ":total_rows", ":max_map_y", ":min_map_y"),
    (val_div, ":total_cols", ":party_move_length_x"),
    (val_div, ":total_rows", ":party_move_length_y"),

    # color_block_length
    (assign, ":color_block_length", 4),
    (store_mul, ":color_block_size", ":color_block_length", 50),
    (position_set_x, pos2, ":color_block_size"),
    (position_set_y, pos2, ":color_block_size"),
    ## initialization part end

    (assign, ":pos_x", ":init_pos_x"), # assign to cur pos_x
    (assign, ":pos_y", ":init_pos_y"), # assign to cur pos_y
    (assign, ":map_x", ":init_map_x"), # assign to cur map_x
    (assign, ":map_y", ":init_map_y"), # assign to cur map_y
    ## draw whole map
    (try_for_range, ":unused_rows", 0, ":total_rows"),
      (try_for_range, ":unused_cols", 0, ":total_cols"),
        (assign, ":dest_color", 0xFFFFFF), # default
        (position_set_x, pos3, ":map_x"),
        (position_set_y, pos3, ":map_y"),
        (party_set_position, "p_temp_party", pos3),
        (party_get_current_terrain, ":current_terrain", "p_temp_party"),
        (try_begin),
          (this_or_next|eq, ":current_terrain", rt_water),
          (this_or_next|eq, ":current_terrain", rt_bridge),
          (this_or_next|eq, ":current_terrain", rt_river),
          (eq, ":current_terrain", 6),
          (assign, ":dest_color", 0x5BE6FF), # default
        (else_try),
          (eq, "$temp1", 1),
          (call_script, "script_get_closest_center_and_minor", "p_temp_party"),
          (assign, ":nearest_center", reg0),
          (try_begin),
            (gt, ":nearest_center", -1),
            (lt, ":nearest_center", last_static_party),
            (store_faction_of_party, ":center_faction", ":nearest_center"),
            (faction_get_color, ":dest_color", ":center_faction"),
          (try_end),
        (else_try),
          (eq, "$temp1", 2),#
          (call_script, "script_get_region_of_pos22", "p_temp_party"),
          (try_begin),
            (neq, reg1, -1),
            (call_script, "script_print_region_color_to_reg2", reg1),
          (else_try),
            (party_get_current_terrain, reg1, "p_temp_party"),
            (call_script, "script_print_terrain_color_to_reg2", reg1),
          (try_end),
          (assign, ":dest_color", reg2),
        (try_end),
        (create_mesh_overlay, reg0, "mesh_white_plane"),
        (overlay_set_color, reg0, ":dest_color"),
        (position_set_x, pos1, ":pos_x"),
        (position_set_y, pos1, ":pos_y"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_size, reg0, pos2), # color block size

        # draw borderlines begin [optional]
        #borderlines length and whidth
        (try_begin),
          (eq, "$temp1", 1),
          (store_add, ":line_length", ":color_block_size", 1*50),
          (assign, ":line_whidth", 1*50),
          # find bound_center
          (try_begin),
            (gt, ":nearest_center", -1),
            (lt, ":nearest_center", last_static_party),
            (party_slot_eq, ":nearest_center", slot_party_type, spt_village),
            (party_get_slot, ":bound_center", ":nearest_center", slot_village_bound_center),
          (else_try),
            (assign, ":bound_center", ":nearest_center"), # itself
          (try_end),
          # compare with the left side color block
          (try_begin),
            (store_sub, ":map_x_2", ":map_x", ":party_move_length_x"),
            (assign, ":map_y_2", ":map_y"),
            (position_set_x, pos4, ":map_x_2"),
            (position_set_y, pos4, ":map_y_2"),
            (party_set_position, "p_temp_party", pos4),
            (party_get_current_terrain, ":current_terrain_2", "p_temp_party"),
            (try_begin),
              (assign, ":continue", 0),
              (try_begin),
                (neq, ":current_terrain", rt_water),
                (neq, ":current_terrain", rt_bridge),
                (neq, ":current_terrain", rt_river),
                (neq, ":current_terrain", 6),
                (neq, ":current_terrain_2", rt_water),
                (neq, ":current_terrain_2", rt_bridge),
                (neq, ":current_terrain_2", rt_river),
                (neq, ":current_terrain_2", 6),
                (call_script, "script_get_closest_center_and_minor", "p_temp_party"),
                (assign, ":nearest_center_2", reg0),
                (try_begin),
                  (gt, ":nearest_center_2", -1),
                  (lt, ":nearest_center_2", last_static_party),
                  (try_begin),
                    (party_slot_eq, ":nearest_center_2", slot_party_type, spt_village),
                    (party_get_slot, ":bound_center_2", ":nearest_center_2", slot_village_bound_center),
                  (else_try),
                    (assign, ":bound_center_2", ":nearest_center_2"), # itself
                  (try_end),
                  (neq, ":bound_center_2", ":bound_center"),
                  (assign, ":continue", 1),
                (try_end),
              (try_end),
              (eq, ":continue", 1),
              (create_mesh_overlay, reg0, "mesh_white_plane"),
              (overlay_set_color, reg0, 0),
              (position_set_x, pos1, ":pos_x"),
              (position_set_y, pos1, ":pos_y"),
              (overlay_set_position, reg0, pos1),
              (position_set_x, pos1, ":line_whidth"),
              (position_set_y, pos1, ":line_length"),
              (overlay_set_size, reg0, pos1),
            (try_end),
          (try_end),
          # compare with the under color block
          (try_begin),
            (assign, ":map_x_2", ":map_x"),
            (store_sub, ":map_y_2", ":map_y", ":party_move_length_y"),
            (position_set_x, pos4, ":map_x_2"),
            (position_set_y, pos4, ":map_y_2"),
            (party_set_position, "p_temp_party", pos4),
            (party_get_current_terrain, ":current_terrain_2", "p_temp_party"),
            (try_begin),
              (assign, ":continue", 0),
              (try_begin),
                (neq, ":current_terrain", rt_water),
                (neq, ":current_terrain", 6),
                (neq, ":current_terrain", rt_bridge),
                (neq, ":current_terrain", rt_river),
                (neq, ":current_terrain_2", rt_water),
                (neq, ":current_terrain_2", 6),
                (neq, ":current_terrain_2", rt_bridge),
                  (neq, ":current_terrain_2", rt_river),
                (call_script, "script_get_closest_center_and_minor", "p_temp_party"),
                (assign, ":nearest_center_2", reg0),
                (try_begin),
                  (gt, ":nearest_center_2", -1),
                  (lt, ":nearest_center_2", last_static_party),
                  (try_begin),
                    (party_slot_eq, ":nearest_center_2", slot_party_type, spt_village),
                    (party_get_slot, ":bound_center_2", ":nearest_center_2", slot_village_bound_center),
                  (else_try),
                    (assign, ":bound_center_2", ":nearest_center_2"),
                  (try_end),
                  (neq, ":bound_center_2", ":bound_center"),
                  (assign, ":continue", 1),
                (try_end),
              # (else_try),
                # (neq, ":current_terrain", ":current_terrain_2"),
                # (this_or_next|eq, ":current_terrain", rt_water),
                # (this_or_next|eq, ":current_terrain", rt_river),
                # (this_or_next|eq, ":current_terrain", rt_bridge),
                # (this_or_next|eq, ":current_terrain", 6),
                # (this_or_next|eq, ":current_terrain_2", 6),
                # (this_or_next|eq, ":current_terrain_2", rt_bridge),
                # (this_or_next|eq, ":current_terrain_2", rt_river),
                # (eq, ":current_terrain_2", rt_water),
                # (assign, ":continue", 1),
              (try_end),
              (eq, ":continue", 1),
              (create_mesh_overlay, reg0, "mesh_white_plane"),
              (overlay_set_color, reg0, 0),
              (position_set_x, pos1, ":pos_x"),
              (position_set_y, pos1, ":pos_y"),
              (overlay_set_position, reg0, pos1),
              (position_set_x, pos1, ":line_length"),
              (position_set_y, pos1, ":line_whidth"),
              (overlay_set_size, reg0, pos1),
            (try_end),
          (try_end),
        (try_end),
        ## draw borderlines end [optional]

        # offset
        (val_add, ":pos_x", ":color_block_length"),
        (val_add, ":map_x", ":party_move_length_x"),
      (try_end),
      # offset
      (assign, ":pos_x", ":init_pos_x"),
      (val_sub, ":pos_y", ":color_block_length"),
      (assign, ":map_x", ":init_map_x"),
      (val_sub, ":map_y", ":party_move_length_y"),
    (try_end),

    ## blocks of centers
    (assign, ":slot_no", 0),
    (try_begin),
      (eq, "$temp1", 1),
      (try_for_range, ":center_no", centers_begin, centers_end),
        (party_is_active, ":center_no"),
        (party_get_position, pos4, ":center_no"),
        (position_get_x, ":center_x", pos4),
        (position_get_y, ":center_y", pos4),
        (val_sub, ":center_x", ":init_map_x"),
        (val_sub, ":center_y", ":init_map_y"),
        (val_mul, ":center_x", ":color_block_length"),
        (val_mul, ":center_y", ":color_block_length"),
        (val_div, ":center_x", ":party_move_length_x"),
        (val_div, ":center_y", ":party_move_length_y"),
        (val_add, ":center_x", ":init_pos_x"),
        (val_add, ":center_y", ":init_pos_y"),

        (party_get_slot, ":center_type", ":center_no", slot_party_type),
        # offset and size
        (try_begin),
          (eq, ":center_type", spt_town),
          (assign, ":block_size", 8),
        (else_try),
          (eq, ":center_type", spt_castle),
          (assign, ":block_size", 6),
        (else_try),
          (eq, ":center_type", spt_village),
          (assign, ":block_size", 4),
        (try_end),
        (store_div, ":half_block_size", ":block_size", 2),
        (val_sub, ":center_x", ":half_block_size"),
        (val_sub, ":center_y", ":half_block_size"),
        (val_mul, ":block_size", 50),
        # block
        (create_mesh_overlay, reg0, "mesh_white_plane"),
        (overlay_set_color, reg0, 0),
        (position_set_x, pos1, ":center_x"),
        (position_set_y, pos1, ":center_y"),
        (overlay_set_position, reg0, pos1),
        (position_set_x, pos1, ":block_size"),
        (position_set_y, pos1, ":block_size"),
        (overlay_set_size, reg0, pos1),
        # name
        (str_store_party_name, s1, ":center_no"),
        (create_text_overlay, reg1, s1, tf_center_justify),
        (store_add, ":text_x", ":center_x", 0),
        (store_add, ":text_y", ":center_y", 10),
        (position_set_x, pos1, ":text_x"),
        (position_set_y, pos1, ":text_y"),
        (overlay_set_position, reg1, pos1),
        (overlay_set_display, reg1, 0),
        # slots
        (troop_set_slot, "trp_temp_array_a", ":slot_no", reg0), # overlay id
        (troop_set_slot, "trp_temp_array_b", ":slot_no", ":center_type"), # center type
        (troop_set_slot, "trp_temp_array_c", ":slot_no", reg1), # center name
        (val_add, ":slot_no", 1),
      (try_end),

      #minor towns
      (try_for_range, ":center_no", minor_towns_begin, minor_towns_end),
        (party_is_active, ":center_no"),
        (party_get_position, pos4, ":center_no"),
        (position_get_x, ":center_x", pos4),
        (position_get_y, ":center_y", pos4),
        (val_sub, ":center_x", ":init_map_x"),
        (val_sub, ":center_y", ":init_map_y"),
        (val_mul, ":center_x", ":color_block_length"),
        (val_mul, ":center_y", ":color_block_length"),
        (val_div, ":center_x", ":party_move_length_x"),
        (val_div, ":center_y", ":party_move_length_y"),
        (val_add, ":center_x", ":init_pos_x"),
        (val_add, ":center_y", ":init_pos_y"),

        (assign, ":block_size", 8),

        (store_div, ":half_block_size", ":block_size", 2),
        (val_sub, ":center_x", ":half_block_size"),
        (val_sub, ":center_y", ":half_block_size"),
        (val_mul, ":block_size", 50),
        # block
        (create_mesh_overlay, reg0, "mesh_white_plane"),
        (overlay_set_color, reg0, 0),
        (position_set_x, pos1, ":center_x"),
        (position_set_y, pos1, ":center_y"),
        (overlay_set_position, reg0, pos1),
        (position_set_x, pos1, ":block_size"),
        (position_set_y, pos1, ":block_size"),
        (overlay_set_size, reg0, pos1),
        # name
        (str_store_party_name, s1, ":center_no"),
        (create_text_overlay, reg1, s1, tf_center_justify),
        (store_add, ":text_x", ":center_x", 0),
        (store_add, ":text_y", ":center_y", 10),
        (position_set_x, pos1, ":text_x"),
        (position_set_y, pos1, ":text_y"),
        (overlay_set_position, reg1, pos1),
        (overlay_set_display, reg1, 0),
        # slots
        (troop_set_slot, "trp_temp_array_a", ":slot_no", reg0), # overlay id
        (troop_set_slot, "trp_temp_array_b", ":slot_no", spt_town), # center type
        (troop_set_slot, "trp_temp_array_c", ":slot_no", reg1), # center name
        (val_add, ":slot_no", 1),
      (try_end),
    (try_end),
    (assign, "$temp", ":slot_no"), # record num of slots

    # (assign, ":pos_x", 0),
    # (assign, ":pos_y", 0),

    # (str_clear, s0),
    # (create_text_overlay, reg1, "@Factions", tf_center_justify),
    # (position_set_x, pos1, 1300),
    # (position_set_y, pos1, 1300),
    # (overlay_set_size, reg1, pos1),
    # (position_set_x, pos1, 870),
    # (position_set_y, pos1, 640),
    # (overlay_set_position, reg1, pos1),

    # (str_clear, s0),
    # (create_text_overlay, "$g_presentation_obj_bugdet_report_container", s0, tf_scrollable_style_2),
    # (position_set_x, pos1, 826),
    # (position_set_y, pos1, 100),
    # (overlay_set_position, "$g_presentation_obj_bugdet_report_container", pos1),
    # (position_set_x, pos1, 170),
    # (position_set_y, pos1, 500),
    # (overlay_set_area_size, "$g_presentation_obj_bugdet_report_container", pos1),
    # (set_container_overlay, "$g_presentation_obj_bugdet_report_container"),

    # (try_for_range_backwards, ":cur_kingdom", kingdoms_begin, kingdoms_end),
      # (faction_slot_eq, ":cur_kingdom", slot_faction_state, sfs_active),
      # # kingdom name
      # (store_add, ":text_x", ":pos_x", 40),
      # (store_add, ":text_y", ":pos_y", 12),
      # (str_store_faction_name, s1, ":cur_kingdom"),
      # (faction_get_color, ":dest_color", ":cur_kingdom"),
      # (create_text_overlay, reg0, s1, tf_vertical_align_center),
      # (overlay_set_color, reg0, ":dest_color"),
      # (position_set_x, pos1, ":text_x"),
      # (position_set_y, pos1, ":text_y"),
      # (overlay_set_position, reg0, pos1),
      # (position_set_x, pos1, 800),
      # (position_set_y, pos1, 800),
      # (overlay_set_size, reg0, pos1),
      # (val_add, ":pos_y", 30),
    # (try_end),

    # (try_for_range_backwards, ":cur_kingdom", minor_kingdoms_begin, minor_kingdoms_end),
      # (faction_slot_eq, ":cur_kingdom", slot_faction_state, sfs_active),
      # # kingdom name
      # (store_add, ":text_x", ":pos_x", 40),
      # (store_add, ":text_y", ":pos_y", 12),
      # (str_store_faction_name, s1, ":cur_kingdom"),
      # (faction_get_color, ":dest_color", ":cur_kingdom"),
      # (create_text_overlay, reg0, s1, tf_vertical_align_center),
      # (overlay_set_color, reg0, ":dest_color"),
      # (position_set_x, pos1, ":text_x"),
      # (position_set_y, pos1, ":text_y"),
      # (overlay_set_position, reg0, pos1),
      # (position_set_x, pos1, 800),
      # (position_set_y, pos1, 800),
      # (overlay_set_size, reg0, pos1),
      # (val_add, ":pos_y", 30),
    # (try_end),

    # (set_container_overlay, -1),

    (try_begin),
      (eq, "$temp1", 2),
      (assign, ":pos_x", 0),
      (assign, ":pos_y", 0),

      (create_text_overlay, reg1, "@Terrain types", tf_center_justify),
      (position_set_x, pos1, 1200),
      (position_set_y, pos1, 1200),
      (overlay_set_size, reg1, pos1),
      (position_set_x, pos1, 935),
      (position_set_y, pos1, 710),
      (overlay_set_position, reg1, pos1),

      (str_clear, s0),
      (create_text_overlay, "$g_presentation_obj_bugdet_report_container", s0, tf_scrollable),
      (position_set_x, pos1, 840),
      (position_set_y, pos1, 100),
      (overlay_set_position, "$g_presentation_obj_bugdet_report_container", pos1),
      (position_set_x, pos1, 150),
      (position_set_y, pos1, 600),
      (overlay_set_area_size, "$g_presentation_obj_bugdet_report_container", pos1),
      (set_container_overlay, "$g_presentation_obj_bugdet_report_container"),

      (try_for_range, ":region", 1, region_mountain_europe_bohemia + 1),
        (store_add, ":text_x", ":pos_x", 40),
        (store_add, ":text_y", ":pos_y", 12),
        (store_add, ":region_string", "str_region_strings_begin", ":region"),
        (str_store_string, s1, ":region_string"),
        (call_script, "script_print_region_color_to_reg2", ":region"),
        (assign, ":dest_color", reg2),
        (create_text_overlay, reg0, s1, tf_left_align),
        (overlay_set_color, reg0, ":dest_color"),
        (position_set_x, pos1, ":text_x"),
        (position_set_y, pos1, ":text_y"),
        (overlay_set_position, reg0, pos1),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg0, pos1),
        (val_add, ":pos_y", 30),
      (try_end),

      (try_for_range, ":terrain", 0, rt_desert_forest + 1),
        (store_add, ":text_x", ":pos_x", 40),
        (store_add, ":text_y", ":pos_y", 12),
        (store_add, ":terrain_string", "str_rt_water", ":terrain"),
        (str_store_string, s1, ":terrain_string"),
        (call_script, "script_print_terrain_color_to_reg2", ":terrain"),
        (assign, ":dest_color", reg2),
        (create_text_overlay, reg0, s1, tf_left_align),
        (overlay_set_color, reg0, ":dest_color"),
        (position_set_x, pos1, ":text_x"),
        (position_set_y, pos1, ":text_y"),
        (overlay_set_position, reg0, pos1),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 750),
        (overlay_set_size, reg0, pos1),
        (val_add, ":pos_y", 30),
      (try_end),

      (set_container_overlay, -1),
    (try_end),

    ## show centers or not
    (assign, "$g_presentation_obj_1", -1),
    (assign, "$g_presentation_obj_2", -1),
    (assign, "$g_presentation_obj_3", -1),
    (try_begin),
      (eq, "$temp1", 1),
      # towns
      (create_check_box_overlay, "$g_presentation_obj_1", "mesh_checkbox_off", "mesh_checkbox_on"),
      (position_set_x, pos1, 50),
      (position_set_y, pos1, 50),
      (overlay_set_position, "$g_presentation_obj_1", pos1),
      (overlay_set_val, "$g_presentation_obj_1", 1),
      (create_text_overlay, reg0, "@Show towns", tf_vertical_align_center),
      (position_set_x, pos1, 80),
      (position_set_y, pos1, 60),
      (overlay_set_position, reg0, pos1),
      # castles
      (create_check_box_overlay, "$g_presentation_obj_2", "mesh_checkbox_off", "mesh_checkbox_on"),
      (position_set_x, pos1, 250),
      (position_set_y, pos1, 50),
      (overlay_set_position, "$g_presentation_obj_2", pos1),
      (overlay_set_val, "$g_presentation_obj_2", 1),
      (create_text_overlay, reg0, "@Show castles", tf_vertical_align_center),
      (position_set_x, pos1, 280),
      (position_set_y, pos1, 60),
      (overlay_set_position, reg0, pos1),
      # villages
      (create_check_box_overlay, "$g_presentation_obj_3", "mesh_checkbox_off", "mesh_checkbox_on"),
      (position_set_x, pos1, 450),
      (position_set_y, pos1, 50),
      (overlay_set_position, "$g_presentation_obj_3", pos1),
      (overlay_set_val, "$g_presentation_obj_3", 1),
      (create_text_overlay, reg0, "@Show villages", tf_vertical_align_center),
      (position_set_x, pos1, 480),
      (position_set_y, pos1, 60),
      (overlay_set_position, reg0, pos1),
    (try_end),
    # Done
    (create_game_button_overlay, "$g_presentation_obj_5", "str_continue"),
    (position_set_x, pos1, 670),
    (position_set_y, pos1, 30),
    (overlay_set_position, "$g_presentation_obj_5", pos1),

    # mode
    (try_begin),
      (eq, "$temp1", 2),
      (str_store_string, s0, "@Political Mode"),
    (else_try),
      (str_store_string, s0, "@Terrain Mode"),
    (try_end),
    (create_game_button_overlay, "$g_presentation_obj_6", "str_s0"),
    (position_set_x, pos1, 850),
    (position_set_y, pos1, 30),
    (overlay_set_position, "$g_presentation_obj_6", pos1),
  ]),
  (ti_on_presentation_mouse_enter_leave,[
    (store_trigger_param_1, ":object"),
    (store_trigger_param_2, ":enter_leave"),

    # show center name when mouse on it
    (try_for_range, ":slot_no", 0, "$temp"),
      (troop_slot_eq, "trp_temp_array_a", ":slot_no", ":object"),
      (store_sub, ":display_overlay", 1, ":enter_leave"),
      (troop_get_slot, ":cur_overlay", "trp_temp_array_c", ":slot_no"),
      (overlay_set_display, ":cur_overlay", ":display_overlay"),
    (try_end),
  ]),
  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":object"),
    (store_trigger_param_2, ":value"),

    (try_begin),
      (eq, ":object", "$g_presentation_obj_1"), # show towns
      (try_for_range, ":slot_no", 0, "$temp"),
        (troop_slot_eq, "trp_temp_array_b", ":slot_no", spt_town),
        (troop_get_slot, ":cur_overlay", "trp_temp_array_a", ":slot_no"),
        (overlay_set_display, ":cur_overlay", ":value"),
      (try_end),
    (else_try),
      (eq, ":object", "$g_presentation_obj_2"), # show castles
      (try_for_range, ":slot_no", 0, "$temp"),
        (troop_slot_eq, "trp_temp_array_b", ":slot_no", spt_castle),
        (troop_get_slot, ":cur_overlay", "trp_temp_array_a", ":slot_no"),
        (overlay_set_display, ":cur_overlay", ":value"),
      (try_end),
    (else_try),
      (eq, ":object", "$g_presentation_obj_3"), # show villages
      (try_for_range, ":slot_no", 0, "$temp"),
        (troop_slot_eq, "trp_temp_array_b", ":slot_no", spt_village),
        (troop_get_slot, ":cur_overlay", "trp_temp_array_a", ":slot_no"),
        (overlay_set_display, ":cur_overlay", ":value"),
      (try_end),
    (else_try),
      (eq, ":object", "$g_presentation_obj_5"),
      (presentation_set_duration, 0),
    (else_try),
      (eq, ":object", "$g_presentation_obj_6"),
      (try_begin),
        (eq, "$temp1", 1),
        (assign, "$temp1", 2),
      (else_try),
        (assign, "$temp1", 1),
      (try_end),
      (start_presentation, "prsnt_world_map"),
    (try_end),
  ]),
]),

###random events solution
#for juices
("random_event_solution", 0, mesh_load_window,
  [
    (ti_on_presentation_load,
      [
        (presentation_set_duration, 999999),
        (set_fixed_point_multiplier, 1000),

        (create_mesh_overlay, reg0, "mesh_mp_score_b"),
        (position_set_x, pos1, 150),
        (position_set_y, pos1, 165),
        (overlay_set_position, reg0, pos1),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 700),
        (overlay_set_size, reg0, pos1),

        (create_text_overlay, reg0, "@{s1}", tf_double_space|tf_scrollable|tf_center_justify),
        (overlay_set_color, reg0, 0xFFFFFF),
        (position_set_x, pos1, 190),
        (position_set_y, pos1, 290),
        (overlay_set_position, reg0, pos1),
        (position_set_x, pos1, 1100),
        (position_set_y, pos1, 1100),
        (overlay_set_size, reg0, pos1),
        (position_set_x, pos1, 630),
        (position_set_y, pos1, 210),
        (overlay_set_area_size, reg0, pos1),


        # BUTTONS:
        (create_button_overlay,"$g_presentation_obj_4","str_continue",tf_right_align),
        (position_set_x, pos1, 550),
        (position_set_y, pos1, 215),
        (overlay_set_position, "$g_presentation_obj_4", pos1),
        (overlay_set_color, "$g_presentation_obj_4", 0xFFFFFF), #White se ve bien
        (position_set_x, pos1, 950),
        (position_set_y, pos1, 950),
        (overlay_set_size, "$g_presentation_obj_4", pos1),
    ]),

    (ti_on_presentation_event_state_change,
      [
        (store_trigger_param_1, ":object"),
        (try_begin),
          (eq, ":object", "$g_presentation_obj_4"),
          (assign,"$g_presentations_next_presentation",-1),
          (presentation_set_duration,0),
          (str_clear,s1),
          (assign, "$g_permitted_to_center",0),
          # (change_screen_return,0),
          # (change_screen_map),
          (jump_to_menu, "mnu_auto_return_map"),#phaiak
        (try_end),
    ]),
]),

# diplomacy options
("adv_diplomacy_preferences", 0, mesh_load_window,[
  (ti_on_presentation_load,[
    (set_fixed_point_multiplier, 1000),
    (presentation_set_duration, 999999),
    (str_clear, s0),

    ## OPTIONS CONTAINER
    (create_text_overlay, ":container", s0, tf_scrollable),
    (position_set_x, pos1, 25),
    (position_set_y, pos1, 50),
    (overlay_set_position, ":container", pos1),
    (position_set_x, pos1, 550),
    (position_set_y, pos1, 630),
    (overlay_set_area_size, ":container", pos1),
    (set_container_overlay, ":container"),

    ## VARIABLE VERTICAL POSITIONS AND INCREMENTS
    (assign, ":y_increment", 50),
    (store_mul, ":texts_y", ":y_increment", DPLMC_NUM_PREFERENCE_OPTIONS),
    (store_sub, ":inputs_y", ":texts_y", 8),

    (try_for_range, ":slot_no", 0, DPLMC_NUM_PREFERENCE_OPTIONS),
      (troop_set_slot, "trp_temp_array_a", ":slot_no", 0), #label
      (troop_set_slot, "trp_temp_array_b", ":slot_no", 0), #field
      (troop_set_slot, "trp_temp_array_c", ":slot_no", 0), #pictures
    (try_end),
    (assign, ":num_options", 0), #index
    ## TEXTS & INPUTS
    (position_set_x, pos1, 50),
    (position_set_x, pos2, 450),

    #picture location
    (position_set_x, pos3, 500),
    (position_set_y, pos3, 100),
    #picture size
    (position_set_x, pos4, 480),
    (position_set_y, pos4, 640),
    #picture downscaled size
    (position_set_x, pos6, 375),
    (position_set_y, pos6, 500),
    #dropdown size
    (position_set_x, pos5, 700),
    (position_set_y, pos5, 800),

    ## HORSE SPEED
    (create_text_overlay, reg0, "@Horse Speed Fix:", tf_vertical_align_center),
    (position_set_y, pos1, ":texts_y"),
    (overlay_set_position, reg0, pos1),
    (val_sub, ":texts_y", ":y_increment"),
    (troop_set_slot, "trp_temp_array_a", ":num_options", reg0),

    (create_check_box_overlay, reg0, "mesh_checkbox_off", "mesh_checkbox_on"),
    (position_set_y, pos2, ":inputs_y"),
    (overlay_set_position, reg0, pos2),
    (val_sub, ":inputs_y", ":y_increment"),
    (troop_set_slot, "trp_temp_array_b", ":num_options", reg0),
    (store_sub, ":actual_input_value", 1, "$g_dplmc_horse_speed"),
    (overlay_set_val, reg0, ":actual_input_value"),

    (set_container_overlay, -1),
    (create_mesh_overlay, reg0, "mesh_pic_charge"),
    (overlay_set_size, reg0, pos4),
    (overlay_set_position, reg0, pos3),
    (troop_set_slot, "trp_temp_array_c", ":num_options", reg0),
    (val_add, ":num_options", 1),
    (set_container_overlay, ":container"),

    ## HORSE CULL
    (create_text_overlay, reg0, "@Horse Culling:", tf_vertical_align_center),
    (position_set_y, pos1, ":texts_y"),
    (overlay_set_position, reg0, pos1),
    (val_sub, ":texts_y", ":y_increment"),
    (troop_set_slot, "trp_temp_array_a", ":num_options", reg0),

    (create_number_box_overlay, reg0, 0, 31),
    (position_set_y, pos2, ":inputs_y"),
    (overlay_set_position, reg0, pos2),
    (try_begin),
    (neg|is_between, "$g_horses_are_avaliable", 0, 31),
    (assign, "$g_horses_are_avaliable", 10),
    (try_end),
    (overlay_set_val, reg0, "$g_horses_are_avaliable"),
    (val_sub, ":inputs_y", ":y_increment"),
    (troop_set_slot, "trp_temp_array_b", ":num_options", reg0),

    (set_container_overlay, -1),
    (create_mesh_overlay, reg0, "mesh_pic_defeat"),
    (set_container_overlay, ":container"),
    (overlay_set_size, reg0, pos4),
    (overlay_set_position, reg0, pos3),
    (troop_set_slot, "trp_temp_array_c", ":num_options", reg0),
    (val_add, ":num_options", 1),

    ## BATTLE CONTINUATION
    (create_text_overlay, reg0, "@Battle Continuation:", tf_vertical_align_center),
    (position_set_y, pos1, ":texts_y"),
    (overlay_set_position, reg0, pos1),
    (val_sub, ":texts_y", ":y_increment"),
    (troop_set_slot, "trp_temp_array_a", ":num_options", reg0),

    (create_check_box_overlay, reg0, "mesh_checkbox_off", "mesh_checkbox_on"),
    (position_set_y, pos2, ":inputs_y"),
    (overlay_set_position, reg0, pos2),
    (val_sub, ":inputs_y", ":y_increment"),
    (troop_set_slot, "trp_temp_array_b", ":num_options", reg0),

    (try_begin),
      (eq, "$g_dplmc_battle_continuation", 0),
      (assign, ":actual_input_value", 1),
    (else_try),
      (assign, ":actual_input_value", 0),
    (try_end),
    (overlay_set_val, reg0, ":actual_input_value"),
    (set_container_overlay, -1),
    (create_mesh_overlay, reg0, "mesh_pic_wounded"),
    (overlay_set_position, reg0, pos3),
    (overlay_set_size, reg0, pos4),
    (troop_set_slot, "trp_temp_array_c", ":num_options", reg0),
    (val_add, ":num_options", 1),
    (set_container_overlay, ":container"),

    ## TERRAIN ADVANTAGE
    (create_text_overlay, reg0, "@Terrain Advantages:", tf_vertical_align_center),
    (position_set_y, pos1, ":texts_y"),
    (overlay_set_position, reg0, pos1),
    (val_sub, ":texts_y", ":y_increment"),
    (troop_set_slot, "trp_temp_array_a", ":num_options", reg0),

    (create_check_box_overlay, reg0, "mesh_checkbox_off", "mesh_checkbox_on"),
    (position_set_y, pos2, ":inputs_y"),
    (overlay_set_position, reg0, pos2),
    (val_sub, ":inputs_y", ":y_increment"),
    (troop_set_slot, "trp_temp_array_b", ":num_options", reg0),
    (try_begin),
      (eq, "$g_dplmc_terrain_advantage", 0),
      (assign, ":actual_input_value", 1),
    (else_try),
      (assign, ":actual_input_value", 0),
    (try_end),
    (overlay_set_val, reg0, ":actual_input_value"),

    (set_container_overlay, -1),
    (create_mesh_overlay, reg0, "mesh_pic_camp"),
    (set_container_overlay, ":container"),
    (overlay_set_size, reg0, pos4),
    (overlay_set_position, reg0, pos3),
    (troop_set_slot, "trp_temp_array_c", ":num_options", reg0),
    (val_add, ":num_options", 1),

    ## LORDS RETURNING FROM EXILE
    (create_text_overlay, reg0, "@Lords Returning From Exile:", tf_vertical_align_center),
    (position_set_y, pos1, ":texts_y"),
    (overlay_set_position, reg0, pos1),
    (troop_set_slot, "trp_temp_array_a", ":num_options", reg0),
    (val_sub, ":texts_y", ":y_increment"),

    (create_check_box_overlay, reg0, "mesh_checkbox_off", "mesh_checkbox_on"),
    (position_set_x, pos2, 450),
    (position_set_y, pos2, ":inputs_y"),
    (overlay_set_position, reg0, pos2),
    (val_sub, ":inputs_y", ":y_increment"),
    (troop_set_slot, "trp_temp_array_b", ":num_options", reg0),

    (try_begin),
      (eq, "$g_dplmc_lord_recycling", 1),
      (assign, ":actual_input_value", 1),
    (else_try),
      (assign, ":actual_input_value", 0),
    (try_end),

    (overlay_set_val, reg0, ":actual_input_value"),
    (set_container_overlay, -1),
    (create_mesh_overlay, reg0, "mesh_pic_messenger"),
    (set_container_overlay, ":container"),
    (overlay_set_position, reg0, pos3),
    (overlay_set_size, reg0, pos4),
    (troop_set_slot, "trp_temp_array_c", ":num_options", reg0),
    (val_add, ":num_options", 1),

    # ## AI CHANGES
    # (create_text_overlay, reg0, "@AI Changes:", tf_vertical_align_center),
    # (position_set_y, pos1, ":texts_y"),
    # (overlay_set_position, reg0, pos1),
    # (val_sub, ":texts_y", ":y_increment"),
    # (troop_set_slot, "trp_temp_array_a", ":num_options", reg0),

    # (create_combo_button_overlay, reg0),
    # (position_set_x, pos2, 485),
    # (val_sub, ":inputs_y", 8),
    # (position_set_y, pos2, ":inputs_y"),
    # (overlay_set_position, reg0, pos2),
    # (overlay_set_size, reg0, pos5),
    # (try_for_range, ":string", "str_dplmc_setting_2", "str_dplmc_setting_on"),
    #   (overlay_add_item, reg0, ":string"),
    # (try_end),
    # (position_set_x, pos2, 450),
    # (val_add, ":inputs_y", 8),
    # (val_sub, ":inputs_y", ":y_increment"),

    # (troop_set_slot, "trp_temp_array_b", ":num_options", reg0),
    # (store_sub, ":actual_input_value", DPLMC_AI_CHANGES_HIGH, "$g_dplmc_ai_changes"),
    # (overlay_set_val, reg0, ":actual_input_value"),

    # (set_container_overlay, -1),
    # (create_mesh_overlay, reg0, "mesh_pic_sally_out"),
    # (set_container_overlay, ":container"),
    # (overlay_set_position, reg0, pos3),
    # (overlay_set_size, reg0, pos6), #
    # (troop_set_slot, "trp_temp_array_c", ":num_options", reg0),
    # (val_add, ":num_options", 1),

    # ## ECONOMICS & BEHAVIORAL
    # (create_text_overlay, reg0, "@Economics & Behavioral:", tf_vertical_align_center),
    # (position_set_y, pos1, ":texts_y"),
    # (overlay_set_position, reg0, pos1),
    # (val_sub, ":texts_y", ":y_increment"),
    # (troop_set_slot, "trp_temp_array_a", ":num_options", reg0),

    # (create_combo_button_overlay, reg0),
    # (position_set_x, pos2, 485),
    # (val_sub, ":inputs_y", 8),
    # (position_set_y, pos2, ":inputs_y"),
    # (overlay_set_position, reg0, pos2),
    # (overlay_set_size, reg0, pos5),
    # (try_for_range, ":string", "str_dplmc_setting_2", "str_dplmc_setting_on"),
    #   (overlay_add_item, reg0, ":string"),
    # (try_end),
    # (position_set_x, pos2, 450),
    # (val_add, ":inputs_y", 8),
    # (val_sub, ":inputs_y", ":y_increment"),
    # (troop_set_slot, "trp_temp_array_b", ":num_options", reg0),
    # (store_sub, ":actual_input_value", DPLMC_GOLD_CHANGES_HIGH, "$g_dplmc_gold_changes"),
    # (overlay_set_val, reg0, ":actual_input_value"),

    # (set_container_overlay, -1),
    # (create_mesh_overlay, reg0, "mesh_pic_payment"),
    # (set_container_overlay, ":container"),
    # (overlay_set_position, reg0, pos3),
    # (overlay_set_size, reg0, pos4),
    # (troop_set_slot, "trp_temp_array_c", ":num_options", reg0),
    # (val_add, ":num_options", 1),

    ## PREJUDICE LEVEL
    (create_text_overlay, reg0, "@Prejudice Level:", tf_vertical_align_center),
    (position_set_y, pos1, ":texts_y"),
    (overlay_set_position, reg0, pos1),
    (troop_set_slot, "trp_temp_array_a", ":num_options", reg0),
    (val_sub, ":texts_y", ":y_increment"),

    (create_combo_button_overlay, reg0),
    (troop_set_slot, "trp_temp_array_b", ":num_options", reg0),
    (position_set_x, pos2, 485),
    (val_sub, ":inputs_y", 8),
    (position_set_y, pos2, ":inputs_y"),
    (overlay_set_position, reg0, pos2),
    (overlay_set_size, reg0, pos5),
    (overlay_add_item, reg0, "str_randomize"),
    (overlay_add_item, reg0, "str_dplmc_setting_2"),
    (overlay_add_item, reg0, "str_dplmc_setting_off"),
    (overlay_add_item, reg0, "str_default"),
    (position_set_x, pos2, 450),
    (val_add, ":inputs_y", 8),
    (val_sub, ":inputs_y", ":y_increment"),

    (store_div, ":actual_input_value", "$g_disable_condescending_comments", 2),
    (try_begin), #both gender in battles
      (eq, ":actual_input_value", 2),
      (overlay_set_val, reg0, 0),
    (else_try), #high
      (lt, ":actual_input_value", 0),
      (overlay_set_val, reg0, 1),
    (else_try), #disabled
      (eq, ":actual_input_value", 1),
      (overlay_set_val, reg0, 2),
    (else_try), #default
      (overlay_set_val, reg0, 3),
    (try_end),

    (assign, reg1, "$g_disable_condescending_comments"),
    (display_message, "@prejudice is {reg1}"),

    (set_container_overlay, -1),
    (create_mesh_overlay, reg0, "mesh_pic_siege_sighted"),
    (set_container_overlay, ":container"),
    (overlay_set_size, reg0, pos4),
    (overlay_set_position, reg0, pos3),
    (troop_set_slot, "trp_temp_array_c", ":num_options", reg0),
    (val_add, ":num_options", 1),

    ## NPC Complaints
    (create_text_overlay, reg0, "@Disable Companion Complaints:", tf_vertical_align_center),
    (position_set_y, pos1, ":texts_y"),
    (overlay_set_position, reg0, pos1),
    (troop_set_slot, "trp_temp_array_a", ":num_options", reg0),
    (val_sub, ":texts_y", ":y_increment"),

    (create_check_box_overlay, reg0, "mesh_checkbox_off", "mesh_checkbox_on"),
    (position_set_y, pos2, ":inputs_y"),
    (overlay_set_position, reg0, pos2),
    (val_sub, ":inputs_y", ":y_increment"),
    (troop_set_slot, "trp_temp_array_b", ":num_options", reg0),
    (overlay_set_val, reg0, "$disable_npc_complaints"),
    (set_container_overlay, -1),
    (create_mesh_overlay, reg0, "mesh_pic_recruits"),
    (set_container_overlay, ":container"),
    (overlay_set_position, reg0, pos3),
    (overlay_set_size, reg0, pos6), #
    (troop_set_slot, "trp_temp_array_c", ":num_options", reg0),
    (val_add, ":num_options", 1),

    ## Disguises
    (create_text_overlay, reg0, "@Disguise System:", tf_vertical_align_center),
    (position_set_y, pos1, ":texts_y"),
    (overlay_set_position, reg0, pos1),
    (troop_set_slot, "trp_temp_array_a", ":num_options", reg0),
    (val_sub, ":texts_y", ":y_increment"),

    (create_check_box_overlay, reg0, "mesh_checkbox_off", "mesh_checkbox_on"),
    (position_set_y, pos2, ":inputs_y"),
    (overlay_set_position, reg0, pos2),
    (val_sub, ":inputs_y", ":y_increment"),
    (troop_set_slot, "trp_temp_array_b", ":num_options", reg0),
    (overlay_set_val, reg0, "$g_dplmc_player_disguise"),
    (set_container_overlay, -1),
    (create_mesh_overlay, reg0, "mesh_pic_townriot"),
    (set_container_overlay, ":container"),
    (overlay_set_position, reg0, pos3),
    (overlay_set_size, reg0, pos4),
    (troop_set_slot, "trp_temp_array_c", ":num_options", reg0),
    (val_add, ":num_options", 1),

    ## Charge on player death
    (create_text_overlay, reg0, "@Charge on player death:", tf_vertical_align_center),
    (position_set_y, pos1, ":texts_y"),
    (overlay_set_position, reg0, pos1),
    (troop_set_slot, "trp_temp_array_a", ":num_options", reg0),
    (val_sub, ":texts_y", ":y_increment"),

    (create_check_box_overlay, reg0, "mesh_checkbox_off", "mesh_checkbox_on"),
    (position_set_y, pos2, ":inputs_y"),
    (overlay_set_position, reg0, pos2),
    (val_sub, ":inputs_y", ":y_increment"),
    (troop_set_slot, "trp_temp_array_b", ":num_options", reg0),
    (overlay_set_val, reg0, "$g_charge_on_player_death"),
    (set_container_overlay, -1),
    (create_mesh_overlay, reg0, "mesh_pic_charge"),
    (set_container_overlay, ":container"),
    (overlay_set_position, reg0, pos3),
    (overlay_set_size, reg0, pos6), #
    (troop_set_slot, "trp_temp_array_c", ":num_options", reg0),
    (val_add, ":num_options", 1),

    (set_container_overlay, -1),

    ## MOUSE-OVER TIPS
    (create_text_overlay, reg0, "@DIPLOMACY^" + DPLMC_DIPLOMACY_VERSION_STRING+ "^Preferences", tf_center_justify|tf_with_outline),
    (overlay_set_color, reg0, 0xFFFFFFFF),
    (position_set_x, pos1, 800),
    (position_set_y, pos1, 600),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 2000),
    (position_set_y, pos1, 2000),
    (overlay_set_size, reg0, pos1),

    (str_store_string, s0, "str_dplmc_setting_tt0"),
    (create_text_overlay, reg0, s0, tf_double_space|tf_scrollable),
    (position_set_x, pos1, 650),
    (position_set_y, pos1, 400),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 800),
    (position_set_y, pos1, 800),
    (overlay_set_size, reg0, pos1),
    (position_set_x, pos1, 300),
    (position_set_y, pos1, 150),
    (overlay_set_area_size, reg0, pos1),
    (assign, "$g_presentation_obj_admin_panel_container", reg0),

    ## BUTTONS
    (position_set_x, pos1, 900),
    (try_begin),
      (eq, "$g_dplmc_battle_continuation", 0),
      (position_set_y, pos1, 125),
      (create_game_button_overlay, reg0, "str_spectator_camera", tf_center_justify),
      (overlay_set_position, reg0, pos1),
      (assign, "$g_dplmc_cam_activated", reg0),
    (else_try),
      (assign, "$g_dplmc_cam_activated", -1),
    (try_end),

    # (position_set_x, pos1, 900),
    (position_set_y, pos1, 75),
    (create_game_button_overlay, reg0, "str_reset_to_default", tf_center_justify),
    (overlay_set_position, reg0, pos1),
    (assign, "$g_presentation_obj_profile_banner_selection_1", reg0),

    (position_set_y, pos1, 25),
    (create_game_button_overlay, reg0, "str_done", tf_center_justify),
    (overlay_set_position, reg0, pos1),
    (assign, "$g_presentation_obj_profile_banner_selection_2", reg0),

    ## Hide Pictures
    (try_for_range, ":slot_no", 0, ":num_options"),
      (troop_get_slot, ":overlay", "trp_temp_array_c", ":slot_no"),
      (gt, ":overlay", 0),
      (overlay_set_display, ":overlay", 0),
    (try_end),
	]),
	(ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":object"),
    (store_trigger_param_2, ":value"),
    (try_begin),
      (eq, ":object", "$g_presentation_obj_profile_banner_selection_1"),
      (assign, "$cheat_mode", 0),
      (assign, "$g_charge_on_player_death", 1),
      (assign, "$g_dplmc_horse_speed", 0),
      (assign, "$g_dplmc_battle_continuation", 0),
      (assign, "$g_horses_are_avaliable", 10),
      (assign, "$g_dplmc_cam_default", camera_keyboard),
      (assign, "$g_dplmc_player_disguise", disguise_pilgrim),
      (assign, "$sneaked_into_town", disguise_none), #associated with above
      # (assign, "$g_dplmc_charge_when_dead", 1),
      (assign, "$g_dplmc_terrain_advantage", DPLMC_TERRAIN_ADVANTAGE_ENABLE),
      (assign, "$g_dplmc_lord_recycling", 1),
      # (assign, "$g_dplmc_ai_changes", DPLMC_AI_CHANGES_LOW),
      # (assign, "$g_dplmc_gold_changes", DPLMC_GOLD_CHANGES_LOW),
      (assign, "$g_disable_condescending_comments", 0),
      (assign, "$disable_npc_complaints", 0),
      # (call_script, "script_dplmc_update_info_settings"),
      (start_presentation, "prsnt_adv_diplomacy_preferences"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_profile_banner_selection_2"),
      (call_script, "script_dplmc_update_info_settings"),
      #(presentation_set_duration, 0),
      (assign, "$g_presentation_next_presentation", -1),
      (start_presentation, "prsnt_vc_options"),
    (else_try), #deathcam launch new presentation
      (eq, ":object", "$g_dplmc_cam_activated"),
      (assign, "$g_presentation_next_presentation", "prsnt_redefine_keys"),
      (start_presentation, "prsnt_redefine_keys"),
    (else_try), ## HORSE SPEED
      (troop_slot_eq, "trp_temp_array_b", 0, ":object"),
      (store_sub, "$g_dplmc_horse_speed", 1, ":value"),
    (else_try), ## HORSE CULL
      (troop_slot_eq, "trp_temp_array_b", 1, ":object"),
      (assign, "$g_horses_are_avaliable", ":value"),
    (else_try), ## BATTLE CONTINUATION
      (troop_slot_eq, "trp_temp_array_b", 2, ":object"),
      (store_sub, "$g_dplmc_battle_continuation", 1, ":value"),
      (start_presentation, "prsnt_adv_diplomacy_preferences"),
    (else_try), ## TERRAIN ADVANTAGE
      (troop_slot_eq, "trp_temp_array_b", 3, ":object"),
      (store_sub, "$g_dplmc_terrain_advantage", ":value", 1),
    (else_try), ## LORDS RETURNING FROM EXILE
      (troop_slot_eq, "trp_temp_array_b", 4, ":object"),
      (store_sub, "$g_dplmc_lord_recycling", ":value", 1),
    # (else_try), #AI
    #   (troop_slot_eq, "trp_temp_array_b", 6, ":object"),
    #   (store_sub, "$g_dplmc_ai_changes", DPLMC_AI_CHANGES_HIGH, ":value"),
    # (else_try), #ECO
    #   (troop_slot_eq, "trp_temp_array_b", 7, ":object"),
    #   (store_sub, "$g_dplmc_gold_changes", DPLMC_GOLD_CHANGES_HIGH, ":value"),
    (else_try), #Prejudice
      (troop_slot_eq, "trp_temp_array_b", 5, ":object"),
      (assign, reg0, ":value"),
      (assign, reg1, "$g_disable_condescending_comments"),
      (display_message, "@option {reg0}: was {reg1}"),
      (try_begin), #default
        (eq, ":value", 3),
        (assign, "$g_disable_condescending_comments", 0),
      (else_try), #off
        (eq, ":value", 2),
        (assign, "$g_disable_condescending_comments", 2),
      (else_try), #high
        (eq, ":value", 1),
        (assign, "$g_disable_condescending_comments", -2),
      (else_try), #randomize
        (eq, ":value", 0),
        (assign, "$g_disable_condescending_comments", 4),
      (try_end),
    (else_try), ## Complaints
      (troop_slot_eq, "trp_temp_array_b", 6, ":object"),
      (assign, "$disable_npc_complaints", ":value"),
      (assign, "$personality_clash_after_24_hrs", 0),
    (else_try), ## Disguise
      (troop_slot_eq, "trp_temp_array_b", 7, ":object"),
      (assign, "$g_dplmc_player_disguise", ":value"),
      (assign, "$sneaked_into_town", disguise_none), #so as to not proc trigger
    (else_try),# charge on player death
      (troop_slot_eq, "trp_temp_array_b", 8, ":object"),
      (assign, "$g_charge_on_player_death", ":value"),
    (try_end),
  ]),
  (ti_on_presentation_mouse_enter_leave,[
    (store_trigger_param_1, ":object"),
    (store_trigger_param_2, ":enter_leave"), #0 if mouse enters, 1 if mouse leaves
    ##IF THE EVENT IS "ENTER", WE CHOOSE THE TEXT THAT WILL BE SHOWED
    (try_begin),
      (eq, ":enter_leave", 0),
      (gt, ":object", 0), #not the overlay
      #could use overlay_set_material but stretching
      (assign, ":num_options", DPLMC_NUM_PREFERENCE_OPTIONS),
      (assign, ":selected_option", -1),

      (try_for_range, ":slot_no", 0, ":num_options"),
        (this_or_next|troop_slot_eq, "trp_temp_array_a", ":slot_no", ":object"),
        (troop_slot_eq, "trp_temp_array_b", ":slot_no", ":object"),
        (store_add, ":string", "str_dplmc_setting_tt1", ":slot_no"),
        (overlay_set_text, "$g_presentation_obj_admin_panel_container", ":string"),
        (assign, ":num_options", -1),
        (assign, ":selected_option", ":slot_no"),
      (try_end),

      (try_begin),
        (eq, ":selected_option", -1),
        (overlay_set_text, "$g_presentation_obj_admin_panel_container", "str_dplmc_setting_tt0"),
      (else_try),
        (try_for_range, ":slot_no", 0, DPLMC_NUM_PREFERENCE_OPTIONS),
          (troop_get_slot, ":overlay_no", "trp_temp_array_c", ":slot_no"),
          (gt, ":overlay_no", 0),
          (try_begin),
            (eq, ":slot_no", ":selected_option"),
            (overlay_set_display, ":overlay_no", 1),
          (else_try),
            (overlay_set_display, ":overlay_no", 0),
          (try_end),
        (try_end),
      (try_end),
    (try_end),
  ]),
]),

###VC-2198 begin
("vc_options", 0, mesh_load_window, [
  (ti_on_presentation_load,[
    (try_begin),
      (is_edit_mode_enabled),
      (display_message, "@Edit mode is enabled, it is recommended to disable it for better performance.", message_alert),
    (try_end),
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),
    #(assign, "$autosave_on", 0), #autosave off

    #0. BACKROUND
    (create_mesh_overlay, reg0, "mesh_pic_extra_intro2"),
    (position_set_x, pos1, -1),
    (position_set_y, pos1, -1),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 1002),
    (position_set_y, pos1, 1002),
    (overlay_set_size, reg0, pos1),

    #1. BASICS
    (position_set_y, pos1, 25),
    (create_game_button_overlay, "$g_presentation_obj_1", "str_continue"),
    (position_set_x, pos1, 825),
    (overlay_set_position, "$g_presentation_obj_1", pos1),
    # (try_begin),
      # (eq, reg60, 0),	#no start game
    (create_game_button_overlay, "$g_presentation_obj_2", "@Diplomacy Options"),
    # (else_try),
      # (create_game_button_overlay, "$g_presentation_obj_2", "str_back"),
    # (try_end),
    (position_set_x, pos1, 625),
    (overlay_set_position, "$g_presentation_obj_2", pos1),

    (create_game_button_overlay, "$g_presentation_obj_5", "@Battle-Morale Options"),
    (position_set_x, pos1, 425),
    (overlay_set_position, "$g_presentation_obj_5", pos1),

    #1. BASICS
    (try_begin),
      (eq, reg60, 1),	#no start game
      (create_game_button_overlay, "$g_presentation_obj_19", "str_back"),
      (position_set_x, pos1, 225),
      (overlay_set_position, "$g_presentation_obj_19", pos1),
    (try_end),

    (try_begin),
      (eq, reg60, 1),	#start game
      #3.1 Welcome message at game start
      (create_text_overlay, reg1, "@Welcome to Aut Caesar aut nihil. ^Before you start the game, choose various options.^Note that realistic savings are always disabled!", tf_center_justify),
      (position_set_x, pos1, 250),
      (position_set_y, pos1, 670),
      (overlay_set_position, reg1, pos1),
      (position_set_x, pos1, 1200),
      (position_set_y, pos1, 1200),
      (overlay_set_size, reg1, pos1),
    (try_end),

    #2. province names
    (create_text_overlay, reg1, "@Settlement names", tf_center_justify),
    (position_set_x, pos1, 250),
    (position_set_y, pos1, 645),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1200),
    (position_set_y, pos1, 1200),
    (overlay_set_size, reg1, pos1),

    (create_combo_button_overlay, "$g_presentation_obj_admin_panel_6"),
    (position_set_x, pos1, 250),
    (position_set_y, pos1, 605),
    (overlay_set_position, "$g_presentation_obj_admin_panel_6", pos1),
    (try_begin),
      (eq, reg60, 0),	#no start game
      (overlay_set_alpha, "$g_presentation_obj_admin_panel_6", 0xA0),
      (try_begin),
        (eq, "$g_province_names", 1),
        (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Accurate Province Names"),
      (else_try),
        (eq, "$g_province_names", 2),
        (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Simple Province Names"),
      (else_try),
        (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Normal Names"),
      (try_end),
    (else_try),
      (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Simple Province Names"),
      (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Accurate Province Names"),
      (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Normal Names"),
      (try_begin),
        (eq, "$g_province_names", 2),
        (overlay_set_val, "$g_presentation_obj_admin_panel_6", 0),
      (else_try),
        (eq, "$g_province_names", 1),
        (overlay_set_val, "$g_presentation_obj_admin_panel_6", 1),
      (else_try),
        (overlay_set_val, "$g_presentation_obj_admin_panel_6", 2),
      (try_end),
    (try_end),

    #2.1 campaign type
    (try_begin),
        (troop_slot_ge, "trp_global_variables", g_is_dev, 1),
        (create_text_overlay, reg1, "@Campaign type", tf_center_justify),
        (position_set_x, pos1, 250),
        (position_set_y, pos1, 555),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 1200),
        (position_set_y, pos1, 1200),
        (overlay_set_size, reg1, pos1),

        (create_combo_button_overlay, "$g_presentation_obj_admin_panel_9"),
        (position_set_x, pos1, 250),
        (position_set_y, pos1, 515),
        (overlay_set_position, "$g_presentation_obj_admin_panel_9", pos1),
        (try_begin),
          (eq, reg60, 0),	#no start game
          (overlay_set_alpha, "$g_presentation_obj_admin_panel_9", 0xA0),
          (try_begin),
            (eq, "$g_campaign_type", g_campaign_story_rome),
            (overlay_add_item, "$g_presentation_obj_admin_panel_9", "@STORY: SON OF ROME"),
          # (else_try),
          #   (eq, "$g_campaign_type", g_campaign_story_judea),
          #   (overlay_add_item, "$g_presentation_obj_admin_panel_9", "@STORY: LION OF JUDAH"),
          (else_try),
            (eq, "$g_campaign_type", g_campaign_king),
            (overlay_add_item, "$g_presentation_obj_admin_panel_9", "@ROYAL SANDBOX"),
          (else_try),
            (eq, "$g_campaign_type", g_campaign_lord),
            (overlay_add_item, "$g_presentation_obj_admin_panel_9", "@LORDLY SANDBOX"),
          (else_try),
            (eq, "$g_campaign_type", g_campaign_sandbox),
            (overlay_add_item, "$g_presentation_obj_admin_panel_9", "@SANDBOX"),
          (try_end),
        (else_try),
          (overlay_add_item, "$g_presentation_obj_admin_panel_9", "@ROYAL SANDBOX"),
          (overlay_add_item, "$g_presentation_obj_admin_panel_9", "@LORDLY SANDBOX"),
          (overlay_add_item, "$g_presentation_obj_admin_panel_9", "@SANDBOX"),
          (overlay_add_item, "$g_presentation_obj_admin_panel_9", "@STORY: SON OF ROME"),
          # (overlay_add_item, "$g_presentation_obj_admin_panel_9", "@STORY: LION OF JUDA"),
          (try_begin),
            (eq, "$g_campaign_type", g_campaign_king),
            (overlay_set_val, "$g_presentation_obj_admin_panel_9", 0),
          (else_try),
            (eq, "$g_campaign_type", g_campaign_lord),
            (overlay_set_val, "$g_presentation_obj_admin_panel_9", 1),
          (else_try),
            (eq, "$g_campaign_type", g_campaign_sandbox),
            (overlay_set_val, "$g_presentation_obj_admin_panel_9", 2),
          (else_try),
            (eq, "$g_campaign_type", g_campaign_story_rome),
            (overlay_set_val, "$g_presentation_obj_admin_panel_9", 3),
          # (else_try),
          #   (eq, "$g_campaign_type", g_campaign_story_judea),
          #   (overlay_set_val, "$g_presentation_obj_admin_panel_9", 4),
          (try_end),
        (try_end),
    (try_end),

    #3. DIFFICULTY
    (create_text_overlay, reg1, "@Difficulty Type", tf_center_justify),
    (position_set_x, pos1, 250),
    (position_set_y, pos1, 465),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1200),
    (position_set_y, pos1, 1200),
    (overlay_set_size, reg1, pos1),

    (create_combo_button_overlay, "$g_presentation_obj_6"),
    (position_set_x, pos1, 250),
    (position_set_y, pos1, 425),
    (overlay_set_position, "$g_presentation_obj_6", pos1),
    (overlay_add_item, "$g_presentation_obj_6", "@ACAN GIGA CHAD"),
    (overlay_add_item, "$g_presentation_obj_6", "@ACAN CHAD"),
    (overlay_add_item, "$g_presentation_obj_6", "@BORING (NORMAL)"),
    (overlay_add_item, "$g_presentation_obj_6", "@DISCORD SCHIZO"),
    (overlay_add_item, "$g_presentation_obj_6", "@LOSER (CUSTOM)"),
    (try_begin),
      (eq, "$difficulty_type", camp_d5),
      (overlay_set_val, "$g_presentation_obj_6", 0),
    (else_try),
      (eq, "$difficulty_type", camp_d4),
      (overlay_set_val, "$g_presentation_obj_6", 1),
    (else_try),
      (eq, "$difficulty_type", camp_d3),
      (overlay_set_val, "$g_presentation_obj_6", 2),
    (else_try),
      (eq, "$difficulty_type", camp_d2),
      (overlay_set_val, "$g_presentation_obj_6", 3),
    (else_try),
      (eq, "$difficulty_type", camp_d1),
      (overlay_set_val, "$g_presentation_obj_6", 4),
    (try_end),

    #4. OPTIONS
    (create_text_overlay, reg1, "@Options", tf_center_justify),
    (position_set_x, pos1, 750),
    (position_set_y, pos1, 650),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg1, pos2),

    #5. CONTAINER
    (str_clear, s0),
    (create_text_overlay, "$g_presentation_obj_admin_panel_container", s0, tf_scrollable),
    (position_set_x, pos1, 575),
    (position_set_y, pos1, 90),
    (overlay_set_position, "$g_presentation_obj_admin_panel_container", pos1),
    (position_set_x, pos1, 350),
    (position_set_y, pos1, 535),
    (overlay_set_area_size, "$g_presentation_obj_admin_panel_container", pos1),
    (set_container_overlay, "$g_presentation_obj_admin_panel_container"),

    #lines
    (position_set_x, pos1, 0),
    (position_set_y, pos1, 21*30 + 11*40 + 30),	# 30 for each checkbox or gap + 40 for each other elements + 30 buffer at the end

    #HINT
    (try_begin),
      (eq, reg60, 1),	#start game
      (position_get_y, ":y", pos1),
      (val_add, ":y", 35),
      (position_set_y, pos1, ":y"),
      (create_text_overlay, reg1, "@These options can be changed later in the camp menu.^The Diplomacy preferences can be found in the camp menu too.", tf_double_space|tf_scrollable|tf_center_justify),	#
      (copy_position, pos2, pos1),
      #(position_set_x, pos2, 175),
      (overlay_set_position, reg1, pos2),
      (position_set_x, pos2, 350),
      (position_set_y, pos2, 60),
      (overlay_set_area_size, reg1, pos2),
      (position_set_x, pos2, 900),
      (position_set_y, pos2, 900),
      (overlay_set_size, reg1, pos2),
      (position_get_y, ":y", pos1),
      (val_sub, ":y", 35),
      (position_set_y, pos1, ":y"),
    (try_end),

    #NATIVE DIFFICULTY SETTINGS
    (create_text_overlay, reg1, "str_damage_to_player", 0),
    (call_script, "script_prsnt_vc_menu_helper_2"),
    (overlay_add_item, reg2, "@Reduced to 1/4 (Easiest)"),
    (overlay_add_item, reg2, "@Reduced to 1/2 (Easy)"),
    (overlay_add_item, reg2, "str_normal"),
    (options_get_damage_to_player, reg8), #0 = 1/4, 1 = 1/2, 2 = 1/1
    (overlay_set_val, reg2, reg8),
    (assign, "$g_presentation_obj_25", reg2),

    (create_text_overlay, reg1, "str_damage_to_friends", 0),
    (call_script, "script_prsnt_vc_menu_helper_2"),
    (overlay_add_item, reg2, "@Reduced to 1/2 (Easiest)"),
    (overlay_add_item, reg2, "@Reduced to 3/4 (Easy)"),
    (overlay_add_item, reg2, "str_normal"),
    (options_get_damage_to_friends, reg8), #0 = 1/2, 1 = 3/4, 2 = 1/1
    (overlay_set_val, reg2, reg8),
    (assign, "$g_presentation_obj_26", reg2),

    #gap
    (call_script, "script_prsnt_vc_menu_helper_gap"),

    #DAMAGE SETTINGS
    (create_text_overlay, reg1, "str_combat_ai", 0),
    (call_script, "script_prsnt_vc_menu_helper_2"),
    (overlay_add_item, reg2, "str_hardcore"),
    (overlay_add_item, reg2, "str_normal"),
    (overlay_add_item, reg2, "str_beginner"),
    (options_get_combat_ai, reg8), #0 = good, 1 = average, 2 = poor
    (overlay_set_val, reg2, reg8),
    (assign, "$g_presentation_obj_27", reg2),

    (create_text_overlay, reg1, "str_movement_and_combat_speed", 0),
    (call_script, "script_prsnt_vc_menu_helper_2"),
    (overlay_add_item, reg2, "@Slowest"),
    (overlay_add_item, reg2, "@Slower"),
    (overlay_add_item, reg2, "str_normal"),
    (overlay_add_item, reg2, "@Faster"),
    (overlay_add_item, reg2, "@Fastest"),
    (options_get_combat_speed, reg8), #0 = slowest, 1 = slower, 2 = normal, 3 = faster, 4 = fastest
    (overlay_set_val, reg2, reg8),
    (assign, "$g_presentation_obj_29", reg2),

    (create_text_overlay, reg1, "str_campaign_ai", 0),
    (call_script, "script_prsnt_vc_menu_helper_2"),
    (overlay_add_item, reg2, "str_hardcore"),
    (overlay_add_item, reg2, "str_normal"),
    (overlay_add_item, reg2, "str_beginner"),
    (options_get_campaign_ai, reg8), #0 = good, 1 = average, 2 = poor
    (overlay_set_val, reg2, reg8),
    (assign, "$g_presentation_obj_28", reg2),

    # (create_text_overlay, reg1, "str_quantity_bandit_parties", 0),
    # (call_script, "script_prsnt_vc_menu_helper_2"),
    # (overlay_add_item, reg2, "@Less"),
    # (overlay_add_item, reg2, "str_normal"),
    # (overlay_add_item, reg2, "@More"),
    # (overlay_set_val, reg2, "$bandit_quantity_option"),
    # (assign, "$g_presentation_obj_33", reg2),

    #gap
    (call_script, "script_prsnt_vc_menu_helper_gap"),

    #REALITY SETTINGS
    (create_text_overlay, reg1, "@Warcry", 0),
    (call_script, "script_prsnt_vc_menu_helper"),
    (overlay_set_val, reg2, "$g_charge_on"),
    (assign, "$g_presentation_obj_14", reg2),

    (create_text_overlay, reg1, "@Player auxiliary feature", 0),
    (call_script, "script_prsnt_vc_menu_helper"),
    (overlay_set_val, reg2, "$use_player_auxiliary"),
    (assign, "$g_presentation_obj_15", reg2),

    (create_text_overlay, reg1, "@Autoloot", 0),
    (call_script, "script_prsnt_vc_menu_helper"),
    (overlay_set_val, reg2, "$g_autoloot_active"),
    (assign, "$g_presentation_obj_20", reg2),

    (create_text_overlay, reg1, "@Realistic troop wounding", 0),
    (call_script, "script_prsnt_vc_menu_helper"),
    (overlay_set_val, reg2, "$g_realistic_wounding"),
    (assign, "$g_presentation_obj_31", reg2),

    (create_text_overlay, reg1, "str_wounds", 0),
    (call_script, "script_prsnt_vc_menu_helper"),
    (overlay_set_val, reg2, "$vc_wounds_on"),
    (assign, "$g_presentation_obj_33", reg2),

    (create_text_overlay, reg1, "str_resting_morale", 0),
    (call_script, "script_prsnt_vc_menu_helper"),
    (overlay_set_val, reg2, "$moralep_on"),
    (assign, "$g_presentation_obj_16", reg2),

    (create_text_overlay, reg1, "@Bodyguards", 0),
    (call_script, "script_prsnt_vc_menu_helper"),
    (overlay_set_val, reg2, "$g_body_guard_on"),
    (assign, "$g_presentation_obj_admin_panel_8", reg2),

    # (create_text_overlay, reg1, "@Curb power wargoal", 0),
    # (call_script, "script_prsnt_vc_menu_helper"),
    # (overlay_set_val, reg2, "$g_allow_curb_power"),
    # (assign, "$g_presentation_obj_admin_panel_5", reg2),

    # (create_text_overlay, reg1, "@Tributary mechanic", 0),
    # (call_script, "script_prsnt_vc_menu_helper"),
    # (overlay_set_val, reg2, "$g_tributary_ai"),
    # (assign, "$g_presentation_obj_admin_panel_3", reg2),

    (create_text_overlay, reg1, "@Shieldbash", 0),
    (call_script, "script_prsnt_vc_menu_helper"),
    (overlay_set_val, reg2, "$g_schield_bash"),
    (assign, "$g_presentation_obj_admin_panel_2", reg2),

    #gap
    (call_script, "script_prsnt_vc_menu_helper_gap"),

    (create_text_overlay, reg1, "@Governor/lord appointment notification", 0),
    (call_script, "script_prsnt_vc_menu_helper"),
    (overlay_set_val, reg2, "$g_governor_appointment_message"),
    (assign, "$g_presentation_obj_admin_panel_7", reg2),

    (create_text_overlay, reg1, "@Truce notification menus", 0),
    (call_script, "script_prsnt_vc_menu_helper"),
    (overlay_set_val, reg2, "$show_truce_expired"),
    (assign, "$g_presentation_obj_32", reg2),

    (create_text_overlay, reg1, "@Raid notification menus", 0),
    (call_script, "script_prsnt_vc_menu_helper"),
    (overlay_set_val, reg2, "$show_raid_messages"),
    (assign, "$form_options_overlay_2", reg2),

    (create_text_overlay, reg1, "@Lovers discovered notifications", 0),
    (call_script, "script_prsnt_vc_menu_helper"),
    (overlay_set_val, reg2, "$g_love_messages_on"),
    (assign, "$g_presentation_obj_11", reg2),

    (create_text_overlay, reg1, "@Senate meetings notifications", 0),
    (call_script, "script_prsnt_vc_menu_helper"),
    (overlay_set_val, reg2, "$g_show_senate_meeting"),
    (assign, "$g_presentation_obj_9", reg2),

    (create_text_overlay, reg1, "@Enemies spotted notifications", 0),
    (call_script, "script_prsnt_vc_menu_helper"),
    (overlay_set_val, reg2, "$g_report_enemies"),
    (assign, "$g_presentation_obj_admin_panel_4", reg2),

    (create_text_overlay, reg1, "@Lord gifts notifications", 0),
    (call_script, "script_prsnt_vc_menu_helper"),
    (overlay_set_val, reg2, "$g_display_gift"),
    (assign, "$g_presentation_obj_24", reg2),

    #gap
    (call_script, "script_prsnt_vc_menu_helper_gap"),

    #PERFORMANCE SETTINGS
    (create_text_overlay, reg1, "str_battle_size", 0),
    (call_script, "script_prsnt_vc_menu_helper_3"),
    (options_get_battle_size, reg8), #0-1000
    (overlay_set_val, reg2, reg8),
    (assign, "$g_presentation_obj_30", reg2),

    # (create_text_overlay, reg1, "str_disable_scenic_menu", 0),	#VC-1954
    # (call_script, "script_prsnt_vc_menu_helper"),
    # (overlay_set_val, reg2, "$g_vc_menu_turned_off"),
    # (assign, "$g_presentation_obj_19", reg2),

    #gap
    (call_script, "script_prsnt_vc_menu_helper_gap"),

    #SPECIAL SETTINGS
    (create_text_overlay, reg1, "str_insane_difficult", 0),
    (call_script, "script_prsnt_vc_menu_helper"),
    (overlay_set_val, reg2, "$insanedamage_on"),
    (assign, "$g_presentation_obj_17", reg2),

    (create_text_overlay, reg1, "str_gore", 0),
    (call_script, "script_prsnt_vc_menu_helper"),
    (overlay_set_val, reg2, "$g_gore_on"),
    (assign, "$g_presentation_obj_18", reg2),

    # (create_text_overlay, reg1, "str_music_in_battles", 0),
    # (call_script, "script_prsnt_vc_menu_helper"),
    # (overlay_set_val, reg2, "$ambient_music_in_battle"),
    # (assign, "$g_presentation_obj_24", reg2),

    #gap
    (call_script, "script_prsnt_vc_menu_helper_gap"),

    #FORMATION SETTINGS
    (create_text_overlay, reg1, "str_player_division", 0),
    (call_script, "script_prsnt_vc_menu_helper_2"),
    (try_for_range, ":class", -1, 9),
      (try_begin),
        (eq, ":class", -1),
        (overlay_add_item, reg2, "str_none"),
      (else_try),
        (str_store_class_name, s7, ":class"),
        (overlay_add_item, reg2, s7),
      (try_end),
    (try_end),
    (overlay_set_val, reg2, "$form_ai_player_in_division"),
    (assign, "$form_options_overlay_1", reg2),

    (create_text_overlay, reg1, "str_disable_complex_formations", 0),
    (call_script, "script_prsnt_vc_menu_helper"),
    (overlay_set_val, reg2, "$form_ai_off"),
    (assign, "$g_presentation_obj_21", reg2),

    (create_text_overlay, reg1, "str_have_formations_face_enemy", 0),
    (call_script, "script_prsnt_vc_menu_helper"),
    (overlay_set_val, reg2, "$form_ai_autorotate"),
    (assign, "$g_presentation_obj_22", reg2),

    # (create_text_overlay, reg1, "str_players_enemies_only_attack", 0),
    # (call_script, "script_prsnt_vc_menu_helper"),
    # (overlay_set_val, reg2, "$FormAI_AI_no_defense"),
    # (assign, "$g_presentation_obj_23", reg2),

    (set_container_overlay, -1),

    #6. DESCRIPTION
    #headline
    (create_text_overlay, reg1, "str_empty_string", tf_center_justify),
    (position_set_x, pos1, 250),
    (position_set_y, pos1, 370),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1200),
    (position_set_y, pos1, 1200),
    (overlay_set_size, reg1, pos1),
    (assign, "$g_presentation_obj_3", reg1),

    (create_text_overlay, reg1, "str_empty_string", tf_double_space|tf_scrollable|tf_center_justify),
    (position_set_x, pos1, 75),
    (position_set_y, pos1, 100),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 350),
    (position_set_y, pos1, 260),
    (overlay_set_area_size, reg1, pos1),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (assign, "$g_presentation_obj_7", reg1),

    #7. WARNING
    # (str_store_string, s1, "str_beginner"),
    # (str_store_string, s2, "str_hardcore"),
    (str_store_string, s3, "str_continue"),
    (create_text_overlay, reg1, "@Warning: This option can't be disabled any more after you click '{s3}.'", tf_double_space|tf_scrollable|tf_center_justify|tf_with_outline),
    (position_set_x, pos1, 75),
    (position_set_y, pos1, 90),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 350),
    (position_set_y, pos1, 70),
    (overlay_set_area_size, reg1, pos1),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (overlay_set_color, reg1, 0xFF5555),
    (assign, "$g_presentation_obj_4", reg1),
    (overlay_set_display, "$g_presentation_obj_4", 0),
  ]),
  (ti_on_presentation_mouse_enter_leave,[
    (store_trigger_param_1, ":object"),
    (store_trigger_param_2, ":one_exit_zero_enter"),

    (str_clear, s2),
    (str_clear, s3),
    (str_clear, s4),
    (overlay_set_color, "$g_presentation_obj_3", 0x000000),

    (try_begin),
      (eq, ":one_exit_zero_enter", 1),
    # (else_try),
      # (eq, ":object", "$g_presentation_obj_5"),
      # (str_store_string,s2,"@Choose a campaign type!"),
      # (str_store_string,s4,"@Storyline Campaign: Start as a protagonist in a story. Due to certain perma-death results, ironman save mode is not available.^^Sandbox Campaign: Start a long, totally free play game.^^Lordly Sandbox Campaign: Start as a lord.^^Royal Sandbox Campaign: Start as a king."),
    (else_try),
      (eq, ":object", "$g_presentation_obj_6"),
      (str_store_string,s2,"@Choose a difficulty type!"),

    (else_try),
      (store_add, ":object_plus_one", ":object", 1),

      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_11"),
      (eq, ":object", "$g_presentation_obj_11"),
      #(str_store_string,s2,"@RECRUITMENT > Level of difficulty.",0xFFf1e73f),
      (str_store_string,s2,"@Notification about discovered love affairs"),
      (str_store_string,s3,"str_qual_life_feature"),
      (str_store_string,s4,"@If enabled, you will receive messages about discovered love affairs, even if you are not involved."),
      (overlay_set_display, "$g_presentation_obj_4", 0),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_14"),
      (eq, ":object", "$g_presentation_obj_14"),
      (str_store_string,s2,"@Warcry"),
      (str_store_string,s3,"str_immersion_feature"),
      (str_store_string,s8,"@Effects player and allies during battles"),
      (str_store_string,s4,"@When the player makes a warcry (T-key), the player agents performe a cheer animation.^^{s8}"),
      (overlay_set_display, "$g_presentation_obj_4", 0),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_15"),
      (eq, ":object", "$g_presentation_obj_15"),
      (str_store_string,s2,"@Auxiliar player feature"),
      (str_store_string,s3,"str_immersion_feature"),
      (str_store_string,s8,"@Effects player after death"),
      (str_store_string,s4,"@Instead of the death camera, the player takes over the control of a troop from his own party, who is still alive.^^{s8}"),
      (overlay_set_display, "$g_presentation_obj_4", 0),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_16"),
      (eq, ":object", "$g_presentation_obj_16"),
      (str_store_string,s2,"str_resting_morale"),
      (str_store_string,s3,"str_realism_feature"),
      (str_store_string,s4,"@Your army needs regular rest in a settlement or your camp site from time to time. Lack of rest will lower your troop morale, while resting will improve it. Resting at camps isn't as good as resting in settlements, while resting in settlements your party will recieve an additional morale boost."),
      (overlay_set_display, "$g_presentation_obj_4", 0),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_17"),
      (eq, ":object", "$g_presentation_obj_17"),
      (str_store_string,s2,"str_insane_difficult"),
      (str_store_string,s3,"str_special_setting"),
      (str_store_string,s4,"@Your enemies will cause double damage while you cause only half."),
      (overlay_set_display, "$g_presentation_obj_4", 0),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_18"),
      (eq, ":object", "$g_presentation_obj_18"),
      (str_store_string,s2,"str_gore"),
      (str_store_string,s3,"str_special_setting"),
      (str_store_string,s4,"@Add decapitation to battles."),
      (overlay_set_display, "$g_presentation_obj_4", 0),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_20"),
      (eq, ":object", "$g_presentation_obj_20"),
      (str_store_string,s2,"@Autoloot"),
      (str_store_string,s3,"str_qual_life_feature"),
      (str_store_string,s4,"@If enabled, you can, if your inventory management or looting skill is higher than 2, manage the equipement of you companions automatically."),
      (overlay_set_display, "$g_presentation_obj_4", 0),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_21"),
      (eq, ":object", "$g_presentation_obj_21"),
      (str_store_string,s2,"str_disable_complex_formations"),
      (str_store_string,s3,"str_formation_feature"),
      (str_store_string,s4,"@The divisions of the player's army will not adopt the formations of shield wall, wedge, or square. Moreover, the F4 menu that contains these selections will no longer appear.^^The default ranks formations will always be adopted when the player closes ranks beyond the point needed to make a shoulder-to-shoulder line."),
      (overlay_set_display, "$g_presentation_obj_4", 0),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_22"),
      (eq, ":object", "$g_presentation_obj_22"),
      (str_store_string,s2,"str_have_formations_face_enemy"),
      (str_store_string,s3,"str_formation_feature"),
      (str_store_string,s4,"@When multiple divisions are placed, they will set up to face the center of the enemy forces. Without this option, they will set up along the facing that the player has when he/she places them, although individual divisions will still turn to face the enemy.^^For example, with the option OFF and the player facing AWAY from the attacker, infantry will set up on the RIGHT flank rather than the LEFT."),
      (overlay_set_display, "$g_presentation_obj_4", 0),
    # (else_try),
      # (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_23"),
      # (eq, ":object", "$g_presentation_obj_23"),
      # (str_store_string,s2,"str_players_enemies_only_attack"),
      # (str_store_string,s3,"str_formation_feature"),
      # (str_store_string,s4,"@The army opposing the player never takes a defensive position at the back of the map, but will always charge the armies of the player and his/her allies."),
      # (overlay_set_display, "$g_presentation_obj_4", 0),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_25"),
      (eq, ":object", "$g_presentation_obj_25"),
      (str_store_string,s2,"str_damage_to_player"),
      (str_store_string,s3,"str_difficulty_setting"),
      (str_store_string,s4,"@Set how much damage is done to your character."),
      (overlay_set_display, "$g_presentation_obj_4", 0),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_26"),
      (eq, ":object", "$g_presentation_obj_26"),
      (str_store_string,s2,"str_damage_to_friends"),
      (str_store_string,s3,"str_difficulty_setting"),
      (str_store_string,s4,"@Set how much damage is done to your army."),
      (overlay_set_display, "$g_presentation_obj_4", 0),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_27"),
      (eq, ":object", "$g_presentation_obj_27"),
      (str_store_string,s2,"str_combat_ai"),
      (str_store_string,s3,"str_difficulty_setting"),
      (str_store_string,s4,"@Set how well troops fight. They fight worst at Beginner level."),
      (overlay_set_display, "$g_presentation_obj_4", 0),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_28"),
      (eq, ":object", "$g_presentation_obj_28"),
      (str_store_string,s2,"str_campaign_ai"),
      (str_store_string,s3,"str_difficulty_setting"),
      (str_store_string,s4,"@Campaign AI affects many aspects of the game, like:^- size of bandit parties^- renown loss in battles^- chance of recruiting lords^- taxes^- how lords get reinforcements^- how lords respond to the player's requests"),
      (overlay_set_display, "$g_presentation_obj_4", 0),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_29"),
      (eq, ":object", "$g_presentation_obj_29"),
      (str_store_string,s2,"str_movement_and_combat_speed"),
      (str_store_string,s3,"str_difficulty_setting"),
      (str_store_string,s8,"str_this_setting_affects_all"),
      (str_store_string,s4,"@Set the running speed of troops in battle.^^{s8}"),
      (overlay_set_display, "$g_presentation_obj_4", 0),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_30"),
      (eq, ":object", "$g_presentation_obj_30"),
      (str_store_string,s2,"str_battle_size"),
      (str_store_string,s3,"str_performance_feature"),
      (call_script, "script_current_battle_size"),
      (str_store_string,s2,"@{s2} {reg0}"),
      (str_store_string,s4,"str_battle_size_text"),
      (overlay_set_display, "$g_presentation_obj_4", 0),
      (try_begin),
        (gt, reg0, 300),
        (overlay_set_color, "$g_presentation_obj_3", 0xFF0000),
      (try_end),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_31"),
      (eq, ":object", "$g_presentation_obj_31"),
      (str_store_string,s2,"@Realistic troop wounding"),
      (str_store_string,s3,"@Realism feature"),
      (str_store_string,s4,"@If enabled, troops may not die immediately, but instead get only wounded, depending damage done. If damage done is larger than 40, they will die, even if a blunt weapon was used."),
      (overlay_set_display, "$g_presentation_obj_4", 0),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_32"),
      (eq, ":object", "$g_presentation_obj_32"),
      (str_store_string,s2,"@Truce notification menus"),
      (str_store_string,s3,"str_qual_life_feature"),
      (str_store_string,s4,"@If enabled, you will recieve notification menus, about alliances, defensive pacts, non-aggression pacts, trade agreements and truces which have expired."),
      (overlay_set_display, "$g_presentation_obj_4", 0),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_33"),
      (eq, ":object", "$g_presentation_obj_33"),
      (str_store_string,s2,"str_wounds"),
      (str_store_string,s3,"str_realism_feature"),
      (str_store_string,s4,"@The player may receive specific, debilitating wounds in battle. Physicians in larger towns will treat these wounds for a price, after which they will heal within a few days. Any negative effects will then be removed. If wound is not treated after some time, it will change to a scar, and the negative effects will then be permanent."),
      (overlay_set_display, "$g_presentation_obj_4", 0),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$form_options_overlay_1"),
      (eq, ":object", "$form_options_overlay_1"),
      (str_store_string,s2,"str_player_division"),
      (str_store_string,s3,"str_formation_feature"),
      (str_store_string,s4,"@Sets the player as commander of the chosen division. This division will set up immediately left and behind the player on Hold and Follow commands (Wedge will put player on the point). Consider it for bodyguard divisions."),
      (overlay_set_display, "$g_presentation_obj_4", 0),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$form_options_overlay_2"),
      (eq, ":object", "$form_options_overlay_2"),
      (str_store_string,s2,"@Village raid notification menus"),
      (str_store_string,s3,"str_qual_life_feature"),
      (str_store_string,s4,"@If enabled, you recieve notification menus about your villages which has been raided."),
      (overlay_set_display, "$g_presentation_obj_4", 0),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_9"),
      (eq, ":object", "$g_presentation_obj_9"),
      (str_store_string,s2,"@Senate meetings notification menus"),
      (str_store_string,s3,"str_qual_life_feature"),
      (str_store_string,s4,"@If enabled, you recieve notification menus about senate meetings."),
      (overlay_set_display, "$g_presentation_obj_4", 0),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_admin_panel_8"),
      (eq, ":object", "$g_presentation_obj_admin_panel_8"),
      (str_store_string,s2,"@Bodyguards"),
      (str_store_string,s3,"str_qual_life_feature"),
      (str_store_string,s4,"@If enabled, up to four companions will accompany you when you walk in taverns, through the streets etc."),
      (overlay_set_display, "$g_presentation_obj_4", 0),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_admin_panel_7"),
      (eq, ":object", "$g_presentation_obj_admin_panel_7"),
      (str_store_string,s2,"@Governor/lord appointment notification"),
      (str_store_string,s3,"str_qual_life_feature"),
      (str_store_string,s4,"@If enabled you will receive messages about the appointment of governors/lords for empty provinces/fiefs. The menu has options for you to use your influence to change the outcome to your liking."),
      (overlay_set_display, "$g_presentation_obj_4", 0),
    # (else_try),
    #   (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_admin_panel_5"),
    #   (eq, ":object", "$g_presentation_obj_admin_panel_5"),
    #   (str_store_string,s2,"@Curb the other realms power"),
    #   (str_store_string,s3,"@Native feature"),
    #   (str_store_string,s4,"@If enabled, the Campaign AI can use the war goal to 'curb the other realms power' against the strongest faction. This will usually lead to more wars against Rome."),
    #   (overlay_set_display, "$g_presentation_obj_4", 0),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_admin_panel_4"),
      (eq, ":object", "$g_presentation_obj_admin_panel_4"),
      (str_store_string,s2,"@Enemies spotted messages"),
      (str_store_string,s3,"str_qual_life_feature"),
      (str_store_string,s4,"@If enabled, you will recieve notification if enemies are spotted from nearby settlements or from settlements with messanger posts."),
      (overlay_set_display, "$g_presentation_obj_4", 0),
    # (else_try),
      # (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_admin_panel_3"),
      # (eq, ":object", "$g_presentation_obj_admin_panel_3"),
      # (str_store_string,s2,"@Tributary mechanic"),
      # (str_store_string,s3,"@Experimental Mechanic"),
      # (str_store_string,s4,"@If enabled, an AI-kingdom A my subjugets another kingdom B, with which A is at war, depending on various conditions. The conditions are: B has suffered high loses, B has less than 4 walled centers left. B is in multiple wars, which they are losing, B has only a few allies. B is smaller than A."),
      # (overlay_set_display, "$g_presentation_obj_4", 0),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_admin_panel_2"),
      (eq, ":object", "$g_presentation_obj_admin_panel_2"),
      (str_store_string,s2,"@Shieldbash"),
      (str_store_string,s3,"str_realism_feature"),
      (str_store_string,s4,"@If enabled, Ai and player can perform a shieldbash during battle."),
      (overlay_set_display, "$g_presentation_obj_4", 0),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_24"),
      (eq, ":object", "$g_presentation_obj_24"),
      (str_store_string,s2,"@Lord gift Messages"),
      (str_store_string,s3,"str_qual_life_feature"),
      (str_store_string,s4,"@If enabled you will recieve messages which informs you about gifts a Lord gave his liege."),
      (overlay_set_display, "$g_presentation_obj_4", 0),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_admin_panel_6"),
      (eq, ":object", "$g_presentation_obj_admin_panel_6"),
      (str_store_string,s2,"@Display province names"),
      (str_store_string,s3,"str_qual_life_feature"),
      (str_store_string,s4,"@Normal Names:^Settlements are named like in previous versions.^Accurate Province Names:^In the name of the settlement, the province name is displayed, e.g. Lutetia -> Lutetia (Lugdunensis)^Simple province names:^A simplified, more general, name of the province will be displayed, e.g. Lutetia -> Lutetia (GL), where GL stands for Gaul (abbreviations can be found under game concepts)"),
      (overlay_set_display, "$g_presentation_obj_4", 0),
      (try_begin),
        (eq, reg60, 1),
        (overlay_set_display, "$g_presentation_obj_4", 1),
      (try_end),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_admin_panel_9"),
      (eq, ":object", "$g_presentation_obj_admin_panel_9"),
      (str_store_string,s2,"@Campaign type"),
      (str_store_string,s3,"@Choose a campaign type"),
      (str_store_string,s4,"@Story: Take part in an epic story.^Sandbox: Classic M&B sandbox campaign.^Lordly Sandbox: Sandbox campaign where you start as lord^Royal Sandbox: Sandbox camoaign where you start as king."),
      (overlay_set_display, "$g_presentation_obj_4", 0),
      (try_begin),
        (eq, reg60, 1),
        (overlay_set_display, "$g_presentation_obj_4", 1),
      (try_end),
    (try_end),
    (str_store_string,s3,"@{s3}^^{s4}"),
    (overlay_set_text, "$g_presentation_obj_3", s2),
    (overlay_set_text, "$g_presentation_obj_7", s3),
  ]),
  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":object"),
    (store_trigger_param_2, ":value"),

    # (assign, reg8, ":value"),
    # (display_message, "@value = {reg8}"),
    (overlay_set_color, "$g_presentation_obj_3", 0x000000),

    (try_begin),
      (eq, ":object", "$g_presentation_obj_1"),
      (presentation_set_duration, 0),

      # (try_begin),
        # (neq, "$recruitment_on", 0),
        # (assign, "$recruitment_on_freezed", 1),
      # (try_end),
      # (try_begin),
        # (neq, "$easy_levelling", 0),
        # (assign, "$easy_levelling_freezed", 1),
      # (try_end),
      # (try_begin),
        # (neq, "$easy_wage", 0),
        # (assign, "$easy_wage_freezed", 1),
      # (try_end),
      (try_begin),
        (eq, "$moralep_on", 0),
        (party_set_slot, "p_main_party", slot_party_unrested_morale_penalty, 0),
      (try_end),

      # (try_for_range, ":center_no", centers_begin, centers_end),
        # (eq, "$recruitment_on", 1),
        # (party_set_slot,":center_no",recruit_permission_need, 0),
      # (try_end),
      (call_script, "script_dplmc_update_info_settings"),
      (try_begin),
        (eq, reg60, 0),	#no start game
        (jump_to_menu, "mnu_camp"),
      (else_try),
        (try_begin),
          (this_or_next|eq, "$g_campaign_type", g_campaign_king),
          (this_or_next|eq, "$g_campaign_type", g_campaign_sandbox),
          (eq, "$g_campaign_type", g_campaign_lord),
          (jump_to_menu, "mnu_start_game_sandbox"),
        (else_try),
          (jump_to_menu, "mnu_start_game_1"),
        (try_end),
      (try_end),
    (else_try),
      (eq, ":object", "$g_presentation_obj_2"),
      (start_presentation, "prsnt_adv_diplomacy_preferences"),
      (else_try),
      (eq, ":object", "$g_presentation_obj_5"),
      (start_presentation, "prsnt_moral_tweaks"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_19"),
      (jump_to_menu, "mnu_start_game_11"),
    # (else_try),
      # (eq, ":object", "$g_presentation_obj_5"),
      # (eq, reg60, 1),	#only start game
      # (start_presentation, "prsnt_vc_options"),
      # (try_begin),
        # (eq, ":value", 0),
        # (assign, "$campaign_type", camp_kingc),
      # (else_try),
        # (eq, ":value", 1),
        # (assign, "$campaign_type", camp_lordc),
      # (else_try),
        # (eq, ":value", 3),
        # (assign, "$campaign_type", camp_storyline),
      # (else_try),
        # (assign, "$campaign_type", camp_sandbox),
      # (try_end),
    (else_try),
      (eq, ":object", "$g_presentation_obj_6"),
      (try_begin),
        (eq, ":value", 0),
        (assign, "$difficulty_type", camp_d5),	#impossible
        (assign, "$g_gore_on", 1), # gore
        (assign, "$g_charge_on", 1), # charge animation
        (assign, "$use_player_auxiliary", 0), # player respawn after death
        (assign, "$g_autoloot_active", 0), # autoloot
        (assign, "$g_realistic_wounding", 1), # troops get wounded during battle instead of dead
        (assign, "$vc_wounds_on", 1), # player may get wounded
        (assign, "$moralep_on", 1), # resting moral effect
        (assign, "$g_body_guard_on", 0), # body guards
        # (assign, "$g_allow_curb_power", 1), # curb power war goal
        (assign, "$g_schield_bash", 1), # AI uses shieldbash
        (assign, "$g_governor_appointment_message", 1), # message governor/lord gets a center notification
        (assign, "$show_truce_expired", 1), # message truce expired
        (assign, "$show_raid_messages", 1), # message raid
        (assign, "$g_love_messages_on", 1), # message love affair
        (assign, "$g_show_senate_meeting", 1), # message senate meeting
        (assign, "$g_report_enemies", 1), # message enemy spotted
        (assign, "$g_display_gift", 1), # message lord recieves gift
        (options_set_damage_to_player, 2),	#0 = 1/4, 1 = 1/2, 2 = 1/1
        (options_set_damage_to_friends, 2),	#0 = 1/2, 1 = 3/4, 2 = 1/1
        (options_set_combat_ai, 0),		#0 = good, 1 = average, 2 = poor
        (options_set_campaign_ai, 0),	#0 = good, 1 = average, 2 = poor
        (options_set_combat_speed, 4),	#0 = slowest, 1 = slower, 2 = normal, 3 = faster, 4 = fastest
      (else_try),
        (eq, ":value", 1),
        (assign, "$difficulty_type", camp_d4),	#realistic
        (assign, "$g_charge_on", 1), # charge animation
        (assign, "$g_gore_on", 1), # gore
        (assign, "$use_player_auxiliary", 1), # player respawn after death
        (assign, "$g_autoloot_active", 1), # autoloot
        (assign, "$g_realistic_wounding", 1), # troops get wounded during battle instead of dead
        (assign, "$vc_wounds_on", 1), # player may get wounded
        (assign, "$moralep_on", 1), # resting moral effect
        (assign, "$g_body_guard_on", 1), # body guards
        # (assign, "$g_allow_curb_power", 0), # curb power war goal
        (assign, "$g_schield_bash", 1), # AI uses shieldbash
        (assign, "$g_governor_appointment_message", 1), # message governor/lord gets a center notification
        (assign, "$show_truce_expired", 0), # message truce expired
        (assign, "$show_raid_messages", 1), # message raid
        (assign, "$g_love_messages_on", 1), # message love affair
        (assign, "$g_show_senate_meeting", 1), # message senate meeting
        (assign, "$g_report_enemies", 0), # message enemy spotted
        (assign, "$g_display_gift", 1), # message lord recieves gift
        (options_set_damage_to_player, 2),	#0 = 1/4, 1 = 1/2, 2 = 1/1
        (options_set_damage_to_friends, 2),	#0 = 1/2, 1 = 3/4, 2 = 1/1
        (options_set_combat_ai, 1),		#0 = good, 1 = average, 2 = poor
        (options_set_campaign_ai, 1),	#0 = good, 1 = average, 2 = poor
        (options_set_combat_speed, 3),	#0 = slowest, 1 = slower, 2 = normal, 3 = faster, 4 = fastest
      (else_try),
        (eq, ":value", 2),
        (assign, "$difficulty_type", camp_d3),	#normal
        (assign, "$g_gore_on", 1), # gore
        (assign, "$g_charge_on", 1), # charge animation
        (assign, "$use_player_auxiliary", 1), # player respawn after death
        (assign, "$g_autoloot_active", 1), # autoloot
        (assign, "$g_realistic_wounding", 1), # troops get wounded during battle instead of dead
        (assign, "$vc_wounds_on", 0), # player may get wounded
        (assign, "$moralep_on", 1), # resting moral effect
        (assign, "$g_body_guard_on", 1), # body guards
        # (assign, "$g_allow_curb_power", 0), # curb power war goal
        (assign, "$g_schield_bash", 0), # AI uses shieldbash
        (assign, "$g_governor_appointment_message", 1), # message governor/lord gets a center notification
        (assign, "$show_truce_expired", 0), # message truce expired
        (assign, "$show_raid_messages", 0), # message raid
        (assign, "$g_love_messages_on", 1), # message love affair
        (assign, "$g_show_senate_meeting", 1), # message senate meeting
        (assign, "$g_report_enemies", 0), # message enemy spotted
        (assign, "$g_display_gift", 0), # message lord recieves gift
        (options_set_damage_to_player, 1),	#0 = 1/4, 1 = 1/2, 2 = 1/1
        (options_set_damage_to_friends, 1),	#0 = 1/2, 1 = 3/4, 2 = 1/1
        (options_set_combat_ai, 1),		#0 = good, 1 = average, 2 = poor
        (options_set_campaign_ai, 1),	#0 = good, 1 = average, 2 = poor
        (options_set_combat_speed, 2),	#0 = slowest, 1 = slower, 2 = normal, 3 = faster, 4 = fastest
      (else_try),
        (eq, ":value", 3),
        (assign, "$difficulty_type", camp_d2),	#beginner
        (assign, "$g_gore_on", 0), # gore
        (assign, "$g_charge_on", 0), # charge animation
        (assign, "$use_player_auxiliary", 1), # player respawn after death
        (assign, "$g_autoloot_active", 1), # autoloot
        (assign, "$g_realistic_wounding", 0), # troops get wounded during battle instead of dead
        (assign, "$vc_wounds_on", 0), # player may get wounded
        (assign, "$moralep_on", 0), # resting moral effect
        (assign, "$g_body_guard_on", 1), # body guards
        # (assign, "$g_allow_curb_power", 0), # curb power war goal
        (assign, "$g_schield_bash", 0), # AI uses shieldbash
        (assign, "$g_governor_appointment_message", 1), # message governor/lord gets a center notification
        (assign, "$show_truce_expired", 0), # message truce expired
        (assign, "$show_raid_messages", 0), # message raid
        (assign, "$g_love_messages_on", 1), # message love affair
        (assign, "$g_show_senate_meeting", 1), # message senate meeting
        (assign, "$g_report_enemies", 0), # message enemy spotted
        (assign, "$g_display_gift", 0), # message lord recieves gift
        (options_set_damage_to_player, 0),	#0 = 1/4, 1 = 1/2, 2 = 1/1
        (options_set_damage_to_friends, 0),	#0 = 1/2, 1 = 3/4, 2 = 1/1
        (options_set_combat_ai, 2),		#0 = good, 1 = average, 2 = poor
        (options_set_campaign_ai, 2),	#0 = good, 1 = average, 2 = poor
        (options_set_combat_speed, 0),	#0 = slowest, 1 = slower, 2 = normal, 3 = faster, 4 = fastest
      (else_try),
        (eq, ":value", 4),
        (assign, "$difficulty_type", camp_d1),
      (try_end),

      # (try_begin),
        # (neq, "$easy_levelling_freezed", 1),
        # (assign, "$easy_levelling", ":difficulty_level"),
      # (try_end),

      # (try_begin),
        # (neq, "$easy_wage_freezed", 1),
        # (eq, ":difficulty_level", 2),
        # (assign, "$easy_wage", 0),
      # (else_try),
        # (neq, "$easy_wage_freezed", 1),
        # (assign, "$easy_wage", ":difficulty_level"),
      # (try_end),

      # (try_begin),
        # (neq, "$recruitment_on_freezed", 1),
        # (eq, ":difficulty_level", 2),
        # (assign, "$recruitment_on", 0),
      # (else_try),
        # (neq, "$recruitment_on_freezed", 1),
        # (assign, "$recruitment_on", ":difficulty_level"),
      # (try_end),

      # (overlay_set_val, "$g_presentation_obj_11", "$recruitment_on"),
      # (overlay_set_val, "$g_presentation_obj_12", "$easy_levelling"),
      # (overlay_set_val, "$g_presentation_obj_13", "$easy_wage"),

      (options_get_damage_to_player, reg8),
      (overlay_set_val, "$g_presentation_obj_25", reg8),
      (options_get_damage_to_friends, reg8),
      (overlay_set_val, "$g_presentation_obj_26", reg8),
      (options_get_combat_ai, reg8),
      (overlay_set_val, "$g_presentation_obj_27", reg8),
      (options_get_combat_speed, reg8),
      (overlay_set_val, "$g_presentation_obj_29", reg8),
      (options_get_campaign_ai, reg8),
      (overlay_set_val, "$g_presentation_obj_28", reg8),

      # (overlay_set_val, "$g_presentation_obj_33", "$bandit_quantity_option"),
      (overlay_set_val, "$g_presentation_obj_14", "$g_charge_on"),
      (overlay_set_val, "$g_presentation_obj_15", "$use_player_auxiliary"),
      (overlay_set_val, "$g_presentation_obj_20", "$g_autoloot_active"),
      (overlay_set_val, "$g_presentation_obj_31", "$g_realistic_wounding"),
      (overlay_set_val, "$g_presentation_obj_32", "$show_truce_expired"),
      (overlay_set_val, "$form_options_overlay_2", "$show_raid_messages"),
      (overlay_set_val, "$g_presentation_obj_16", "$moralep_on"),
      (overlay_set_val, "$g_presentation_obj_33", "$vc_wounds_on"),

      (overlay_set_val, "$g_presentation_obj_17", "$insanedamage_on"),
      (overlay_set_val, "$g_presentation_obj_18", "$g_gore_on"),
      # (overlay_set_val, "$g_presentation_obj_admin_panel_5", "$g_allow_curb_power"),
      (overlay_set_val, "$g_presentation_obj_admin_panel_2", "$g_schield_bash"),
      (overlay_set_val, "$g_presentation_obj_24", "$g_display_gift"),
      (overlay_set_val, "$g_presentation_obj_admin_panel_4", "$g_report_enemies"),
      (overlay_set_val, "$g_presentation_obj_9", "$g_show_senate_meeting"),
      (overlay_set_val, "$g_presentation_obj_admin_panel_7", "$g_governor_appointment_message"),
      (overlay_set_val, "$form_options_overlay_2", "$show_raid_messages"),
      (overlay_set_val, "$g_presentation_obj_11", "$g_love_messages_on"),

    (else_try),
      (assign, "$difficulty_type", camp_d1),	#all other changes will change the difficulty type
      (overlay_set_val, "$g_presentation_obj_6", 4),
      (overlay_set_val, ":object", ":value"),

      (eq, ":object", "$g_presentation_obj_11"),
      (assign, "$g_love_messages_on", ":value"),
    (else_try),
      # (eq, ":object", "$g_presentation_obj_12"),
      # (neq, "$easy_levelling_freezed", 1),
      # (assign, "$easy_levelling", ":value"),
    # (else_try),
      # (eq, ":object", "$g_presentation_obj_13"),
      # (neq, "$easy_wage_freezed", 1),
      # (assign, "$easy_wage", ":value"),
    #(else_try),
      (eq, ":object", "$g_presentation_obj_14"),
      (assign, "$g_charge_on", ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_15"),
      (assign, "$use_player_auxiliary", ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_16"),
      (assign, "$moralep_on", ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_17"),
      (assign, "$insanedamage_on", ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_18"),
      (assign, "$g_gore_on", ":value"),
    # (else_try),
      # (eq, ":object", "$g_presentation_obj_19"),
      # (assign, "$g_vc_menu_turned_off", ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_20"),
      (assign, "$g_autoloot_active", ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_21"),
      (assign, "$form_ai_off", ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_22"),
      (assign, "$form_ai_autorotate", ":value"),
    # (else_try),
      # (eq, ":object", "$g_presentation_obj_23"),
      # (assign, "$FormAI_AI_no_defense", ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_24"),
      (assign, "$g_display_gift", ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_25"),
      (options_set_damage_to_player, ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_26"),
      (options_set_damage_to_friends, ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_27"),
      (options_set_combat_ai, ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_28"),
      (options_set_campaign_ai, ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_29"),
      (options_set_combat_speed, ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_33"),
      (assign, "$vc_wounds_on", ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_30"),
      (options_set_battle_size, ":value"),
      (str_store_string,s2,"str_battle_size"),
      #
      (str_store_string,s3,"str_performance_feature"),
      (call_script, "script_current_battle_size"),
      (str_store_string,s2,"@{s2} {reg0}"),
      (str_store_string,s4,"str_battle_size_text"),
      (str_store_string,s3,"@{s3}^^{s4}"),
      (overlay_set_text, "$g_presentation_obj_3", s2),
      (overlay_set_text, "$g_presentation_obj_7", s3),
      (try_begin),
        (gt, reg0, 300),
        (overlay_set_color, "$g_presentation_obj_3", 0xFF0000),
      (try_end),
    (else_try),
      (eq, ":object", "$g_presentation_obj_31"),
      (assign, "$g_realistic_wounding", ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_32"),
      (assign, "$show_truce_expired", ":value"),
    # (else_try),
      # (eq, ":object", "$g_presentation_obj_33"),
      # (assign, "$bandit_quantity_option", ":value"),
    (else_try),
      (eq, ":object", "$form_options_overlay_1"),
      (assign, "$form_ai_player_in_division", ":value"),
    (else_try),
      (eq, ":object", "$form_options_overlay_2"),
      (assign, "$show_raid_messages", ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_9"),
      (assign, "$g_show_senate_meeting", ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_admin_panel_8"),
      (assign, "$g_body_guard_on", ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_admin_panel_7"),
      (assign, "$g_governor_appointment_message", ":value"),
    # (else_try),
    #   (eq, ":object", "$g_presentation_obj_admin_panel_5"),
    #   (assign, "$g_allow_curb_power", ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_admin_panel_4"),
      (assign, "$g_report_enemies", ":value"),
    # (else_try),
      # (eq, ":object", "$g_presentation_obj_admin_panel_3"),
      # (assign, "$g_tributary_ai", ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_admin_panel_2"),
      (assign, "$g_schield_bash", ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_admin_panel_6"),
      (try_begin),
        (eq, ":value", 2),
        (assign, "$g_province_names", 0),
      (else_try),
        (eq, ":value", 1),
        (assign, "$g_province_names", 1),
      (else_try),
        (assign, "$g_province_names", 2),
      (try_end),
    (else_try),
        (eq, ":object", "$g_presentation_obj_admin_panel_9"),
        (assign, "$g_campaign_type", ":value"),
      # (try_begin),
        # (eq, ":value", 0),
        # (try_for_range, ":center", centers_begin, centers_end),
          # (party_get_slot, ":province", ":center", slot_center_province),
          # (val_add, ":province", "str_province_begin"),
          # (str_store_string, s61, ":province"),
          # (str_store_party_name, s50, ":center"),
          # (party_set_name, ":center", "@{s50} ({s61})"),
        # (try_end),
      # (else_try),
        # (try_for_range, ":center", centers_begin, centers_end),
          # (party_get_slot, ":province", ":center", slot_center_province),
          # (val_add, ":province", "str_province_begin"),
          # (str_store_string, s61, ":province"),
          # (str_store_party_name, s50, ":center"),
          # (party_set_name, ":center", "@{s50} ({s61})"),
        # (try_end),
      #(try_end),
    (try_end),
  ]),
  (ti_on_presentation_run,[
    (try_begin),
      (key_clicked, key_xbox_b),
      (presentation_set_duration, 0),
      (try_begin),
        (eq, "$moralep_on", 0),
        (party_set_slot, "p_main_party", slot_party_unrested_morale_penalty, 0),
      (try_end),

      (call_script, "script_dplmc_update_info_settings"),
      (try_begin),
        (eq, reg60, 0),	#no start game
        (jump_to_menu, "mnu_camp"),
      (else_try),
        (try_begin),
            (this_or_next|eq, "$g_campaign_type", g_campaign_king),
            (this_or_next|eq, "$g_campaign_type", g_campaign_sandbox),
            (eq, "$g_campaign_type", g_campaign_lord),
            (jump_to_menu, "mnu_start_game_sandbox"),
        (else_try),
            (jump_to_menu, "mnu_start_game_1"),
        (try_end),
       (try_end),
    (else_try),
      (key_clicked, key_xbox_x),
      (presentation_set_duration, 0),
      (call_script, "script_dplmc_update_info_settings"),
      (try_begin),
        (eq, reg60, 0),	#no start game
        (jump_to_menu, "mnu_camp"),
      (else_try),
        (jump_to_menu, "mnu_start_game_11"),
      (try_end),
    (try_end),
  ]),
]),
###VC-2198 begin
("moral_tweaks", 0, mesh_load_window, [
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    #0. BACKROUND
    (create_mesh_overlay, reg0, "mesh_pic_extra_intro2"),
    (position_set_x, pos1, -1),
    (position_set_y, pos1, -1),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 1002),
    (position_set_y, pos1, 1002),
    (overlay_set_size, reg0, pos1),

    #1. BASICS
    (position_set_y, pos1, 25),
    (create_game_button_overlay, "$g_presentation_obj_1", "@Go back"),
    (position_set_x, pos1, 825),
    (overlay_set_position, "$g_presentation_obj_1", pos1),

    #3.1 description
    (create_text_overlay, reg1, "@You can tweak some of those variables ^if you are not satisfied with the default battles.", tf_center_justify),
    (position_set_x, pos1, 250),
    (position_set_y, pos1, 650),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1200),
    (position_set_y, pos1, 1200),
    (overlay_set_size, reg1, pos1),

    (position_set_x, pos1, 450),
    (position_set_y, pos1, 500),

    ##slider
    (create_text_overlay, reg1, "@Battleratio Multiplier", 0),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos2, 900),
    (position_set_y, pos2, 900),
    (overlay_set_size, reg1, pos2),
    (copy_position, pos2, pos1),
    (position_get_x, ":x", pos2),
    (val_add, ":x", 300),
    (position_set_x, pos2, ":x"),

    (create_slider_overlay, "$g_presentation_obj_12", 1, 10000),
    (overlay_set_position, "$g_presentation_obj_12", pos2),
    (position_set_x, pos2, 700),
    (position_set_y, pos2, 700),
    (overlay_set_size, "$g_presentation_obj_12", pos2),

    (position_get_y, ":y", pos1),
    (val_sub, ":y", 40),
    (position_set_y, pos1, ":y"),

    (overlay_set_val, "$g_presentation_obj_12", "$battle_ratio_multiple"),

    ##slider
    (create_text_overlay, reg1, "@Moralshock Multiplier", 0),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos2, 900),
    (position_set_y, pos2, 900),
    (overlay_set_size, reg1, pos2),
    (copy_position, pos2, pos1),
    (position_get_x, ":x", pos2),
    (val_add, ":x", 300),
    (position_set_x, pos2, ":x"),

    (create_slider_overlay, "$g_presentation_obj_13", 5, 50),
    (overlay_set_position, "$g_presentation_obj_13", pos2),
    (position_set_x, pos2, 700),
    (position_set_y, pos2, 700),
    (overlay_set_size, "$g_presentation_obj_13", pos2),

    (position_get_y, ":y", pos1),
    (val_sub, ":y", 40),
    (position_set_y, pos1, ":y"),

    (overlay_set_val, "$g_presentation_obj_13", "$moral_shock"),

    ##slider
    (create_text_overlay, reg1, "@Runaway Threshold", 0),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos2, 900),
    (position_set_y, pos2, 900),
    (overlay_set_size, reg1, pos2),
    (copy_position, pos2, pos1),
    (position_get_x, ":x", pos2),
    (val_add, ":x", 300),
    (position_set_x, pos2, ":x"),

    (create_slider_overlay, "$g_presentation_obj_24", 1, 50),
    (overlay_set_position, "$g_presentation_obj_24", pos2),
    (position_set_x, pos2, 700),
    (position_set_y, pos2, 700),
    (overlay_set_size, "$g_presentation_obj_24", pos2),

    (position_get_y, ":y", pos1),
    (val_sub, ":y", 40),
    (position_set_y, pos1, ":y"),

    (overlay_set_val, "$g_presentation_obj_24", "$agent_run_away_multiplier"),

    ##slider
    (create_text_overlay, reg1, "@Morale Modifier I", 0),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos2, 900),
    (position_set_y, pos2, 900),
    (overlay_set_size, reg1, pos2),
    (copy_position, pos2, pos1),
    (position_get_x, ":x", pos2),
    (val_add, ":x", 300),
    (position_set_x, pos2, ":x"),

    (create_slider_overlay, "$g_presentation_obj_20", 0, 20),
    (overlay_set_position, "$g_presentation_obj_20", pos2),
    (position_set_x, pos2, 700),
    (position_set_y, pos2, 700),
    (overlay_set_size, "$g_presentation_obj_20", pos2),

    (position_get_y, ":y", pos1),
    (val_sub, ":y", 40),
    (position_set_y, pos1, ":y"),

    (overlay_set_val, "$g_presentation_obj_20", "$dead_effect_on_killer"),

    ##slider
    (create_text_overlay, reg1, "@Morale Modifier II", 0),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos2, 900),
    (position_set_y, pos2, 900),
    (overlay_set_size, reg1, pos2),
    (copy_position, pos2, pos1),
    (position_get_x, ":x", pos2),
    (val_add, ":x", 300),
    (position_set_x, pos2, ":x"),

    (create_slider_overlay, "$g_presentation_obj_19", -20, 0),
    (overlay_set_position, "$g_presentation_obj_19", pos2),
    (position_set_x, pos2, 700),
    (position_set_y, pos2, 700),
    (overlay_set_size, "$g_presentation_obj_19", pos2),

    (position_get_y, ":y", pos1),
    (val_sub, ":y", 40),
    (position_set_y, pos1, ":y"),

    (overlay_set_val, "$g_presentation_obj_19", "$dead_effect_on_ally"),

    ##slider
    (create_text_overlay, reg1, "@Field-battle reinforcements", 0),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos2, 900),
    (position_set_y, pos2, 900),
    (overlay_set_size, reg1, pos2),
    (copy_position, pos2, pos1),
    (position_get_x, ":x", pos2),
    (val_add, ":x", 300),
    (position_set_x, pos2, ":x"),

    (create_slider_overlay, "$g_presentation_obj_admin_panel_8", 2, 50),
    (overlay_set_position, "$g_presentation_obj_admin_panel_8", pos2),
    (position_set_x, pos2, 700),
    (position_set_y, pos2, 700),
    (overlay_set_size, "$g_presentation_obj_admin_panel_8", pos2),

    (position_get_y, ":y", pos1),
    (val_sub, ":y", 40),
    (position_set_y, pos1, ":y"),

    (overlay_set_val, "$g_presentation_obj_admin_panel_8", "$defender_threshold"),

    ##VC morale effects
    (create_text_overlay, reg1, "@Heroes effect morale", 0),
    (call_script, "script_prsnt_vc_menu_helper"),
    (overlay_set_val, reg2, "$more_lose_leader"),
    (assign, "$g_presentation_obj_32", reg2),

    ##VC morale effects
    (create_text_overlay, reg1, "@Ranged troop penalty", 0),
    (call_script, "script_prsnt_vc_menu_helper"),
    (overlay_set_val, reg2, "$ranged_penality"),
    (assign, "$g_presentation_obj_31", reg2),
    ##VC morale effects
    (create_text_overlay, reg1, "@Morale recovery", 0),
    (call_script, "script_prsnt_vc_menu_helper"),
    (overlay_set_val, reg2, "$moral_recovery"),
    (assign, "$g_presentation_obj_30", reg2),
    ##VC morale effects
    (create_text_overlay, reg1, "@Morale messages (debug)", 0),
    (call_script, "script_prsnt_vc_menu_helper"),
    (overlay_set_val, reg2, "$debug_moral"),
    (assign, "$g_presentation_obj_29", reg2),

    ##VC morale effects
    (create_text_overlay, reg1, "@Double reinforcements during sieges", 0),
    (call_script, "script_prsnt_vc_menu_helper"),
    (store_sub, ":value", "$reduce_factor", 1),
    (overlay_set_val, reg2, ":value"),
    (assign, "$g_presentation_obj_admin_panel_9", reg2),

    #6. DESCRIPTION
    #headline
    (create_text_overlay, reg1, "str_empty_string", tf_center_justify),
    (position_set_x, pos1, 250),
    (position_set_y, pos1, 370),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1200),
    (position_set_y, pos1, 1200),
    (overlay_set_size, reg1, pos1),
    (assign, "$g_presentation_obj_3", reg1),

    (create_text_overlay, reg1, "str_empty_string", tf_double_space|tf_scrollable|tf_center_justify),
    (position_set_x, pos1, 75),
    (position_set_y, pos1, 100),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 350),
    (position_set_y, pos1, 260),
    (overlay_set_area_size, reg1, pos1),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (assign, "$g_presentation_obj_7", reg1),
  ]),
  (ti_on_presentation_mouse_enter_leave,[
    (store_trigger_param_1, ":object"),
    (store_trigger_param_2, ":one_exit_zero_enter"),

    (str_clear, s2),
    (str_clear, s3),
    (str_clear, s4),
    (overlay_set_color, "$g_presentation_obj_3", 0x000000),

    (try_begin),
      (eq, ":one_exit_zero_enter", 1),

    (else_try),
      (store_add, ":object_plus_one", ":object", 1),

      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_12"),
      (eq, ":object", "$g_presentation_obj_12"),
      (assign, reg0, "$battle_ratio_multiple"),
      (str_store_string,s2,"@Battleratio Multiplier: {reg0}"),
      (str_store_string,s3,"@Tweak"),
      (str_store_string,s4,"@The battleratio is used to decide for a troop on the battlefield either to run away or not. By increasing this value, troops are more likely to run away if they are outnumbered. Decreasing this value will make it less likely that troops run away. (default is 6000)"),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_13"),
      (eq, ":object", "$g_presentation_obj_13"),
      (assign, reg0, "$moral_shock"),
      (str_store_string,s2,"@Moralshock Multiplier: {reg0}"),
      (str_store_string,s3,"@Tweak"),
      (str_store_string,s4,"@Increasing this value will increase morale penalties from high casualities in short times. (default is 30)"),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_24"),
      (eq, ":object", "$g_presentation_obj_24"),
      (assign, reg0, "$agent_run_away_multiplier"),
      (str_store_string,s2,"@Runaway Threshold: {reg0}"),
      (str_store_string,s3,"@Tweak"),
      (str_store_string,s4,"@The higher the value, the lower is the morale threshold, at which troops start to rout. A lower threshold will make it less likely that troops run away. (default is 10)"),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_20"),
      (eq, ":object", "$g_presentation_obj_20"),
      (assign, reg0, "$dead_effect_on_killer"),
      (str_store_string,s2,"@Morale Modifier I: {reg0}"),
      (str_store_string,s3,"@Tweak"),
      (str_store_string,s4,"@This modifies the morale gain for killing enemy troops. Whenever an enemy dies, the killer troop and his allies will gain morale. If it is set to zero, there will be no effect at all. (default is 1)"),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_19"),
      (eq, ":object", "$g_presentation_obj_19"),
      (assign, reg0, "$dead_effect_on_ally"),
      (str_store_string,s2,"@Morale Modifier II: {reg0}"),
      (str_store_string,s3,"@Tweak"),
      (str_store_string,s4,"@This modifies the morale change for losing troops. Whenever an allied troop dies, his allies will suffer a morale penalty. If it is set to zero, there will be no effect at all. (default is -4)"),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_admin_panel_8"),
      (eq, ":object", "$g_presentation_obj_admin_panel_8"),
      (assign, reg0, "$defender_threshold"),
      (str_store_string,s2,"@Number of reinforcements during battles (not sieges): {reg0}"),
      (str_store_string,s3,"@Tweak"),
      (str_store_string,s4,"@Sets the number of reinforcements during field battles (not sieges)."),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_32"),
      (eq, ":object", "$g_presentation_obj_32"),
      (str_store_string,s2,"@Morale effect of leaders (Companions and Lords)"),
      (str_store_string,s3,"str_realism_feature"),
      (str_store_string,s4,"@If enabled, the lose of a leader (lords, companions, the player) will cause a morale penalty for the allied side and a morale boost for the enemy side. Additionally, AI leaders will encourage nearby troops whenever an ally troop is killed. (default is enabled)"),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_31"),
      (eq, ":object", "$g_presentation_obj_31"),
      (str_store_string,s2,"@Ranged troop morale penalty"),
      (str_store_string,s3,"str_realism_feature"),
      (str_store_string,s4,"@Missle troops recieve a morale penalty when they enter melee combat. (default is enabled)"),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_30"),
      (eq, ":object", "$g_presentation_obj_30"),
      (str_store_string,s2,"@Morale recovery"),
      (str_store_string,s3,"@Tweak"),
      (str_store_string,s4,"@If enabled, morale will recover every three seconds. The rate depends on the number of alive allies. (default is enabled)"),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_29"),
      (eq, ":object", "$g_presentation_obj_29"),
      (str_store_string,s2,"@Morale messages"),
      (str_store_string,s3,"@Debug Option"),
      (str_store_string,s4,"@If enabled, you can recieve messages about the morale of each troop on the battlefield by pressing the 'K' key. You will also recieve a message when a troop starts routing. (should be disabled, will spawn your screen with messages)"),
    (else_try),
      (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_admin_panel_9"),
      (eq, ":object", "$g_presentation_obj_admin_panel_9"),
      (str_store_string,s2,"@Double reinforcements during sieges"),
      (str_store_string,s3,"@Tweak"),
      (str_store_string,s4,"@Will double the reinforcements during sieges. As a result, large sieges battles will take longer."),
    (try_end),
    (str_store_string,s3,"@{s3}^^{s4}"),
    (overlay_set_text, "$g_presentation_obj_3", s2),
    (overlay_set_text, "$g_presentation_obj_7", s3),
  ]),

  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":object"),
    (store_trigger_param_2, ":value"),

    # (assign, reg8, ":value"),
    # (display_message, "@value = {reg8}"),
    (overlay_set_color, "$g_presentation_obj_3", 0x000000),

    (try_begin),
      (eq, ":object", "$g_presentation_obj_1"),
      (start_presentation, "prsnt_vc_options"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_12"),
      (assign, "$battle_ratio_multiple", ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_13"),
      (assign, "$moral_shock", ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_24"),
      (assign, "$agent_run_away_multiplier", ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_20"),
      (assign, "$dead_effect_on_killer", ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_19"),
      (assign, "$dead_effect_on_ally", ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_admin_panel_8"),
      (assign, "$defender_threshold", ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_32"),
      (assign, "$more_lose_leader", ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_31"),
      (assign, "$ranged_penality", ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_30"),
      (assign, "$moral_recovery", ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_29"),
      (assign, "$debug_moral", ":value"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_admin_panel_9"),
      (val_add, ":value", 1),
      (assign, "$reduce_factor", ":value"),
    (try_end),
  ]),
]),


("barracks", 0, mesh_load_window, [
  (ti_on_presentation_load, [
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    #0. BACKROUND
    (create_mesh_overlay, reg0, "mesh_pic_troop_trees"),
    (position_set_x, pos1, -1),
    (position_set_y, pos1, -1),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 1002),
    (position_set_y, pos1, 1002),
    (overlay_set_size, reg0, pos1),

    #screen top
    (create_text_overlay, reg1, "@Select a unit", tf_left_align),
    (position_set_x, pos1, 530),
    (position_set_y, pos1, 700),
    (overlay_set_position, reg1, pos1),

    # Alert that click opens detail
    (create_text_overlay, reg1, "@(Click on the name to select a unit and click again to show unit details)", tf_left_align),
    (position_set_x, pos1, 530),
    (position_set_y, pos1, 670),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1750/2),
    (position_set_y, pos1, 1750/2),
    (overlay_set_size, reg1, pos1),
    (overlay_set_color, reg1, 0x0000FF),

    ###on top, info about players party
    (create_text_overlay, "$g_presentation_obj_28", "@Your party information:", tf_left_align),
    (position_set_x, pos1, 40),
    (position_set_y, pos1, 700),
    (overlay_set_position, "$g_presentation_obj_28", pos1),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, "$g_presentation_obj_28", pos1),

    (store_party_size_wo_prisoners, reg1, "p_main_party"),
    (call_script, "script_calculate_weekly_party_wage", "p_main_party"),
    (assign, reg2, reg0),

    (call_script, "script_game_get_party_companion_limit", "p_main_party"),
    (assign, ":party_size", reg0),
    (assign, reg3, ":party_size"),
    (store_troop_gold, reg4, "trp_player"),

    (create_text_overlay, "$g_presentation_obj_27", "@Party size: {reg1} men, Wage: {reg2} denars, ^Party limit: {reg3} men. Your gold: {reg4} denars.", tf_left_align),
    (position_set_x, pos1, 40),
    (position_set_y, pos1, 660),
    (overlay_set_position, "$g_presentation_obj_27", pos1),
    (position_set_x, pos1, 920),
    (position_set_y, pos1, 920),
    (overlay_set_size, "$g_presentation_obj_27", pos1),


    (try_begin),
        (faction_slot_eq, "$g_encountered_party_faction", slot_faction_culture, "fac_culture_7"),
        (str_store_string, s12, "@officers"),
    (else_try),
        (str_store_string, s12, "@nobles"),
    (try_end),
    (party_get_slot, ":number_nobles", "$current_town", slot_center_volunteer_noble_troop_amount),
    (assign, reg2, ":number_nobles"),
    (create_text_overlay, reg1, "@Available {s12}: {reg2}.", tf_left_align),
    (position_set_x, pos1, 40),
    (position_set_y, pos1, 625),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 920),
    (position_set_y, pos1, 920),
    (overlay_set_size, reg1, pos1),

    (party_get_slot, ":number_peasants", "$current_town", slot_center_peasant_troop_amount),
    (assign, reg2, ":number_peasants"),
    (create_text_overlay, reg1, "@Available recruits: {reg2}.", tf_left_align),
    (position_set_x, pos1, 40),
    (position_set_y, pos1, 610),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 920),
    (position_set_y, pos1, 920),
    (overlay_set_size, reg1, pos1),

    (assign, "$g_max", 25),
    (val_min, "$g_max", ":party_size"),
    (try_begin),
        (call_script, "script_cf_is_noble", "$temp_troop"),
        (val_min, "$g_max", ":number_nobles"),
    (else_try),
        (val_min, "$g_max", ":number_peasants"),
    (try_end),

    # (create_text_overlay, reg1, "@Number of recruits is effected by:", tf_left_align),
    # (position_set_x, pos1, 40),
    # (position_set_y, pos1, 595),
    # (overlay_set_position, reg1, pos1),
    # (position_set_x, pos1, 920),
    # (position_set_y, pos1, 920),
    # (overlay_set_size, reg1, pos1),

    # (create_text_overlay, reg1, "@Town prosperity: higher prosperity, more recruits.", tf_left_align),
    # (position_set_x, pos1, 40),
    # (position_set_y, pos1, 580),
    # (overlay_set_position, reg1, pos1),
    # (position_set_x, pos1, 920),
    # (position_set_y, pos1, 920),
    # (overlay_set_size, reg1, pos1),

    # (store_sub, ":y", 580, 15),
    # (try_begin),
    #     (faction_slot_eq, "$g_encountered_party_faction", slot_faction_culture, "fac_culture_7"),
    #     (create_text_overlay, reg1, "@Lex militaris: reduces recruits by one quarter", tf_left_align),
    #     (position_set_x, pos1, 40),
    #     (position_set_y, pos1, ":y"),
    #     (overlay_set_position, reg1, pos1),
    #     (position_set_x, pos1, 920),
    #     (position_set_y, pos1, 920),
    #     (overlay_set_size, reg1, pos1),
    #     (val_sub, ":y", 15),
    # (try_end),

    # (try_begin),
    #     (faction_get_slot, ":faction_leader", "fac_player_supporters_faction", slot_faction_leader),
    #     (eq, ":faction_leader", "trp_player"),
    #     (faction_get_slot,reg2, "$g_encountered_party_faction", dplmc_slot_faction_serfdom),
    #     (val_mul, reg2, 5),
    #     (create_text_overlay, reg1, "@Slavery laws of faction: {reg2}%", tf_left_align),
    #     (position_set_x, pos1, 40),
    #     (position_set_y, pos1, ":y"),
    #     (overlay_set_position, reg1, pos1),
    #     (position_set_x, pos1, 920),
    #     (position_set_y, pos1, 920),
    #     (overlay_set_size, reg1, pos1),
    #     (val_sub, ":y", 15),
    # (try_end),

    # (try_begin),
    #     (eq, "$g_constable_training_center", "$g_encountered_party"),
    #     (store_add, reg2, "$g_constable_training_improved", 5),
    #     (create_text_overlay, reg1, "@Training of Custos Publicus: {reg2}%", tf_left_align),
    #     (position_set_x, pos1, 40),
    #     (position_set_y, pos1, ":y"),
    #     (overlay_set_position, reg1, pos1),
    #     (position_set_x, pos1, 920),
    #     (position_set_y, pos1, 920),
    #     (overlay_set_size, reg1, pos1),
    #     (val_sub, ":y", 15),
    # (try_end),

    # (party_get_slot, reg2, "$g_encountered_party", slot_center_player_relation),
    # (val_div, reg2, 2),
    # (create_text_overlay, reg1, "@Your relation with town: {reg2}%", tf_left_align),
    # (position_set_x, pos1, 40),
    # (position_set_y, pos1, ":y"),
    # (overlay_set_position, reg1, pos1),
    # (position_set_x, pos1, 920),
    # (position_set_y, pos1, 920),
    # (overlay_set_size, reg1, pos1),

    #(overlay_set_display, reg1, 0),
    (assign, "$troop_tree_counter", 0),

    # ##pic of troop
    (store_mul, reg2, "$temp_troop", 2), #picture with weapons (see script_add_troop_to_cur_tableau_for_party)
    (create_mesh_overlay_with_tableau_material, reg1, -1, "tableau_troop_tree_pic", reg2),
    (overlay_set_val, reg1, "$temp_troop"),
    (position_set_x, pos1, 200),
    (position_set_y, pos1, 350),
    (overlay_set_position, reg1, pos1),

    # # create button
    # (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
    # (overlay_set_position, reg10, pos1),
    # (position_set_x, pos1, Troop_Tree_Tableau_Height),
    # (position_set_y, pos1, Troop_Tree_Tableau_Width),
    # (overlay_set_size, reg10, pos1),
    # (overlay_set_alpha, reg10, 0),
    # (overlay_set_color, reg10, 0xDDDDDD),


    (troop_set_slot, "trp_temp_array_a", 0, "$temp_troop"),

    (position_set_x, pos1, Troop_Tree_Tableau_Height/2),
    (position_set_y, pos1, Troop_Tree_Tableau_Width/2),

    (overlay_set_size, reg1, pos1),

    (position_set_x, pos2, 1100),
    (position_set_y, pos2, 1100),
    ##troop name
    (str_store_troop_name, s2, "$temp_troop"),
    (create_text_overlay, reg1, "@Selected troop: {s2}", tf_center_justify),
    (position_set_x, pos1, 320),
    (position_set_y, pos1, 330),
    (overlay_set_position, reg1, pos1),
    (overlay_set_size, reg1, pos2),
    ##creat button
    (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
    (overlay_set_position, reg10, pos1),
    (overlay_set_size, reg10, pos2),
    (overlay_set_alpha, reg10, 0),
    (overlay_set_color, reg10, 0xDDDDDD),

    (troop_set_slot, "trp_temp_array_b", 0, reg10),
    ##troop detail
    (call_script, "script_game_get_troop_wage", "$temp_troop", 0),
    (assign, reg40, reg0),
    (call_script, "script_game_get_join_cost", "$temp_troop"),
    (assign, reg41, reg0),
    (create_text_overlay, reg1, "@Wage: {reg40} denars. Recruitment cost: {reg41} denars.", tf_center_justify),
    (position_set_x, pos1, 320),
    (position_set_y, pos1, 290),
    (overlay_set_position, reg1, pos1),
    (overlay_set_size, reg1, pos2),
    ###make definitions for troop list:
    (assign, ":slot_no_troop", 1),
    (assign, ":slot_no_id", 1),


    (try_begin),
        (eq, "$temp4_1", 1),#non-roman

        #first officers
        (str_clear, s0),
        (create_text_overlay, "$g_presentation_obj_admin_panel_container", s0, tf_scrollable),
        (position_set_x, pos1, 575),
        (position_set_y, pos1, 50),##was 90
        (overlay_set_position, "$g_presentation_obj_admin_panel_container", pos1),
        (position_set_x, pos1, 350),
        (position_set_y, pos1, 575),
        (overlay_set_area_size, "$g_presentation_obj_admin_panel_container", pos1),
        (set_container_overlay, "$g_presentation_obj_admin_panel_container"),


        #lines
        (position_set_x, pos1, 0),
        (position_set_y, pos1, 19*30 + 11*40 + 30),	# 30 for each checkbox or gap + 40 for each other elements + 30 buffer at the end

        (position_set_x, pos2, 920),
        (position_set_y, pos2, 920),

        (create_text_overlay, reg1, "@Nobles:", 0),
        (overlay_set_color, reg1, 0x000000), #Black se ve bien
        (overlay_set_position, reg1, pos1),
        (overlay_set_size, reg1, pos2),
        #gap
        (call_script, "script_prsnt_vc_menu_helper_gap"),

        ##first do officers:
        (try_for_range, ":troop", "trp_mercenaries_end", "trp_legio_i_adjutrix"),
            (store_faction_of_troop, ":culture", ":troop"),
            (faction_slot_eq, "$g_encountered_party_faction", slot_faction_culture, ":culture"),
            (call_script, "script_cf_is_noble", ":troop"),
            (str_store_troop_name, s1, ":troop"),
            (create_text_overlay, reg1, s1, 0),
            (overlay_set_val, reg1, ":troop"),
            (overlay_set_color, reg1, 0x000000), #Black se ve bien
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),

            # create button
            (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
            (overlay_set_position, reg10, pos1),
            (overlay_set_size, reg10, pos2),
            (overlay_set_alpha, reg10, 0),
            (overlay_set_color, reg10, 0xDDDDDD),

            #gap
            (position_get_y, ":y", pos1),
            (val_sub, ":y", 40),
            (position_set_y, pos1, ":y"),
            (troop_set_slot, "trp_temp_array_a", ":slot_no_troop", ":troop"),
            (troop_set_slot, "trp_temp_array_b", ":slot_no_id", reg10),
            (val_add, ":slot_no_troop", 1),
            (val_add, ":slot_no_id", 1),
            (val_add, "$troop_tree_counter", 1),
        (try_end),

        (create_text_overlay, reg1, "@Soldiers:", 0),
        (overlay_set_color, reg1, 0x000000), #Black se ve bien
        (overlay_set_position, reg1, pos1),
        (overlay_set_size, reg1, pos2),
        #gap
        (call_script, "script_prsnt_vc_menu_helper_gap"),

        (try_for_range, ":troop", "trp_mercenaries_end", "trp_legio_i_adjutrix"),
            (store_faction_of_troop, ":culture", ":troop"),
            (faction_slot_eq, "$g_encountered_party_faction", slot_faction_culture, ":culture"),
            (call_script, "script_cf_is_peasant", ":troop"),
            (str_store_troop_name, s1, ":troop"),
            (create_text_overlay, reg1, s1, 0),
            (overlay_set_val, reg1, ":troop"),
            (overlay_set_color, reg1, 0x000000), #Black se ve bien
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),

            # create button
            (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
            (overlay_set_position, reg10, pos1),
            (overlay_set_size, reg10, pos2),
            (overlay_set_alpha, reg10, 0),
            (overlay_set_color, reg10, 0xDDDDDD),

            #gap
            (position_get_y, ":y", pos1),
            (val_sub, ":y", 40),
            (position_set_y, pos1, ":y"),
            (troop_set_slot, "trp_temp_array_a", ":slot_no_troop", ":troop"),
            (troop_set_slot, "trp_temp_array_b", ":slot_no_id", reg10),
            (val_add, ":slot_no_troop", 1),
            (val_add, ":slot_no_id", 1),
            (val_add, "$troop_tree_counter", 1),
        (try_end),

        # (try_begin),
        #     (party_slot_eq, "$g_encountered_party", slot_center_culture, "fac_culture_8"),
        #     (create_text_overlay, reg1, "@Custom Troops:", 0),
        #     (overlay_set_color, reg1, 0x000000), #Black se ve bien
        #     (overlay_set_position, reg1, pos1),
        #     (overlay_set_size, reg1, pos2),
        #     #gap
        #     (call_script, "script_prsnt_vc_menu_helper_gap"),

        #     (try_for_range, ":troop", customizable_troops_begin, customizable_troops_end),
        #       (this_or_next|eq, ":troop", "trp_custom_judean_guard"),
        #       (eq, ":troop", "trp_custom_judean_guard_archer"),
        #       (str_store_troop_name, s1, ":troop"),
        #       (create_text_overlay, reg1, s1, 0),
        #       (overlay_set_val, reg1, ":troop"),
        #       (overlay_set_color, reg1, 0x000000), #Black se ve bien
        #       (overlay_set_position, reg1, pos1),
        #       (overlay_set_size, reg1, pos2),

        #       # create button
        #       (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
        #       (overlay_set_position, reg10, pos1),
        #       (overlay_set_size, reg10, pos2),
        #       (overlay_set_alpha, reg10, 0),
        #       (overlay_set_color, reg10, 0xDDDDDD),

        #       #gap
        #       (position_get_y, ":y", pos1),
        #       (val_sub, ":y", 40),
        #       (position_set_y, pos1, ":y"),
        #       (troop_set_slot, "trp_temp_array_a", ":slot_no_troop", ":troop"),
        #       (troop_set_slot, "trp_temp_array_b", ":slot_no_id", reg10),
        #       (val_add, ":slot_no_troop", 1),
        #       (val_add, ":slot_no_id", 1),
        #       (val_add, "$troop_tree_counter", 1),
        #     (try_end),
        # (try_end),
        (set_container_overlay, -1),
    (else_try),
        (eq, "$temp4_1", 3),#custom legion

        #first officers
        (str_clear, s0),
        (create_text_overlay, "$g_presentation_obj_admin_panel_container", s0, tf_scrollable),
        (position_set_x, pos1, 575),
        (position_set_y, pos1, 50),##was 90
        (overlay_set_position, "$g_presentation_obj_admin_panel_container", pos1),
        (position_set_x, pos1, 350),
        (position_set_y, pos1, 575),
        (overlay_set_area_size, "$g_presentation_obj_admin_panel_container", pos1),
        (set_container_overlay, "$g_presentation_obj_admin_panel_container"),

        (assign, ":slot_no_troop", 1),
        (assign, ":slot_no_id", 1),

        #lines
        (position_set_x, pos1, 0),
        (position_set_y, pos1, 19*30 + 11*40 + 30),	# 30 for each checkbox or gap + 40 for each other elements + 30 buffer at the end

        (position_set_x, pos2, 920),
        (position_set_y, pos2, 920),
        ##custom legion
        (create_text_overlay, reg1, "@Custom Troops:", 0),
        (overlay_set_color, reg1, 0x000000), #Black se ve bien
        (overlay_set_position, reg1, pos1),
        (overlay_set_size, reg1, pos2),
        #gap
        (position_get_y, ":y", pos1),
        (val_sub, ":y", 40),
        (position_set_y, pos1, ":y"),
        (try_for_range, ":troop",  customizable_troops_begin, customizable_troops_end),
          (assign, ":c", 0),
          (try_begin),
            (troop_slot_eq, "trp_players_infantry", 1, 1),
            (party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
            (this_or_next|eq, ":troop", "trp_custom_standard_bearer"),
            (this_or_next|eq, ":troop", "trp_custom_hornman"),
            (eq, ":troop", "trp_custom_infantry"),
            (assign, ":c", 1),
          (else_try),
            (troop_slot_eq, "trp_players_cavalry", 1, 1),
            (party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
            (this_or_next|eq, ":troop", "trp_custom_standard_bearer_cav"),
            (this_or_next|eq, ":troop", "trp_custom_skirmisher_cav"),
            (eq, ":troop", "trp_custom_cav_barb"),
            (assign, ":c", 1),
          (else_try),
            (troop_slot_eq, "trp_players_skirmisher", 1, 1),
            (party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
            (this_or_next|eq, ":troop", "trp_custom_standard_bearer_skirmisher"),
            (this_or_next|eq, ":troop", "trp_custom_hornman_skirmisher"),
            (this_or_next|eq, ":troop", "trp_custom_archer"),
            (eq, ":troop", "trp_custom_skirmisher"),
            (assign, ":c", 1),
          (else_try),
            (troop_slot_eq, "trp_players_legion", 1, 1),
            (party_slot_eq, "$current_town", slot_town_lord, "trp_player"),
            (this_or_next|eq, ":troop", "trp_custom_legionary"),
            (this_or_next|eq, ":troop", "trp_custom_centurio"),
            (this_or_next|eq, ":troop", "trp_custom_aquilifer"),
            (this_or_next|eq, ":troop", "trp_custom_signifer"),
            (this_or_next|eq, ":troop", "trp_custom_vexilarius"),
            (this_or_next|eq, ":troop", "trp_custom_tribunus"),
            (this_or_next|eq, ":troop", "trp_custom_primus_pilius"),
            # (this_or_next|eq, ":troop", "trp_custom_sagitarius"),
            # (this_or_next|eq, ":troop", "trp_custom_cav"),
            #(this_or_next|eq, ":troop", "trp_custom_cav_vex"),
            # (this_or_next|eq, ":troop", "trp_custom_cav_of"),
            (this_or_next|eq, ":troop", "trp_custom_balista"),
            (eq, ":troop", "trp_custom_cornicen"),
            (assign, ":c", 1),
          (else_try),
            (troop_slot_eq, "trp_players_aux_inf", 1,1),
            (this_or_next|eq, ":troop", "trp_custom_aux_cornicern"),
            (this_or_next|eq, ":troop", "trp_custom_aux_signifer"),
            (this_or_next|eq, ":troop", "trp_custom_aux_centurio"),
            (this_or_next|eq, ":troop", "trp_custom_sagitarius"),
            (this_or_next|eq, ":troop", "trp_custom_aux_spear"),
            (eq, ":troop", "trp_custom_aux_miles"),
            (assign, ":c", 1),
          (else_try),
            (troop_slot_eq, "trp_players_aux_cav", 1,1),
            (this_or_next|eq, ":troop", "trp_custom_cav_of"),
            (this_or_next|eq, ":troop", "trp_custom_cav_vex"),
            (this_or_next|eq, ":troop", "trp_custom_aux_cav"),
            (eq, ":troop", "trp_custom_cav"),
            # (eq, ":troop", "trp_custom_aux_spear"),
            (assign, ":c", 1),
          (try_end),
          (eq, ":c", 1),
          (str_store_troop_name, s1, ":troop"),
          (create_text_overlay, reg1, s1, 0),
          (overlay_set_val, reg1, ":troop"),
          (overlay_set_color, reg1, 0x000000), #Black se ve bien
          (overlay_set_position, reg1, pos1),
          (overlay_set_size, reg1, pos2),

          # create button
          (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
          (overlay_set_position, reg10, pos1),
          (overlay_set_size, reg10, pos2),
          (overlay_set_alpha, reg10, 0),
          (overlay_set_color, reg10, 0xDDDDDD),

          #gap
          (position_get_y, ":y", pos1),
          (val_sub, ":y", 40),
          (position_set_y, pos1, ":y"),
          (troop_set_slot, "trp_temp_array_a", ":slot_no_troop", ":troop"),
          (troop_set_slot, "trp_temp_array_b", ":slot_no_id", reg10),
          (val_add, ":slot_no_troop", 1),
          (val_add, ":slot_no_id", 1),
          (val_add, "$troop_tree_counter", 1),
        (try_end),

        (set_container_overlay, -1),


    (else_try),
        (eq, "$temp4_1", 2),#normal legion
        (party_get_slot, ":lord", "$current_town",slot_town_lord),
        (party_get_slot, ":local_auxilia", "$current_town",slot_center_auxilia),
        (try_begin),
          (ge, ":lord", 0),
          (troop_get_slot, ":legion", ":lord", slot_troop_legion),
        (else_try),
          (assign, ":legion", -1),
        (try_end),
        (try_begin),
          (ge, ":lord", 1),
          (ge, ":legion", 1),
          (neq, ":legion", 13),
          (store_add, ":legionary", "trp_eastern_elite_infantry_vet", ":legion"),
          (store_add, ":legionary_exp", "trp_ballistarii", ":legion"),
          (store_add, ":aquilifer", "trp_praetoriani_milites", ":legion"),
          (store_add, ":vexilarius", "trp_aquilifer_praetoriani", ":legion"),
        (else_try),
          (assign, ":legionary", -1),
          (assign, ":aquilifer", -1),
          (assign, ":vexilarius", -1),
        (try_end),
        (try_begin),
          (ge, ":local_auxilia", 1),
          (val_sub, ":local_auxilia", "pt_cohors_alp"),
          (val_add, ":local_auxilia", "trp_aux_inf_alporum"),
        (else_try),
          (assign, ":local_auxilia", -1),
        (try_end),

        (try_begin),
          (eq, ":local_auxilia", "trp_aux_inf_batavorum"),
          (assign, ":local_auxilia_2", "trp_aux_cav_batavorum"),
        (else_try),
          (eq, ":local_auxilia", "trp_aux_inf_gallorum"),
          (assign, ":local_auxilia_2", "trp_aux_cav_gallorum"),
        (else_try),
          (assign, ":local_auxilia_2", -1),
        (try_end),

        #first officers
        (str_clear, s0),
        (create_text_overlay, "$g_presentation_obj_admin_panel_container", s0, tf_scrollable),
        (position_set_x, pos1, 575),
        (position_set_y, pos1, 50),##was 90
        (overlay_set_position, "$g_presentation_obj_admin_panel_container", pos1),
        (position_set_x, pos1, 350),
        (position_set_y, pos1, 575),
        (overlay_set_area_size, "$g_presentation_obj_admin_panel_container", pos1),
        (set_container_overlay, "$g_presentation_obj_admin_panel_container"),


        #lines
        (position_set_x, pos1, 0),
        (position_set_y, pos1, 19*30 + 11*40 + 30),

        (position_set_x, pos2, 920),
        (position_set_y, pos2, 920),

        (create_text_overlay, reg1, "@Officers:", 0),
        (overlay_set_color, reg1, 0x000000), #Black se ve bien
        (overlay_set_position, reg1, pos1),
        (overlay_set_size, reg1, pos2),

        (position_get_y, ":y", pos1),
        (val_sub, ":y", 20),
        (position_set_y, pos1, ":y"),
        #gap
        (call_script, "script_prsnt_vc_menu_helper_gap"),

        ##first do officers:
        (try_for_range, ":troop", "trp_praetoriani_milites", "trp_aux_cav"),
          (this_or_next|eq, ":troop", ":aquilifer"),
          (this_or_next|eq, ":troop", ":vexilarius"),
          (is_between, ":troop", "trp_centurio_west", "trp_aux_cav"),

          (assign, reg2, 1),
          (try_begin),
            (eq, ":troop", "trp_aux_cav_vexilarius_praetorian"),
            (party_slot_eq, "$current_town", slot_town_lord, "trp_player"),#if player is lord and not emperor block
            (neq, "$g_is_emperor", 1),
            (assign, reg2, 0),
          (else_try),
            (eq, ":troop", "trp_aux_cav_vexilarius_praetorian"),
            (neq, ":lord", "trp_player"),
            (neq, ":legion", 12),#is not praetorian guard stationed
            (assign, reg2, 0),
          (try_end),
          (eq, reg2, 1),

          (str_store_troop_name, s1, ":troop"),
          (create_text_overlay, reg1, s1, 0),
          (overlay_set_val, reg1, ":troop"),
          (overlay_set_color, reg1, 0x000000), #Black se ve bien
          (overlay_set_position, reg1, pos1),
          (overlay_set_size, reg1, pos2),

          # create button
          (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
          (overlay_set_position, reg10, pos1),
          (overlay_set_size, reg10, pos2),
          (overlay_set_alpha, reg10, 0),
          (overlay_set_color, reg10, 0xDDDDDD),

          #gap
          (position_get_y, ":y", pos1),
          (val_sub, ":y", 40),
          (position_set_y, pos1, ":y"),
          (troop_set_slot, "trp_temp_array_a", ":slot_no_troop", ":troop"),
          (troop_set_slot, "trp_temp_array_b", ":slot_no_id", reg10),
          (val_add, ":slot_no_troop", 1),
          (val_add, ":slot_no_id", 1),
          (val_add, "$troop_tree_counter", 1),
        (try_end),

        (create_text_overlay, reg1, "@Soldiers:", 0),
        (overlay_set_color, reg1, 0x000000), #Black se ve bien
        (overlay_set_position, reg1, pos1),
        (overlay_set_size, reg1, pos2),
        #gap
        (call_script, "script_prsnt_vc_menu_helper_gap"),

        (position_get_y, ":y", pos1),
        (val_sub, ":y", 20),
        (position_set_y, pos1, ":y"),

        (try_for_range, ":troop", "trp_sarmatian_peasant", "trp_looter"),
          (this_or_next|eq, ":troop", ":legionary"),
          (this_or_next|eq, ":troop", ":legionary_exp"),
          # (this_or_next|eq, ":troop", ":aquilifer"),
          # (this_or_next|eq, ":troop", ":vexilarius"),
          (this_or_next|eq, ":troop", ":local_auxilia"),
          (this_or_next|eq, ":troop", ":local_auxilia_2"),
          (this_or_next|eq, ":troop", "trp_aux_archer_sryrorum"),
          (this_or_next|eq, ":troop", "trp_ballistarii"),
          (this_or_next|is_between, ":troop", "trp_aux_cav", "trp_aux_inf_alporum"),
          (is_between, ":troop", "trp_aux_archer", "trp_vigilia"),
          (assign, reg2, 1),
          (try_begin),
            (eq, ":troop", "trp_aux_archer_sryrorum"),
            (neq, "$current_town", "p_town_22"),
            (neq, "$current_town", "p_town_47"),
            (neq, "$current_town", "p_castle_42"),
            (neq, "$current_town", "p_castle_40"),
            (assign, reg2, 0),
          (try_end),
          (eq, reg2, 1),

          (assign, reg2, 1),
          (try_begin),
            (this_or_next|eq, ":troop", "trp_phalanx"),
            (this_or_next|eq, ":troop", "trp_hoplit_2"),
            (eq, ":troop", "trp_hoplit"),
            (neg|troop_slot_eq, "trp_global_variables", g_can_recruit_greek, 1),
            (assign, reg2, 0),
          (try_end),
          (eq, reg2, 1),

          (assign, reg2, 1),
          (try_begin),
            (this_or_next|eq, ":troop", "trp_aux_cav_praetoriani"),
            (eq, ":troop", "trp_aux_cav_praetoriani_2"),
            (party_slot_eq, "$current_town", slot_town_lord, "trp_player"),#if player is lord and not emperor block
            (neq, "$g_is_emperor", 1),
            (assign, reg2, 0),
          (else_try),
            (this_or_next|eq, ":troop", "trp_aux_cav_praetoriani"),
            (eq, ":troop", "trp_aux_cav_praetoriani_2"),
            (neq, ":legion", 12),#is not praetorian guard stationed
            (neq, ":lord", "trp_player"),
            (assign, reg2, 0),
          (try_end),
          (eq, reg2, 1),

          (str_store_troop_name, s1, ":troop"),
          (create_text_overlay, reg1, s1, 0),
          (overlay_set_val, reg1, ":troop"),
          (overlay_set_color, reg1, 0x000000), #Black se ve bien
          (overlay_set_position, reg1, pos1),
          (overlay_set_size, reg1, pos2),

          # create button
          (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
          (overlay_set_position, reg10, pos1),
          (overlay_set_size, reg10, pos2),
          (overlay_set_alpha, reg10, 0),
          (overlay_set_color, reg10, 0xDDDDDD),

          #gap
          (position_get_y, ":y", pos1),
          (val_sub, ":y", 40),
          (position_set_y, pos1, ":y"),
          (troop_set_slot, "trp_temp_array_a", ":slot_no_troop", ":troop"),
          (troop_set_slot, "trp_temp_array_b", ":slot_no_id", reg10),
          (val_add, ":slot_no_troop", 1),
          (val_add, ":slot_no_id", 1),
          (val_add, "$troop_tree_counter", 1),
        (try_end),

        (set_container_overlay, -1),
    (try_end),
    # (assign, ":continueee", 0),
    # (try_begin),
        # (ge, ":lord", 1),
        # (troop_slot_eq, ":lord", slot_troop_legion, 13),
        # (troop_slot_eq, "trp_players_legion", 1, 1),##legion is created
        # (assign, ":continueee", 1),
    # (else_try),
        # (eq, ":lord", "trp_player"),
        # (troop_slot_eq, "trp_players_legion", 1, 1),##legion is created
        # (assign, ":continueee", 1),
    # (try_end),

    # (assign, ":continueee", 0),
    # (try_begin),
        # (ge, ":lord", 1),
        # (troop_slot_eq, ":lord", slot_troop_legion, 13),
        # (troop_slot_eq, "trp_players_legion", 1, 1),##legion is created
        # (assign, ":continueee", 1),
    # (else_try),
        # (eq, ":lord", "trp_player"),
        # (troop_slot_eq, "trp_players_legion", 1, 1),##legion is created
        # (assign, ":continueee", 1),
    # (try_end),
    # (try_begin),
      # (eq, ":continueee", 1),
      # #screen bottom
      # (create_game_button_overlay, "$presentation_leave_button_2", "@View custom Troops", tf_center_justify),
      # (position_set_x, pos1, 600),
      # (position_set_y, pos1, Screen_Border_Width),
      # (overlay_set_position, "$presentation_leave_button_2", pos1),
    # (try_end),
    #screen bottom
    (create_game_button_overlay, "$presentation_leave_button", "str_done", tf_center_justify),
    (position_set_x, pos1, 400),
    (position_set_y, pos1, Screen_Border_Width),
    (overlay_set_position, "$presentation_leave_button", pos1),
    #reg41 join cost, reg43 number of recruits, reg44 total cost
    (val_min, reg43, "$g_max"),
    (store_mul, reg44, reg43, reg41),
    ##explenation text
    (create_text_overlay, "$g_presentation_obj_29", "@Recruit {reg43} troops for {reg44} denars.", tf_center_justify),
    (position_set_x, pos1, 200),
    (position_set_y, pos1, 200),
    (overlay_set_position, "$g_presentation_obj_29", pos1),
    (position_set_x, pos1, 1100),
    (position_set_y, pos1, 1100),
    (overlay_set_size, "$g_presentation_obj_29", pos1),

    ##slider
    (create_slider_overlay, "$g_presentation_obj_30", 0, "$g_max"),
    (position_set_x, pos2, 225),
    (position_set_y, pos2, 150),
    (overlay_set_position, "$g_presentation_obj_30", pos2),
    (position_set_x, pos2, 700),
    (position_set_y, pos2, 700),
    (overlay_set_size, "$g_presentation_obj_30", pos2),
    (overlay_set_val, "$g_presentation_obj_30", reg43),

    ##recruit button
    (create_game_button_overlay, "$g_presentation_input", "@Recruit", tf_center_justify),
    (position_set_x, pos1, 200),
    (position_set_y, pos1, Screen_Border_Width),
    (overlay_set_position, "$g_presentation_input", pos1),
  ]),
  (ti_on_presentation_run, [
    (try_begin),
      (key_clicked, key_escape),
      (presentation_set_duration, 0),
      (jump_to_menu, "mnu_town"),

    (else_try),
      (key_clicked, key_space),
      (set_fixed_point_multiplier, 1000),
      (mouse_get_position, pos31),

      (position_get_x, reg31, pos31),
      (position_get_y, reg32, pos31),

      (display_message, "@X: {reg31} | Y: {reg32}"),
    (try_end),
  ]),
  (ti_on_presentation_event_state_change, [
    (store_trigger_param_1, ":object_id"),
    (store_trigger_param_2, ":value"),
    (try_begin),
      (eq, ":object_id", "$presentation_leave_button"),
      (presentation_set_duration, 0),
      (jump_to_menu, "$g_next_menu"),
    # (else_try),
      # (eq, ":object_id", "$presentation_leave_button_2"),
      # #(presentation_set_duration, 0),
      # (assign, "$temp_troop", "trp_custom_legionary"),
      # (assign, reg43, 1),
      # (start_presentation, "prsnt_barracks_custom"),
    (else_try),
      (eq, ":object_id", "$g_presentation_input"),
      (store_troop_gold, ":g", "trp_player"),
      (assign, ":slot_troop_type", slot_center_peasant_troop_amount),
      (try_begin),
        (call_script, "script_cf_is_noble", "$temp_troop"),
        (assign, ":slot_troop_type", slot_center_volunteer_noble_troop_amount),
      (try_end),

      (party_get_slot, ":recruits", "$current_town", ":slot_troop_type"),
      (try_begin),
        (ge, ":recruits", reg43),
        (troops_can_join, reg43),
        (ge, ":g", reg44),
        #(presentation_set_duration, 0),
        (party_add_members, "p_main_party", "$temp_troop", reg43),
        (troop_remove_gold, "trp_player", reg44),
        (start_presentation, "prsnt_barracks"),
        (val_sub, ":recruits", reg43),
        (party_set_slot, "$current_town", ":slot_troop_type", ":recruits"),
      (else_try),
        (lt, ":recruits", reg43),
        (display_message, "@There are not enough recruits available!"),
      (else_try),
        (display_message, "@You don't have enough space in your party, or you don't have enough denars!"),
      (try_end),

    (else_try),
      (eq, ":object_id", "$g_presentation_obj_30"),
      (assign, reg43, ":value"),
      (store_mul, reg44, reg43, reg41),
      (overlay_set_text, "$g_presentation_obj_29", "@Recruit {reg43} troops for {reg44} denars."),
    (else_try),
        (assign, ":troop_id", -1),
        (assign, ":end_loop", 0),
        (store_add, ":end_loop", "$troop_tree_counter", 1),
        (try_for_range, ":slot_no", 0, ":end_loop"),
          (troop_slot_eq, "trp_temp_array_b", ":slot_no", ":object_id"),
          (troop_get_slot, ":troop_id", "trp_temp_array_a", ":slot_no"),
          (assign, ":end_loop", 0),
        (try_end),
        (try_begin),
          (assign, "$temp", 1),
          (eq, "$temp_troop", ":troop_id"),
          (try_begin),
            (is_between, "$temp_troop", customizable_troops_begin, customizable_troops_end),
            (assign, "$g_presentation_next_presentation", "prsnt_barracks"),
            (call_script, "script_start_customizing", "$temp_troop"),
          (else_try),
            (start_presentation, "prsnt_troop_detail"),
          (try_end),
        (else_try),
          (is_between, ":troop_id", "trp_mercenaries_end", customizable_troops_end),
          (neq, "trp_mercenaries_end"),
          (assign, "$temp_troop", ":troop_id"),
          (start_presentation, "prsnt_barracks"),
        (try_end),
    (try_end),
  ]),
]), #end troop tree

# ("roman_empire_report", 0, mesh_load_window, [

#     (ti_on_presentation_load,
#       [
#         (presentation_set_duration, 999999),
#         (set_fixed_point_multiplier, 1000),

#         #0. BACKROUND
#         (create_mesh_overlay, reg0, "mesh_pic_extra_intro2"),
#         (position_set_x, pos1, -1),
#         (position_set_y, pos1, -1),
#         (overlay_set_position, reg0, pos1),
#         (position_set_x, pos1, 1002),
#         (position_set_y, pos1, 1002),
#         (overlay_set_size, reg0, pos1),

#         #1. BASICS
#         (position_set_y, pos1, 25),
#         (create_game_button_overlay, "$g_presentation_obj_1", "str_continue"),
#         (position_set_x, pos1, 825),
#         (overlay_set_position, "$g_presentation_obj_1", pos1),


#         #2. Empire Stability
#         (create_text_overlay, reg1, "@Empire Report", tf_center_justify),
#         (position_set_x, pos1, 250),
#         (position_set_y, pos1, 655),
#         (overlay_set_position, reg1, pos1),
#         (position_set_x, pos1, 1200),
#         (position_set_y, pos1, 1200),
#         (overlay_set_size, reg1, pos1),

#         (str_clear, s44),
#         (try_begin),
#           (le, "$g_unrest", 0),
#           (str_store_string, s44, "@The Empire is a bulwark of stability. People enjoy the pleasures of Roman lifestyle."),
#         (else_try),
#           (le, "$g_unrest", 15),
#           (str_store_string, s44, "@The Empire is stable. People feel safe. Only some bandits rumor on the roads."),
#         (else_try),
#           (le, "$g_unrest", 40),
#           (str_store_string, s44, "@The Empire seems quite stable. In rural areas bandits are a common threat."),
#         (else_try),
#           (le, "$g_unrest", 50),
#           (str_store_string, s44, "@The Empire is crumbling. Bandits are a common threat and rebel uprisings undermine public order."),
#         (else_try),
#           (le, "$g_unrest", 75),
#           (str_store_string, s44, "@The Empire is shaken. Bandits are a menace and rebellions are common."),
#         (else_try),
#           (lt, "$g_unrest", 100),
#           (str_store_string, s44, "@The Empire trembles. Bandits and rebels are a plague."),
#         (else_try),
#           (ge, "$g_unrest", 100),
#           (str_store_string, s44, "@The Empire is on the edge of collapse."),
#         (else_try),
#           (str_store_string, s44, "@The Empire is on the edge of collapse."),
#         (try_end),

#         (create_text_overlay, reg1, s44, tf_center_justify),
#         (position_set_x, pos1, 250),
#         (position_set_y, pos1, 620),
#         (overlay_set_position, reg1, pos1),
#         (position_set_x, pos1, 940),
#         (position_set_y, pos1, 940),
#         (overlay_set_size, reg1, pos1),

#         (try_begin),
#           (lt, "$g_heir_of_rome", 0),
#           (str_store_string, s54, "@The Emperor of the Imperium Romanum currently has no successor."),
#         (else_try),
#           (eq, "$g_heir_of_rome", 0),
#           (str_store_troop_name, s45, "$g_heir_of_rome"),
#           (str_store_string, s54, "@Your oldest son, {s45}, is your successor to the throne of the Imperium Romanum."),
#         (else_try),
#           (str_store_troop_name, s45, "$g_heir_of_rome"),
#           (str_store_string, s54, "@{s45} is successor of the Imperium Romanum."),
#         (try_end),

#         (create_text_overlay, reg1, s54, tf_center_justify),
#         (position_set_x, pos1, 250),
#         (position_set_y, pos1, 590),
#         (overlay_set_position, reg1, pos1),
#         (position_set_x, pos1, 940),
#         (position_set_y, pos1, 940),
#         (overlay_set_size, reg1, pos1),

#         (troop_get_slot, reg39, "trp_senator_dummy", slot_senate_next_meeting),
#         (try_begin),
#           (ge, reg39, 1),
#           (str_store_string, s53, "@Next senate meeting will be in {reg39} days."),
#         (else_try),
#           (eq, reg39, 0),
#           (str_store_string, s53, "@A senate meeting is going on in Rome."),
#         (else_try),
#           (str_store_string, s53, "@Currently, it is not known when the next senate meeting will be."),
#         (try_end),

#         (create_text_overlay, reg1, s53, tf_center_justify),
#         (position_set_x, pos1, 250),
#         (position_set_y, pos1, 560),
#         (overlay_set_position, reg1, pos1),
#         (position_set_x, pos1, 940),
#         (position_set_y, pos1, 940),
#         (overlay_set_size, reg1, pos1),


#         #4. Laws and Edicts and Legions
#         (create_text_overlay, reg1, "@Move mouse over the name to get more information", tf_center_justify),
#         (position_set_x, pos1, 750),
#         (position_set_y, pos1, 650),
#         (overlay_set_position, reg1, pos1),
#         (position_set_x, pos2, 1000),
#         (position_set_y, pos2, 1000),
#         (overlay_set_size, reg1, pos2),

#         #5. CONTAINER
#         (str_clear, s0),
#         (create_text_overlay, "$g_presentation_obj_admin_panel_container", s0, tf_scrollable),
#         (position_set_x, pos1, 575),
#         (position_set_y, pos1, 90),
#         (overlay_set_position, "$g_presentation_obj_admin_panel_container", pos1),
#         (position_set_x, pos1, 350),
#         (position_set_y, pos1, 535),
#         (overlay_set_area_size, "$g_presentation_obj_admin_panel_container", pos1),
#         (set_container_overlay, "$g_presentation_obj_admin_panel_container"),

#         #lines
#         (position_set_x, pos1, 0),
#         (position_set_y, pos1, 13*40 + 6*40 + 30+10*40),##12 + 1 legions and 6 laws and honorary titles

#         #gap
#         (call_script, "script_prsnt_vc_menu_helper_gap"),

#         (create_text_overlay, reg4, "@Edicts and Laws:", 0),

#         (overlay_set_color, reg4, 0x000000), #Black se ve bien
#         (overlay_set_position, reg4, pos1),
#         (position_set_x, pos2, 900),
#         (position_set_y, pos2, 900),
#         (overlay_set_size, reg4, pos2),
#         #gap
#         (position_get_y, ":y", pos1),
#         (val_sub, ":y", 30),
#         (position_set_y, pos1, ":y"),

#         (try_begin),
#           (eq, "$edict1", 1),

#           (create_text_overlay, reg1, "@Edictum de libelli", 0),

#           (overlay_set_color, reg1, 0x000000), #Black se ve bien
#           (overlay_set_position, reg1, pos1),
#           (position_set_x, pos2, 900),
#           (position_set_y, pos2, 900),
#           (overlay_set_size, reg1, pos2),
#           (assign, "$g_presentation_obj_14", reg1),
#           #gap
#           (position_get_y, ":y", pos1),
#           (val_sub, ":y", 30),
#           (position_set_y, pos1, ":y"),
#         (try_end),


#         (try_begin),
#           (eq, "$edict2", 1),

#           (create_text_overlay, reg1, "@Lex Iulia et Papia", 0),

#           (overlay_set_color, reg1, 0x000000), #Black se ve bien
#           (overlay_set_position, reg1, pos1),
#           (position_set_x, pos2, 900),
#           (position_set_y, pos2, 900),
#           (overlay_set_size, reg1, pos2),
#           (assign, "$g_presentation_obj_15", reg1),
#           #gap
#           (position_get_y, ":y", pos1),
#           (val_sub, ":y", 30),
#           (position_set_y, pos1, ":y"),
#         (try_end),

#         (try_begin),
#           (eq, "$edict3", 1),

#           (create_text_overlay, reg1, "@Lex Christiani", 0),

#           (overlay_set_color, reg1, 0x000000), #Black se ve bien
#           (overlay_set_position, reg1, pos1),
#           (position_set_x, pos2, 900),
#           (position_set_y, pos2, 900),
#           (overlay_set_size, reg1, pos2),
#           (assign, "$g_presentation_obj_16", reg1),
#           #gap
#           (position_get_y, ":y", pos1),
#           (val_sub, ":y", 30),
#           (position_set_y, pos1, ":y"),
#         (try_end),

#         (try_begin),
#           (eq, "$edict4", 1),

#           (create_text_overlay, reg1, "@Edictum securitatis publica", 0),

#           (overlay_set_color, reg1, 0x000000), #Black se ve bien
#           (overlay_set_position, reg1, pos1),
#           (position_set_x, pos2, 900),
#           (position_set_y, pos2, 900),
#           (overlay_set_size, reg1, pos2),
#           (assign, "$g_presentation_obj_17", reg1),
#           #gap
#           (position_get_y, ":y", pos1),
#           (val_sub, ":y", 30),
#           (position_set_y, pos1, ":y"),
#         (try_end),

#         (try_begin),
#           (ge, "$edict5", 1),

#           (create_text_overlay, reg1, "@Constitutio {playername}", 0),

#           (overlay_set_color, reg1, 0x000000), #Black se ve bien
#           (overlay_set_position, reg1, pos1),
#           (position_set_x, pos2, 900),
#           (position_set_y, pos2, 900),
#           (overlay_set_size, reg1, pos2),
#           (assign, "$g_presentation_obj_18", reg1),
#           #gap
#           (position_get_y, ":y", pos1),
#           (val_sub, ":y", 30),
#           (position_set_y, pos1, ":y"),
#         (try_end),

#         (try_begin),
#           (eq, "$edict7", 1),

#           (create_text_overlay, reg1, "@Lex frumentaria et agraria", 0),

#           (overlay_set_color, reg1, 0x000000), #Black se ve bien
#           (overlay_set_position, reg1, pos1),
#           (position_set_x, pos2, 900),
#           (position_set_y, pos2, 900),
#           (overlay_set_size, reg1, pos2),
#           (assign, "$g_presentation_obj_19", reg1),
#           #gap
#           (position_get_y, ":y", pos1),
#           (val_sub, ":y", 30),
#           (position_set_y, pos1, ":y"),
#         (try_end),

#         (try_begin),
#           (eq, "$edict8", 1),

#           (create_text_overlay, reg1, "@Lex militaris", 0),

#           (overlay_set_color, reg1, 0x000000), #Black se ve bien
#           (overlay_set_position, reg1, pos1),
#           (position_set_x, pos2, 900),
#           (position_set_y, pos2, 900),
#           (overlay_set_size, reg1, pos2),
#           (assign, "$g_presentation_obj_20", reg1),
#           #gap
#           (position_get_y, ":y", pos1),
#           (val_sub, ":y", 30),
#           (position_set_y, pos1, ":y"),
#         (try_end),

#         (try_begin),
#           (eq, "$edict9", 1),

#           (create_text_overlay, reg1, "@Lex Alimenta", 0),

#           (overlay_set_color, reg1, 0x000000), #Black se ve bien
#           (overlay_set_position, reg1, pos1),
#           (position_set_x, pos2, 900),
#           (position_set_y, pos2, 900),
#           (overlay_set_size, reg1, pos2),
#           (assign, "$g_presentation_obj_21", reg1),
#           #gap
#           (position_get_y, ":y", pos1),
#           (val_sub, ":y", 30),
#           (position_set_y, pos1, ":y"),
#         (try_end),

#         (try_begin),
#           (ge, "$edict10", 1),

#           (create_text_overlay, reg1, "@Edictum mensum", 0),

#           (overlay_set_color, reg1, 0x000000), #Black se ve bien
#           (overlay_set_position, reg1, pos1),
#           (position_set_x, pos2, 900),
#           (position_set_y, pos2, 900),
#           (overlay_set_size, reg1, pos2),
#           (assign, "$g_presentation_obj_22", reg1),
#           #gap
#           (position_get_y, ":y", pos1),
#           (val_sub, ":y", 30),
#           (position_set_y, pos1, ":y"),
#         (try_end),
#         #gap
#         (call_script, "script_prsnt_vc_menu_helper_gap"),


#         (create_text_overlay, reg4, "@Legions:", 0),

#         (overlay_set_color, reg4, 0x000000), #Black se ve bien
#         (overlay_set_position, reg4, pos1),
#         (position_set_x, pos2, 900),
#         (position_set_y, pos2, 900),
#         (overlay_set_size, reg4, pos2),
#         #gap
#         (position_get_y, ":y", pos1),
#         (val_sub, ":y", 30),
#         (position_set_y, pos1, ":y"),

#         (assign, reg44, 0),
#         (assign, reg45, 0),

#         (try_for_range, ":legatus", active_npcs_begin, active_npcs_end),
#           (troop_get_slot, ":legion", ":legatus", slot_troop_legion),
#           (ge, ":legion", 1),

#           (assign, reg59, 1),
#           (try_begin),
#             (eq, ":legion", 13),
#             (try_begin),
#               (troop_slot_eq, "trp_players_legion", 1, 1),##legion is created
#               (str_store_troop_name_plural, s28, "trp_players_legion"),
#             (else_try),
#               (assign, reg59, 0),
#             (try_end),
#           (else_try),
#             (store_add, ":legion_string", "str_lover_talk", ":legion"),
#             (str_store_string, s28, ":legion_string"),
#           (try_end),
#           (eq, reg59, 1),

#           (val_add, reg44, 1),##count number

#           (try_begin),##for preatorian guard
#             (troop_slot_eq, ":legatus", slot_troop_legion, 12),
#             (val_add, reg45, 1),
#           (try_end),

#           (str_store_troop_name, s27, ":legatus"),
#           (str_store_string, s29, "@{s28} commanded by {s27}"),

#           (create_text_overlay, reg1, s29, 0),

#           (overlay_set_color, reg1, 0x000000), #Black se ve bien
#           (overlay_set_position, reg1, pos1),
#           (position_set_x, pos2, 900),
#           (position_set_y, pos2, 900),
#           (overlay_set_size, reg1, pos2),
#           (troop_set_slot, "trp_zendar_chest", ":legion", reg1),#store object
#           #gap
#           (position_get_y, ":y", pos1),
#           (val_sub, ":y", 30),
#           (position_set_y, pos1, ":y"),
#         (try_end),

#         (try_for_range, ":slot", 1, 14),
#           (troop_slot_eq, "trp_zendar_chest", ":slot", -1),
#           (assign, reg59, 1),
#           (try_begin),
#             (eq, ":slot", 13),
#             (try_begin),
#               (troop_slot_eq, "trp_players_legion", 1, 1),##legion is created
#               (str_store_troop_name_plural, s33, "trp_players_legion"),
#             (else_try),
#               (assign, reg59, 0),
#             (try_end),
#           (else_try),
#             (store_add, ":legion_string", "str_lover_talk", ":slot"),
#             (str_store_string, s33, ":legion_string"),
#           (try_end),
#           (eq, reg59, 1),
#           (try_begin),
#             (troop_slot_eq, "trp_players_legion", 1, 1),##legion is created
#             (str_store_string, s34, "@The {s33} is commanded by you"),
#           (else_try),
#             (str_store_string, s34, "@The {s33} has no commander"),
#           (try_end),
#           (create_text_overlay, reg1, s34, 0),

#           (overlay_set_color, reg1, 0x000000), #Black se ve bien
#           (overlay_set_position, reg1, pos1),
#           (position_set_x, pos2, 900),
#           (position_set_y, pos2, 900),
#           (overlay_set_size, reg1, pos2),
#           #gap
#           (position_get_y, ":y", pos1),
#           (val_sub, ":y", 30),
#           (position_set_y, pos1, ":y"),

#         (try_end),
#         #gap
#         (call_script, "script_prsnt_vc_menu_helper_gap"),

#         (create_text_overlay, reg4, "@Honorary Titles:", 0),

#         (overlay_set_color, reg4, 0x000000), #Black se ve bien
#         (overlay_set_position, reg4, pos1),
#         (position_set_x, pos2, 900),
#         (position_set_y, pos2, 900),
#         (overlay_set_size, reg4, pos2),
#         #gap
#         (position_get_y, ":y", pos1),
#         (val_sub, ":y", 30),
#         (position_set_y, pos1, ":y"),


#         (try_for_range, ":legatus", active_npcs_including_player_begin, active_npcs_end),
#           #Special handling for trp_player, and get the troop's faction
#           (try_begin),
#             (eq, ":legatus", "trp_kingdom_heroes_including_player_begin"),
#             (assign, ":legatus", "trp_player"),
#           (try_end),

#           (troop_get_slot, ":title", ":legatus", slot_troop_honorary_title),
#           (ge, ":title", 1),

#           (val_add, ":title", "str_cognomen_ends"),
#           (str_store_string, s28, ":title"),

#           (str_store_troop_name, s27, ":legatus"),
#           (str_store_string, s29, "@{s27} has the title of {s28}"),

#           (create_text_overlay, reg1, s29, 0),

#           (overlay_set_color, reg1, 0x000000), #Black se ve bien
#           (overlay_set_position, reg1, pos1),
#           (position_set_x, pos2, 900),
#           (position_set_y, pos2, 900),
#           (overlay_set_size, reg1, pos2),
#           #gap
#           (position_get_y, ":y", pos1),
#           (val_sub, ":y", 30),
#           (position_set_y, pos1, ":y"),
#         (try_end),

#         (set_container_overlay, -1),

#         (try_begin),
#           (eq, reg45, 1),
#           (val_sub, reg44, 1),
#           (str_store_string, s37, "@The Roman Empire has {reg44} active legions and the Praetorian guard."),
#         (else_try),
#           (str_store_string, s37, "@The Roman Empire has {reg44} active legions."),
#         (try_end),

#         (create_text_overlay, reg1, s37, tf_center_justify),
#         (position_set_x, pos1, 250),
#         (position_set_y, pos1, 530),
#         (overlay_set_position, reg1, pos1),
#         (position_set_x, pos1, 940),
#         (position_set_y, pos1, 940),
#         (overlay_set_size, reg1, pos1),

#         (assign, reg35, 0),
#         (assign, reg36, 0),
#         (try_for_range, ":aux", active_npcs_begin, active_npcs_end),
#           (troop_slot_eq, ":aux", slot_troop_occupation, slto_kingdom_hero),
#           (try_begin),
#             (troop_slot_ge, ":aux", slot_troop_aux, 1),
#             (val_add, reg35, 1),
#           (else_try),
#             (troop_slot_ge, ":aux", slot_troop_govern, 1),
#             (val_add, reg36, 1),
#           (try_end),
#         (try_end),

#         (create_text_overlay, reg1, "@The Empire has {reg35} auxiliar commanders and {reg36} governors.", tf_center_justify),
#         (position_set_x, pos1, 250),
#         (position_set_y, pos1, 500),
#         (overlay_set_position, reg1, pos1),
#         (position_set_x, pos1, 940),
#         (position_set_y, pos1, 940),
#         (overlay_set_size, reg1, pos1),
#         (try_begin),
#           (ge, "$g_civil_war", 1),
#           (create_text_overlay, reg1, "@A civil war shackes the Empire.", tf_center_justify),
#           (position_set_x, pos1, 250),
#           (position_set_y, pos1, 470),
#           (overlay_set_position, reg1, pos1),
#           (position_set_x, pos1, 940),
#           (position_set_y, pos1, 940),
#           (overlay_set_size, reg1, pos1),
#         (try_end),
#         #6. DESCRIPTION
#         #headline
#         (create_text_overlay, reg1, "str_empty_string", tf_center_justify),
#         (position_set_x, pos1, 250),
#         (position_set_y, pos1, 370),
#         (overlay_set_position, reg1, pos1),
#         (position_set_x, pos1, 1200),
#         (position_set_y, pos1, 1200),
#         (overlay_set_size, reg1, pos1),
#         (assign, "$g_presentation_obj_3", reg1),

#         (create_text_overlay, reg1, "str_empty_string", tf_double_space|tf_scrollable|tf_center_justify),
#         (position_set_x, pos1, 75),
#         (position_set_y, pos1, 100),
#         (overlay_set_position, reg1, pos1),
#         (position_set_x, pos1, 350),
#         (position_set_y, pos1, 260),
#         (overlay_set_area_size, reg1, pos1),
#         (position_set_x, pos1, 900),
#         (position_set_y, pos1, 900),
#         (overlay_set_size, reg1, pos1),
#         (assign, "$g_presentation_obj_7", reg1),


#     ]),

#     (ti_on_presentation_mouse_enter_leave,
#       [
#         (store_trigger_param_1, ":object"),
#         (store_trigger_param_2, ":one_exit_zero_enter"),

#         (str_clear, s57),
#         (str_clear, s58),
#         (str_clear, s59),
#         (overlay_set_color, "$g_presentation_obj_3", 0x000000),

#         (try_begin),
#           (eq, ":one_exit_zero_enter", 1),
#         (else_try),
#           #(store_add, ":object_plus_one", ":object", 1),

#          # (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_14"),
#           (eq, ":object", "$g_presentation_obj_14"),
#           (str_store_string,s57,"@Edictum de libelli"),
#           (str_store_string,s58,"str_edict"),
#           (str_store_string,s59,"@People are no longer allowed to send petitions to the Emperor"),

#         (else_try),
#          # (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_15"),
#           (eq, ":object", "$g_presentation_obj_15"),
#           (str_store_string,s57,"@Lex Iulia et Papia"),
#           (str_store_string,s58,"str_law"),
#           (str_store_string,s59,"@Every Roman citizen in marriageable age has to marry. If not he must pay a punitiv tax. Families with three children gain financial support through tax privileges."),

#         (else_try),
#          # (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_16"),
#           (eq, ":object", "$g_presentation_obj_16"),
#           (str_store_string,s57,"@Lex Christiani"),
#           (str_store_string,s58,"str_law"),
#           (str_store_string,s59,"@The various christian religions are now under protection of the Roman Empire and accepted religions. It is forbidden to kill Christs for beeing Christs."),

#         (else_try),
#          # (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_17"),
#           (eq, ":object", "$g_presentation_obj_17"),
#           (str_store_string,s57,"@Edictum securitatis publica"),
#           (str_store_string,s58,"str_edict"),
#           (str_store_string,s59,"@To Worship the Christian god is punished by death. The Christians are a remarkable threat for public order and it is necessary to stop their spread."),

#         (else_try),
#          # (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_18"),
#           (eq, ":object", "$g_presentation_obj_18"),
#           (str_store_string,s57,"@Constitutio {playername}"),
#           (str_store_string,s58,"str_law"),
#           (str_clear, s6),
#           (try_begin),
#             (eq, "$edict5", 1),
#             (try_begin),
#               (eq, "$edict6",1),
#               (str_store_string, s6, "@Additionally the Empire has a constitution and a succession law."),
#             (try_end),
#             (str_store_string, s59, "@The civitas Romana is granted to every assimilated aristocrat and wealthy free man of the peregrini. {s6}"),
#           (else_try),
#             (eq, "$edict5", 2),
#             (try_begin),
#               (eq, "$edict6",1),
#               (str_store_string, s6, "@Additionally the Empire has a constitution and a succession law."),
#             (try_end),
#             (str_store_string, s59, "@The civitas Romana is granted to every free man of the Empire. There are only two social classes: the honestiores and the humiliores. {s6}"),
#           (try_end),
#         (else_try),
#          # (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_19"),
#           (eq, ":object", "$g_presentation_obj_19"),
#           (str_store_string,s57,"@Lex frumentaria et agraria"),
#           (str_store_string,s58,"str_law"),
#           (str_store_string,s59,"@Grain prices are regulated: minimum of 30 denars per unit, maximum of 59 denars per unit. Also restrict landownership: There is a maximum of land which someone can obtain. Thus player can only buy 10 latifundia at once."),

#         (else_try),
#          # (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_20"),
#           (eq, ":object", "$g_presentation_obj_20"),
#           (str_store_string,s57,"@Lex militaris"),
#           (str_store_string,s58,"str_law"),
#           (str_store_string,s59,"@The minimum age for conscripts is 17 years."),
#         (else_try),
#          # (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_20"),
#           (eq, ":object", "$g_presentation_obj_21"),
#           (str_store_string,s57,"@Lex Alimenta"),
#           (str_store_string,s58,"str_law"),
#           (str_store_string,s59,"@The government founds orphanages and poor families recieve substitutions in form of tax privileges."),
#         (else_try),
#          # (this_or_next|eq, ":object_plus_one", "$g_presentation_obj_20"),
#           (eq, ":object", "$g_presentation_obj_22"),
#           (str_store_string,s57,"@Edictum mensum"),
#           (str_store_string,s58,"str_edict"),
#           (str_store_troop_name, s29, "trp_bard_end"),
#           (store_add, ":string", "str_month_begin", "$edict10"),
#           (str_store_string, s28, ":string"),
#           (str_store_string,s59,"@The Emperor issued to rename a month. The {s28} is now known as {s29}."),
#         (try_end),

#         (try_for_range, ":slot", 1, 14),
#           (troop_slot_eq, "trp_zendar_chest", ":slot", ":object"),
#           (try_for_range, ":legat", active_npcs_begin, active_npcs_end),
#             (troop_slot_eq, ":legat", slot_troop_legion, ":slot"),
#             (troop_get_slot, ":party", ":legat", slot_troop_leaded_party),
#             (assign, reg42, 0),
#             (try_begin),
#               (party_is_active, ":party"),
#               (gt, ":party", -1),
#               (store_party_size_wo_prisoners, reg42, ":party"),
#             (try_end),
#             (str_store_troop_name, s21, ":legat"),
#             (str_clear, s22),
#             (try_begin),
#               (troop_slot_eq, ":legat", slot_troop_occupation, dplmc_slto_dead),
#               (str_store_string, s22, "@(is deceased)"),
#             (try_end),
#             (store_add, ":legion_string", "str_lover_talk", ":slot"),
#             (str_store_string, s20, ":legion_string"),
#             (str_store_string,s57,s20),
#             (str_store_string,s58,"@Commanded by {s21} {s22}"),
#             (str_clear, s33),
#             (try_for_range, ":walled_center", walled_centers_begin, walled_centers_end),
#               (party_slot_eq, ":walled_center", slot_town_lord, ":legat"),
#               (str_store_party_name, s34, ":walled_center"),
#               (str_clear, s35),
#               (try_begin),
#                 (party_slot_ge, ":walled_center", slot_party_looted_left_days, 1),
#                 (str_store_string, s35, "@(looted)"),
#               (else_try),
#                 (store_party_size_wo_prisoners, reg53, ":walled_center"),
#                 (str_store_string, s35, "@(garrison: {reg53} men)"),
#               (try_end),
#               (str_store_string, s33, "@{s34} {s35}^{s33}"),
#             (try_end),
#             (str_store_string,s59,"@The legion currently has {reg42} men.^Walled centers owned:^{s33}"),
#           (try_end),
#         (try_end),
#         (str_store_string,s58,"@{s58}^{s59}"),
#         (overlay_set_text, "$g_presentation_obj_3", s57),
#         (overlay_set_text, "$g_presentation_obj_7", s58),


#     ]),

#     (ti_on_presentation_event_state_change,
#       [
#         (store_trigger_param_1, ":object"),
#         #(store_trigger_param_2, ":value"),

#         # (assign, reg8, ":value"),
#         # (display_message, "@value = {reg8}"),
#         (overlay_set_color, "$g_presentation_obj_3", 0x000000),

#         (try_begin),
#           (eq, ":object", "$g_presentation_obj_1"),
#           (presentation_set_duration, 0),
#           (jump_to_menu, "mnu_reports"),
#         (try_end),
#     ]),

# ]), #end troop tree

# Presentation prsnt_troop_detail
# Description: from the troop tree you can click on any troop
#              to see its details: stats, inventory, etc
("troop_detail", 0, mesh_load_window, [
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    (assign, ":draw_troop", "$temp_troop"),

    #pic
    (create_mesh_overlay, reg0, "mesh_pic_troop_trees"),
    (position_set_x, pos1, -1),
    (position_set_y, pos1, -1),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 1002),
    (position_set_y, pos1, 1002),
    (overlay_set_size, reg0, pos1),

    # (try_begin),
      # (eq, debug_troop_detail, 1),
      # (assign, reg0, ":draw_troop"),
      # (assign, reg1, "$temp"),
      # (str_store_troop_name, s1, ":draw_troop"),
      # (display_message, "@{!}DEBUG: troop {reg0} {s1}, $temp={reg1}"),
    # (try_end),

    (call_script, "script_troop_detail_layout"),
    (call_script, "script_troop_detail_draw_troop", ":draw_troop"),
    (call_script, "script_troop_detail_draw_weapons", ":draw_troop"),

    (try_begin),
      (eq, "$temp", 1),# ---- Stats ----
      (call_script, "script_troop_detail_stats", ":draw_troop"),

    (else_try),# ---- Inventory of troop ----
      (eq, "$temp", 2),
      (call_script, "script_troop_detail_inventory"),
    (try_end),

    (try_begin),#CHEAT
      (ge, "$cheat_mode", 1),
      #(lt, vc_version, 2020),# disabled for VC-3672
      (create_button_overlay, "$alpha_animal", "@{!}Take 10"),
    (try_end),
  ]),

  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":object"),
    (store_trigger_param_2, ":value"),

    (try_begin),# done button
      (eq, ":object", "$g_presentation_leave_button"),
      (this_or_next|eq, "$temp4", 1),
      (eq, "$temp4", 2),
      (start_presentation, "prsnt_barracks"),
    (else_try),
      (eq, "$temp4", 3),
      (eq, ":object", "$g_presentation_leave_button"),
      (start_presentation, "$g_presentation_next_presentation"),
    (else_try),
      (eq, ":object", "$g_presentation_obj_1"),
      (call_script, "script_troop_detail_change_screen", "$temp_troop"),

    (else_try),
      (eq, ":object", "$checkbox_show_item_details"),
      (assign, "$checkbox_show_item_details_val", ":value"),
    (try_end),

    # (try_begin),#CHEAT
      # #(lt, vc_version, 2020),# disabled for VC-3672
      # (ge, "$cheat_mode", 1),
      # (eq, ":object", "$alpha_animal"),
      # (party_add_members, "p_main_party", "$temp_troop", 10),
    # (try_end),
  ]),

  (ti_on_presentation_mouse_enter_leave,[
    (call_script, "script_troop_detail_inventory_tooltip"),
  ]),

  (ti_on_presentation_mouse_press,[
    (eq, "$temp", 2),
    (store_trigger_param_1, ":object_id"),
    (call_script, "script_troop_detail_update_dummy", "$temp_troop", ":object_id"),
  ]),

  (ti_on_presentation_run,[
    (try_begin),
      (key_clicked, key_escape),
      (presentation_set_duration, 0),
      (change_screen_return,0),
    (try_end),
  ]),
]),

##############TROOP TREE BEGIN
#PRESENTATIONS tempered chief END
#arbol de tropas chief
  ("upgrade_tree_1", 0, mesh_load_window, [
    (ti_on_presentation_load,
      [
        (presentation_set_duration, 999999),
        (set_fixed_point_multiplier, 1000),

        (call_script, "script_prsnt_upgrade_tree_ready", "fac_culture_1"),

        # clear the string globals that we'll use
        (str_clear, s0),

        # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
        (create_text_overlay, reg43, s0, tf_scrollable_style_2),
        (position_set_x, pos1, 50),
        (position_set_y, pos1, 70),
        (overlay_set_position, reg43, pos1),
        (position_set_x, pos1, 970),
        (position_set_y, pos1, 527),
        (overlay_set_area_size, reg43, pos1),

        (set_container_overlay, reg43),#start scroll
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 0, "trp_dacian_light_spearman", 60, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 1, "trp_dacian_light_spearman_exp", 210, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 2, "trp_dacian_light_spearman_vet", 360, 710),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 3, "trp_dacian_light_swordman", 60, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 4, "trp_dacian_light_swordman_exp", 210, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 5, "trp_dacian_light_swordman_vet", 360, 510),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 6, "trp_dacian_flaxman", 60, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 7, "trp_dacian_flaxman_vet", 210, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 8, "trp_dacian_flaxman_heavy", 360, 310),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 9, "trp_dacian_archers", 560, 710),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 10, "trp_dacian_archers_exp", 710, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 11, "trp_dacian_archers_vet", 860, 710),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 12, "trp_dacian_skirmishers", 560, 510),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 13, "trp_dacian_skirmishers_exp", 710, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 14, "trp_dacian_skirmishers_vet", 860, 510),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 15, "trp_dacian_noble_cav", 560, 310),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 16, "trp_dacian_noble_cav_exp", 710, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 17, "trp_dacian_noble_cav_vet", 860, 310),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 18, "trp_dacian_noble_inf", 60, 110),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 19, "trp_dacian_noble_inf_exp", 210, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 20, "trp_dacian_noble_inf_vet", 360, 110),


        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 21, "trp_dacian_heavy_inf", 560, 110),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 22, "trp_dacian_heavy_inf_exp", 710, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 23, "trp_dacian_heavy_inf_vet", 860, 110),

        ##### - lines
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 810),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 810),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 610),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 610),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 410),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 410),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 810),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 810),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 610),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 610),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 410),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 410),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 210),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 210),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 210),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 210),

        (set_container_overlay, -1),#end scroll
      ]),
    (ti_on_presentation_mouse_enter_leave,
      [
      (store_trigger_param_1, ":object"),
      (store_trigger_param_2, ":enter_leave"),

      (try_begin),
        (this_or_next|eq, ":object", "$g_presentation_obj_1"),
        (eq, ":object", "$g_presentation_obj_3"),
        (overlay_set_display, "$g_presentation_obj_3", ":enter_leave"),
      (else_try),
        (this_or_next|eq, ":object", "$g_presentation_obj_2"),
        (eq, ":object", "$g_presentation_obj_4"),
        (overlay_set_display, "$g_presentation_obj_4", ":enter_leave"),
      (try_end),
    ]),
    (ti_on_presentation_event_state_change,
      [
        (store_trigger_param_1, ":object"),
        (call_script, "script_prsnt_upgrade_tree_switch", ":object", "fac_culture_1"),
      ]),
  ]),
  ("upgrade_tree_2", 0, mesh_load_window, [
    (ti_on_presentation_load,
      [
        (presentation_set_duration, 999999),
        (set_fixed_point_multiplier, 1000),

        (call_script, "script_prsnt_upgrade_tree_ready", "fac_culture_2"),

        # clear the string globals that we'll use
        (str_clear, s0),

        # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
        (create_text_overlay, reg43, s0, tf_scrollable_style_2),
        (position_set_x, pos1, 50),
        (position_set_y, pos1, 70),
        (overlay_set_position, reg43, pos1),
        (position_set_x, pos1, 970),
        (position_set_y, pos1, 527),
        (overlay_set_area_size, reg43, pos1),

        (set_container_overlay, reg43),#start scroll
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 0, "trp_celtic_light_clubman", 60, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 1, "trp_celtic_light_clubman_exp", 210, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 2, "trp_celtic_light_clubman_vet", 360, 710),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 3, "trp_celtic_light_spearman", 60, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 4, "trp_celtic_light_spearman_exp", 210, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 5, "trp_celtic_light_spearman_vet", 360, 510),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 6, "trp_celtic_naked_swordman", 60, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 7, "trp_celtic_naked_swordman_exp", 210, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 8, "trp_celtic_naked_swordman_vet", 360, 310),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 9, "trp_celtic_skirmisher", 560, 710),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 10, "trp_celtic_skirmisher_exp", 710, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 11, "trp_celtic_skirmisher_vet", 860, 710),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 12, "trp_celtic_archer", 560, 510),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 13, "trp_celtic_archer_exp", 710, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 14, "trp_celtic_archer_vet", 860, 510),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 15, "trp_celtic_horseman", 560, 310),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 16, "trp_celtic_horseman_exp", 710, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 17, "trp_celtic_horseman_vet", 860, 310),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 18, "trp_celtic_noble_swords", 60, 110),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 19, "trp_celtic_noble_swords_exp", 210, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 20, "trp_celtic_noble_swords_vet", 360, 110),

        # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 3, "trp_celtic_light_spearman", 565, 500),
        # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 4, "trp_celtic_light_spearman_exp", 715, 500),
        # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 5, "trp_celtic_light_spearman_vet", 565, 300),
        # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 6, "trp_celtic_naked_swordman", 415, 100),
        # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 7, "trp_celtic_naked_swordman_exp", 565, 100),
        # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 8, "trp_celtic_naked_swordman_vet", 715, 100),
        # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 9, "trp_celtic_skirmisher", 855, 100),
        # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 10, "trp_celtic_skirmisher_exp", 715, 300),

        ##### - lines
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 810),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 810),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 610),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 610),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 410),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 410),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 810),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 810),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 610),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 610),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 410),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 410),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 210),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 210),


        (set_container_overlay, -1),#end scroll
        #(call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 455, 610),

        # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 345, 190),
        # (call_script, "script_prsnt_upgrade_tree_lines", 50, 4, 470, 190),
        # (call_script, "script_prsnt_upgrade_tree_lines", 50, 4, 620, 590),
        # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 470, 490),
        # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 495, 590),
        # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 495, 390),
        # (call_script, "script_prsnt_upgrade_tree_lines", 50, 4, 770, 190),
        # (call_script, "script_prsnt_upgrade_tree_lines", 50, 4, 620, 390),
        ##### - lines

        ##### | lines
        # (call_script, "script_prsnt_upgrade_tree_lines", 4, 304, 343, 190),
        # (call_script, "script_prsnt_upgrade_tree_lines", 4, 204, 493, 390),
        ##### | lines

#        ####### mouse fix pos system #######
#        (call_script, "script_mouse_fix_pos_ready"),
#        ####### mouse fix pos system #######
      ]),

    (ti_on_presentation_run, [
        (try_begin),
          (key_clicked, key_escape),
          (presentation_set_duration, 0),
        (else_try),
          (key_clicked, key_space),
          (set_fixed_point_multiplier, 1000),
          (mouse_get_position, pos31),

          (position_get_x, reg31, pos31),
          (position_get_y, reg32, pos31),

          (display_message, "@X: {reg31} | Y: {reg32}"),
        (try_end),
    ]),

    (ti_on_presentation_mouse_enter_leave,
      [
      (store_trigger_param_1, ":object"),
      (store_trigger_param_2, ":enter_leave"),

      (try_begin),
        (this_or_next|eq, ":object", "$g_presentation_obj_1"),
        (eq, ":object", "$g_presentation_obj_3"),
        (overlay_set_display, "$g_presentation_obj_3", ":enter_leave"),
      (else_try),
        (this_or_next|eq, ":object", "$g_presentation_obj_2"),
        (eq, ":object", "$g_presentation_obj_4"),
        (overlay_set_display, "$g_presentation_obj_4", ":enter_leave"),
      (try_end),
    ]),

    (ti_on_presentation_event_state_change,
      [
        (store_trigger_param_1, ":object"),
        (call_script, "script_prsnt_upgrade_tree_switch", ":object", "fac_culture_2"),

        # (try_for_range, ":slot_no", 0, 30),
          # (troop_slot_eq, "trp_temp_array_a", ":slot_no", ":object"),
          # (troop_get_slot, "$temp_troop", "trp_temp_array_b", ":slot_no"),
          # (assign, "$g_presentation_next_presentation", "prsnt_upgrade_tree_2"),
          # (assign, "$temp4", 3),
          # (assign, "$temp", 1),
          # (start_presentation, "prsnt_troop_detail"),
        # (try_end),
      ]),
  ]),
  ("upgrade_tree_2_1", 0, mesh_load_window, [
    (ti_on_presentation_load,
      [
        (presentation_set_duration, 999999),
        (set_fixed_point_multiplier, 1000),

        (call_script, "script_prsnt_upgrade_tree_ready", "fac_culture_2_1"),

        # clear the string globals that we'll use
        (str_clear, s0),

        # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
        (create_text_overlay, reg43, s0, tf_scrollable_style_2),
        (position_set_x, pos1, 50),
        (position_set_y, pos1, 70),
        (overlay_set_position, reg43, pos1),
        (position_set_x, pos1, 970),
        (position_set_y, pos1, 527),
        (overlay_set_area_size, reg43, pos1),

        (set_container_overlay, reg43),#start scroll
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 0, "trp_caledonian_light_clubman", 60, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 1, "trp_caledonian_light_clubman_exp", 210, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 2, "trp_caledonian_light_clubman_vet", 360, 710),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 3, "trp_caledonian_light_spearman", 60, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 4, "trp_caledonian_light_spearman_exp", 210, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 5, "trp_caledonian_light_spearman_vet", 360, 510),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 6, "trp_caledonian_naked_swordman", 60, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 7, "trp_caledonian_naked_swordman_exp", 210, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 8, "trp_caledonian_naked_swordman_vet", 360, 310),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 9, "trp_caledonian_skirmisher", 560, 710),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 10, "trp_caledonian_skirmisher_exp", 710, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 11, "trp_caledonian_skirmisher_vet", 860, 710),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 12, "trp_caledonian_archer", 560, 510),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 13, "trp_caledonian_archer_exp", 710, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 14, "trp_caledonian_archer_vet", 860, 510),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 15, "trp_caledonian_horseman", 560, 310),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 16, "trp_caledonian_horseman_exp", 710, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 17, "trp_caledonian_horseman_vet", 860, 310),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 18, "trp_caledonian_noble_swords", 60, 110),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 19, "trp_caledonian_noble_swords_exp", 210, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 20, "trp_caledonian_noble_swords_vet", 360, 110),

        # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 3, "trp_caledonian_light_spearman", 565, 500),
        # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 4, "trp_caledonian_light_spearman_exp", 715, 500),
        # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 5, "trp_caledonian_light_spearman_vet", 565, 300),
        # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 6, "trp_caledonian_naked_swordman", 415, 100),
        # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 7, "trp_caledonian_naked_swordman_exp", 565, 100),
        # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 8, "trp_caledonian_naked_swordman_vet", 715, 100),
        # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 9, "trp_caledonian_skirmisher", 855, 100),
        # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 10, "trp_caledonian_skirmisher_exp", 715, 300),

        ##### - lines
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 810),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 810),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 610),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 610),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 410),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 410),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 810),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 810),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 610),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 610),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 410),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 410),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 210),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 210),


        (set_container_overlay, -1),#end scroll
        #(call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 455, 610),

        # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 345, 190),
        # (call_script, "script_prsnt_upgrade_tree_lines", 50, 4, 470, 190),
        # (call_script, "script_prsnt_upgrade_tree_lines", 50, 4, 620, 590),
        # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 470, 490),
        # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 495, 590),
        # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 495, 390),
        # (call_script, "script_prsnt_upgrade_tree_lines", 50, 4, 770, 190),
        # (call_script, "script_prsnt_upgrade_tree_lines", 50, 4, 620, 390),
        ##### - lines

        ##### | lines
        # (call_script, "script_prsnt_upgrade_tree_lines", 4, 304, 343, 190),
        # (call_script, "script_prsnt_upgrade_tree_lines", 4, 204, 493, 390),
        ##### | lines

#        ####### mouse fix pos system #######
#        (call_script, "script_mouse_fix_pos_ready"),
#        ####### mouse fix pos system #######
      ]),

    (ti_on_presentation_run, [
        (try_begin),
          (key_clicked, key_escape),
          (presentation_set_duration, 0),
        (else_try),
          (key_clicked, key_space),
          (set_fixed_point_multiplier, 1000),
          (mouse_get_position, pos31),

          (position_get_x, reg31, pos31),
          (position_get_y, reg32, pos31),

          (display_message, "@X: {reg31} | Y: {reg32}"),
        (try_end),
    ]),

    (ti_on_presentation_mouse_enter_leave,
      [
      (store_trigger_param_1, ":object"),
      (store_trigger_param_2, ":enter_leave"),

      (try_begin),
        (this_or_next|eq, ":object", "$g_presentation_obj_1"),
        (eq, ":object", "$g_presentation_obj_3"),
        (overlay_set_display, "$g_presentation_obj_3", ":enter_leave"),
      (else_try),
        (this_or_next|eq, ":object", "$g_presentation_obj_2"),
        (eq, ":object", "$g_presentation_obj_4"),
        (overlay_set_display, "$g_presentation_obj_4", ":enter_leave"),
      (try_end),
    ]),

    (ti_on_presentation_event_state_change,
      [
        (store_trigger_param_1, ":object"),
        (call_script, "script_prsnt_upgrade_tree_switch", ":object", "fac_culture_2_1"),

        # (try_for_range, ":slot_no", 0, 30),
          # (troop_slot_eq, "trp_temp_array_a", ":slot_no", ":object"),
          # (troop_get_slot, "$temp_troop", "trp_temp_array_b", ":slot_no"),
          # (assign, "$g_presentation_next_presentation", "prsnt_upgrade_tree_2"),
          # (assign, "$temp4", 3),
          # (assign, "$temp", 1),
          # (start_presentation, "prsnt_troop_detail"),
        # (try_end),
      ]),
  ]),
  ("upgrade_tree_3", 0, mesh_load_window, [
    (ti_on_presentation_load,
      [
        (presentation_set_duration, 999999),
        (set_fixed_point_multiplier, 1000),

        (call_script, "script_prsnt_upgrade_tree_ready", "fac_culture_3"),

        # clear the string globals that we'll use
        (str_clear, s0),

        # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
        (create_text_overlay, reg43, s0, tf_scrollable_style_2),
        (position_set_x, pos1, 50),
        (position_set_y, pos1, 70),
        (overlay_set_position, reg43, pos1),
        (position_set_x, pos1, 970),
        (position_set_y, pos1, 527),
        (overlay_set_area_size, reg43, pos1),

        (set_container_overlay, reg43),#start scroll
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 0, "trp_sarmatian_light_spearman", 60, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 1, "trp_sarmatian_light_spearman_exp", 210, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 2, "trp_sarmatian_light_spearman_vet", 360, 710),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 3, "trp_sarmatian_archers", 60, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 4, "trp_sarmatian_archers_exp", 210, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 5, "trp_sarmatian_archers_vet", 360, 510),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 6, "trp_sarmatian_light_horsearcher", 60, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 7, "trp_sarmatian_light_horsearcher_exp", 210, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 8, "trp_sarmatian_light_horsearcher_vet", 360, 310),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 9, "trp_sarmatian_heavy_horsearcher", 560, 710),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 10, "trp_sarmatian_heavy_horsearcher_exp", 710, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 11, "trp_sarmatian_heavy_horsearcher_vet", 860, 710),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 12, "trp_sarmatian_heavy_horseman", 560, 510),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 13, "trp_sarmatian_heavy_horseman_exp", 710, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 14, "trp_sarmatian_heavy_horseman_vet", 860, 510),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 15, "trp_sarmatian_noble_horseman", 560, 310),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 16, "trp_sarmatian_noble_horseman_exp", 710, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 17, "trp_sarmatian_noble_horseman_vet", 860, 310),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 18, "trp_sarmatian_light_horseman", 60, 110),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 19, "trp_sarmatian_light_horseman_exp", 210, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 20, "trp_sarmatian_light_horseman_vet", 360, 110),

        ##lines
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 810),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 810),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 610),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 610),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 410),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 410),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 810),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 810),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 610),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 610),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 410),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 410),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 210),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 210),


        (set_container_overlay, -1),#end scroll
      ]),

    (ti_on_presentation_run, [
        (try_begin),
          (key_clicked, key_escape),
          (presentation_set_duration, 0),
        (else_try),
          (key_clicked, key_space),
          (set_fixed_point_multiplier, 1000),
          (mouse_get_position, pos31),

          (position_get_x, reg31, pos31),
          (position_get_y, reg32, pos31),

          (display_message, "@X: {reg31} | Y: {reg32}"),
        (try_end),
    ]),

    (ti_on_presentation_mouse_enter_leave,
      [
      (store_trigger_param_1, ":object"),
      (store_trigger_param_2, ":enter_leave"),

      (try_begin),
        (this_or_next|eq, ":object", "$g_presentation_obj_1"),
        (eq, ":object", "$g_presentation_obj_3"),
        (overlay_set_display, "$g_presentation_obj_3", ":enter_leave"),
      (else_try),
        (this_or_next|eq, ":object", "$g_presentation_obj_2"),
        (eq, ":object", "$g_presentation_obj_4"),
        (overlay_set_display, "$g_presentation_obj_4", ":enter_leave"),
      (try_end),
    ]),

    (ti_on_presentation_event_state_change,
      [
        (store_trigger_param_1, ":object"),
        (call_script, "script_prsnt_upgrade_tree_switch", ":object", "fac_culture_3"),

        # (try_for_range, ":slot_no", 0, 30),
          # (troop_slot_eq, "trp_temp_array_a", ":slot_no", ":object"),
          # (troop_get_slot, "$temp_troop", "trp_temp_array_b", ":slot_no"),
          # (assign, "$g_presentation_next_presentation", "prsnt_upgrade_tree_3"),
          # (assign, "$temp4", 3),
          # (assign, "$temp", 1),
          # (start_presentation, "prsnt_troop_detail"),
        # (try_end),
      ]),
  ]),

  ("upgrade_tree_4", 0, mesh_load_window, [
    (ti_on_presentation_load,
      [
        (presentation_set_duration, 999999),
        (set_fixed_point_multiplier, 1000),

        (call_script, "script_prsnt_upgrade_tree_ready", "fac_culture_4"),

        # clear the string globals that we'll use
        (str_clear, s0),

        # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
        (create_text_overlay, reg43, s0, tf_scrollable_style_2),
        (position_set_x, pos1, 50),
        (position_set_y, pos1, 70),
        (overlay_set_position, reg43, pos1),
        (position_set_x, pos1, 970),
        (position_set_y, pos1, 527),
        (overlay_set_area_size, reg43, pos1),

        (set_container_overlay, reg43),#start scroll
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 0, "trp_germanic_light_clubman", 60, 910),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 1, "trp_germanic_light_clubman_exp", 210, 910),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 2, "trp_germanic_light_clubman_vet", 360, 910),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 3, "trp_germanic_light_spearman", 60, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 4, "trp_germanic_light_spearman_exp", 210, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 5, "trp_germanic_light_spearman_vet", 360, 710),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 6, "trp_germanic_noble_swordsman", 60, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 7, "trp_germanic_noble_swordsman_exp", 210, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 8, "trp_germanic_noble_swordsman_vet", 360, 510),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 9, "trp_germanic_skirmisher", 560, 910),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 10, "trp_germanic_skirmisher_exp", 710, 910),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 11, "trp_germanic_skirmisher_vet", 860, 910),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 12, "trp_germanic_slinger", 560, 710),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 13, "trp_germanic_slinger_exp", 710, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 14, "trp_germanic_slinger_vet", 860, 710),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 15, "trp_germanic_archer", 560, 510),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 16, "trp_germanic_archer_exp", 710, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 17, "trp_germanic_archer_vet", 860, 510),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 18, "trp_germanic_noble_spearman", 60, 310),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 19, "trp_germanic_noble_spearman_exp", 210, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 20, "trp_germanic_noble_spearman_vet", 360, 310),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 21, "trp_germanic_cavalry", 560, 310),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 22, "trp_germanic_cavalry_exp", 710, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 23, "trp_germanic_cavalry_vet", 860, 310),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 24, "trp_germanic_berserker", 400, 110),

        ##lines
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 1010),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 1010),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 810),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 810),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 610),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 610),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 1010),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 1010),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 810),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 810),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 610),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 610),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 410),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 410),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 410),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 410),


        (set_container_overlay, -1),#end scroll
      ]),

    (ti_on_presentation_run, [
        (try_begin),
          (key_clicked, key_escape),
          (presentation_set_duration, 0),
        (else_try),
          (key_clicked, key_space),
          (set_fixed_point_multiplier, 1000),
          (mouse_get_position, pos31),

          (position_get_x, reg31, pos31),
          (position_get_y, reg32, pos31),

          (display_message, "@X: {reg31} | Y: {reg32}"),
        (try_end),
    ]),

    (ti_on_presentation_mouse_enter_leave,
      [
      (store_trigger_param_1, ":object"),
      (store_trigger_param_2, ":enter_leave"),

      (try_begin),
        (this_or_next|eq, ":object", "$g_presentation_obj_1"),
        (eq, ":object", "$g_presentation_obj_3"),
        (overlay_set_display, "$g_presentation_obj_3", ":enter_leave"),
      (else_try),
        (this_or_next|eq, ":object", "$g_presentation_obj_2"),
        (eq, ":object", "$g_presentation_obj_4"),
        (overlay_set_display, "$g_presentation_obj_4", ":enter_leave"),
      (try_end),
    ]),

    (ti_on_presentation_event_state_change,
      [
        (store_trigger_param_1, ":object"),
        (call_script, "script_prsnt_upgrade_tree_switch", ":object", "fac_culture_4"),

        # (try_for_range, ":slot_no", 0, 30),
          # (troop_slot_eq, "trp_temp_array_a", ":slot_no", ":object"),
          # (troop_get_slot, "$temp_troop", "trp_temp_array_b", ":slot_no"),
          # (assign, "$g_presentation_next_presentation", "prsnt_upgrade_tree_4"),
          # (assign, "$temp4", 3),
          # (assign, "$temp", 1),
          # (start_presentation, "prsnt_troop_detail"),
        # (try_end),
      ]),
  ]),

  ("upgrade_tree_5", 0, mesh_load_window, [
    (ti_on_presentation_load,
      [
        (presentation_set_duration, 999999),
        (set_fixed_point_multiplier, 1000),

        (call_script, "script_prsnt_upgrade_tree_ready", "fac_culture_5"),

        # clear the string globals that we'll use
        (str_clear, s0),

        # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
        (create_text_overlay, reg43, s0, tf_scrollable_style_2),
        (position_set_x, pos1, 50),
        (position_set_y, pos1, 70),
        (overlay_set_position, reg43, pos1),
        (position_set_x, pos1, 970),
        (position_set_y, pos1, 527),
        (overlay_set_area_size, reg43, pos1),

        (set_container_overlay, reg43),#start scroll
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 0, "trp_eastern_light_archer", 60, 910),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 1, "trp_eastern_light_archer_exp", 210, 910),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 2, "trp_eastern_light_archer_vet", 360, 910),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 3, "trp_eastern_skrimisher", 60, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 4, "trp_eastern_skrimisher_exp", 210, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 5, "trp_eastern_skrimisher_vet", 360, 710),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 6, "trp_eastern_slinger", 60, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 7, "trp_eastern_slinger_exp", 210, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 8, "trp_eastern_slinger_vet", 360, 510),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 9, "trp_eastern_heavy_inf", 560, 910),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 10, "trp_eastern_heavy_inf_exp", 710, 910),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 11, "trp_eastern_heavy_inf_vet", 860, 910),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 12, "trp_eastern_heavy_spearman", 560, 710),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 13, "trp_eastern_heavy_spearman_exp", 710, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 14, "trp_eastern_heavy_spearman_vet", 860, 710),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 15, "trp_eastern_horsearcher", 560, 510),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 16, "trp_eastern_horsearcher_exp", 710, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 17, "trp_eastern_horsearcher_vet", 860, 510),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 18, "trp_eastern_light_axeman", 60, 310),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 19, "trp_eastern_light_axeman_exp", 210, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 20, "trp_eastern_light_axeman_vet", 360, 310),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 21, "trp_eastern_medium_horseman", 560, 310),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 22, "trp_eastern_medium_horseman_exp", 710, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 23, "trp_eastern_medium_horseman_vet", 860, 310),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 24, "trp_eastern_cataphract", 60, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 25, "trp_eastern_cataphract_exp", 210, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 26, "trp_eastern_cataphract_vet", 360, 110),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 27, "trp_eastern_elite_infantry", 560, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 28, "trp_eastern_elite_infantry_exp", 710, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 29, "trp_eastern_elite_infantry_vet", 860, 110),

        ##lines
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 1010),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 1010),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 810),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 810),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 610),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 610),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 1010),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 1010),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 810),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 810),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 610),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 610),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 410),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 410),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 410),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 410),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 210),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 210),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 210),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 210),


        (set_container_overlay, -1),#end scroll
      ]),

    (ti_on_presentation_run, [
        (try_begin),
          (key_clicked, key_escape),
          (presentation_set_duration, 0),
        (else_try),
          (key_clicked, key_space),
          (set_fixed_point_multiplier, 1000),
          (mouse_get_position, pos31),

          (position_get_x, reg31, pos31),
          (position_get_y, reg32, pos31),

          (display_message, "@X: {reg31} | Y: {reg32}"),
        (try_end),
    ]),

    (ti_on_presentation_mouse_enter_leave,
      [
      (store_trigger_param_1, ":object"),
      (store_trigger_param_2, ":enter_leave"),

      (try_begin),
        (this_or_next|eq, ":object", "$g_presentation_obj_1"),
        (eq, ":object", "$g_presentation_obj_3"),
        (overlay_set_display, "$g_presentation_obj_3", ":enter_leave"),
      (else_try),
        (this_or_next|eq, ":object", "$g_presentation_obj_2"),
        (eq, ":object", "$g_presentation_obj_4"),
        (overlay_set_display, "$g_presentation_obj_4", ":enter_leave"),
      (try_end),
    ]),

    (ti_on_presentation_event_state_change,
      [
        (store_trigger_param_1, ":object"),
        (call_script, "script_prsnt_upgrade_tree_switch", ":object", "fac_culture_5"),

        # (try_for_range, ":slot_no", 0, 30),
          # (troop_slot_eq, "trp_temp_array_a", ":slot_no", ":object"),
          # (troop_get_slot, "$temp_troop", "trp_temp_array_b", ":slot_no"),
          # (assign, "$g_presentation_next_presentation", "prsnt_upgrade_tree_5"),
          # (assign, "$temp4", 3),
          # (assign, "$temp", 1),
          # (start_presentation, "prsnt_troop_detail"),
        # (try_end),
      ]),
  ]),
  ("upgrade_tree_6", 0, mesh_load_window, [
    (ti_on_presentation_load,
      [
        (presentation_set_duration, 999999),
        (set_fixed_point_multiplier, 1000),

        (call_script, "script_prsnt_upgrade_tree_ready", "fac_culture_6"),

        # clear the string globals that we'll use
        (str_clear, s0),

        # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
        (create_text_overlay, reg43, s0, tf_scrollable_style_2),
        (position_set_x, pos1, 50),
        (position_set_y, pos1, 70),
        (overlay_set_position, reg43, pos1),
        (position_set_x, pos1, 970),
        (position_set_y, pos1, 527),
        (overlay_set_area_size, reg43, pos1),

        (set_container_overlay, reg43),#start scroll

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 36, "trp_caucasian_cataphract", 60, 1310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 37, "trp_caucasian_cataphract_exp", 210, 1310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 38, "trp_caucasian_cataphract_vet", 360, 1310),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 30, "trp_caucasian_heavy_spearman", 60, 1110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 31, "trp_caucasian_heavy_spearman_exp", 210, 1110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 32, "trp_caucasian_heavy_spearman_vet", 360, 1110),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 33, "trp_caucasian_medium_horsearcher", 560, 1110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 34, "trp_caucasian_medium_horsearcher_exp", 710, 1110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 35, "trp_caucasian_medium_horsearcher_vet", 860, 1110),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 0, "trp_armenian_spear_levy", 60, 910),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 1, "trp_armenian_spear_levy_exp", 210, 910),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 2, "trp_armenian_spear_levy_vet", 360, 910),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 3, "trp_armenian_light_axeman", 60, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 4, "trp_armenian_light_axeman_exp", 210, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 5, "trp_armenian_light_axeman_vet", 360, 710),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 6, "trp_armenian_skrimisher", 60, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 7, "trp_armenian_skrimisher_exp", 210, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 8, "trp_armenian_skrimisher_vet", 360, 510),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 9, "trp_armenian_slinger", 560, 910),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 10, "trp_armenian_slinger_exp", 710, 910),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 11, "trp_armenian_slinger_vet", 860, 910),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 12, "trp_armenian_heavy_inf", 560, 710),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 13, "trp_armenian_heavy_inf_exp", 710, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 14, "trp_armenian_heavy_inf_vet", 860, 710),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 15, "trp_armenian_heavy_maceman", 560, 510),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 16, "trp_armenian_heavy_maceman_exp", 710, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 17, "trp_armenian_heavy_maceman_vet", 860, 510),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 18, "trp_armenian_horsearcher", 60, 310),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 19, "trp_armenian_horsearcher_exp", 210, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 20, "trp_armenian_horsearcher_vet", 360, 310),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 21, "trp_armenian_medium_horseman", 560, 310),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 22, "trp_armenian_medium_horseman_exp", 710, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 23, "trp_armenian_medium_horseman_vet", 860, 310),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 24, "trp_armenian_cataphract", 60, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 25, "trp_armenian_cataphract_exp", 210, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 26, "trp_armenian_cataphract_vet", 360, 110),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 27, "trp_armenian_elite_infantry", 560, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 28, "trp_armenian_elite_infantry_exp", 710, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 29, "trp_armenian_elite_infantry_vet", 860, 110),


        ##lines
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 1410),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 1410),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 1210),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 1210),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 1010),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 1010),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 810),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 810),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 610),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 610),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 1210),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 1210),


        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 1010),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 1010),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 810),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 810),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 610),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 610),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 410),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 410),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 410),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 410),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 210),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 210),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 210),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 210),


        (set_container_overlay, -1),#end scroll
      ]),

    (ti_on_presentation_run, [
        (try_begin),
          (key_clicked, key_escape),
          (presentation_set_duration, 0),
        (else_try),
          (key_clicked, key_space),
          (set_fixed_point_multiplier, 1000),
          (mouse_get_position, pos31),

          (position_get_x, reg31, pos31),
          (position_get_y, reg32, pos31),

          (display_message, "@X: {reg31} | Y: {reg32}"),
        (try_end),
    ]),

    (ti_on_presentation_mouse_enter_leave,
      [
      (store_trigger_param_1, ":object"),
      (store_trigger_param_2, ":enter_leave"),

      (try_begin),
        (this_or_next|eq, ":object", "$g_presentation_obj_1"),
        (eq, ":object", "$g_presentation_obj_3"),
        (overlay_set_display, "$g_presentation_obj_3", ":enter_leave"),
      (else_try),
        (this_or_next|eq, ":object", "$g_presentation_obj_2"),
        (eq, ":object", "$g_presentation_obj_4"),
        (overlay_set_display, "$g_presentation_obj_4", ":enter_leave"),
      (try_end),
    ]),

    (ti_on_presentation_event_state_change,
      [
        (store_trigger_param_1, ":object"),
        (call_script, "script_prsnt_upgrade_tree_switch", ":object", "fac_culture_6"),

        # (try_for_range, ":slot_no", 0, 30),
          # (troop_slot_eq, "trp_temp_array_a", ":slot_no", ":object"),
          # (troop_get_slot, "$temp_troop", "trp_temp_array_b", ":slot_no"),
          # (assign, "$g_presentation_next_presentation", "prsnt_upgrade_tree_5"),
          # (assign, "$temp4", 3),
          # (assign, "$temp", 1),
          # (start_presentation, "prsnt_troop_detail"),
        # (try_end),
      ]),
  ]),

  ("upgrade_tree_7", 0, mesh_load_window, [
    (ti_on_presentation_load,
      [
        (presentation_set_duration, 999999),
        (set_fixed_point_multiplier, 1000),

        (call_script, "script_prsnt_upgrade_tree_ready", "fac_culture_7"),

        # clear the string globals that we'll use
        (str_clear, s0),

        # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
        (create_text_overlay, reg43, s0, tf_scrollable_style_2),
        (position_set_x, pos1, 50),
        (position_set_y, pos1, 70),
        (overlay_set_position, reg43, pos1),
        (position_set_x, pos1, 970),
        (position_set_y, pos1, 527),
        (overlay_set_area_size, reg43, pos1),

        (set_container_overlay, reg43),#start scroll

        #60, 210, 360       560, 710, 860

        # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 40, "trp_aux_cav_gallorum", 560, 1510),#+200
        # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 39, "trp_aux_inf", 710, 1510),
        # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 38, "trp_aux_slinger", 860, 1510),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 2, "trp_aux_inf", 560, 1510),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 37, "trp_aux_archer_praetoriana", 60, 1510),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 36, "trp_aux_archer", 210, 1510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 35, "trp_aux_cav_ituraeorum", 360, 1510),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 34, "trp_aux_cav_gallorum", 560, 1310),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 33, "trp_aux_cav_commagenorum", 710, 1310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 32, "trp_aux_cav_batavorum", 860, 1310),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 31, "trp_aux_archer_sryrorum", 60, 1310),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 30, "trp_aux_inf_petreorum", 210, 1310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 29, "trp_aux_archer_thracum", 360, 1310),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 28, "trp_aux_inf_thracum", 560, 1110),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 27, "trp_aux_archer_brittonum", 710, 1110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 26, "trp_aux_inf_brittonum", 860, 1110),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 25, "trp_aux_archer_batavorum", 60, 1110),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 24, "trp_aux_inf_batavorum", 210, 1110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 23, "trp_aux_archer_gallorum", 360, 1110),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 22, "trp_aux_inf_gallorum", 560, 910),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 21, "trp_aux_archer_tungrorum", 710, 910),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 20, "trp_aux_inf_tungrorum", 860, 910),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 19, "trp_aux_archer_maurorum", 60, 910),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 18, "trp_aux_inf_hispanorum", 210, 910),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 17, "trp_aux_slinger", 360, 910),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 16, "trp_aux_inf_maurorum", 60, 710),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 15, "trp_aux_archer_alporum", 210, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 14, "trp_aux_inf_alporum", 360, 710),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name",13, "trp_aux_cav", 560, 710),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name",12, "trp_aux_cav_eastern", 710, 710),


        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 11, "trp_aux_cav_decurio", 60, 510),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 10, "trp_aux_cav_vexilarius", 210, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 38, "trp_aux_vigiles_centurio", 360, 510),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 8, "trp_aux_cav_decurio", 560, 510),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 7, "trp_aux_signifer", 710, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 6, "trp_aux_centurio", 860, 510),


        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 5, "trp_vigilia", 60, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 4, "trp_vigilia_exp", 210, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 3, "trp_vigilia_vet", 360, 310),


        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 410),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 410),
        # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 410, 410),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 9, "trp_aux_cav_vexilarius_praetorian",60, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 1, "trp_aux_cav_praetoriani", 210, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 0, "trp_aux_cav_praetoriani_2", 360, 110),
        # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 210),

        (set_container_overlay, -1),#end scroll
      ]),

    (ti_on_presentation_run, [
        (try_begin),
          (key_clicked, key_escape),
          (presentation_set_duration, 0),
        (else_try),
          (key_clicked, key_space),
          (set_fixed_point_multiplier, 1000),
          (mouse_get_position, pos31),

          (position_get_x, reg31, pos31),
          (position_get_y, reg32, pos31),

          (display_message, "@X: {reg31} | Y: {reg32}"),
        (try_end),
    ]),

    (ti_on_presentation_mouse_enter_leave,
      [
      (store_trigger_param_1, ":object"),
      (store_trigger_param_2, ":enter_leave"),

      (try_begin),
        (this_or_next|eq, ":object", "$g_presentation_obj_1"),
        (eq, ":object", "$g_presentation_obj_3"),
        (overlay_set_display, "$g_presentation_obj_3", ":enter_leave"),
      (else_try),
        (this_or_next|eq, ":object", "$g_presentation_obj_2"),
        (eq, ":object", "$g_presentation_obj_4"),
        (overlay_set_display, "$g_presentation_obj_4", ":enter_leave"),
      (try_end),
    ]),

    (ti_on_presentation_event_state_change,
      [
        (store_trigger_param_1, ":object"),
        (call_script, "script_prsnt_upgrade_tree_switch", ":object", "fac_culture_7"),

        # (try_for_range, ":slot_no", 0, 40),
          # (troop_slot_eq, "trp_temp_array_a", ":slot_no", ":object"),
          # (troop_get_slot, "$temp_troop", "trp_temp_array_b", ":slot_no"),
          # (assign, "$g_presentation_next_presentation", "prsnt_upgrade_tree_6"),
          # (assign, "$temp4", 3),
          # (assign, "$temp", 1),
          # (start_presentation, "prsnt_troop_detail"),
        # (try_end),
      ]),
  ]),

  ("upgrade_tree_8", 0, mesh_load_window, [
    (ti_on_presentation_load,
      [
        (presentation_set_duration, 999999),
        (set_fixed_point_multiplier, 1000),

        (call_script, "script_prsnt_upgrade_tree_ready", "fac_culture_8"),

        # clear the string globals that we'll use
        (str_clear, s0),

        # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
        (create_text_overlay, reg43, s0, tf_scrollable_style_2),
        (position_set_x, pos1, 50),
        (position_set_y, pos1, 70),
        (overlay_set_position, reg43, pos1),
        (position_set_x, pos1, 970),
        (position_set_y, pos1, 527),
        (overlay_set_area_size, reg43, pos1),

        (set_container_overlay, reg43),#start scroll
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 63, "trp_legatus_legionis", 60, 2110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 64, "trp_centurio_east", 210, 2110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 65, "trp_signifer", 360, 2110),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 0, "trp_legio_i_adjutrix", 60, 1910),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 1, "trp_legio_i_adjutrix_exp", 210, 1910),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 2, "trp_legio_i_adjutrix_vet", 360, 1910),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 3, "trp_legio_iii_augusta", 60, 1710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 4, "trp_legio_iii_augusta_exp", 210, 1710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 5, "trp_legio_iii_augusta_vet", 360, 1710),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 6, "trp_legio_v_alaudae", 60, 1510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 7, "trp_legio_v_alaudae_exp", 210, 1510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 8, "trp_legio_v_alaudae_vet", 360, 1510),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 60, "trp_centurio_preatoriani", 560, 2110),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 61, "trp_centurio_west", 710, 2110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 62, "trp_cornicen", 860, 2110),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 9, "trp_legio_xxi_rapax", 560, 1910),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 10, "trp_legio_xxi_rapax_exp", 710, 1910),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 11, "trp_legio_xxi_rapax_vet", 860, 1910),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 12, "trp_legio_vii_galbia", 560, 1710),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 13, "trp_legio_vii_galbia_exp", 710, 1710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 14, "trp_legio_vii_galbia_vet", 860, 1710),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 15, "trp_legio_vi_victrix", 560, 1510),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 16, "trp_legio_vi_victrix_exp", 710, 1510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 17, "trp_legio_vi_victrix_vet", 860, 1510),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 18, "trp_legio_xi_claudia", 60, 1310),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 19, "trp_legio_xi_claudia_exp", 210, 1310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 20, "trp_legio_xi_claudia_vet", 360, 1310),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 21, "trp_legio_xiii_gemina", 560, 1310),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 22, "trp_legio_xiii_gemina_exp", 710, 1310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 23, "trp_legio_xiii_gemina_vet", 860, 1310),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 24, "trp_legio_v_macedonia", 60, 1110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 25, "trp_legio_v_macedonia_exp", 210, 1110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 26, "trp_legio_v_macedonia_vet", 360, 1110),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 27, "trp_legio_vi_ferrata", 560, 1110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 28, "trp_legio_vi_ferrata_exp", 710, 1110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 29, "trp_legio_vi_ferrata_vet", 860, 1110),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 30, "trp_legio_x_fretensis", 60, 910),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 31, "trp_legio_x_fretensis_exp", 210, 910),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 32, "trp_legio_x_fretensis_vet", 360, 910),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 33, "trp_praetoriani_milites", 560, 910),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 34, "trp_praetoriani_milites_exp", 710, 910),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 35, "trp_praetoriani_milites_vet", 860, 910),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 36, "trp_aquilifer_i", 60, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 37, "trp_aquilifer_iii", 210, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 38, "trp_aquilifer_v_alaudae", 360, 710),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 39, "trp_aquilifer_xxi", 560, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 40, "trp_aquilifer_vii", 710, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 41, "trp_aquilifer_vi_vict", 860, 710),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 42, "trp_aquilifer_xi", 60, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 43, "trp_aquilifer_xiii", 210, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 44, "trp_aquilifer_v_mac", 360, 510),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 45, "trp_aquilifer_vi_fer", 560, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 46, "trp_aquilifer_x", 710, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 47, "trp_aquilifer_praetoriani", 860, 510),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 48, "trp_vexilarius_i", 60, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 49, "trp_vexilarius_iii", 210, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 50, "trp_vexilarius_v_alaudae", 360, 310),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 51, "trp_vexilarius_xxi", 560, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 52, "trp_vexilarius_vii", 710, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 53, "trp_vexilarius_vi_vict", 860, 310),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 54, "trp_vexilarius_xi", 60, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 55, "trp_vexilarius_xiii", 210, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 56, "trp_vexilarius_v_mac", 360, 110),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 57, "trp_vexilarius_vi_fer", 560, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 58, "trp_vexilarius_x", 710, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 59, "trp_vexilarius_praetoriani", 860, 110),

        ##lines
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 1810),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 1810),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 2010),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 2010),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 1610),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 1610),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 1410),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 1410),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 1210),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 1210),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 1010),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 1010),

        # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 810),##45 space for x
        # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 810),

        # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 610),##45 space for x
        # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 610),

        # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 410),##45 space for x
        # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 410),

        # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 210),##45 space for x
        # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 210),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 1810),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 1810),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 2010),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 2010),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 1610),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 1610),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 1410),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 1410),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 1210),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 1210),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 1010),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 1010),

        # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 810),##45 space for x
        # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 810),

        # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 610),##45 space for x
        # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 610),

        # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 410),##45 space for x
        # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 410),

        # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 210),##45 space for x
        # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 210),




        (set_container_overlay, -1),#end scroll
      ]),

    (ti_on_presentation_run, [
        (try_begin),
          (key_clicked, key_escape),
          (presentation_set_duration, 0),
        (else_try),
          (key_clicked, key_space),
          (set_fixed_point_multiplier, 1000),
          (mouse_get_position, pos31),

          (position_get_x, reg31, pos31),
          (position_get_y, reg32, pos31),

          (display_message, "@X: {reg31} | Y: {reg32}"),
        (try_end),
    ]),

    (ti_on_presentation_mouse_enter_leave,
      [
      (store_trigger_param_1, ":object"),
      (store_trigger_param_2, ":enter_leave"),

      (try_begin),
        (this_or_next|eq, ":object", "$g_presentation_obj_1"),
        (eq, ":object", "$g_presentation_obj_3"),
        (overlay_set_display, "$g_presentation_obj_3", ":enter_leave"),
      (else_try),
        (this_or_next|eq, ":object", "$g_presentation_obj_2"),
        (eq, ":object", "$g_presentation_obj_4"),
        (overlay_set_display, "$g_presentation_obj_4", ":enter_leave"),
      (try_end),
    ]),

    (ti_on_presentation_event_state_change,
      [
        (store_trigger_param_1, ":object"),
        (call_script, "script_prsnt_upgrade_tree_switch", ":object", "fac_culture_8"),

        # (try_for_range, ":slot_no", 0, 80),
          # (troop_slot_eq, "trp_temp_array_a", ":slot_no", ":object"),
          # (troop_get_slot, "$temp_troop", "trp_temp_array_b", ":slot_no"),
          # (assign, "$g_presentation_next_presentation", "prsnt_upgrade_tree_7"),
          # (assign, "$temp4", 3),
          # (assign, "$temp", 1),
          # (start_presentation, "prsnt_troop_detail"),
        # (try_end),
      ]),
  ]),

   ("upgrade_tree_9", 0, mesh_load_window, [
    (ti_on_presentation_load,
      [
        (presentation_set_duration, 999999),
        (set_fixed_point_multiplier, 1000),

        (call_script, "script_prsnt_upgrade_tree_ready", "fac_culture_9"),

        # clear the string globals that we'll use
        (str_clear, s0),

        # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
        (create_text_overlay, reg43, s0, tf_scrollable_style_2),
        (position_set_x, pos1, 50),
        (position_set_y, pos1, 70),
        (overlay_set_position, reg43, pos1),
        (position_set_x, pos1, 970),
        (position_set_y, pos1, 527),
        (overlay_set_area_size, reg43, pos1),

        (set_container_overlay, reg43),#start scroll
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 0, "trp_judean_light_clubman", 60, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 1, "trp_judean_light_clubman_exp", 210, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 2, "trp_judean_light_clubman_vet", 360, 710),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 3, "trp_judean_light_spearman", 60, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 4, "trp_judean_light_spearman_exp", 210, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 5, "trp_judean_light_spearman_vet", 360, 510),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 6, "trp_judean_elite", 60, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 7, "trp_judean_elite_exp", 210, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 8, "trp_judean_elite_vet", 360, 310),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 9, "trp_judean_slinger", 560, 710),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 10, "trp_judean_slinger_exp", 710, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 11, "trp_judean_slinger_vet", 860, 710),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 12, "trp_judean_archer", 560, 510),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 13, "trp_judean_archer_exp", 710, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 14, "trp_judean_archer_vet", 860, 510),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 15, "trp_judean_skirmisher", 560, 310),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 16, "trp_judean_skirmisher_exp", 710, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 17, "trp_judean_skirmisher_vet", 860, 310),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 18, "trp_judean_cav", 60, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 19, "trp_judean_cav_exp", 210, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 20, "trp_judean_cav_vet", 360, 110),

        ##lines
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 810),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 810),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 610),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 610),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 410),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 410),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 810),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 810),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 610),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 610),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 410),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 410),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 210),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 210),


        (set_container_overlay, -1),#end scroll
      ]),

    (ti_on_presentation_mouse_enter_leave,
      [
      (store_trigger_param_1, ":object"),
      (store_trigger_param_2, ":enter_leave"),

      (try_begin),
        (this_or_next|eq, ":object", "$g_presentation_obj_1"),
        (eq, ":object", "$g_presentation_obj_3"),
        (overlay_set_display, "$g_presentation_obj_3", ":enter_leave"),
      (else_try),
        (this_or_next|eq, ":object", "$g_presentation_obj_2"),
        (eq, ":object", "$g_presentation_obj_4"),
        (overlay_set_display, "$g_presentation_obj_4", ":enter_leave"),
      (try_end),
    ]),

    (ti_on_presentation_event_state_change,
      [
        (store_trigger_param_1, ":object"),
        (call_script, "script_prsnt_upgrade_tree_switch", ":object", "fac_culture_9"),

        # (try_for_range, ":slot_no", 0, 30),
          # (troop_slot_eq, "trp_temp_array_a", ":slot_no", ":object"),
          # (troop_get_slot, "$temp_troop", "trp_temp_array_b", ":slot_no"),
          # (assign, "$g_presentation_next_presentation", "prsnt_upgrade_tree_8"),
          # (assign, "$temp4", 3),
          # (assign, "$temp", 1),
          # (start_presentation, "prsnt_troop_detail"),
        # (try_end),
      ]),
  ]),
  ("upgrade_tree_10", 0, mesh_load_window, [
    (ti_on_presentation_load,
      [
        (presentation_set_duration, 999999),
        (set_fixed_point_multiplier, 1000),

        (call_script, "script_prsnt_upgrade_tree_ready", "fac_culture_10"),

        # clear the string globals that we'll use
        (str_clear, s0),

        # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
        (create_text_overlay, reg43, s0, tf_scrollable_style_2),
        (position_set_x, pos1, 50),
        (position_set_y, pos1, 70),
        (overlay_set_position, reg43, pos1),
        (position_set_x, pos1, 970),
        (position_set_y, pos1, 527),
        (overlay_set_area_size, reg43, pos1),

        (set_container_overlay, reg43),#start scroll

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 0, "trp_bosporan_cav", 560, 310),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 1, "trp_bosporan_cav_exp", 710, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 2, "trp_bosporan_cav_vet", 860, 310),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 3, "trp_bosporan_elite", 60, 310),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 4, "trp_bosporan_elite_exp", 210, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 5, "trp_bosporan_elite_vet", 360, 310),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 6, "trp_bosporan_archer", 560, 110),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 7, "trp_bosporan_archer_exp", 710, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 8, "trp_bosporan_archer_vet", 860, 110),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 9, "trp_bosporan_light_spearman", 60, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 10, "trp_bosporan_light_spearman_exp", 210, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 11, "trp_bosporan_light_spearman_vet", 360, 110),

        #lines
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 410),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 410),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 410),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 410),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 210),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 210),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 210),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 210),


        (set_container_overlay, -1),#end scroll
      ]),

    (ti_on_presentation_run, [
        (try_begin),
          (key_clicked, key_escape),
          (presentation_set_duration, 0),
        (else_try),
          (key_clicked, key_space),
          (set_fixed_point_multiplier, 1000),
          (mouse_get_position, pos31),

          (position_get_x, reg31, pos31),
          (position_get_y, reg32, pos31),

          (display_message, "@X: {reg31} | Y: {reg32}"),
        (try_end),
    ]),

    (ti_on_presentation_mouse_enter_leave,
      [
      (store_trigger_param_1, ":object"),
      (store_trigger_param_2, ":enter_leave"),

      (try_begin),
        (this_or_next|eq, ":object", "$g_presentation_obj_1"),
        (eq, ":object", "$g_presentation_obj_3"),
        (overlay_set_display, "$g_presentation_obj_3", ":enter_leave"),
      (else_try),
        (this_or_next|eq, ":object", "$g_presentation_obj_2"),
        (eq, ":object", "$g_presentation_obj_4"),
        (overlay_set_display, "$g_presentation_obj_4", ":enter_leave"),
      (try_end),
    ]),

    (ti_on_presentation_event_state_change,
      [
        (store_trigger_param_1, ":object"),
        (call_script, "script_prsnt_upgrade_tree_switch", ":object", "fac_culture_10"),

        # (try_for_range, ":slot_no", 0, 30),
          # (troop_slot_eq, "trp_temp_array_a", ":slot_no", ":object"),
          # (troop_get_slot, "$temp_troop", "trp_temp_array_b", ":slot_no"),
          # (assign, "$g_presentation_next_presentation", "prsnt_upgrade_tree_5"),
          # (assign, "$temp4", 3),
          # (assign, "$temp", 1),
          # (start_presentation, "prsnt_troop_detail"),
        # (try_end),
      ]),
  ]),

   ("upgrade_tree_11", 0, mesh_load_window, [
    (ti_on_presentation_load,
      [
        (presentation_set_duration, 999999),
        (set_fixed_point_multiplier, 1000),

        (call_script, "script_prsnt_upgrade_tree_ready", "fac_culture_11"),

        # clear the string globals that we'll use
        (str_clear, s0),

        # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
        (create_text_overlay, reg43, s0, tf_scrollable_style_2),
        (position_set_x, pos1, 50),
        (position_set_y, pos1, 70),
        (overlay_set_position, reg43, pos1),
        (position_set_x, pos1, 970),
        (position_set_y, pos1, 527),
        (overlay_set_area_size, reg43, pos1),

        (set_container_overlay, reg43),#start scroll

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 44, "trp_saka_amazon", 60, 2310),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 43, "trp_saka_horse_archer", 210, 2110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 42, "trp_saka_heavy_cavalry", 60, 2110),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 41, "trp_georgian_light_archer", 710, 2110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 40, "trp_georgian_noble_archer", 560, 2110),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 39, "trp_egyptian_infantry_light", 710, 1910),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 38, "trp_egyptian_infantry_heavy", 560, 1910),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 37, "trp_egyptian_archers", 210, 1910),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 36, "trp_germanic_nightwarrior", 60, 1910),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 35, "trp_palmyra_infantry", 560, 1710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 34, "trp_palmyra_cataphract", 710, 1710),

        # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 36, "trp_lombard_skirmisher", 560, 1910),
        # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 37, "trp_lombard_vetran", 710, 1910),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 33, "trp_scythian_amazon", 210, 1710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 32, "trp_germanic_free_nobleman", 60, 1710),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 28, "trp_slavic_vetran", 60, 1510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 29, "trp_slavic_skirmisher", 210, 1510),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 30, "trp_alan_horse_archer", 560, 1510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 31, "trp_alan_heavy_horse_archer", 710, 1510),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 24, "trp_indian_archer", 60, 1310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 25, "trp_indian_spearman", 210, 1310),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 26, "trp_danish_vetran", 560, 1310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 27, "trp_danish_skirmisher", 710, 1310),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 0, "trp_meroe_archers", 60, 1110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 1, "trp_meroe_infantry", 210, 1110),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 2, "trp_irish_skirmisher", 560, 1110),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 3, "trp_irish_vetran", 710, 1110),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 4, "trp_persian_picaxe_man", 60, 910),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 5, "trp_persian_noble_cav", 210, 910),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 6, "trp_arab_noble_archers", 560, 910),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 7, "trp_arab_noble_cav", 710, 910),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 8, "trp_illyrian_horseman", 60, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 9, "trp_illyrian_infantry", 210, 710),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 14, "trp_hispanic_infantry", 560, 710),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 15, "trp_hispanic_heavy_infantry", 710, 710),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 10, "trp_kreta_archer", 60, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 11, "trp_meroe_axemen", 210, 510),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 16, "trp_lombard_skirmisher", 560, 510),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 17, "trp_lombard_vetran", 710, 510),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 12, "trp_scythian_horse_archer", 60, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 13, "trp_scythian_cataphract", 210, 310),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 18, "trp_celtic_freeman", 560, 310),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 19, "trp_celtic_elite_swordsman", 710, 310),


        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 20, "trp_germanic_hunter", 60, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 21, "trp_germanic_free_spearman", 210, 110),


        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 22, "trp_slinger_rhodos", 560, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 23, "trp_scythian_medium_cavalry", 710, 110),

        (set_container_overlay, -1),#end scroll
      ]),

    (ti_on_presentation_mouse_enter_leave,
      [
      (store_trigger_param_1, ":object"),
      (store_trigger_param_2, ":enter_leave"),

      (try_begin),
        (this_or_next|eq, ":object", "$g_presentation_obj_1"),
        (eq, ":object", "$g_presentation_obj_3"),
        (overlay_set_display, "$g_presentation_obj_3", ":enter_leave"),
      (else_try),
        (this_or_next|eq, ":object", "$g_presentation_obj_2"),
        (eq, ":object", "$g_presentation_obj_4"),
        (overlay_set_display, "$g_presentation_obj_4", ":enter_leave"),
      (try_end),
    ]),

    (ti_on_presentation_event_state_change,
      [
        (store_trigger_param_1, ":object"),
        (call_script, "script_prsnt_upgrade_tree_switch", ":object", "fac_culture_11"),

        # (try_for_range, ":slot_no", 0, 30),
          # (troop_slot_eq, "trp_temp_array_a", ":slot_no", ":object"),
          # (troop_get_slot, "$temp_troop", "trp_temp_array_b", ":slot_no"),
          # (assign, "$g_presentation_next_presentation", "prsnt_upgrade_tree_9"),
          # (assign, "$temp4", 3),
          # (assign, "$temp", 1),
          # (start_presentation, "prsnt_troop_detail"),
        # (try_end),
      ]),
  ]),
  # Mercenaries
  ("upgrade_tree_12", 0, mesh_load_window, [
    (ti_on_presentation_load,
      [
        (presentation_set_duration, 999999),
        (set_fixed_point_multiplier, 1000),

        (call_script, "script_prsnt_upgrade_tree_ready", "fac_culture_12"),

        # clear the string globals that we'll use
        (str_clear, s0),

        # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
        (create_text_overlay, reg43, s0, tf_scrollable_style_2),
        (position_set_x, pos1, 50),
        (position_set_y, pos1, 70),
        (overlay_set_position, reg43, pos1),
        (position_set_x, pos1, 970),
        (position_set_y, pos1, 527),
        (overlay_set_area_size, reg43, pos1),

        (set_container_overlay, reg43),#start scroll

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 1, "trp_mercenary_cavalry", 60, 910),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 2, "trp_mercenary_horseman", 210, 910),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 3, "trp_mercenary_crossbowman", 560, 910),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 4, "trp_hired_blade", 710, 910),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 5, "trp_mercenary_swordsman", 60, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 6, "trp_caravan_guard", 210, 710),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 7, "trp_watchman", 560, 710),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 8, "trp_garamantian_peasant", 710, 710),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 9, "trp_berber_peasant", 60, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 10, "trp_arab_peasant", 210, 510),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 11, "trp_armenian_peasant", 560, 510),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 12,  "trp_dacian_peasant", 710, 510),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 13,  "trp_germanic_peasant", 60, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 14,  "trp_celtic_peasant", 210, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 15,  "trp_roman_peasant", 560, 310),#+200
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 16,  "trp_persian_peasant", 710, 310),


        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 17, "trp_parthian_peasant", 60, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 18, "trp_judean_peasant", 210, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 19, "trp_bosporan_peasant", 560, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 20, "trp_sarmatian_peasant", 710, 110),


        (set_container_overlay, -1),#start scroll
        # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 610),##45 space for x


      # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 0, "trp_farmer", 115, 250),
      # #(call_script, "script_prsnt_upgrade_tree_troop_and_name", 1, "trp_townsman", 115, 400),
      # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 2, "trp_watchman", 265, 250),
      # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 3, "trp_caravan_guard", 415, 400),
      # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 4, "trp_mercenary_horseman", 565, 500),
      # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 5, "trp_mercenary_cavalry", 715, 500),
      # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 6, "trp_mercenary_swordsman", 565, 300),
      # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 7, "trp_hired_blade", 715, 300),
      # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 8, "trp_mercenary_crossbowman", 415, 100),
      # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 9, "trp_caravan_master", 715, 100),


       # ##### - lines
       # (call_script, "script_prsnt_upgrade_tree_lines", 50, 4, 170, 340),
       # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 320, 340),
       # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 345, 490),
       # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 345, 190),
       # (call_script, "script_prsnt_upgrade_tree_lines", 50, 4, 620, 390),
       # (call_script, "script_prsnt_upgrade_tree_lines", 50, 4, 620, 590),
       # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 470, 490),
       # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 495, 590),
       # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 495, 390),
       # ##### - lines

       # ##### | lines
       # # (call_script, "script_prsnt_upgrade_tree_lines", 4, 304, 193, 190),
       # (call_script, "script_prsnt_upgrade_tree_lines", 4, 304, 343, 190),
       # (call_script, "script_prsnt_upgrade_tree_lines", 4, 204, 493, 390),
       ##### | lines
      ]),

    (ti_on_presentation_mouse_enter_leave,
      [
      (store_trigger_param_1, ":object"),
      (store_trigger_param_2, ":enter_leave"),

      (try_begin),
        (this_or_next|eq, ":object", "$g_presentation_obj_1"),
        (eq, ":object", "$g_presentation_obj_3"),
        (overlay_set_display, "$g_presentation_obj_3", ":enter_leave"),
      (else_try),
        (this_or_next|eq, ":object", "$g_presentation_obj_2"),
        (eq, ":object", "$g_presentation_obj_4"),
        (overlay_set_display, "$g_presentation_obj_4", ":enter_leave"),
      (try_end),
    ]),

    (ti_on_presentation_event_state_change,
      [
        (store_trigger_param_1, ":object"),
        (call_script, "script_prsnt_upgrade_tree_switch", ":object", "fac_culture_12"),
      ]),
  ]),
 ("upgrade_tree_13", 0, mesh_load_window, [
    (ti_on_presentation_load,
      [
        (presentation_set_duration, 999999),
        (set_fixed_point_multiplier, 1000),

        (call_script, "script_prsnt_upgrade_tree_ready", "fac_culture_13"),


        # clear the string globals that we'll use
        (str_clear, s0),

        # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
        (create_text_overlay, reg43, s0, tf_scrollable_style_2),
        (position_set_x, pos1, 50),
        (position_set_y, pos1, 70),
        (overlay_set_position, reg43, pos1),
        (position_set_x, pos1, 970),
        (position_set_y, pos1, 527),
        (overlay_set_area_size, reg43, pos1),

      (set_container_overlay, reg43),#start scroll


        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 24, "trp_refugee", 115, 2300),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 25, "trp_peasant_woman", 115, 2500),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 26, "trp_follower_woman", 265, 2400),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 27, "trp_hunter_woman", 415, 2400),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 28, "trp_fighter_woman", 565, 2400),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 29, "trp_sword_sister", 715, 2400),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 30, "trp_slave", 115, 2100),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 31, "trp_slave_warrior", 265, 2100),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 32, "trp_slave_warrior_2", 415, 2100),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 33, "trp_slave_warrior_3", 565, 2100),
        # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 34, "trp_slaver_chief", 715, 2100),

        ##### - lines
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 170, 2590),
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 170, 2390),
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 195, 2490),
        (call_script, "script_prsnt_upgrade_tree_lines", 50, 4, 320, 2490),
        (call_script, "script_prsnt_upgrade_tree_lines", 50, 4, 470, 2490),
        (call_script, "script_prsnt_upgrade_tree_lines", 50, 4, 620, 2490),
        (call_script, "script_prsnt_upgrade_tree_lines", 50, 4, 170, 2190),
        (call_script, "script_prsnt_upgrade_tree_lines", 50, 4, 320, 2190),
        (call_script, "script_prsnt_upgrade_tree_lines", 50, 4, 470, 2190),
        # (call_script, "script_prsnt_upgrade_tree_lines", 50, 4, 620, 2190),
        ##### - lines

        ##### | lines
        (call_script, "script_prsnt_upgrade_tree_lines", 4, 204, 193, 2390),
        ##### | lines


      (call_script, "script_prsnt_upgrade_tree_troop_and_name", 0, "trp_steppe_bandit", 60, 1910),
      (call_script, "script_prsnt_upgrade_tree_troop_and_name", 1, "trp_taiga_bandit", 210, 1910),

      (call_script, "script_prsnt_upgrade_tree_troop_and_name", 2, "trp_black_sea_priate", 560, 1910),#+200
      # (call_script, "script_prsnt_upgrade_tree_troop_and_name", 3, "trp_judean_hornman", 710, 1910),

      (call_script, "script_prsnt_upgrade_tree_troop_and_name", 4, "trp_slave_female", 60, 1710),
      (call_script, "script_prsnt_upgrade_tree_troop_and_name", 5, "trp_refugee", 210, 1710),

      (call_script, "script_prsnt_upgrade_tree_troop_and_name", 6, "trp_sea_raider", 560, 1710),#+200
      (call_script, "script_prsnt_upgrade_tree_troop_and_name", 7, "trp_forest_bandit", 710, 1710),


      (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 1810),##45 space for x
     # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 1810),


      (call_script, "script_prsnt_upgrade_tree_troop_and_name", 8, "trp_desert_bandit", 60, 1510),
      (call_script, "script_prsnt_upgrade_tree_troop_and_name", 9, "trp_arab_noble_cav", 210, 1510),

      (call_script, "script_prsnt_upgrade_tree_troop_and_name", 10, "trp_slave_rebel", 560, 1510),#+200
      (call_script, "script_prsnt_upgrade_tree_troop_and_name", 11, "trp_slave_rebel_2", 710, 1510),


      # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 1610),##45 space for x
      (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 1610),

      # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 1610),##45 space for x
     # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 1610),

      (call_script, "script_prsnt_upgrade_tree_troop_and_name", 12, "trp_sarranid_horseman", 60, 1310),
      (call_script, "script_prsnt_upgrade_tree_troop_and_name", 13, "trp_garamantien_noble_horseman", 210, 1310),

      (call_script, "script_prsnt_upgrade_tree_troop_and_name", 14, "trp_gaetuli_horseman", 560, 1310),#+200
      (call_script, "script_prsnt_upgrade_tree_troop_and_name", 15, "trp_gaetuli_noble_horseman", 710, 1310),


      # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 1410),##45 space for x
    #  (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 1410),

      # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 1410),##45 space for x
     # (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 760, 1410),


      (call_script, "script_prsnt_upgrade_tree_troop_and_name", 16, "trp_mountain_bandit", 165, 850),
      (call_script, "script_prsnt_upgrade_tree_troop_and_name", 17, "trp_judean_light_clubman", 315, 1000),
      (call_script, "script_prsnt_upgrade_tree_troop_and_name", 18, "trp_judean_light_spearman", 315, 700),


      (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 220, 940),
      (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 245, 1090),
      (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 245, 790),

      (call_script, "script_prsnt_upgrade_tree_lines", 4, 304, 243, 790),

      (call_script, "script_prsnt_upgrade_tree_troop_and_name", 19, "trp_looter", 165, 250),
      (call_script, "script_prsnt_upgrade_tree_troop_and_name", 20, "trp_bandit", 315, 400),
      (call_script, "script_prsnt_upgrade_tree_troop_and_name", 21, "trp_slave_rebel", 315, 100),

      (call_script, "script_prsnt_upgrade_tree_troop_and_name", 22, "trp_brigand", 465, 550),
      (call_script, "script_prsnt_upgrade_tree_troop_and_name", 23, "trp_mercenary_swordsman", 465, 250),

      #looter
      (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 220, 340),
      (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 245, 490),
      (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 245, 190),

      (call_script, "script_prsnt_upgrade_tree_lines", 4, 304, 243, 190),
      #bandit
      (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 370, 490),#
      (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 395, 640),
      (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 395, 340),

      (call_script, "script_prsnt_upgrade_tree_lines", 4, 304, 393, 340),


      (set_container_overlay, -1),#end scroll

      ]),

    (ti_on_presentation_mouse_enter_leave,
      [
      (store_trigger_param_1, ":object"),
      (store_trigger_param_2, ":enter_leave"),

      (try_begin),
        (this_or_next|eq, ":object", "$g_presentation_obj_1"),
        (eq, ":object", "$g_presentation_obj_3"),
        (overlay_set_display, "$g_presentation_obj_3", ":enter_leave"),
      (else_try),
        (this_or_next|eq, ":object", "$g_presentation_obj_2"),
        (eq, ":object", "$g_presentation_obj_4"),
        (overlay_set_display, "$g_presentation_obj_4", ":enter_leave"),
      (try_end),
    ]),

    (ti_on_presentation_event_state_change,
      [
        (store_trigger_param_1, ":object"),
        (call_script, "script_prsnt_upgrade_tree_switch", ":object", "fac_culture_13"),

        # (try_for_range, ":slot_no", 0, 40),
          # (troop_slot_eq, "trp_temp_array_a", ":slot_no", ":object"),
          # (troop_get_slot, "$temp_troop", "trp_temp_array_b", ":slot_no"),
          # (assign, "$g_presentation_next_presentation", "prsnt_upgrade_tree_11"),
          # (assign, "$temp4", 3),
          # (assign, "$temp", 1),
          # (start_presentation, "prsnt_troop_detail"),
        # (try_end),
      ]),
  ]),
##########TROOP TREE END

# __Freelancer Report: Commander_:Start_________________________________________________
("taragoth_lords_report", 0, mesh_load_window, [
	(ti_on_presentation_load,[
		(presentation_set_duration, 999999),
		(set_fixed_point_multiplier, 1000),
    (party_stack_get_troop_id, ":lord", "$enlisted_party", 0),
		#title
		(create_text_overlay, reg0, "@Overview", tf_left_align|tf_with_outline),
		(position_set_x, pos1, 80),
		(position_set_y, pos1, 655),
		(overlay_set_position, reg0, pos1),
		(position_set_x, pos1, 1500),
		(position_set_y, pos1, 1500),
		(overlay_set_size, reg0, pos1),

    (call_script, "script_freelancer_get_event", 1000, 50),
    (val_sub, reg21, 1),
    (assign, ":last_event", reg21),
    (assign, ":max_events", reg23),
    (call_script, "script_freelancer_event_required_for_progess", ":last_event"),
    (quest_get_slot, reg2, "qst_freelancing", slot_quest_freelancer_progress_limit),
    (store_add, reg3, reg2, 75),
		(create_text_overlay, reg1, "@Hint:^The next promotion will happen after you completed the {reg0}th event and you reached more than {reg2} progress points. Right now you are at event {reg21}. Until you reach the {reg0}th event your accumulated progress points are limited by {reg3}.", tf_scrollable|tf_double_space|tf_with_outline),
		(position_set_x, pos1, 400),
		(position_set_y, pos1, 415),
		(overlay_set_position, reg1, pos1),
		(position_set_x, pos1, 1000),
		(position_set_y, pos1, 1000),
		(overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 325),
    (position_set_y, pos1, 250),
    (overlay_set_area_size, reg1, pos1),
    (overlay_set_color, reg1, message_alert),

		(assign, ":cur_y_adder", 35),  #the amount of space between lines
		(assign, ":cur_y", 615),
		(position_set_x, pos1, 50),

		#Commander_name
		(str_store_troop_name, s19, ":lord"),
		(create_text_overlay, reg0, "@Commander: {s19}", tf_left_align),
		(position_set_y, pos1, ":cur_y"),
		(overlay_set_position, reg0, pos1),
		(val_sub, ":cur_y", ":cur_y_adder"),

		#Player_Relation
		(call_script, "script_troop_get_player_relation", ":lord"),
		#(assign, ":commander_relation", reg0),
		(create_text_overlay, reg1, "@Relation: {reg0}", tf_left_align),
		(position_set_y, pos1, ":cur_y"),
		(overlay_set_position, reg1, pos1),
		(val_sub, ":cur_y", ":cur_y_adder"),

		#legion name
		# (store_faction_of_troop, reg1, "$enlisted_lord"),
		# (str_store_faction_name, s20, reg1),
    (troop_get_slot, ":legion", ":lord", slot_troop_legion),
    (store_add, ":string", "str_lover_talk", ":legion"),
    (str_store_string, s20, ":string"),
		(create_text_overlay, reg1, "@Enlisted Legion: {s20}", tf_left_align),
		(position_set_y, pos1, ":cur_y"),
		(overlay_set_position, reg1, pos1),
		(val_sub, ":cur_y", ":cur_y_adder"),

		#Rank_name
		(call_script, "script_get_current_rank_to_s21"),
		(create_text_overlay, reg0, "@Current Rank: {s21}", tf_left_align),
		(position_set_y, pos1, ":cur_y"),
		(overlay_set_position, reg0, pos1),
		(val_sub, ":cur_y", ":cur_y_adder"),

    ##men you command
    (quest_get_slot, reg50,"qst_freelancing", slot_quest_freelancer_agent_limit),
    (create_text_overlay, reg0, "@Troops you can command: {reg50}", tf_left_align),
		(position_set_y, pos1, ":cur_y"),
		(overlay_set_position, reg0, pos1),
		(val_sub, ":cur_y", ":cur_y_adder"),

		#xp-to-next promotion
		(quest_get_slot, reg0, "qst_freelancing", slot_quest_freelancer_progress),
    (quest_get_slot, reg1, "qst_freelancing", slot_quest_freelancer_progress_limit),
		#(troop_get_slot, ":service_xp_start", "trp_player", slot_troop_freelancer_start_xp),
	  (str_store_string, s1, "@{reg0} / {reg1}"),
		(create_text_overlay, reg0, "@Promotion progress: {s1}", tf_left_align),
		(position_set_y, pos1, ":cur_y"),
		(overlay_set_position, reg0, pos1),
		(val_sub, ":cur_y", ":cur_y_adder"),

    ## events
    (assign, reg21, ":last_event"),
    (assign, reg23, ":max_events"),
		(create_text_overlay, reg0, "@Event progress: {reg21} of {reg23}", tf_left_align),
		(position_set_y, pos1, ":cur_y"),
		(overlay_set_position, reg0, pos1),
		(val_sub, ":cur_y", ":cur_y_adder"),

		#enlisted_time
		#(store_current_day, ":cur_day"),
    (quest_get_slot, ":service_length", "qst_freelancing", slot_quest_freelancer_service_length),
		#(troop_get_slot, ":service_day_start", "trp_player", slot_troop_freelancer_start_date),
		#(store_sub, ":service_length", ":cur_day", ":service_day_start"),
		(assign, reg20, ":service_length"),
		(create_text_overlay, reg0, "@Total days in service: {reg20}", tf_left_align),
		(position_set_y, pos1, ":cur_y"),
		(overlay_set_position, reg0, pos1),
		(val_sub, ":cur_y", ":cur_y_adder"),

		# #current_wage #DO to
		# (store_character_level, ":level", "$player_cur_troop"),
		# #pays player 10 times the troop level
		# (store_mul, ":weekly_pay", 10, ":level"),
    (quest_get_slot, reg23, "qst_freelancing", slot_quest_freelancer_rank),
		(val_mul, reg23, 20),
    (try_begin),
      (quest_slot_ge, "qst_freelancing", slot_quest_freelancer_pretorian, 2),
      (val_mul, reg23, 2),
    (try_end),
		(create_text_overlay, reg0, "@Current Wage: {reg23} denars.", tf_left_align),
		(position_set_y, pos1, ":cur_y"),
		(overlay_set_position, reg0, pos1),
		(val_sub, ":cur_y", ":cur_y_adder"),

		#next_pay
		(str_store_date, s25, "$g_next_pay_time"),
		(create_text_overlay, reg0, "@Next pay day: {s25}", tf_left_align),
		(position_set_y, pos1, ":cur_y"),
		(overlay_set_position, reg0, pos1),
		(val_sub, ":cur_y", ":cur_y_adder"),

		#commanders_army_title
		(create_text_overlay, reg0, "@Legion's troops", tf_left_align|tf_with_outline),
		(position_set_x, pos1, 650),
		(position_set_y, pos1, 435),
		(overlay_set_position, reg0, pos1),

		#Commanders_troops size(right side)
		(store_party_size_wo_prisoners,":army_size","$enlisted_party"),
		(assign, reg26, ":army_size"),
		(create_text_overlay, reg0, "@Total: {reg26}", tf_left_align),
		(position_set_x, pos1, 585),
		(position_set_y, pos1, 405),
		(overlay_set_position, reg0, pos1),
		(position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg0, pos1),

    #camp  pic
		(create_mesh_overlay, reg0, "mesh_pic_camp"),
		(position_set_x, pos1, 450),
		(position_set_y, pos1, 380),
		(overlay_set_position, reg0, pos1),
		(position_set_x, pos1, 500),
		(position_set_y, pos1, 500),
		(overlay_set_size, reg0, pos1),
		 #Faction arms(try_end),

	  (create_mesh_overlay, reg0, "mesh_pic_arms_rom"),

		(position_set_x, pos1, 180),
		(position_set_y, pos1, 130),
		(overlay_set_position, reg0, pos1),
		(position_set_x, pos1, 500),
		(position_set_y, pos1, 500),
		(overlay_set_size, reg0, pos1),

    (str_clear, s0),
    (create_text_overlay, "$g_presentation_obj_bugdet_report_container", s0, tf_scrollable_style_2),
    (position_set_x, pos1, 560),
    (position_set_y, pos1, 100),
    (overlay_set_position, "$g_presentation_obj_bugdet_report_container", pos1),
    (position_set_x, pos1, 400),
    (position_set_y, pos1, 300),
    (overlay_set_area_size, "$g_presentation_obj_bugdet_report_container", pos1),
    (set_container_overlay, "$g_presentation_obj_bugdet_report_container"), #all of this above here puts the list of troops in a scrollable box

    (call_script, "script_generate_list_of_party_members", "$enlisted_party", 25, 325),

		(set_container_overlay, -1), #end the box so you can keep putting other things elsewhere

		#done button
		(create_game_button_overlay, "$g_presentation_obj_custom_battle_designer_19", "@Done", tf_center_justify),
		(position_set_x, pos1, 500),
		(position_set_y, pos1, 25),
		(overlay_set_position, "$g_presentation_obj_custom_battle_designer_19", pos1),

	]),
	(ti_on_presentation_event_state_change,
	[
		(store_trigger_param_1, ":object"),
		(try_begin),
			(eq, ":object", "$g_presentation_obj_custom_battle_designer_19"),
			(presentation_set_duration, 0),
		(try_end),
	]),
   ]),

# _____________________________________________________________________________END______

###game_concepts_tutorial
("game_concepts_tutorial", 0, mesh_load_window, [
    (ti_on_presentation_load,
      [
        (presentation_set_duration, 999999),
        (set_fixed_point_multiplier, 1000),

        ## basicos
        (create_game_button_overlay, "$g_presentation_obj_1", "str_continue"),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 25),
        (overlay_set_position, "$g_presentation_obj_1", pos1),

        ###mesh de fondo
        (create_mesh_overlay, reg0, "mesh_pic_extra_intro2"),
        (position_set_x, pos1, -1),
        (position_set_y, pos1, -1),
        (overlay_set_position, reg0, pos1),
        (position_set_x, pos1, 1002),
        (position_set_y, pos1, 1002),
        (overlay_set_size, reg0, pos1),

        (create_text_overlay, reg1, "str_game_concepts_tutorial", tf_double_space|tf_scrollable|tf_center_justify),
        (position_set_x, pos1, 55),
        (position_set_y, pos1, 120),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 400),
        (position_set_y, pos1, 460),
        (overlay_set_area_size, reg1, pos1),
        (position_set_x, pos1, 1000),
        (position_set_y, pos1, 1000),
        (overlay_set_size, reg1, pos1),

    ]),
    (ti_on_presentation_event_state_change,
      [
        (store_trigger_param_1, ":object"),
        # (store_trigger_param_2, ":value"),

        (try_begin),
          (eq, ":object", "$g_presentation_obj_1"),
          (presentation_set_duration, 0),
          (change_screen_notes, 5, 0),
        (try_end),
    ]),
]),

##fief management
("fief_management", 0, mesh_mp_ui_bg, [
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),
    # Presentation title, centered at the top
    (create_text_overlay, reg1, "@Settlement Overview", tf_center_justify),
    (position_set_x, pos1, 500), # Higher, means more toward the right
    (position_set_y, pos1, 685), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1500),
    (position_set_y, pos1, 1500),
    (overlay_set_size, reg1, pos1),

    (create_text_overlay, reg1, "@Hint: Press on the Settlement name to manage^its buildings, edicts etc.", tf_left_align),
    (position_set_x, pos1, 700), # Higher, means more toward the right
    (position_set_y, pos1, 680), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (overlay_set_color, reg1, 0xff8800),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),

    # Back to menu - graphical button
    (create_game_button_overlay, reg1, "str_return"),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 23),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_jrider_faction_report_return_to_menu", reg1),


    # clear the string globals that we'll use
    (str_clear, s0),
    (str_clear, s20),
    (str_clear, s21),
    (str_clear, s23),
    (str_clear, s24),
    # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
    (create_text_overlay, reg1, s0, tf_scrollable_style_2),
    (position_set_x, pos1, 50),
    (position_set_y, pos1, 70),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 860),
    (position_set_y, pos1, 527),
    (overlay_set_area_size, reg1, pos1),


    (create_text_overlay, reg0, "@Name", tf_left_align|tf_with_outline),
    (position_set_x, pos1, 50),
    (position_set_y, pos1, 615),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@Garrison", tf_left_align|tf_with_outline),
    (position_set_x, pos1, 200),###+220
    (position_set_y, pos1, 595),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@Prisoners,", tf_left_align|tf_with_outline),
    (position_set_x, pos1, 200),###+160
    (position_set_y, pos1, 615),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@Buildings", tf_left_align|tf_with_outline),
    (position_set_x, pos1, 300),###+160
    (position_set_y, pos1, 615),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@Construction Projects", tf_left_align|tf_with_outline),
    (position_set_x, pos1, 500),###+110
    (position_set_y, pos1, 615),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@Edicts", tf_left_align|tf_with_outline),
    (position_set_x, pos1, 700),###+110
    (position_set_y, pos1, 615),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),

    ##get number of lines for size of the scrollable overlay
    (assign, ":num_lines", 1),
    (assign, reg65, 0),
    (try_for_range_backwards, ":center_no", centers_begin, centers_end),
      (party_get_slot, ":lord", ":center_no", slot_town_lord),
      (eq, ":lord", "trp_player"),
      (val_add, ":num_lines", 1),
      (troop_set_slot, "trp_temp_array_a", reg65, -1),
      (troop_set_slot, "trp_temp_array_b", reg65, ":center_no"),
      (val_add, reg65, 1),
    (try_end),
    (position_set_x, pos1, 0),
    (store_mul, ":y_name", 150, ":num_lines"),##get y for size of the scrollable overlay
    ##text size of the table
    (position_set_x, pos2, 900),
    (position_set_y, pos2, 900),

    (assign, ":slot", 0),
    (set_container_overlay, reg1),#start scroll
    (try_for_range_backwards, ":center", centers_begin, centers_end),
      (party_get_slot, ":lord", ":center", slot_town_lord),
      (eq, ":lord", "trp_player"),

      (assign, ":x_name", 0),

      ##creat some lines
      (create_mesh_overlay, reg1, "mesh_white_plane"),
      (overlay_set_color, reg1, 0x000000),#line color
      (position_set_x, pos3, 180000),
      (position_set_y, pos3, 50),
      (overlay_set_size, reg1, pos3),
      (position_set_x, pos3, 0),
      (store_add, ":y_name_line", ":y_name", 16), # set it below 2 pix of current position
      (position_set_y, pos3, ":y_name_line"),
      (overlay_set_position, reg1, pos3),

      #name
      (str_store_party_name, s20, ":center"),
      (create_text_overlay, reg0, "@{s20}", tf_left_align),
      (position_set_x, pos1, ":x_name"),
      (position_set_y, pos1, ":y_name"),
      (overlay_set_position, reg0, pos1),
      (overlay_set_color, reg0, 0x00b300),
      (overlay_set_size, reg0, pos2),
      #creat button
      (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
      (overlay_set_position, reg10, pos1),
      (overlay_set_size, reg10, pos2),
      (overlay_set_alpha, reg10, 0),
      (overlay_set_color, reg10, 0xDDDDDD),
      (troop_set_slot, "trp_temp_array_a", ":slot", reg10),
      #(troop_set_slot, "trp_temp_array_b", ":slot", ":center"),
      (val_add, ":slot", 1),

      (val_add, ":x_name", 150),

      (party_get_num_prisoners, reg1, ":center"),
      (create_text_overlay, reg0, "@{reg1}", tf_left_align),
      (position_set_y, pos1, ":y_name"),
      (position_set_x, pos1, ":x_name"),
      (overlay_set_position, reg0, pos1),
      (overlay_set_size, reg0, pos2),

      (store_party_size_wo_prisoners, reg1, ":center"),
      (store_sub, ":y_name_new", ":y_name", 14),
      (create_text_overlay, reg0, "@{reg1} men", tf_left_align),
      (position_set_y, pos1, ":y_name_new"),
      (position_set_x, pos1, ":x_name"),
      (overlay_set_position, reg0, pos1),
      (overlay_set_size, reg0, pos2),

      (val_add, ":x_name", 90),
      (str_clear, s10),
      (str_clear, s11),
      (str_clear, s20),
      (str_clear, s21),
      (assign, ":counter", 0),
      (assign, ":y_name_addition", 0),
      (try_for_range_backwards, ":building", village_improvements_begin, walled_center_improvements_end),
        (party_get_slot, ":time", ":center", ":building"),
        (ge, ":time", 1),
        (call_script, "script_get_improvement_details", ":building", ":center"),
        (str_store_string_reg, s20, s0),
        (try_begin),
          (eq, ":building", slot_center_has_temple),
          (party_get_slot, ":god", ":center", slot_center_has_temple_god),
          (store_add, ":god_string", "str_gods_begin", ":god"),
          (str_store_string, s21, ":god_string"),
          (str_store_string, s20, "@{s20} ({s21})"),
        (try_end),
        (try_begin),
          (store_mod, ":mod", ":counter", 2),
          (gt, ":counter", 1),
          (eq, ":mod", 0),
          (str_store_string, s10, "@{s20},^ {s10}"),
          (val_sub, ":y_name_addition", 14),
        (else_try),
          (str_store_string, s10, "@{s20}, {s10}"),
        (try_end),
        (val_add, ":counter", 1),
      (try_end),

      (store_add, ":y_name_new", ":y_name", ":y_name_addition"),


      (create_text_overlay, reg0, "@{s10}", tf_left_align),
      (position_set_y, pos1, ":y_name_new"),
      (position_set_x, pos1, ":x_name"),
      (overlay_set_position, reg0, pos1),
      (overlay_set_size, reg0, pos2),

      (val_add, ":x_name", 210),

      (str_clear, s10),
      (str_clear, s11),
      (str_clear, s20),
      (assign, ":counter", 0),
      (assign, ":y_name_addition2", 0),
      (assign, reg10, 0),
      (store_current_hours, ":cur_hours"),
      (try_for_range, ":building", village_improvements_begin, walled_center_improvements_end),
        (party_get_slot, ":improvement_1", ":center", slot_center_current_improvement),
        (party_get_slot, ":improvement_2", ":center", slot_center_current_improvement_2),
        (this_or_next|eq, ":improvement_1", ":building"),
        (eq, ":improvement_2", ":building"),

        (call_script, "script_get_improvement_details",  ":building", ":center"),
        (str_store_string_reg, s20, s0),
        (try_begin),
          (eq, ":building", slot_center_has_temple),
          (party_get_slot, ":god", ":center", slot_center_has_temple_god),
          (store_add, ":god_string", "str_gods_begin", ":god"),
          (str_store_string, s21, ":god_string"),
          (str_store_string, s20, "@{s20} ({s21})"),
        (try_end),
        (try_begin),
            (eq, ":improvement_1", ":building"),
            (party_get_slot, reg10, ":center", slot_center_improvement_end_hour),
        (else_try),
            (eq, ":improvement_2", ":building"),
            (party_get_slot, reg10, ":center", slot_center_improvement_2_end_hour),
        (try_end),
        (val_sub, reg10, ":cur_hours"),
        (val_div, reg10, 24),
        (val_max, reg10, 1),
        # (val_sub, reg10, 1),
        (try_begin),
            (ge, ":counter", 1),
            (str_store_string, s11, "@{s20} ({reg10} days),^ {s11}"),
            (val_sub, ":y_name_addition2", 14),
        (else_try),
            (str_store_string, s11, "@{s20} ({reg10} days), {s11}"),
        (try_end),
        (val_add, ":counter", 1),
      (try_end),

      (store_add, ":y_name_new", ":y_name", ":y_name_addition2"),

      (create_text_overlay, reg0, "@{s11}", tf_left_align),
      (position_set_y, pos1, ":y_name_new"),
      (position_set_x, pos1, ":x_name"),
      (overlay_set_position, reg0, pos1),
      (overlay_set_size, reg0, pos2),

      (val_add, ":x_name", 200),
      (str_clear, s30),
      (str_clear, s3),
      (assign, ":counter", 0),
      (assign, ":y_name_addition3", 0),
      (try_for_range_backwards, ":decree", slot_center_decree_curfew, slot_center_decree_beggingban+1),
        (party_slot_ge, ":center", ":decree", 1),
        (call_script, "script_get_decree_details", ":decree"),
        (try_begin),
            (ge, ":counter", 1),
            (str_store_string, s3, "@{s30},^ {s3}"),
            (val_sub, ":y_name_addition3", 14),
        (else_try),
            (str_store_string, s3, "@{s30}, {s3}"),
        (try_end),
        (val_add, ":counter", 1),
      (try_end),
      (create_text_overlay, reg0, "@{s3}", tf_left_align),
      (store_add, ":y_name_new", ":y_name", ":y_name_addition3"),
      (position_set_y, pos1, ":y_name_new"),
      (position_set_x, pos1, ":x_name"),
      (overlay_set_position, reg0, pos1),
      (overlay_set_size, reg0, pos2),

      (try_begin),
        (lt, ":y_name_addition", ":y_name_addition3"),
        (lt, ":y_name_addition", ":y_name_addition2"),
        (val_add, ":y_name", ":y_name_addition"),
      (else_try),
        (lt, ":y_name_addition2", ":y_name_addition3"),
        (lt, ":y_name_addition2", ":y_name_addition"),
        (val_add, ":y_name", ":y_name_addition2"),
      (else_try),
        (val_add, ":y_name", ":y_name_addition3"),
      (try_end),

      (val_sub, ":y_name", 40),
    (try_end),
    (set_container_overlay, -1),#end scroll
  ]),
  ## Check for buttonpress
  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":button_pressed_id"),
    (try_begin),
        (eq, ":button_pressed_id", "$g_jrider_faction_report_return_to_menu"), # pressed  (Return to menu)
        (presentation_set_duration, 0),
        (jump_to_menu, "mnu_return_fief_management"),
    (else_try),
        (try_for_range, ":slot", 0, reg65),
            (troop_slot_eq, "trp_temp_array_a", ":slot", ":button_pressed_id"),
            (troop_get_slot, "$g_encountered_party", "trp_temp_array_b", ":slot"),
            (assign, "$g_next_menu", "mnu_fief_management"),
            (presentation_set_duration, 0),
            (assign, reg63, 0),
            (jump_to_menu, "mnu_center_manage_2"),
        (try_end),
    (try_end),
  ]),
  (ti_on_presentation_run, [
    (try_begin),
        (key_clicked, key_escape),
        (presentation_set_duration, 0),
        (jump_to_menu, "mnu_auto_return_map"),
    (else_try),
        (key_clicked, key_space),
        (set_fixed_point_multiplier, 1000),
        (mouse_get_position, pos31),

        (position_get_x, reg31, pos31),
        (position_get_y, reg32, pos31),

        (display_message, "@X: {reg31} | Y: {reg32}"),
    (try_end),
  ]),
]),
##fief management END

###new legion management ####################
 ("select_auxiliar_cohort", 0, 0, [
    (ti_on_presentation_load,
      [
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    #0. BACKROUND
    (create_mesh_overlay, reg0, "mesh_load_window"),
    (position_set_x, pos1, -1),
    (position_set_y, pos1, -1),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 1002),
    (position_set_y, pos1, 1002),
    (overlay_set_size, reg0, pos1),

    (str_store_string, s20, "str_none"),
    (try_begin),
        (is_between, "$temp1", "pt_cohors_aux", "pt_ala_preat"),
        (store_sub, ":string", "$temp1", "pt_cohors_aux"),
        (val_add, ":string", "str_cohors_aux"),
        (str_store_string, s20, ":string"),
    (try_end),
    # Presentation title, centered at the top
    (create_text_overlay, reg1, "@_Selected Auxiliar unit: {s20}_", tf_center_justify),
    (position_set_x, pos1, 500), # Higher, means more toward the right
    (position_set_y, pos1, 685), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1500),
    (position_set_y, pos1, 1500),
    (overlay_set_size, reg1, pos1),

    (create_text_overlay, reg1, "@Hint: Select the cohort which you will command.", tf_center_justify),
    (overlay_set_color, reg1, 0x00007F),
    (position_set_x, pos1, 500), # Higher, means more toward the right
    (position_set_y, pos1, 645), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),

    # ##pic of troop
    (try_begin),
        (gt, "$temp_troop", 0),

        (create_text_overlay, reg1, "@Preview:", tf_center_justify),
        (overlay_set_color, reg1, 0xcc6d00),
        (position_set_x, pos1, 600), # Higher, means more toward the right
        (position_set_y, pos1, 600), # Higher, means more toward the top
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 1400),
        (position_set_y, pos1, 1400),
        (overlay_set_size, reg1, pos1),

        (store_mul, reg2, "$temp_troop", 2), #picture with weapons (see script_add_troop_to_cur_tableau_for_party)
        (create_mesh_overlay_with_tableau_material, reg1, -1, "tableau_troop_tree_pic", reg2),
        (overlay_set_val, reg1, "$temp_troop"),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 200),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 500),
        (overlay_set_size, reg1, pos1),
    (try_end),
    # Back to menu - graphical button
    (create_game_button_overlay, reg1, "str_done"),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 23),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_jrider_faction_report_return_to_menu", reg1),

    # #switch to map view
    # (create_game_button_overlay, reg1, "@World Map"),
    # (position_set_x, pos1, 600),
    # (position_set_y, pos1, 23),
    # (overlay_set_position, reg1, pos1),
    # (assign, "$g_jrider_faction_coat_of_arms", reg1),


    # clear the string globals that we'll use
    (str_clear, s0),
    (str_clear, s20),
    (str_clear, s21),
    (str_clear, s23),
    (str_clear, s24),
    # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
    (create_text_overlay, reg1, s0, tf_scrollable_style_2),
    (position_set_x, pos1, 50),
    (position_set_y, pos1, 70),
    (overlay_set_position, reg1, pos1),
    # (position_set_x, pos1, 860),
    (position_set_x, pos1, 250),
    (position_set_y, pos1, 527),
    (overlay_set_area_size, reg1, pos1),


    (create_text_overlay, reg0, "@Auxiliar cohort", tf_left_align),
    (overlay_set_color, reg0, 0xcc6d00),
    (position_set_x, pos1, 50),
    (position_set_y, pos1, 615),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1400),
    (position_set_y, pos2, 1400),
    (overlay_set_size, reg0, pos2),

    (assign, ":num_lines", 0),

    (try_for_range_backwards, ":slot", "pt_cohors_aux", "pt_ala_preat"),
        (troop_set_slot, "trp_temp_array_a", ":slot", 0),
        (val_add, ":num_lines", 1),
    (try_end),
    (position_set_x, pos1, 0),
    (store_mul, ":y_name", 40, ":num_lines"),##get y for size of the scrollable overlay
    ##text size of the table
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),

    (assign, ":slot", 0),
    (set_container_overlay, reg1),#start scroll
    (try_for_range_backwards, ":slot",  "pt_cohors_aux", "pt_ala_preat"),

        # (store_sub, ":aux", ":slot", "pt_cohors_aux"),

        (assign, ":x_name", 0),

        # ##creat some lines
        # (create_mesh_overlay, reg1, "mesh_white_plane"),
        # (overlay_set_color, reg1, 0x000000),#line color
        # (position_set_x, pos3, 180000),
        # (position_set_y, pos3, 50),
        # (overlay_set_size, reg1, pos3),
        # (position_set_x, pos3, 0),
        # (store_add, ":y_name_line", ":y_name", 16), # set it below 2 pix of current position
        # (position_set_y, pos3, ":y_name_line"),
        # (overlay_set_position, reg1, pos3),

        (call_script, "script_get_cohort_name_to_s5", ":slot"),
        (create_text_overlay, reg0, "@{s5}", tf_left_align),

        (position_set_x, pos1, ":x_name"),
        (position_set_y, pos1, ":y_name"),
        (overlay_set_position, reg0, pos1),

        (assign, ":continue", 0),
        (try_begin),
            (eq,":slot", "pt_cohors_aux"),
            (eq, "$temp_troop", "trp_aux_inf"),
            (assign, ":continue", 1),
        (else_try),
            (eq,":slot", "pt_cohors_alp"),
            (eq, "$temp_troop", "trp_aux_inf_alporum"),
            (assign, ":continue", 1),
        (else_try),
            (eq,":slot", "pt_cohors_afr"),
            (eq, "$temp_troop", "trp_aux_inf_maurorum"),
            (assign, ":continue", 1),
        (else_try),
            (eq,":slot", "pt_cohors_hisp"),
            (eq, "$temp_troop", "trp_aux_inf_hispanorum"),
            (assign, ":continue", 1),
        (else_try),
            (eq,":slot", "pt_cohors_gal"),
            (eq, "$temp_troop", "trp_aux_inf_gallorum"),
            (assign, ":continue", 1),
        (else_try),
            (eq,":slot", "pt_cohors_bata"),
            (eq, "$temp_troop", "trp_aux_inf_batavorum"),
            (assign, ":continue", 1),
        (else_try),
            (eq,":slot", "pt_cohors_brit"),
            (eq, "$temp_troop", "trp_aux_inf_brittonum"),
            (assign, ":continue", 1),
        (else_try),
            (eq,":slot", "pt_cohors_tung"),
            (eq, "$temp_troop", "trp_aux_inf_tungrorum"),
            (assign, ":continue", 1),
        (else_try),
            (eq,":slot", "pt_cohors_thrac"),
            (eq, "$temp_troop", "trp_aux_inf_thracum"),
            (assign, ":continue", 1),
        (else_try),
            (eq,":slot", "pt_cohors_jud"),
            (eq, "$temp_troop", "trp_aux_inf_petreorum"),
            (assign, ":continue", 1),
        (else_try),
            (eq,":slot", "pt_ala_batavorum"),
            (eq, "$temp_troop", "trp_aux_cav_batavorum"),
            (assign, ":continue", 1),
        (else_try),
            (eq,":slot", "pt_ala_asia"),
            (eq, "$temp_troop", "trp_aux_cav_commagenorum"),
            (assign, ":continue", 1),
        (else_try),
            (eq,":slot", "pt_ala_gal"),
            (eq, "$temp_troop", "trp_aux_cav_gallorum"),
            (assign, ":continue", 1),
        (else_try),
            (eq,":slot", "pt_ala_syr"),
            (eq, "$temp_troop", "trp_aux_cav_ituraeorum"),
            (assign, ":continue", 1),
        (else_try),
            (eq,":slot", "pt_ala_aux"),
            (eq, "$temp_troop", "trp_aux_cav"),
            (assign, ":continue", 1),
        (try_end),
        (try_begin),
            (eq, ":continue", 1),
            (overlay_set_color, reg0, 0x3cb371),
        (try_end),
        (overlay_set_size, reg0, pos2),

        (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
        (overlay_set_position, reg10, pos1),
        (overlay_set_size, reg10, pos2),
        (overlay_set_alpha, reg10, 0),
        (overlay_set_color, reg10, 0xDDDDDD),
        (troop_set_slot, "trp_temp_array_a", ":slot", reg10),

        (val_sub, ":y_name", 40),

    (try_end),
    (set_container_overlay, -1),#end scroll
    ]),

   ## Check for buttonpress
    (ti_on_presentation_event_state_change,
    [
    (store_trigger_param_1, ":button_pressed_id"),
    (try_begin),
        (eq, ":button_pressed_id", "$g_jrider_faction_report_return_to_menu"), # pressed  (Return to menu)
        (try_begin),
            (is_between, "$temp1", "pt_cohors_aux", "pt_ala_preat"),
            (store_sub, ":slot", "$temp1", "pt_cohors_aux"),
            (val_add, ":slot", slot_aux_commander_begin),
            (troop_get_slot, ":oldcommannder", "trp_province_array", ":slot"),
            (try_begin),
                (gt, ":oldcommannder", -1),
                (call_script, "script_troop_set_rank", ":oldcommannder", slot_troop_aux, -1),
                (call_script, "script_change_lord_party_to_fit_rank", ":oldcommannder"),
            (try_end),
            (call_script, "script_troop_set_rank", "trp_player", slot_troop_aux, "$temp1"),
            (call_script, "script_party_remove_all_non_hero_companions", "p_main_party"),
            (party_add_template, "p_main_party", "$temp1"),
            (party_set_slot, "p_main_party", slot_cohort_1, "$temp1"),

            (try_begin),
                (is_between, "$temp1", "pt_cohors_aux", "pt_ala_batavorum"),
                (store_sub, ":archer_cohort", "$temp1", "pt_cohors_aux"),
                (val_add, ":archer_cohort", "pt_cohors_aux_archer"),
                (party_add_template, "p_main_party", ":archer_cohort"),
                (party_set_slot, "p_main_party", slot_cohort_2, ":archer_cohort"),
            (else_try),
                (eq, "$temp1", "pt_player_aux_inf"),
                (party_add_template, "p_main_party", "pt_player_aux_archer"),
                (party_set_slot, "p_main_party", slot_cohort_2, "pt_player_aux_archer"),
            (try_end),

            (presentation_set_duration, 0),
            (jump_to_menu, "mnu_auto_return_map"),
        (else_try),
            (display_message, "@You haven not selected a unit yet!", color_bad_news),
        (try_end),
    (else_try),
        (assign, ":end", "pt_ala_preat"),
        (try_for_range_backwards, ":slot",  "pt_cohors_aux", ":end"),
            (troop_slot_eq, "trp_temp_array_a", ":slot", ":button_pressed_id"),
            (assign, "$temp1", ":slot"),
            (assign, ":end", -1),
        (try_end),
        (try_begin),
            (eq,"$temp1", "pt_cohors_aux"),
            (assign, "$temp_troop", "trp_aux_inf"),
        (else_try),
            (eq,"$temp1", "pt_cohors_alp"),
            (assign, "$temp_troop", "trp_aux_inf_alporum"),
        (else_try),
            (eq,"$temp1", "pt_cohors_afr"),
            (assign, "$temp_troop", "trp_aux_inf_maurorum"),
        (else_try),
            (eq,"$temp1", "pt_cohors_hisp"),
            (assign, "$temp_troop", "trp_aux_inf_hispanorum"),
        (else_try),
            (eq,"$temp1", "pt_cohors_gal"),
            (assign, "$temp_troop", "trp_aux_inf_gallorum"),
        (else_try),
            (eq,"$temp1", "pt_cohors_bata"),
            (assign, "$temp_troop", "trp_aux_inf_batavorum"),
        (else_try),
            (eq,"$temp1", "pt_cohors_brit"),
            (assign, "$temp_troop", "trp_aux_inf_brittonum"),
        (else_try),
            (eq,"$temp1", "pt_cohors_tung"),
            (assign, "$temp_troop", "trp_aux_inf_tungrorum"),
        (else_try),
            (eq,"$temp1", "pt_cohors_thrac"),
            (assign, "$temp_troop", "trp_aux_inf_thracum"),
        (else_try),
            (eq,"$temp1", "pt_cohors_jud"),
            (assign, "$temp_troop", "trp_aux_inf_petreorum"),
        (else_try),
            (eq,"$temp1", "pt_ala_batavorum"),
            (assign, "$temp_troop", "trp_aux_cav_batavorum"),
        (else_try),
            (eq,"$temp1", "pt_ala_asia"),
            (assign, "$temp_troop", "trp_aux_cav_commagenorum"),
        (else_try),
            (eq,"$temp1", "pt_ala_gal"),
            (assign, "$temp_troop", "trp_aux_cav_gallorum"),
        (else_try),
            (eq,"$temp1", "pt_ala_syr"),
            (assign, "$temp_troop", "trp_aux_cav_ituraeorum"),
        (else_try),
            (eq,"$temp1", "pt_ala_aux"),
            (assign, "$temp_troop", "trp_aux_cav"),
        (try_end),
        (start_presentation, "prsnt_select_auxiliar_cohort"),
    (try_end),
    ]),
    (ti_on_presentation_run, [
    (try_begin),
        (key_clicked, key_space),
        (set_fixed_point_multiplier, 1000),
        (mouse_get_position, pos31),

        (position_get_x, reg31, pos31),
        (position_get_y, reg32, pos31),

        (display_message, "@X: {reg31} | Y: {reg32}"),
    (try_end),
    ]),
]),

("select_legion_command", 0, 0, [
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    #0. BACKROUND
    (create_mesh_overlay, reg0, "mesh_load_window"),
    (position_set_x, pos1, -1),
    (position_set_y, pos1, -1),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 1002),
    (position_set_y, pos1, 1002),
    (overlay_set_size, reg0, pos1),

    (str_store_string, s20, "str_none"),
    (try_begin),
        (is_between, "$temp1", 1, 12),
        (store_add, ":string", "str_legio_1", "$temp1"),
        (val_sub, ":string", 1),
        (str_store_string, s20, ":string"),
    (try_end),
    # Presentation title, centered at the top
    (create_text_overlay, reg1, "@Selected Legion: {s20}", tf_center_justify),
    (position_set_x, pos1, 500), # Higher, means more toward the right
    (position_set_y, pos1, 685), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1500),
    (position_set_y, pos1, 1500),
    (overlay_set_size, reg1, pos1),

    (create_text_overlay, reg1, "@Hint: Select the legion you will command.", tf_center_justify),
    (overlay_set_color, reg1, 0x00007F),
    (position_set_x, pos1, 500), # Higher, means more toward the right
    (position_set_y, pos1, 645), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),

    # ##pic of troop
    (try_begin),
        (gt, "$temp_troop", 0),

        (create_text_overlay, reg1, "@Preview:", tf_center_justify),
        (overlay_set_color, reg1, 0xcc6d00),
        (position_set_x, pos1, 600), # Higher, means more toward the right
        (position_set_y, pos1, 600), # Higher, means more toward the top
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 1400),
        (position_set_y, pos1, 1400),
        (overlay_set_size, reg1, pos1),

        (store_mul, reg2, "$temp_troop", 2), #picture with weapons (see script_add_troop_to_cur_tableau_for_party)
        (create_mesh_overlay_with_tableau_material, reg1, -1, "tableau_troop_tree_pic", reg2),
        (overlay_set_val, reg1, "$temp_troop"),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 200),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 500),
        (overlay_set_size, reg1, pos1),
    (try_end),
    # Back to menu - graphical button
    (create_game_button_overlay, reg1, "str_done"),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 23),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_jrider_faction_report_return_to_menu", reg1),

    # #switch to map view
    # (create_game_button_overlay, reg1, "@World Map"),
    # (position_set_x, pos1, 600),
    # (position_set_y, pos1, 23),
    # (overlay_set_position, reg1, pos1),
    # (assign, "$g_jrider_faction_coat_of_arms", reg1),


    # clear the string globals that we'll use
    (str_clear, s0),
    (str_clear, s20),
    (str_clear, s21),
    (str_clear, s23),
    (str_clear, s24),
    # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
    (create_text_overlay, reg1, s0, tf_scrollable_style_2),
    (position_set_x, pos1, 50),
    (position_set_y, pos1, 70),
    (overlay_set_position, reg1, pos1),
    # (position_set_x, pos1, 860),
    (position_set_x, pos1, 250),
    (position_set_y, pos1, 527),
    (overlay_set_area_size, reg1, pos1),


    (create_text_overlay, reg0, "@Legions", tf_left_align),
    (overlay_set_color, reg0, 0xcc6d00),
    (position_set_x, pos1, 50),
    (position_set_y, pos1, 615),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1400),
    (position_set_y, pos2, 1400),
    (overlay_set_size, reg0, pos2),

    (assign, ":num_lines", 0),

    (try_for_range_backwards, ":slot", 1, 12),
        (troop_set_slot, "trp_temp_array_a", ":slot", 0),
        (val_add, ":num_lines", 1),
    (try_end),
    (position_set_x, pos1, 0),
    (store_mul, ":y_name", 40, ":num_lines"),##get y for size of the scrollable overlay
    ##text size of the table
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),

    (set_container_overlay, reg1),#start scroll
    (try_for_range_backwards, ":legion",  1, 12),

        (assign, ":x_name", 0),

        # ##creat some lines
        # (create_mesh_overlay, reg1, "mesh_white_plane"),
        # (overlay_set_color, reg1, 0x000000),#line color
        # (position_set_x, pos3, 180000),
        # (position_set_y, pos3, 50),
        # (overlay_set_size, reg1, pos3),
        # (position_set_x, pos3, 0),
        # (store_add, ":y_name_line", ":y_name", 16), # set it below 2 pix of current position
        # (position_set_y, pos3, ":y_name_line"),
        # (overlay_set_position, reg1, pos3),

        (store_sub, ":string", "str_legio_1", 1),
        (val_add, ":string", ":legion"),
        (str_store_string, s20, ":string"),

        (create_text_overlay, reg0, "@{s20}", tf_left_align),
        (position_set_x, pos1, ":x_name"),
        (position_set_y, pos1, ":y_name"),
        (overlay_set_position, reg0, pos1),

        (assign, ":continue", 0),
        (store_sub, reg22, ":legion", 1),
        (store_add, ":troop", "trp_legio_i_adjutrix_exp", reg22),
        (try_begin),
            (eq, "$temp_troop", ":troop"),
            (assign, ":continue", 1),
        (try_end),
        (try_begin),
            (eq, ":continue", 1),
            (overlay_set_color, reg0, 0x3cb371),
        (try_end),
        (overlay_set_size, reg0, pos2),

        (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
        (overlay_set_position, reg10, pos1),
        (overlay_set_size, reg10, pos2),
        (overlay_set_alpha, reg10, 0),
        (overlay_set_color, reg10, 0xDDDDDD),
        (troop_set_slot, "trp_temp_array_a", ":legion", reg10),

        (val_sub, ":y_name", 40),
    (try_end),
    (set_container_overlay, -1),#end scroll
  ]),
  ## Check for buttonpress
  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":button_pressed_id"),
    (try_begin),
        (eq, ":button_pressed_id", "$g_jrider_faction_report_return_to_menu"), # pressed  (Return to menu)
        (try_begin),
            (is_between, "$temp1", 1, 12),

            (troop_get_slot, ":auxiliar", "trp_player", slot_troop_aux),

            (try_begin),
                (gt, ":auxiliar", -1),
                (call_script, "script_troop_set_rank", "trp_player", slot_troop_aux, -1),
                (call_script, "script_find_new_commander_for_aux", ":auxiliar", "$players_kingdom"),
            (try_end),

            (store_add, ":slot", slot_legion_commanders_begin, "$temp1"),
            (troop_get_slot, ":oldcommannder", "trp_province_array", ":slot"),
            (try_begin),
                (gt, ":oldcommannder", -1),
                (call_script, "script_troop_set_rank", ":oldcommannder", slot_troop_legion, -1),
                (call_script, "script_change_lord_party_to_fit_rank", ":oldcommannder"),
                (str_store_troop_name, s10, ":oldcommannder"),
                (display_log_message, "@{s10} is dismissed from service!", message_alert),
                (call_script, "script_change_player_relation_with_troop", ":oldcommannder", -15),
            (try_end),
            (call_script, "script_troop_set_rank", "trp_player", slot_troop_legion, "$temp1"),
            (presentation_set_duration, 0),
            (jump_to_menu, "mnu_auto_return_map"),

            (store_sub, ":cohort", "pt_legio_i_adjutrix_cohors", 1),
            (val_add, ":cohort", "$temp1"),

            (store_sub, ":first_cohort", "pt_legio_i_adjutrix_staff", 1),
            (val_add, ":first_cohort", "$temp1"),
            (assign, ":engineer", "pt_engineer_cohort"),
            (try_begin),
                (eq, "$temp1", 13),
                (assign, ":engineer", "pt_engineer_cohort_custom"),
            (try_end),

            (party_set_slot, "p_main_party", slot_cohort_1, ":first_cohort"),
            (party_set_slot, "p_main_party", slot_cohort_2, ":cohort"),
            (party_set_slot, "p_main_party", slot_cohort_3, ":cohort"),
            (party_set_slot, "p_main_party", slot_cohort_4, ":cohort"),
            (party_set_slot, "p_main_party", slot_cohort_5, ":cohort"),
            (party_set_slot, "p_main_party", slot_cohort_6, ":engineer"),

            (call_script, "script_party_remove_all_non_hero_companions", "p_main_party"),

            (party_add_template, "p_main_party", ":first_cohort"),
            (party_add_template, "p_main_party", ":cohort"),
            (party_add_template, "p_main_party", ":cohort"),
            (party_add_template, "p_main_party", ":cohort"),
            (party_add_template, "p_main_party", ":cohort"),
            (party_add_template, "p_main_party", ":engineer"),
        (else_try),
            (display_message, "@You haven not selected a unit yet!", color_bad_news),
        (try_end),
    (else_try),
        (assign, ":end", 12),
        (try_for_range_backwards, ":slot",  1, ":end"),
            (troop_slot_eq, "trp_temp_array_a", ":slot", ":button_pressed_id"),
            (assign, "$temp1", ":slot"),
            (assign, ":end", -1),
        (try_end),
        (store_sub, "$temp_troop", "trp_legio_i_adjutrix_exp", 1),
        (val_add, "$temp_troop", "$temp1"),
        (start_presentation, "prsnt_select_legion_command"),
    (try_end),
  ]),
  (ti_on_presentation_run, [
    (try_begin),
        (key_clicked, key_space),
        (set_fixed_point_multiplier, 1000),
        (mouse_get_position, pos31),

        (position_get_x, reg31, pos31),
        (position_get_y, reg32, pos31),

        (display_message, "@X: {reg31} | Y: {reg32}"),
    (try_end),
  ]),
]),

("legion_management", 0, 0, [
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    # #0. BACKROUND
    (create_mesh_overlay, reg0, "mesh_load_window"),
    (position_set_x, pos1, -1),
    (position_set_y, pos1, -1),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 1002),
    (position_set_y, pos1, 1002),
    (overlay_set_size, reg0, pos1),

    # Presentation title, centered at the top
    (create_text_overlay, reg1, "@Legions of Rome", tf_center_justify|tf_with_outline),
    (position_set_x, pos1, 500), # Higher, means more toward the right
    (position_set_y, pos1, 685), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1500),
    (position_set_y, pos1, 1500),
    (overlay_set_size, reg1, pos1),
    (overlay_set_color, reg1, message_alert),

    (try_begin),
        (eq, "$g_notification_menu_var1", 1),#is not emperor
        (eq, "$g_notification_menu_var2", 1),#can change legates
        (create_text_overlay, reg1, "@Hint: You can suggest to change the legate of a legion. Though you cannot suggest to change the commander of the preatorian guard. Just press on the name of a legate whom you wish to change.", tf_center_justify),
        (overlay_set_color, reg1, 0x00007F),
        (position_set_x, pos1, 500), # Higher, means more toward the right
        (position_set_y, pos1, 645), # Higher, means more toward the top
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
    (try_end),

    (try_begin),
        (eq, "$g_notification_menu_var1", 0),#is emperor
        (eq, "$g_notification_menu_var2", 1),#can change legates
        (create_text_overlay, reg1, "@Hint: You can change the legate of a legion by pressing on the name of the respective legate. You can change the headquarter of the legion by pressing on the respective down name. You can also disband existing legions.", tf_center_justify),
        (overlay_set_color, reg1, 0x00007F),
        (position_set_x, pos1, 500), # Higher, means more toward the right
        (position_set_y, pos1, 645), # Higher, means more toward the top
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
    (try_end),

    (try_begin),
        (eq, "$g_notification_menu_var1", 0),#is emperor
        (eq, "$g_notification_menu_var2", 0),#can change legates
        (create_text_overlay, reg1, "@Hint: You can only change the legate of a legion or disband it while talking with your military advicor (who can be found in the Domus Augusti).", tf_center_justify),
        (overlay_set_color, reg1, 0x00007F),
        (position_set_x, pos1, 500), # Higher, means more toward the right
        (position_set_y, pos1, 645), # Higher, means more toward the top
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
    (try_end),

    # (create_text_overlay, reg1, "@Hint: You can assign legates by pressin.", tf_left_align),
    # (position_set_x, pos1, 600), # Higher, means more toward the right
    # (position_set_y, pos1, 680), # Higher, means more toward the top
    # (overlay_set_position, reg1, pos1),
    # (overlay_set_color, reg1, 0x00007F),
    # (position_set_x, pos1, 900),
    # (position_set_y, pos1, 900),
    # (overlay_set_size, reg1, pos1),

    # Back to menu - graphical button
    (create_game_button_overlay, reg1, "str_return"),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 23),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_jrider_faction_report_return_to_menu", reg1),

    # #switch to map view
    # (create_game_button_overlay, reg1, "@World Map"),
    # (position_set_x, pos1, 600),
    # (position_set_y, pos1, 23),
    # (overlay_set_position, reg1, pos1),
    # (assign, "$g_jrider_faction_coat_of_arms", reg1),


    # clear the string globals that we'll use
    (str_clear, s0),
    (str_clear, s20),
    (str_clear, s21),
    (str_clear, s23),
    (str_clear, s24),
    # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
    (create_text_overlay, reg1, s0, tf_scrollable_style_2),
    (position_set_x, pos1, 50),
    (position_set_y, pos1, 70),
    (overlay_set_position, reg1, pos1),
    # (position_set_x, pos1, 860),
    (position_set_x, pos1, 920),
    (position_set_y, pos1, 527),
    (overlay_set_area_size, reg1, pos1),


    (create_text_overlay, reg0, "@Legion/Auxiliar", tf_left_align|tf_with_outline),
    (position_set_x, pos1, 50),
    (position_set_y, pos1, 615),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@Legate/Tribune", tf_left_align|tf_with_outline),
    (position_set_x, pos1, 220),###+160
    (position_set_y, pos1, 615),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@Relation", tf_left_align|tf_with_outline),
    (position_set_x, pos1, 500-75),###+160
    (position_set_y, pos1, 615),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@Personality", tf_left_align|tf_with_outline),
    (position_set_x, pos1, 600-75),###+110
    (position_set_y, pos1, 615),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@Headquarter", tf_left_align|tf_with_outline),
    (position_set_x, pos1, 720-75),###+110
    (position_set_y, pos1, 615),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),


    (create_text_overlay, reg0, "@State", tf_left_align|tf_with_outline),
    (position_set_x, pos1, 720+50),###+110
    (position_set_y, pos1, 615),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),

    (assign, ":num_lines", 0),

    (try_begin),
        (eq, "$g_notification_menu_var1", 0),#is not emperor
        (assign, ":limit",slot_legion_commanders_end-1),
    (else_try),
        (assign, ":limit",slot_legion_commanders_end-3),#no preatorians, no player legion
    (try_end),
    (try_for_range_backwards, ":slot", slot_legion_commanders_begin+1, slot_legion_commanders_end),
        (troop_set_slot, "trp_temp_array_a", ":slot", 0),
        (store_mul, ":slot_2", ":slot", 2),
        (troop_set_slot, "trp_temp_array_a", ":slot_2", 0),
        (store_mul, ":slot_3", ":slot", 3),
        (troop_set_slot, "trp_temp_array_a", ":slot_3", 0),

        (lt, ":slot", ":limit"),
        (assign, ":c", 1),
        (try_begin),
            (eq, ":slot", slot_legion_commanders_end-2),#player legion
            (neg|troop_slot_eq, "trp_players_legion", 1,1),
            (assign, ":c", 0),
        (try_end),
        (eq, ":c", 1),
        # (assign, ":break", walled_centers_end),
        # (try_for_range, ":center", walled_centers_begin, ":break"),
            # (store_faction_of_party, ":fac", ":center"),
            # (eq, ":fac", "$players_kingdom"),
            # (party_slot_eq, ":center", slot_center_province, ":province"),
            # (assign, ":break", -1),
        # (try_end),
        # (eq, ":break", -1),
        #also show attached auxiliary forces
        (store_sub, ":legion", ":slot", slot_legion_commanders_begin),
        (try_for_range, ":auxiliary", "pt_cohors_aux", "pt_praetoriani_archer_cohors"),
            (val_sub, ":auxiliary", "pt_cohors_aux"),#slot_aux_legion_begin,slot_aux_commander_begin
            (store_add, ":slot", ":auxiliary", slot_aux_legion_begin),
            (troop_slot_eq, "trp_province_array", ":slot", ":legion"),
            (val_add, ":num_lines", 1),
        (try_end),

        (val_add, ":num_lines", 1),
    (try_end),
    (position_set_x, pos1, 0),
    (store_mul, ":y_name", 40, ":num_lines"),##get y for size of the scrollable overlay
    ##text size of the table
    (position_set_x, pos2, 900),
    (position_set_y, pos2, 900),

    (assign, ":slot", 0),
    (set_container_overlay, reg1),#start scroll
    (try_for_range_backwards, ":slot", slot_legion_commanders_begin+1, slot_legion_commanders_end),
        (lt, ":slot", ":limit"),
        (assign, ":c", 1),
        (try_begin),
            (eq, ":slot", slot_legion_commanders_end-2),#player legion
            (neg|troop_slot_eq, "trp_players_legion", 1,1),
            (assign, ":c", 0),
        (try_end),
        (eq, ":c", 1),
        (store_sub, ":legion", ":slot", slot_legion_commanders_begin),

        (troop_get_slot, ":legate", "trp_province_array", ":slot"),
        (assign, ":x_name", 0),

        ##creat some lines
        (create_mesh_overlay, reg1, "mesh_white_plane"),
        (overlay_set_color, reg1, 0x000000),#line color
        (position_set_x, pos3, 180000),
        (position_set_y, pos3, 50),
        (overlay_set_size, reg1, pos3),
        (position_set_x, pos3, 0),
        (store_add, ":y_name_line", ":y_name", 16), # set it below 2 pix of current position
        (position_set_y, pos3, ":y_name_line"),
        (overlay_set_position, reg1, pos3),

        #name
        (try_begin),
            (eq, ":legion", 13),#player
            (str_store_troop_name_plural, s20, "trp_players_legion"),#handle player legion
        (else_try),
            (store_add, ":string", ":legion", "str_lover_talk"),
            (str_store_string, s20, ":string"),
        (try_end),

        (create_text_overlay, reg0, "@{s20}", tf_left_align),
        (position_set_x, pos1, ":x_name"),
        (position_set_y, pos1, ":y_name"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_color, reg0, 0xcc8400),
        (overlay_set_size, reg0, pos2),

        (val_add, ":x_name", 170),

        (try_begin),
            (eq, ":legate", 0),
            (str_store_string, s20, "@You."),
        (else_try),
            (gt, ":legate", 0),
            (str_store_troop_name, s20, ":legate"),
        (else_try),
            (str_store_string, s20, "str_dplmc_none"),
        (try_end),

        (create_text_overlay, reg0, "@{s20}", tf_left_align),
        (position_set_y, pos1, ":y_name"),
        (position_set_x, pos1, ":x_name"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_size, reg0, pos2),

        (try_begin),
            (gt, ":legate", -1),
             # #creat button
            (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
            (overlay_set_position, reg10, pos1),
            (overlay_set_size, reg10, pos2),
            (overlay_set_alpha, reg10, 0),
            (overlay_set_color, reg10, 0xDDDDDD),
            (troop_set_slot, "trp_temp_array_a", ":slot", reg10),
        (try_end),

        (val_add, ":x_name", 225),

        (try_begin),
            (gt, ":legate", 0),
            # (troop_get_slot, reg0, ":legate", slot_troop_player_relation),
            (call_script, "script_troop_get_player_relation", ":legate"),
            (str_store_string, s20, "str_reg0"),
        (else_try),
            (str_store_string, s20, "str_dplmc_none"),
        (try_end),
        (create_text_overlay, reg1, s20, tf_left_align),
        (try_begin),
            (gt, ":legate", 0),
            (call_script, "script_troop_get_player_relation", ":legate"),
            (ge, reg0, 1),
            # (troop_slot_ge, ":legate", slot_troop_player_relation, 1),
            (overlay_set_color, reg1, 0x00b300),
        (else_try),
            (gt, ":legate", 0),
            # (neg|troop_slot_ge, ":legate", slot_troop_player_relation, 0),
            (call_script, "script_troop_get_player_relation", ":legate"),
            (lt, reg0, 0),
            (overlay_set_color, reg1, 0xff0000),
        (try_end),
        (position_set_y, pos1, ":y_name"),
        (position_set_x, pos1, ":x_name"),
        (overlay_set_position, reg1, pos1),
        (overlay_set_size, reg1, pos2),

        (val_add, ":x_name", 85),

        (try_begin),
            (gt, ":legate", 0),
            (troop_get_slot, ":personality", ":legate", slot_lord_reputation_type),
            (store_add, ":string", ":personality", "str_personality_archetypes"),
            (str_store_string, s22, ":string"),
        (else_try),
            (eq, ":legate", 0),
            (call_script, "script_print_honor_to_s60"),
            (str_store_string_reg, s22, s60),
        (else_try),
            (str_store_string, s22, "str_dplmc_none"),
        (try_end),

        (create_text_overlay, reg0, "@{s22}", tf_left_align),
        (position_set_y, pos1, ":y_name"),
        (position_set_x, pos1, ":x_name"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_size, reg0, pos2),

        (val_add, ":x_name", 115),

        (store_add, ":slot_hq", ":legion", slot_legion_home_begin),
        (troop_get_slot, ":headquarter", "trp_province_array", ":slot_hq"),
        (try_begin),
            (lt, ":headquarter", walled_centers_begin),
            (str_store_string, s22, "str_dplmc_none"),
            (assign, ":hq_faction", -1),
        (else_try),
            (str_store_party_name, s22, ":headquarter"),
            (store_faction_of_party, ":hq_faction", ":headquarter"),
        (try_end),
        (create_text_overlay, reg0, "@{s22}", tf_left_align),
        (position_set_y, pos1, ":y_name"),
        (position_set_x, pos1, ":x_name"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_size, reg0, pos2),
        (try_begin),
            (eq, ":hq_faction", "$players_kingdom"),
            (overlay_set_color, reg0, 0x00b300),
        (else_try),
            (overlay_set_color, reg0, 0xff0000),
        (try_end),

        (try_begin),
            (eq, "$g_notification_menu_var1", 0),#is emperor
            (is_between, ":headquarter", walled_centers_begin, walled_centers_end),
             # #creat button
            (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
            (overlay_set_position, reg10, pos1),
            (overlay_set_size, reg10, pos2),
            (overlay_set_alpha, reg10, 0),
            (overlay_set_color, reg10, 0xDDDDDD),
            (store_mul, ":slot_3", ":slot", 3),
            (troop_set_slot, "trp_temp_array_a", ":slot_3", reg10),
        (try_end),

        (val_add, ":x_name", 60+50),

        (try_begin),
            (gt, ":legate", -1),
            (troop_get_slot, ":party", ":legate", slot_troop_leaded_party),
            (try_begin),
                (neg|party_is_active, ":party"),
                (str_store_string, s22, "@Inactive"),
            (else_try),
                (store_party_size_wo_prisoners, reg4, ":party"),
                (str_store_string, s22, "@Size: {reg4} men."),
            (try_end),
        (else_try),
            (str_store_string, s22, "str_dplmc_none"),
        (try_end),

        (create_text_overlay, reg0, "@{s22}", tf_left_align),
        (position_set_x, pos1, ":x_name"),
        (position_set_y, pos1, ":y_name"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_size, reg0, pos2),

        (val_add, ":x_name", 110),
        (try_begin),
            (gt, ":legate", -1),
            (eq, "$g_notification_menu_var1", 0),#is emperor
            (str_store_string, s23, "@DISBAND"),
            (try_begin),
                (troop_get_slot, ":party", ":legate", slot_troop_leaded_party),
                (party_is_active, ":party"),
                (party_get_battle_opponent, ":enemy", ":party"),
                (party_is_active, ":enemy"),
                (str_store_string, s23, "@IN BATTLE"),
            (try_end),
            (create_text_overlay, reg0, "@{s23}", tf_left_align),
            (overlay_set_color, reg0, 0xF07E70),
            (position_set_x, pos1, ":x_name"),
            (position_set_y, pos1, ":y_name"),
            (overlay_set_position, reg0, pos1),
            (overlay_set_size, reg0, pos2),
            # #creat button
            (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
            (overlay_set_position, reg10, pos1),
            (overlay_set_size, reg10, pos2),
            (overlay_set_alpha, reg10, 0),
            (overlay_set_color, reg10, 0xDDDDDD),
            (store_mul, ":slot_2", ":slot", 2),
            (troop_set_slot, "trp_temp_array_a", ":slot_2", reg10),
        (else_try),
            (eq, ":legate", -1),
            (eq, "$g_notification_menu_var1", 0),#is emperor
            (create_text_overlay, reg0, "@Raise", tf_left_align),
            (overlay_set_color, reg0, 0x32CD32),
            (position_set_x, pos1, ":x_name"),
            (position_set_y, pos1, ":y_name"),
            (overlay_set_position, reg0, pos1),
            (overlay_set_size, reg0, pos2),
             # #creat button
            (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
            (overlay_set_position, reg10, pos1),
            (overlay_set_size, reg10, pos2),
            (overlay_set_alpha, reg10, 0),
            (overlay_set_color, reg10, 0xDDDDDD),
            (troop_set_slot, "trp_temp_array_a", ":slot", reg10),
        (try_end),

        (val_sub, ":y_name", 40),

        #also show attached auxiliary forces
        (try_for_range, ":auxiliar_cohort", "pt_cohors_aux", "pt_praetoriani_archer_cohors"),
            (store_sub, ":auxiliary", ":auxiliar_cohort", "pt_cohors_aux"),#slot_aux_legion_begin,slot_aux_commander_begin

            (store_add, ":slot", ":auxiliary", slot_aux_legion_begin),
            (troop_slot_eq, "trp_province_array", ":slot", ":legion"),

            (store_add, ":slot", ":auxiliary", slot_aux_commander_begin),
            (troop_get_slot, ":aux_cohort_commander", "trp_province_array", ":slot"),

            (assign, ":x_name", 0),
            #name
            (call_script, "script_get_cohort_name_to_s5", ":auxiliar_cohort"),
            (create_text_overlay, reg0, "@{s5}", tf_left_align),
            (position_set_x, pos1, ":x_name"),
            (position_set_y, pos1, ":y_name"),
            (overlay_set_position, reg0, pos1),
            (overlay_set_color, reg0, 0xcc8400),
            (overlay_set_size, reg0, pos2),

            (val_add, ":x_name", 170),

            (try_begin),
                (eq, ":auxiliar_cohort", "pt_player_aux_cav"),
                (troop_slot_eq, "trp_players_aux_cav", 1, 0),
                (str_store_string, s20, "@Not created yet."),
            (else_try),
                (eq, ":auxiliar_cohort", "pt_player_aux_inf"),
                (troop_slot_eq, "trp_players_aux_inf", 1, 0),
                (str_store_string, s20, "@Not created yet."),
            (else_try),
                (eq, ":aux_cohort_commander", 0),
                (str_store_string, s20, "@You."),
            (else_try),
                (gt, ":aux_cohort_commander", 0),
                (str_store_troop_name, s20, ":aux_cohort_commander"),
            (else_try),
                (str_store_string, s20, "str_dplmc_none"),
            (try_end),

            (create_text_overlay, reg0, "@{s20}", tf_left_align),
            (position_set_y, pos1, ":y_name"),
            (position_set_x, pos1, ":x_name"),
            (overlay_set_position, reg0, pos1),
            (overlay_set_size, reg0, pos2),

            (try_begin),
                (gt, ":aux_cohort_commander", -1),
                # #creat button
                (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
                (overlay_set_position, reg10, pos1),
                (overlay_set_size, reg10, pos2),
                (overlay_set_alpha, reg10, 0),
                (overlay_set_color, reg10, 0xDDDDDD),
                (troop_set_slot, "trp_temp_array_a", ":slot", reg10),
            (try_end),

            (val_add, ":x_name", 225),

            (try_begin),
                (gt, ":aux_cohort_commander", 0),
                # (troop_get_slot, reg0, ":aux_cohort_commander", slot_troop_player_relation),
                (call_script, "script_troop_get_player_relation", ":aux_cohort_commander"),
                (str_store_string, s20, "str_reg0"),
            (else_try),
                (str_store_string, s20, "str_dplmc_none"),
            (try_end),
            (create_text_overlay, reg1, s20, tf_left_align),
            (try_begin),
                (gt, ":aux_cohort_commander", 0),
                # (troop_slot_ge, ":aux_cohort_commander", slot_troop_player_relation, 1),
                (call_script, "script_troop_get_player_relation", ":aux_cohort_commander"),
                (ge, reg0, 1),
                (overlay_set_color, reg1, 0x00b300),
            (else_try),
                (gt, ":aux_cohort_commander", 0),
                # (neg|troop_slot_ge, ":aux_cohort_commander", slot_troop_player_relation, 0),
                (call_script, "script_troop_get_player_relation", ":aux_cohort_commander"),
                (lt, reg0, 0),
                (overlay_set_color, reg1, 0xff0000),
            (try_end),
            (position_set_y, pos1, ":y_name"),
            (position_set_x, pos1, ":x_name"),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),

            (val_add, ":x_name", 85),

            (try_begin),
                (gt, ":aux_cohort_commander", 0),
                (troop_get_slot, ":personality", ":aux_cohort_commander", slot_lord_reputation_type),
                (store_add, ":string", ":personality", "str_personality_archetypes"),
                (str_store_string, s22, ":string"),
            (else_try),
                (str_store_string, s22, "str_dplmc_none"),
            (try_end),

            (create_text_overlay, reg0, "@{s22}", tf_left_align),
            (position_set_y, pos1, ":y_name"),
            (position_set_x, pos1, ":x_name"),
            (overlay_set_position, reg0, pos1),
            (overlay_set_size, reg0, pos2),

            (val_add, ":x_name", 115),

            # (store_add, ":slot_hq", ":legion", slot_legion_home_begin),
            # (troop_get_slot, ":headquarter", "trp_province_array", ":slot_hq"),
            # (try_begin),
            #     (lt, ":headquarter", walled_centers_begin),
            #     (str_store_string, s22, "str_dplmc_none"),
            #     (assign, ":hq_faction", -1),
            # (else_try),
            #     (str_store_party_name, s22, ":headquarter"),
            #     (store_faction_of_party, ":hq_faction", ":headquarter"),
            # (try_end),
            # (create_text_overlay, reg0, "@{s22}", tf_left_align),
            # (position_set_y, pos1, ":y_name"),
            # (position_set_x, pos1, ":x_name"),
            # (overlay_set_position, reg0, pos1),
            # (overlay_set_size, reg0, pos2),
            # (try_begin),
            #     (eq, ":hq_faction", "$players_kingdom"),
            #     (overlay_set_color, reg0, 0x00b300),
            # (else_try),
            #     (overlay_set_color, reg0, 0xff0000),
            # (try_end),

            # (try_begin),
            #     (eq, "$g_notification_menu_var1", 0),#is emperor
            #     (is_between, ":headquarter", walled_centers_begin, walled_centers_end),
            #     # #creat button
            #     (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
            #     (overlay_set_position, reg10, pos1),
            #     (overlay_set_size, reg10, pos2),
            #     (overlay_set_alpha, reg10, 0),
            #     (overlay_set_color, reg10, 0xDDDDDD),
            #     (store_mul, ":slot_3", ":slot", 3),
            #     (troop_set_slot, "trp_temp_array_a", ":slot_3", reg10),
            # (try_end),

            (val_add, ":x_name", 60+50),

            (try_begin),
                (gt, ":aux_cohort_commander", -1),
                (troop_get_slot, ":party", ":aux_cohort_commander", slot_troop_leaded_party),
                (try_begin),
                    (neg|party_is_active, ":party"),
                    (str_store_string, s22, "@Inactive"),
                (else_try),
                    (store_party_size_wo_prisoners, reg4, ":party"),
                    (str_store_string, s22, "@Size: {reg4} men."),
                (try_end),
            (else_try),
                (str_store_string, s22, "str_dplmc_none"),
            (try_end),

            (create_text_overlay, reg0, "@{s22}", tf_left_align),
            (position_set_x, pos1, ":x_name"),
            (position_set_y, pos1, ":y_name"),
            (overlay_set_position, reg0, pos1),
            (overlay_set_size, reg0, pos2),

            (val_add, ":x_name", 110),
            (try_begin),
                (gt, ":aux_cohort_commander", -1),
                (eq, "$g_notification_menu_var1", 0),#is emperor
                (str_store_string, s23, "@DISBAND"),
                (try_begin),
                    (troop_get_slot, ":party", ":aux_cohort_commander", slot_troop_leaded_party),
                    (party_is_active, ":party"),
                    (party_get_battle_opponent, ":enemy", ":party"),
                    (party_is_active, ":enemy"),
                    (str_store_string, s23, "@IN BATTLE"),
                (try_end),
                (create_text_overlay, reg0, "@{s23}", tf_left_align),
                (overlay_set_color, reg0, 0xF07E70),
                (position_set_x, pos1, ":x_name"),
                (position_set_y, pos1, ":y_name"),
                (overlay_set_position, reg0, pos1),
                (overlay_set_size, reg0, pos2),
                # #creat button
                (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
                (overlay_set_position, reg10, pos1),
                (overlay_set_size, reg10, pos2),
                (overlay_set_alpha, reg10, 0),
                (overlay_set_color, reg10, 0xDDDDDD),
                (store_mul, ":slot_2", ":slot", 2),
                (troop_set_slot, "trp_temp_array_a", ":slot_2", reg10),
            (else_try),
                (gt, ":legate", -1),
                (eq, ":aux_cohort_commander", -1),
                (eq, "$g_notification_menu_var1", 0),#is emperor
                (create_text_overlay, reg0, "@Raise", tf_left_align),
                (overlay_set_color, reg0, 0x32CD32),
                (position_set_x, pos1, ":x_name"),
                (position_set_y, pos1, ":y_name"),
                (overlay_set_position, reg0, pos1),
                (overlay_set_size, reg0, pos2),
                # #creat button
                (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
                (overlay_set_position, reg10, pos1),
                (overlay_set_size, reg10, pos2),
                (overlay_set_alpha, reg10, 0),
                (overlay_set_color, reg10, 0xDDDDDD),
                (troop_set_slot, "trp_temp_array_a", ":slot", reg10),
            (try_end),

            (val_sub, ":y_name", 40),
        (try_end),
    (try_end),
    (set_container_overlay, -1),#end scroll
  ]),

  ## Check for buttonpress
  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":button_pressed_id"),
    (try_begin),
        (eq, ":button_pressed_id", "$g_jrider_faction_report_return_to_menu"), # pressed  (Return to menu)
        (presentation_set_duration, 0),
        (show_object_details_overlay, 1),
    (else_try),
        (eq, "$g_notification_menu_var2", 1),#can change legates
        (assign, ":end", slot_legion_commanders_end),

        (try_begin),
            (eq, "$g_notification_menu_var1", 0),#is not emperor
            (assign, ":limit",slot_legion_commanders_end-1),
        (else_try),
            (assign, ":limit",slot_legion_commanders_end-3),#no preatorians, no player legion
        (try_end),

        (assign, ":disband", -1),
        (assign, ":legate", -1),
        (assign, ":head_quarter", -1),
        (try_for_range, ":slot", slot_legion_commanders_begin+1, ":end"),
            (lt, ":slot", ":limit"),
            (assign, ":c", 1),
            (try_begin),
                (eq, ":slot", slot_legion_commanders_end-2),#player legion
                (neg|troop_slot_eq, "trp_players_legion", 1,1),
                (assign, ":c", 0),
            (try_end),
            (eq, ":c", 1),

            (try_begin),
                (troop_slot_eq, "trp_temp_array_a", ":slot", ":button_pressed_id"),
                (store_sub, "$temp4_1", ":slot", slot_legion_commanders_begin),#store the legion
                (troop_get_slot, ":legate", "trp_province_array", ":slot"),
                (assign, ":end", -1),
            (else_try),
                (store_mul, ":slot_2", 2, ":slot"),
                (troop_slot_eq, "trp_temp_array_a", ":slot_2", ":button_pressed_id"),
                (store_sub, "$temp4_1", ":slot", slot_legion_commanders_begin),#store the legion
                (troop_get_slot, ":legate", "trp_province_array", ":slot"),
                (assign, ":end", -1),
                (assign, ":disband", 1),
            (else_try),
                (store_mul, ":slot_3", 3, ":slot"),
                (troop_slot_eq, "trp_temp_array_a", ":slot_3", ":button_pressed_id"),
                (store_sub, "$temp4_1", ":slot", slot_legion_commanders_begin),#store the legion
                (store_add, ":hq_slot", slot_legion_home_begin, "$temp4_1"),
                (troop_get_slot, ":head_quarter", "trp_province_array", ":hq_slot"),
                (assign, ":end", -1),
                (assign, ":disband", 1),
            (try_end),
        (try_end),
        (eq, ":end", -1),

        (try_begin),
            (is_between, ":head_quarter", walled_centers_begin, walled_centers_end),
            (assign, "$temp4", ":head_quarter"),
            (start_presentation, "prsnt_legion_select_hq"),
            (display_message, "@Generating Map", message_alert),
            (display_message, "@Generating Map", message_alert),
        (else_try),
            (gt, ":legate", -1),
            (eq, ":disband", 1),
            (try_begin),
                (troop_get_slot, ":party", ":legate", slot_troop_leaded_party),
                (party_is_active, ":party"),
                (party_get_battle_opponent, ":enemy", ":party"),
                (party_is_active, ":enemy"),
                (display_message, "@Can't disband the legion as it is in battle!", message_alert),
            (else_try),
                (assign, ":end", "pt_praetoriani_archer_cohors"),
                (try_for_range, ":auxiliary", "pt_cohors_aux", ":end"),
                    (val_sub, ":auxiliary", "pt_cohors_aux"),#slot_aux_legion_begin,slot_aux_commander_begin

                    (store_add, ":slot", ":auxiliary", slot_aux_legion_begin),
                    (troop_slot_eq, "trp_province_array", ":slot", "$temp4_1"),

                    (store_add, ":slot", ":auxiliary", slot_aux_commander_begin),
                    (troop_get_slot, ":aux_cohort_commander", "trp_province_array", ":slot"),
                    (troop_get_slot, ":party", ":aux_cohort_commander", slot_troop_leaded_party),
                    (party_is_active, ":party"),
                    (party_get_battle_opponent, ":enemy", ":party"),
                    (party_is_active, ":enemy"),

                    (val_add, ":auxiliary","str_cohors_aux"),
                    (str_store_string, s23, ":auxiliary"),

                    (display_log_message, "@The {s23}, which is attached to the legion, is still in battle. Legion can't be disbanded now!", message_alert),
                    (assign, ":end", -1),
                (try_end),
                (eq, ":end", -1),
            (else_try),
                (call_script, "script_troop_set_rank", ":legate", slot_troop_legion, -1),
                (try_begin),
                    (troop_slot_eq, ":legate", slot_lord_reputation_type, lrep_martial),
                    (call_script, "script_change_player_relation_with_troop", ":legate", -30),
                (else_try),
                    (troop_slot_eq, ":legate", slot_lord_reputation_type, lrep_quarrelsome),
                    (call_script, "script_change_player_relation_with_troop", ":legate", -30),
                (else_try),
                    (troop_slot_eq, ":legate", slot_lord_reputation_type, lrep_selfrighteous),
                    (call_script, "script_change_player_relation_with_troop", ":legate", -25),
                (else_try),
                    (troop_slot_eq, ":legate", slot_lord_reputation_type, lrep_cunning),
                    (call_script, "script_change_player_relation_with_troop", ":legate", -25),
                (else_try),
                    (troop_slot_eq, ":legate", slot_lord_reputation_type, lrep_debauched),
                    (call_script, "script_change_player_relation_with_troop", ":legate", -20),
                (else_try),
                    (troop_slot_eq, ":legate", slot_lord_reputation_type, lrep_goodnatured),
                    (call_script, "script_change_player_relation_with_troop", ":legate", -15),
                (else_try),
                    (troop_slot_eq, ":legate", slot_lord_reputation_type, lrep_upstanding),
                    (call_script, "script_change_player_relation_with_troop", ":legate", -22),
                (else_try),
                    (call_script, "script_change_player_relation_with_troop", ":legate", -26),
                (try_end),
                (str_store_troop_name, s49, ":legate"),
                (display_message, "@{s49} is dismissed from service."),
                (call_script, "script_change_lord_party_to_fit_rank", ":legate"),

                (store_add, ":slot_legion_commander", slot_legion_commanders_begin, "$temp4_1"),
                (troop_set_slot, "trp_province_array", ":slot_legion_commander", -1),#clear slot

                (try_begin),
                    (eq, "$temp4_1", 13),
                    (troop_slot_eq, "trp_players_legion", 1,1),
                    (str_store_troop_name_plural, s52, "trp_players_legion"),
                (else_try),
                    (store_add, ":legion_string", "str_lover_talk", "$temp4_1"),
                    (str_store_string, s52, ":legion_string"),
                (try_end),
                (display_log_message, "@The {s52} has been disbanded!"),

                #also disband attached auxiliary forces
                (try_for_range, ":auxiliary", "pt_cohors_aux", "pt_praetoriani_archer_cohors"),
                    (val_sub, ":auxiliary", "pt_cohors_aux"),#slot_aux_legion_begin,slot_aux_commander_begin

                    (store_add, ":slot", ":auxiliary", slot_aux_legion_begin),
                    (troop_slot_eq, "trp_province_array", ":slot", "$temp4_1"),

                    (store_add, ":slot", ":auxiliary", slot_aux_commander_begin),
                    (troop_get_slot, ":aux_cohort_commander", "trp_province_array", ":slot"),
                    (troop_set_slot, "trp_province_array", ":slot", -1),#clear slot

                    (try_begin),
                        (is_between, ":aux_cohort_commander", active_npcs_begin, active_npcs_end),
                        (call_script, "script_troop_set_rank", ":aux_cohort_commander", slot_troop_aux, -1),
                        (try_begin),
                            (troop_slot_eq, ":aux_cohort_commander", slot_lord_reputation_type, lrep_martial),
                            (call_script, "script_change_player_relation_with_troop", ":aux_cohort_commander", -30),
                        (else_try),
                            (troop_slot_eq, ":aux_cohort_commander", slot_lord_reputation_type, lrep_quarrelsome),
                            (call_script, "script_change_player_relation_with_troop", ":aux_cohort_commander", -30),
                        (else_try),
                            (troop_slot_eq, ":aux_cohort_commander", slot_lord_reputation_type, lrep_selfrighteous),
                            (call_script, "script_change_player_relation_with_troop", ":aux_cohort_commander", -25),
                        (else_try),
                            (troop_slot_eq, ":aux_cohort_commander", slot_lord_reputation_type, lrep_cunning),
                            (call_script, "script_change_player_relation_with_troop", ":aux_cohort_commander", -25),
                        (else_try),
                            (troop_slot_eq, ":aux_cohort_commander", slot_lord_reputation_type, lrep_debauched),
                            (call_script, "script_change_player_relation_with_troop", ":aux_cohort_commander", -20),
                        (else_try),
                            (troop_slot_eq, ":aux_cohort_commander", slot_lord_reputation_type, lrep_goodnatured),
                            (call_script, "script_change_player_relation_with_troop", ":aux_cohort_commander", -15),
                        (else_try),
                            (troop_slot_eq, ":aux_cohort_commander", slot_lord_reputation_type, lrep_upstanding),
                            (call_script, "script_change_player_relation_with_troop", ":aux_cohort_commander", -22),
                        (else_try),
                            (call_script, "script_change_player_relation_with_troop", ":aux_cohort_commander", -26),
                        (try_end),
                        (str_store_troop_name, s49, ":aux_cohort_commander"),
                        (display_message, "@{s49} is dismissed from service."),
                        (call_script, "script_change_lord_party_to_fit_rank", ":aux_cohort_commander"),
                    (try_end),
                    (val_add, ":auxiliary","str_cohors_aux"),
                    (str_store_string, s23, ":auxiliary"),
                    (display_log_message, "@The {s23} has been disbanded!"),
                (try_end),
            (try_end),
            (start_presentation, "prsnt_legion_management"),
        (else_try),
            (gt, ":legate", -1),
            (troop_get_slot, ":party", ":legate", slot_troop_leaded_party),
            (try_begin),
                (neg|party_is_active, ":party"),
                (start_presentation, "prsnt_legion_selection"),
            (else_try),
                (party_get_battle_opponent, ":enemy", ":party"),
                (neg|party_is_active, ":enemy"),
                (start_presentation, "prsnt_legion_selection"),
            (else_try),
                (display_message, "@You cannot change the legate as long as the legion is in battle!", message_negative),
            (try_end),
        (else_try),
            (start_presentation, "prsnt_legion_selection"),
        (try_end),
    (else_try),
        (eq, "$g_notification_menu_var2", 1),#can change legates
        (assign, ":end", slot_aux_commander_end),

        (try_begin),
            (eq, "$g_notification_menu_var1", 0),#is not emperor
            (assign, ":limit",slot_aux_commander_end-1),
        (else_try),
            (assign, ":limit",slot_aux_commander_end-5),#no preatorians, no player legion
        (try_end),

        (assign, ":disband", -1),
        (assign, ":aux_commander", -1),
        (assign, ":head_quarter", -1),
        (try_for_range, ":slot", slot_aux_commander_begin, ":end"),
            (lt, ":slot", ":limit"),
            (assign, ":c", 1),
            (try_begin),
                (eq, ":slot", slot_aux_commander_end-2),#player legion
                (neg|troop_slot_eq, "trp_players_legion", 1,1),
                (assign, ":c", 0),
            (try_end),
            (eq, ":c", 1),
            (try_begin),
                (troop_slot_eq, "trp_temp_array_a", ":slot", ":button_pressed_id"),
                (store_sub, "$temp4_1", ":slot", slot_aux_commander_begin),#store the aux
                (troop_get_slot, ":aux_commander", "trp_province_array", ":slot"),
                (assign, ":end", -1),
            (else_try),
                (store_mul, ":slot_2", 2, ":slot"),
                (troop_slot_eq, "trp_temp_array_a", ":slot_2", ":button_pressed_id"),
                (store_sub, "$temp4_1", ":slot", slot_aux_commander_begin),#store the aux
                (troop_get_slot, ":aux_commander", "trp_province_array", ":slot"),
                (assign, ":end", -1),
                (assign, ":disband", 1),
            (try_end),
        (try_end),
        (eq, ":end", -1),

        (try_begin),
            (gt, ":aux_commander", -1),
            (eq, ":disband", 1),
            (try_begin),
                (troop_get_slot, ":party", ":aux_commander", slot_troop_leaded_party),
                (party_is_active, ":party"),
                (party_get_battle_opponent, ":enemy", ":party"),
                (party_is_active, ":enemy"),
                (display_message, "@Can't disband the auxiliary unit as it is in battle!", message_alert),
            (else_try),
                (call_script, "script_troop_set_rank", ":aux_commander", slot_troop_legion, -1),
                (try_begin),
                    (troop_slot_eq, ":aux_commander", slot_lord_reputation_type, lrep_martial),
                    (call_script, "script_change_player_relation_with_troop", ":aux_commander", -30),
                (else_try),
                    (troop_slot_eq, ":aux_commander", slot_lord_reputation_type, lrep_quarrelsome),
                    (call_script, "script_change_player_relation_with_troop", ":aux_commander", -30),
                (else_try),
                    (troop_slot_eq, ":aux_commander", slot_lord_reputation_type, lrep_selfrighteous),
                    (call_script, "script_change_player_relation_with_troop", ":aux_commander", -25),
                (else_try),
                    (troop_slot_eq, ":aux_commander", slot_lord_reputation_type, lrep_cunning),
                    (call_script, "script_change_player_relation_with_troop", ":aux_commander", -25),
                (else_try),
                    (troop_slot_eq, ":aux_commander", slot_lord_reputation_type, lrep_debauched),
                    (call_script, "script_change_player_relation_with_troop", ":aux_commander", -20),
                (else_try),
                    (troop_slot_eq, ":aux_commander", slot_lord_reputation_type, lrep_goodnatured),
                    (call_script, "script_change_player_relation_with_troop", ":aux_commander", -15),
                (else_try),
                    (troop_slot_eq, ":aux_commander", slot_lord_reputation_type, lrep_upstanding),
                    (call_script, "script_change_player_relation_with_troop", ":aux_commander", -22),
                (else_try),
                    (call_script, "script_change_player_relation_with_troop", ":aux_commander", -26),
                (try_end),
                (str_store_troop_name, s49, ":aux_commander"),
                (display_message, "@{s49} is dismissed from service."),
                (call_script, "script_change_lord_party_to_fit_rank", ":aux_commander"),

                (store_add, ":slot_aux_commander", slot_aux_commander_begin, "$temp4_1"),
                (troop_set_slot, "trp_province_array", ":slot_aux_commander", -1),#clear slot

                (store_add, ":cohort", "$temp4_1", "pt_cohors_aux"),
                (call_script, "script_get_cohort_name_to_s5", ":cohort"),
                (display_log_message, "@The {s5} has been disbanded!"),
                (start_presentation, "prsnt_legion_management"),
            (try_end),
        (else_try),
            (gt, ":aux_commander", -1),
            (troop_get_slot, ":party", ":aux_commander", slot_troop_leaded_party),
            (try_begin),
                (neg|party_is_active, ":party"),
                (start_presentation, "prsnt_aux_selection"),
            (else_try),
                (party_get_battle_opponent, ":enemy", ":party"),
                (neg|party_is_active, ":enemy"),
                (start_presentation, "prsnt_aux_selection"),
            (else_try),
                (display_message, "@You cannot change the tribune as long as the cohort is in battle!", message_negative),
            (try_end),
        (else_try),
            (start_presentation, "prsnt_aux_selection"),
        (try_end),
    (try_end),
  ]),

  (ti_on_presentation_run, [
    (try_begin),
        (key_clicked, key_escape),
        (presentation_set_duration, 0),
        (show_object_details_overlay, 1),
    (else_try),
        (key_clicked, key_space),
        (set_fixed_point_multiplier, 1000),
        (mouse_get_position, pos31),

        (position_get_x, reg31, pos31),
        (position_get_y, reg32, pos31),

        (display_message, "@X: {reg31} | Y: {reg32}"),
    (try_end),
  ]),
]),

("legion_selection", 0, 0, [
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    # #0. BACKROUND
    (create_mesh_overlay, reg0, "mesh_load_window"),
    (position_set_x, pos1, -1),
    (position_set_y, pos1, -1),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 1002),
    (position_set_y, pos1, 1002),
    (overlay_set_size, reg0, pos1),

    #init variables
    (assign, ":num_lords", 0),

    (try_begin),
        (eq, "$g_notification_menu_var1", 0),#is emperor
        (assign, ":limit_npcs", active_npcs_begin),
    (else_try),
        (assign, ":limit_npcs", active_npcs_including_player_begin),
    (try_end),
    (try_for_range, ":active_npc", ":limit_npcs", active_npcs_end),
        (troop_set_slot, "trp_temp_array_b", ":active_npc", 0),

        (try_begin),
            (eq, ":active_npc", active_npcs_including_player_begin),
            (assign, ":active_npc", "trp_player"),
            (assign, ":npc_faction", "$players_kingdom"),
        (else_try),
            (store_troop_faction, ":npc_faction", ":active_npc"),
        (try_end),

        (assign, ":c", 0),
        (try_begin),
            (eq, ":npc_faction", "$players_kingdom"),
            (troop_slot_eq, ":active_npc", slot_troop_occupation, slto_kingdom_hero),
            (neg|troop_slot_ge, ":active_npc", slot_troop_legion, 1),
            (neg|troop_slot_ge, ":active_npc", slot_troop_aux, 1),
            (neg|troop_slot_ge, ":active_npc", slot_troop_govern, 1),
            (assign, ":c", 1),
        (else_try),
            (eq, "$g_notification_menu_var1", 0),#is emperor
            (main_party_has_troop, ":active_npc"),
            (neq, ":active_npc", "trp_npc35"),
            ##diplomacy start+ Prevent this from appearing for already-enfeoffed troops
            (call_script, "script_get_number_of_hero_centers", ":active_npc"),
            (eq, reg0, 0),
            (neg|troop_slot_eq, ":active_npc", slot_troop_playerparty_history, dplmc_pp_history_lord_rejoined),
            (neg|troop_slot_eq, ":active_npc", slot_troop_playerparty_history, dplmc_pp_history_granted_fief),
            (neg|troop_slot_eq, ":active_npc", slot_troop_occupation, slto_kingdom_hero),
            (neg|is_between, ":active_npc", lords_begin, lords_end),
            (neg|is_between, ":active_npc", kings_begin, kings_end),
            (neg|is_between, ":active_npc", kingdom_ladies_begin, kingdom_ladies_end),
            (assign, ":c", 1),
        (try_end),
        (eq, ":c", 1),

        (val_add, ":num_lords", 1),
    (try_end),
    (store_add, ":string", "$temp4_1", "str_lover_talk"),
    (str_store_string, s22, ":string"),
    # Presentation title, centered at the top
    (store_add, ":slot_hq",slot_legion_home_begin, "$temp4_1"),
    (troop_get_slot, "$temp4", "trp_province_array", ":slot_hq"),
    (try_begin),
        (gt, "$temp4", 0),
        (str_store_party_name, s20, "$temp4"),
        (str_store_string, s23, "@The legions headquarters are in {s20}"),
    (else_try),
        (str_store_string, s23, "@The legion has no headquarters."),
    (try_end),

    (store_add, ":slot_legate",slot_legion_commanders_begin, "$temp4_1"),
    (troop_get_slot, "$temp_troop", "trp_province_array", ":slot_legate"),
    (try_begin),
        (gt, "$temp_troop", 0),
        (str_store_troop_name, s20, "$temp_troop"),
        (str_store_string, s21, "@{s20} is the current legate. {s23}."),
    (else_try),
        (eq, "$temp_troop", 0),
        (str_store_string, s21, "@You are the current legate. {s23}."),
    (else_try),
        (str_store_string, s21, "@The legion has no legate at all. {s23}."),
    (try_end),
    (try_begin),
        (eq, "$g_notification_menu_var1", 0),#is emperor
        (create_text_overlay, reg1, "@You can select a new legate for {s22}. {s21}", tf_center_justify),
        (position_set_x, pos1, 1100),
        (position_set_y, pos1, 1100),
        (overlay_set_size, reg1, pos1),
    (else_try),
        (troop_get_slot, ":influence", "trp_player", slot_troop_influence),
        (assign, reg23, ":influence"),
        (create_text_overlay, reg1, "@You can suggest another legate for {s22}. {s21} Your influence: {reg23}.", tf_center_justify),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
    (try_end),
    (position_set_x, pos1, 550), # Higher, means more toward the right
    (position_set_y, pos1, 680), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),


    (try_begin),
        (gt, "$temp_troop", -1),
        (troop_get_slot, ":personality", "$temp_troop", slot_lord_reputation_type),
        (store_add, ":string", ":personality", "str_personality_archetypes"),
        (str_store_string, s22, ":string"),
        # (troop_get_slot, reg20, "$temp_troop", slot_troop_player_relation),
        (call_script, "script_troop_get_player_relation", "$temp_troop"),
        (assign, reg20, reg0),
        (create_text_overlay, reg1, "@Current relation with the legate: {reg20}. Personality of the legate: {s22}.", tf_center_justify),
        (position_set_x, pos1, 550), # Higher, means more toward the right
        (position_set_y, pos1, 655), # Higher, means more toward the top
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 1100),
        (position_set_y, pos1, 1100),
        (overlay_set_size, reg1, pos1),
    (try_end),

    (try_begin),
        (gt, "$temp_troop", -1),
        # (store_mul, ":troop", "$temp_troop", 2),
        (create_mesh_overlay_with_tableau_material, reg0, -1, "tableau_troop_note_mesh", "$temp_troop"),
        (position_set_x, pos1, 10),
        (position_set_y, pos1, 540),
        (overlay_set_position, reg0, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 500),
        (overlay_set_size, reg0, pos1),
    (try_end),


    (create_text_overlay, reg1, "@Hint: To change the legate press on the image of the respective character!", tf_center_justify),
    (position_set_x, pos1, 550), # Higher, means more toward the right
    (position_set_y, pos1, 620), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (overlay_set_color, reg1, 0x3380FF),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),

    # (call_script, "script_write_economic_info_to_s0", "$temp4_1", 1),
    # (create_text_overlay, reg1, "str_s0", tf_center_justify),
    # (position_set_x, pos1, 550), # Higher, means more toward the right
    # (position_set_y, pos1, 620), # Higher, means more toward the top
    # (overlay_set_position, reg1, pos1),
    # (overlay_set_color, reg1, 0x00007F),
    # (position_set_x, pos1, 900),
    # (position_set_y, pos1, 900),
    # (overlay_set_size, reg1, pos1),

    # Back to menu - graphical button
    (create_game_button_overlay, reg1, "str_return"),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 23),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_jrider_faction_report_return_to_menu", reg1),

    ##creat a lines
    (create_mesh_overlay, reg1, "mesh_white_plane"),
    (overlay_set_color, reg1, 0x000000),#line color
    (position_set_x, pos3, 200000),
    (position_set_y, pos3, 50),
    (overlay_set_size, reg1, pos3),
    (position_set_x, pos3, 0),
    (position_set_y, pos3, 530),
    (overlay_set_position, reg1, pos3),


    (create_text_overlay, reg1, "@Available nobles and companions:", tf_left_align),
    (position_set_x, pos1, 25), # Higher, means more toward the right
    (position_set_y, pos1, 510), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (overlay_set_color, reg1, 0x00007F),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),

    # # clear the string globals that we'll use
    (str_clear, s0),
    # (str_clear, s20),
    # (str_clear, s21),
    # (str_clear, s23),
    # (str_clear, s24),
    # # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
    (create_text_overlay, reg1, s0, tf_scrollable_style_2),
    (position_set_x, pos1, 50),
    (position_set_y, pos1, 50),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 450),
    (overlay_set_area_size, reg1, pos1),

    # (position_set_x, pos1, 0),
    (store_div, ":y_name", ":num_lords", 4),##get y for size of the scrollable overlay
    (val_mul, ":y_name", 250),
    (assign, ":x_name", 20),
    #text size
    (position_set_x, pos2, 900),
    (position_set_y, pos2, 900),

    # (assign, ":slot", 0),
    (set_container_overlay, reg1),#start scroll
    (try_for_range, ":active_npc", ":limit_npcs", active_npcs_end),

        (call_script, "script_cf_is_no_goy", ":active_npc"), # block goys for roman main story

        (try_begin),
            (eq, ":active_npc", active_npcs_including_player_begin),
            (assign, ":active_npc", "trp_player"),
            (assign, ":npc_faction", "$players_kingdom"),
        (else_try),
            (store_troop_faction, ":npc_faction", ":active_npc"),
        (try_end),
        (assign, ":c", 0),
        (try_begin),
            (eq, ":npc_faction", "$players_kingdom"),
            (troop_slot_eq, ":active_npc", slot_troop_occupation, slto_kingdom_hero),
            (neg|troop_slot_ge, ":active_npc", slot_troop_legion, 1),
            (neg|troop_slot_ge, ":active_npc", slot_troop_aux, 1),
            (neg|troop_slot_ge, ":active_npc", slot_troop_govern, 1),
            (assign, ":c", 1),
        (else_try),
            (eq, "$g_notification_menu_var1", 0),#is emperor
            (main_party_has_troop, ":active_npc"),
            (neq, ":active_npc", "trp_npc35"),
            ##diplomacy start+ Prevent this from appearing for already-enfeoffed troops
            (call_script, "script_get_number_of_hero_centers", ":active_npc"),
            (eq, reg0, 0),
            (neg|troop_slot_eq, ":active_npc", slot_troop_playerparty_history, dplmc_pp_history_lord_rejoined),
            (neg|troop_slot_eq, ":active_npc", slot_troop_playerparty_history, dplmc_pp_history_granted_fief),
            (neg|troop_slot_eq, ":active_npc", slot_troop_occupation, slto_kingdom_hero),
            (neg|is_between, ":active_npc", lords_begin, lords_end),
            (neg|is_between, ":active_npc", kings_begin, kings_end),
            (neg|is_between, ":active_npc", kingdom_ladies_begin, kingdom_ladies_end),
            (assign, ":c", 1),
        (try_end),
        (eq, ":c", 1),
        (try_begin),
            (gt, ":x_name", 920),
            (assign, ":x_name", 0),
            (val_sub, ":y_name", 220),
        (try_end),
        (troop_set_slot, "trp_global_variables", g_show_troop_banner, 1),
        (create_mesh_overlay_with_tableau_material, reg0, -1, "tableau_troop_note_mesh", ":active_npc"),
        (position_set_x, pos1, ":x_name"),
        (position_set_y, pos1, ":y_name"),
        (overlay_set_position, reg0, pos1),
        (position_set_x, pos3, 500),
        (position_set_y, pos3, 500),
        (overlay_set_size, reg0, pos3),

        # #creat button
        (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
        (overlay_set_position, reg10, pos1),
        (position_set_x, pos3, 1000),
        (position_set_y, pos3, 2000),
        (overlay_set_size, reg10, pos3),
        (overlay_set_alpha, reg10, 0),
        (overlay_set_color, reg10, 0xDDDDDD),
        (troop_set_slot, "trp_temp_array_b", ":active_npc", reg10),

        (try_begin),
            (neq, ":active_npc", "trp_player"),
            (str_store_troop_name, s22, ":active_npc"),
            # (troop_get_slot, reg20, ":active_npc", slot_troop_player_relation),
            (call_script, "script_troop_get_player_relation", ":active_npc"),
            (assign, reg20, reg0),
            (create_text_overlay, reg1, "@{s22}, relation: {reg20}", tf_left_align),
            (position_set_x, pos1, ":x_name"),
            (store_sub, ":y_new", ":y_name", 20),
            (position_set_y, pos1, ":y_new"),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),
        (else_try),
            (str_store_troop_name, s22, ":active_npc"),
            (create_text_overlay, reg1, "@You.", tf_left_align),
            (position_set_x, pos1, ":x_name"),
            (store_sub, ":y_new", ":y_name", 20),
            (position_set_y, pos1, ":y_new"),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),
        (try_end),

        (try_begin),
            (neq, ":active_npc", "trp_player"),
            (troop_get_slot, ":personality", ":active_npc", slot_lord_reputation_type),
            (store_add, ":string", ":personality", "str_personality_archetypes"),
            (str_store_string, s22, ":string"),

            (create_text_overlay, reg1, "@Personality: {s22}", tf_left_align),
            (position_set_x, pos1, ":x_name"),
            (store_sub, ":y_new", ":y_name", 40),
            (position_set_y, pos1, ":y_new"),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),
        (try_end),

        (try_begin),
            (eq, "$g_notification_menu_var1", 1),#not emperor
            (call_script, "script_get_influence_cost_for_decision", ":active_npc", decision_legate, 0),
            (create_text_overlay, reg1, "@Influence cost: {reg0}", tf_left_align),

            (try_begin),
                (gt, ":influence", reg0),
                (overlay_set_color, reg1, 0x00b300),
            (else_try),
                (overlay_set_color, reg1, 0xff0000),
            (try_end),

            (position_set_x, pos1, ":x_name"),
            (store_sub, ":y_new", ":y_name", 80),
            (position_set_y, pos1, ":y_new"),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),
        (try_end),
        (val_add, ":x_name", 230),
    (try_end),
    (set_container_overlay, -1),#end scroll
  ]),

   ## Check for buttonpress
   (ti_on_presentation_event_state_change,
    [
    (store_trigger_param_1, ":button_pressed_id"),
    (try_begin),
        (eq, ":button_pressed_id", "$g_jrider_faction_report_return_to_menu"), # pressed  (Return to menu)
        (troop_set_slot, "trp_global_variables", g_show_troop_banner, 0),
        (start_presentation, "prsnt_legion_management"),
    (else_try),
        (eq, "$g_notification_menu_var1", 1),#not emperor
        (assign, ":end", active_npcs_end),
        (assign, ":choice", -1),

        (try_begin),
            (eq, "$g_notification_menu_var1", 0),#is emperor
            (assign, ":begin", active_npcs_begin),
        (else_try),
            (assign, ":begin", active_npcs_including_player_begin),
        (try_end),

        (try_for_range, ":slot", ":begin", ":end"),
            (try_begin),
                (eq, ":slot", active_npcs_including_player_begin),
                (assign, ":slot", "trp_player"),
            (try_end),
            (troop_slot_eq, "trp_temp_array_b", ":slot", ":button_pressed_id"),
            (assign, ":choice", ":slot"),
            (assign, ":end", -1),
        (try_end),

        (this_or_next|eq, ":choice", "trp_player"),
        (is_between, ":choice", active_npcs_begin, active_npcs_end),
        (call_script, "script_get_influence_cost_for_decision", ":choice", decision_legate, 0),
        (assign, ":cost", reg0),
        (try_begin),
            (troop_slot_ge, "trp_player", slot_troop_influence, ":cost"),
            (eq, ":end", -1),
            (try_begin),
                (gt, "$temp_troop", 1),
                (call_script, "script_troop_set_rank", "$temp_troop", slot_troop_legion, -1),
                (try_begin),
                    (troop_slot_eq, "$temp_troop", slot_lord_reputation_type, lrep_martial),
                    (call_script, "script_change_player_relation_with_troop", "$temp_troop", -30),
                (else_try),
                    (troop_slot_eq, "$temp_troop", slot_lord_reputation_type, lrep_quarrelsome),
                    (call_script, "script_change_player_relation_with_troop", "$temp_troop", -30),
                (else_try),
                    (troop_slot_eq, "$temp_troop", slot_lord_reputation_type, lrep_selfrighteous),
                    (call_script, "script_change_player_relation_with_troop", "$temp_troop", -25),
                (else_try),
                    (troop_slot_eq, "$temp_troop", slot_lord_reputation_type, lrep_cunning),
                    (call_script, "script_change_player_relation_with_troop", "$temp_troop", -25),
                (else_try),
                    (troop_slot_eq, "$temp_troop", slot_lord_reputation_type, lrep_debauched),
                    (call_script, "script_change_player_relation_with_troop", "$temp_troop", -20),
                (else_try),
                    (troop_slot_eq, "$temp_troop", slot_lord_reputation_type, lrep_goodnatured),
                    (call_script, "script_change_player_relation_with_troop", "$temp_troop", -15),
                (else_try),
                    (troop_slot_eq, "$temp_troop", slot_lord_reputation_type, lrep_upstanding),
                    (call_script, "script_change_player_relation_with_troop", "$temp_troop", -22),
                (else_try),
                    (call_script, "script_change_player_relation_with_troop", "$temp_troop", -26),
                (try_end),
                (call_script, "script_change_relation_with_family_friends_enemies", "$temp_troop", -1, 10, "trp_player"),
                (str_store_troop_name, s49, "$temp_troop"),
                (display_message, "@{s49} is dismissed from service."),
                (call_script, "script_change_lord_party_to_fit_rank", "$temp_troop"),
            (try_end),

            (assign, reg59, 1),
            (try_begin),
                (eq, "$temp4_1", 13),
                (try_begin),
                    (troop_slot_eq, "trp_players_legion", 1,1),
                    (str_store_troop_name_plural, s52, "trp_players_legion"),
                (else_try),
                    (assign, reg59, 0),
                (try_end),
            (else_try),
                (store_add, ":legion_string", "str_lover_talk", "$temp4_1"),
                (str_store_string, s52, ":legion_string"),
            (try_end),
            (eq, reg59, 1),
            (str_store_troop_name, s51, ":choice"),
            (display_log_message, "@{s51} is the new legate of {s52}!"),
            (call_script, "script_troop_set_rank", ":choice", slot_troop_govern, -1),
            (call_script, "script_troop_set_rank", ":choice", slot_troop_aux, -1),
            (call_script, "script_troop_set_rank", ":choice", slot_troop_legion, "$temp4_1"),

            (call_script, "script_change_lord_party_to_fit_rank", ":choice"),

            (try_begin),
                (troop_slot_eq, ":choice", slot_lord_reputation_type, lrep_martial),
                (call_script, "script_change_player_relation_with_troop", ":choice", 56),
            (else_try),
                (troop_slot_eq, ":choice", slot_lord_reputation_type, lrep_quarrelsome),
                (call_script, "script_change_player_relation_with_troop", ":choice", 35),
            (else_try),
                (troop_slot_eq, ":choice", slot_lord_reputation_type, lrep_selfrighteous),
                (call_script, "script_change_player_relation_with_troop", ":choice", 42),
            (else_try),
                (troop_slot_eq, ":choice", slot_lord_reputation_type, lrep_cunning),
                (call_script, "script_change_player_relation_with_troop", ":choice", 40),
            (else_try),
                (troop_slot_eq, ":choice", slot_lord_reputation_type, lrep_debauched),
                (call_script, "script_change_player_relation_with_troop", ":choice", 45),
            (else_try),
                (troop_slot_eq, ":choice", slot_lord_reputation_type, lrep_goodnatured),
                (call_script, "script_change_player_relation_with_troop", ":choice", 50),
            (else_try),
                (troop_slot_eq, ":choice", slot_lord_reputation_type, lrep_upstanding),
                (call_script, "script_change_player_relation_with_troop", ":choice", 52),
            (else_try),
                (call_script, "script_change_player_relation_with_troop", ":choice", 43),
            (try_end),
            (val_mul, ":cost", -1),
            (call_script, "script_change_influence", "trp_player", ":cost"),
            (store_current_day, ":day"),
            (val_add, ":day", 2),
            (troop_set_slot, "$g_talk_troop", slot_troop_bachus, ":day"),
            (show_object_details_overlay, 1),
            (presentation_set_duration, 0),
        (else_try),
            (display_message, "str_not_enough_influence", color_bad_news),
        (try_end),
    (else_try),
        (assign, ":end", active_npcs_end),
        (assign, ":choice", -1),
        (try_for_range, ":slot", active_npcs_begin, ":end"),
            (troop_slot_eq, "trp_temp_array_b", ":slot", ":button_pressed_id"),
            (assign, ":choice", ":slot"),
            (assign, ":end", -1),
        (try_end),
        (is_between, ":choice", active_npcs_begin, active_npcs_end),
        (eq, ":end", -1),
        (try_begin),
            (gt, "$temp_troop", 1),
            (call_script, "script_troop_set_rank", "$temp_troop", slot_troop_legion, -1),
            (try_begin),
                (troop_slot_eq, "$temp_troop", slot_lord_reputation_type, lrep_martial),
                (call_script, "script_change_player_relation_with_troop", "$temp_troop", -30),
            (else_try),
                (troop_slot_eq, "$temp_troop", slot_lord_reputation_type, lrep_quarrelsome),
                (call_script, "script_change_player_relation_with_troop", "$temp_troop", -30),
            (else_try),
                (troop_slot_eq, "$temp_troop", slot_lord_reputation_type, lrep_selfrighteous),
                (call_script, "script_change_player_relation_with_troop", "$temp_troop", -25),
            (else_try),
                (troop_slot_eq, "$temp_troop", slot_lord_reputation_type, lrep_cunning),
                (call_script, "script_change_player_relation_with_troop", "$temp_troop", -25),
            (else_try),
                (troop_slot_eq, "$temp_troop", slot_lord_reputation_type, lrep_debauched),
                (call_script, "script_change_player_relation_with_troop", "$temp_troop", -20),
            (else_try),
                (troop_slot_eq, "$temp_troop", slot_lord_reputation_type, lrep_goodnatured),
                (call_script, "script_change_player_relation_with_troop", "$temp_troop", -15),
            (else_try),
                (troop_slot_eq, "$temp_troop", slot_lord_reputation_type, lrep_upstanding),
                (call_script, "script_change_player_relation_with_troop", "$temp_troop", -22),
            (else_try),
                (call_script, "script_change_player_relation_with_troop", "$temp_troop", -26),
            (try_end),
            (str_store_troop_name, s49, "$temp_troop"),
            (display_message, "@{s49} is dismissed from service."),
            (call_script, "script_change_lord_party_to_fit_rank", "$temp_troop"),
        (try_end),

        (assign, reg59, 1),
        (try_begin),
            (eq, "$temp4_1", 13),
            (try_begin),
                (troop_slot_eq, "trp_players_legion", 1,1),
                (str_store_troop_name_plural, s52, "trp_players_legion"),
            (else_try),
                (assign, reg59, 0),
            (try_end),
        (else_try),
            (store_add, ":legion_string", "str_lover_talk", "$temp4_1"),
            (str_store_string, s52, ":legion_string"),
        (try_end),
        (eq, reg59, 1),

        (str_store_troop_name, s51, ":choice"),
        (display_log_message, "@{s51} is the new legate of {s52}!"),

        (try_begin), #if it is a companion
            (is_between, ":choice", companions_begin, companions_end),
            (troop_slot_eq, ":choice", slot_troop_occupation, slto_player_companion),
            #banner
            # (call_script, "script_set_troop_banner_according_to_faction", "$temp2", ":choice"),

            (remove_member_from_party, ":choice", "p_main_party"),
            (troop_set_slot, ":choice", slot_troop_occupation, slto_kingdom_hero),
            (troop_set_slot, ":choice", slot_troop_playerparty_history, dplmc_pp_history_granted_fief),
            (troop_set_slot, ":choice", slot_troop_leaded_party, -1),
            (troop_set_faction, ":choice", "fac_player_supporters_faction"),

            (try_begin),
                (troop_slot_eq, ":choice", slot_troop_original_faction, 0),
                (troop_set_slot, ":choice", slot_troop_original_faction, "$players_kingdom"),
            (try_end),

            (store_character_level, ":renown", ":choice"),
            (val_mul, ":renown", 15),
            (val_max, ":renown", 200),
            (call_script, "script_change_troop_renown", ":choice", ":renown"),

            (troop_get_slot, ":initial_wealth", ":choice", slot_troop_wealth),
            (store_troop_gold, ":initial_gold", ":choice"), #SB : account actual abstracted wealth
            (val_add, ":initial_gold", ":initial_wealth"),

            (store_skill_level, ":modifier", "skl_trade", ":choice"),
            (store_skill_level, ":skill_level", "skl_looting", ":choice"),
            (val_add, ":modifier", ":skill_level"),
            (val_add, ":modifier", 10),
            (val_mul, ":initial_gold", ":modifier"),
            (val_add, ":initial_gold", 5),
            (val_div, ":initial_gold", 10),

            (troop_set_slot, ":choice", slot_troop_wealth, ":initial_gold"), #represents accumulated loot
            ##diplomacy end+

            #SB : add a decent horse if none present
            (try_begin),
                (troop_slot_eq, ":choice", dplmc_slot_upgrade_horse, 1),
                (troop_get_inventory_slot, ":cur_horse", ":choice", ek_horse),
                (eq, ":cur_horse", -1),
                (store_random_in_range, ":item_no","itm_horse_1", "itm_steppe_horse_1"),
                (troop_set_inventory_slot, ":choice", ek_horse, ":item_no"),
                (store_random_in_range, ":imod", imod_stubborn, imod_fresh),
                (troop_set_inventory_slot_modifier, ":choice", ek_horse, ":imod"),
            (try_end),

            #civilian equipment
            (troop_add_item, ":choice", "itm_graves_simple_2"),
            (troop_add_item, ":choice", "itm_roman_toga"),

            #SB : change troop base type (if player hasn't touched it already) after adding equipment
            (try_begin),
                (troop_get_class, ":class", ":choice"),
                (eq, ":class", grc_infantry),
                (assign, ":slot_end", ek_head),
                (try_for_range, ":item_slot", ek_item_0, ":slot_end"),
                    (troop_get_inventory_slot, ":item_no", ":choice", ":item_slot"),
                    (gt, ":item_no", -1),
                    (item_get_type, ":itp", ":item_no"),
                    (this_or_next|is_between, ":itp", itp_type_bow, itp_type_goods),
                    (is_between, ":itp", itp_type_pistol, itp_type_bullets),
                    (assign, ":class", grc_archers),
                    (assign, ":slot_end", -1),
                (try_end),
                (try_begin),
                    (troop_get_inventory_slot, ":cur_horse", ":choice", ek_horse),
                    (gt, ":cur_horse", -1),
                    (assign, ":class", grc_cavalry),
                (try_end),
                (troop_set_class, ":choice", ":class"),
            (try_end),
            (troop_set_auto_equip, ":choice", 1), #dckplmc
            (call_script, "script_dplmc_npc_morale", ":choice", 0), #just get the number
            (store_div, ":relation_boost", reg0, 3),
            (call_script, "script_troop_change_relation_with_troop", ":choice", "trp_player", ":relation_boost"),
        (try_end),#END governor

        (call_script, "script_troop_set_rank", ":choice", slot_troop_govern, -1),
        (call_script, "script_troop_set_rank", ":choice", slot_troop_aux, -1),
        (call_script, "script_troop_set_rank", ":choice", slot_troop_legion, "$temp4_1"),
        (call_script, "script_change_lord_party_to_fit_rank", ":choice"),

        (try_begin),
            (troop_slot_eq, ":choice", slot_lord_reputation_type, lrep_martial),
            (call_script, "script_change_player_relation_with_troop", ":choice", 56),
        (else_try),
            (troop_slot_eq, ":choice", slot_lord_reputation_type, lrep_quarrelsome),
            (call_script, "script_change_player_relation_with_troop", ":choice", 35),
        (else_try),
            (troop_slot_eq, ":choice", slot_lord_reputation_type, lrep_selfrighteous),
            (call_script, "script_change_player_relation_with_troop", ":choice", 42),
        (else_try),
            (troop_slot_eq, ":choice", slot_lord_reputation_type, lrep_cunning),
            (call_script, "script_change_player_relation_with_troop", ":choice", 40),
        (else_try),
            (troop_slot_eq, ":choice", slot_lord_reputation_type, lrep_debauched),
            (call_script, "script_change_player_relation_with_troop", ":choice", 45),
        (else_try),
            (troop_slot_eq, ":choice", slot_lord_reputation_type, lrep_goodnatured),
            (call_script, "script_change_player_relation_with_troop", ":choice", 50),
        (else_try),
            (troop_slot_eq, ":choice", slot_lord_reputation_type, lrep_upstanding),
            (call_script, "script_change_player_relation_with_troop", ":choice", 52),
        (else_try),
            (call_script, "script_change_player_relation_with_troop", ":choice", 43),
        (try_end),

        (start_presentation, "prsnt_legion_management"),
    (try_end),
  ]),

  (ti_on_presentation_run, [
    (try_begin),
        (key_clicked, key_space),
        (set_fixed_point_multiplier, 1000),
        (mouse_get_position, pos31),

        (position_get_x, reg31, pos31),
        (position_get_y, reg32, pos31),

        (display_message, "@X: {reg31} | Y: {reg32}"),
    (try_end),
  ]),
]),

("aux_selection", 0, 0, [
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    # #0. BACKROUND
    (create_mesh_overlay, reg0, "mesh_load_window"),
    (position_set_x, pos1, -1),
    (position_set_y, pos1, -1),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 1002),
    (position_set_y, pos1, 1002),
    (overlay_set_size, reg0, pos1),

    #init variables
    (assign, ":num_lords", 0),

    (try_begin),
        (eq, "$g_notification_menu_var1", 0),#is emperor
        (assign, ":limit_npcs", active_npcs_begin),
    (else_try),
        (assign, ":limit_npcs", active_npcs_including_player_begin),
    (try_end),
    (try_for_range, ":active_npc", ":limit_npcs", active_npcs_end),
        (troop_set_slot, "trp_temp_array_b", ":active_npc", 0),

        (try_begin),
            (eq, ":active_npc", active_npcs_including_player_begin),
            (assign, ":active_npc", "trp_player"),
            (assign, ":npc_faction", "$players_kingdom"),
        (else_try),
            (store_troop_faction, ":npc_faction", ":active_npc"),
        (try_end),

        (assign, ":c", 0),
        (try_begin),
            (eq, ":npc_faction", "$players_kingdom"),
            (troop_slot_eq, ":active_npc", slot_troop_occupation, slto_kingdom_hero),
            (neg|troop_slot_ge, ":active_npc", slot_troop_legion, 1),
            (neg|troop_slot_ge, ":active_npc", slot_troop_aux, 1),
            (neg|troop_slot_ge, ":active_npc", slot_troop_govern, 1),
            (assign, ":c", 1),
        (else_try),
            (eq, "$g_notification_menu_var1", 0),#is emperor
            (main_party_has_troop, ":active_npc"),
            (neq, ":active_npc", "trp_npc35"),
            ##diplomacy start+ Prevent this from appearing for already-enfeoffed troops
            (call_script, "script_get_number_of_hero_centers", ":active_npc"),
            (eq, reg0, 0),
            (neg|troop_slot_eq, ":active_npc", slot_troop_playerparty_history, dplmc_pp_history_lord_rejoined),
            (neg|troop_slot_eq, ":active_npc", slot_troop_playerparty_history, dplmc_pp_history_granted_fief),
            (neg|troop_slot_eq, ":active_npc", slot_troop_occupation, slto_kingdom_hero),
            (neg|is_between, ":active_npc", lords_begin, lords_end),
            (neg|is_between, ":active_npc", kings_begin, kings_end),
            (neg|is_between, ":active_npc", kingdom_ladies_begin, kingdom_ladies_end),
            (assign, ":c", 1),
        (try_end),
        (eq, ":c", 1),

        (val_add, ":num_lords", 1),
    (try_end),

    # Presentation title, centered at the top
    (store_add, ":slot", slot_aux_legion_begin, "$temp4_1"),
    (troop_get_slot, ":legion", "trp_province_array", ":slot"),
    (store_add, ":slot_hq", slot_legion_home_begin, ":legion"),
    (troop_get_slot, "$temp4", "trp_province_array", ":slot_hq"),

    (store_add, ":string", ":legion", "str_lover_talk"),
    (str_store_string, s19, ":string"),

    (store_add, ":cohort", "$temp4_1", "pt_cohors_aux"),
    (call_script, "script_get_cohort_name_to_s5", ":cohort"),
    (try_begin),
        (gt, "$temp4", 0),
        (str_store_party_name, s20, "$temp4"),
        (str_store_string, s23, "@The {s5} is part of {s19} with headquarters in {s20}"),
    (else_try),
        (str_store_string, s23, "@The {s5} is part of {s19}, which has no headquarters currently."),
    (try_end),

    (store_add, ":slot_tribune",slot_aux_commander_begin, "$temp4_1"),
    (troop_get_slot, "$temp_troop", "trp_province_array", ":slot_tribune"),
    (try_begin),
        (gt, "$temp_troop", 0),
        (str_store_troop_name, s20, "$temp_troop"),
        (str_store_string, s21, "@{s20} is the current tribune. {s23}."),
    (else_try),
        (eq, "$temp_troop", 0),
        (str_store_string, s21, "@You are the current tribune. {s23}."),
    (else_try),
        (str_store_string, s21, "@The legion has no tribune at all. {s23}."),
    (try_end),
    (try_begin),
        (eq, "$g_notification_menu_var1", 0),#is emperor
        (create_text_overlay, reg1, "@_You can select a new tribune for {s5}. {s21}_", tf_center_justify),
        (position_set_x, pos1, 1100),
        (position_set_y, pos1, 1100),
        (overlay_set_size, reg1, pos1),
    (else_try),
        (troop_get_slot, ":influence", "trp_player", slot_troop_influence),
        (assign, reg23, ":influence"),
        (create_text_overlay, reg1, "@_You can suggest another tribune for {s5}. {s21} Your influence: {reg23}_", tf_center_justify),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
    (try_end),
    (position_set_x, pos1, 550), # Higher, means more toward the right
    (position_set_y, pos1, 680), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),


    (try_begin),
        (gt, "$temp_troop", -1),
        (troop_get_slot, ":personality", "$temp_troop", slot_lord_reputation_type),
        (store_add, ":string", ":personality", "str_personality_archetypes"),
        (str_store_string, s22, ":string"),
        # (troop_get_slot, reg20, "$temp_troop", slot_troop_player_relation),
        (call_script, "script_troop_get_player_relation", "$temp_troop"),
        (assign, reg20, reg0),
        (create_text_overlay, reg1, "@Current relation with the tribune: {reg20}. Personality of the tribune: {s22}", tf_center_justify),
        (position_set_x, pos1, 550), # Higher, means more toward the right
        (position_set_y, pos1, 655), # Higher, means more toward the top
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 1100),
        (position_set_y, pos1, 1100),
        (overlay_set_size, reg1, pos1),
    (try_end),

    (try_begin),
        (gt, "$temp_troop", -1),
        # (store_mul, ":troop", "$temp_troop", 2),
        (create_mesh_overlay_with_tableau_material, reg0, -1, "tableau_troop_note_mesh", "$temp_troop"),
        (position_set_x, pos1, 10),
        (position_set_y, pos1, 540),
        (overlay_set_position, reg0, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 500),
        (overlay_set_size, reg0, pos1),
    (try_end),


    (create_text_overlay, reg1, "@Hint: To change the tribune press on the image of the respective character!", tf_center_justify),
    (position_set_x, pos1, 550), # Higher, means more toward the right
    (position_set_y, pos1, 620), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (overlay_set_color, reg1, 0x3380FF),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),

    # Back to menu - graphical button
    (create_game_button_overlay, reg1, "str_return"),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 23),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_jrider_faction_report_return_to_menu", reg1),

    ##creat a lines
    (create_mesh_overlay, reg1, "mesh_white_plane"),
    (overlay_set_color, reg1, 0x000000),#line color
    (position_set_x, pos3, 200000),
    (position_set_y, pos3, 50),
    (overlay_set_size, reg1, pos3),
    (position_set_x, pos3, 0),
    (position_set_y, pos3, 530),
    (overlay_set_position, reg1, pos3),


    (create_text_overlay, reg1, "@Available nobles and companions:", tf_left_align),
    (position_set_x, pos1, 25), # Higher, means more toward the right
    (position_set_y, pos1, 510), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (overlay_set_color, reg1, 0x00007F),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),

    # # clear the string globals that we'll use
    (str_clear, s0),
    # (str_clear, s20),
    # (str_clear, s21),
    # (str_clear, s23),
    # (str_clear, s24),
    # # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
    (create_text_overlay, reg1, s0, tf_scrollable_style_2),
    (position_set_x, pos1, 50),
    (position_set_y, pos1, 50),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 450),
    (overlay_set_area_size, reg1, pos1),

    # (position_set_x, pos1, 0),
    (store_div, ":y_name", ":num_lords", 4),##get y for size of the scrollable overlay
    (val_mul, ":y_name", 210),
    (assign, ":x_name", 20),
    #text size
    (position_set_x, pos2, 900),
    (position_set_y, pos2, 900),

    # (assign, ":slot", 0),
    (set_container_overlay, reg1),#start scroll
    (try_for_range, ":active_npc", ":limit_npcs", active_npcs_end),
        (try_begin),
            (eq, ":active_npc", active_npcs_including_player_begin),
            (assign, ":active_npc", "trp_player"),
            (assign, ":npc_faction", "$players_kingdom"),
        (else_try),
            (store_troop_faction, ":npc_faction", ":active_npc"),
        (try_end),
        (assign, ":c", 0),
        (try_begin),
            (eq, ":npc_faction", "$players_kingdom"),
            (troop_slot_eq, ":active_npc", slot_troop_occupation, slto_kingdom_hero),
            (neg|troop_slot_ge, ":active_npc", slot_troop_legion, 1),
            (neg|troop_slot_ge, ":active_npc", slot_troop_aux, 1),
            (neg|troop_slot_ge, ":active_npc", slot_troop_govern, 1),
            (assign, ":c", 1),
        (else_try),
            (eq, "$g_notification_menu_var1", 0),#is emperor
            (main_party_has_troop, ":active_npc"),
            (neq, ":active_npc", "trp_npc35"),
            ##diplomacy start+ Prevent this from appearing for already-enfeoffed troops
            (call_script, "script_get_number_of_hero_centers", ":active_npc"),
            (eq, reg0, 0),
            (neg|troop_slot_eq, ":active_npc", slot_troop_playerparty_history, dplmc_pp_history_lord_rejoined),
            (neg|troop_slot_eq, ":active_npc", slot_troop_playerparty_history, dplmc_pp_history_granted_fief),
            (neg|troop_slot_eq, ":active_npc", slot_troop_occupation, slto_kingdom_hero),
            (neg|is_between, ":active_npc", lords_begin, lords_end),
            (neg|is_between, ":active_npc", kings_begin, kings_end),
            (neg|is_between, ":active_npc", kingdom_ladies_begin, kingdom_ladies_end),
            (assign, ":c", 1),
        (try_end),
        (eq, ":c", 1),
        (try_begin),
            (gt, ":x_name", 920),
            (assign, ":x_name", 0),
            (val_sub, ":y_name", 220),
        (try_end),
        (troop_set_slot, "trp_global_variables", g_show_troop_banner, 1),
        (create_mesh_overlay_with_tableau_material, reg0, -1, "tableau_troop_note_mesh", ":active_npc"),
        (position_set_x, pos1, ":x_name"),
        (position_set_y, pos1, ":y_name"),
        (overlay_set_position, reg0, pos1),
        (position_set_x, pos3, 500),
        (position_set_y, pos3, 500),
        (overlay_set_size, reg0, pos3),

        # #creat button
        (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
        (overlay_set_position, reg10, pos1),
        (position_set_x, pos3, 1000),
        (position_set_y, pos3, 2000),
        (overlay_set_size, reg10, pos3),
        (overlay_set_alpha, reg10, 0),
        (overlay_set_color, reg10, 0xDDDDDD),
        (troop_set_slot, "trp_temp_array_b", ":active_npc", reg10),

        (try_begin),
            (neq, ":active_npc", "trp_player"),
            (str_store_troop_name, s22, ":active_npc"),
            # (troop_get_slot, reg20, ":active_npc", slot_troop_player_relation),
            (call_script, "script_troop_get_player_relation", ":active_npc"),
            (assign, reg20, reg0),
            (create_text_overlay, reg1, "@{s22}, relation: {reg20}", tf_left_align),
            (position_set_x, pos1, ":x_name"),
            (store_sub, ":y_new", ":y_name", 20),
            (position_set_y, pos1, ":y_new"),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),
        (else_try),
            (str_store_troop_name, s22, ":active_npc"),
            (create_text_overlay, reg1, "@You.", tf_left_align),
            (position_set_x, pos1, ":x_name"),
            (store_sub, ":y_new", ":y_name", 20),
            (position_set_y, pos1, ":y_new"),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),
        (try_end),

        (try_begin),
            (neq, ":active_npc", "trp_player"),
            (troop_get_slot, ":personality", ":active_npc", slot_lord_reputation_type),
            (store_add, ":string", ":personality", "str_personality_archetypes"),
            (str_store_string, s22, ":string"),

            (create_text_overlay, reg1, "@Personality: {s22}", tf_left_align),
            (position_set_x, pos1, ":x_name"),
            (store_sub, ":y_new", ":y_name", 40),
            (position_set_y, pos1, ":y_new"),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),
        (try_end),

        (try_begin),
            (eq, "$g_notification_menu_var1", 1),#not emperor
            (call_script, "script_get_influence_cost_for_decision", ":active_npc", decision_legate, 0),
            (create_text_overlay, reg1, "@Influence cost: {reg0}", tf_left_align),

            (try_begin),
                (gt, ":influence", reg0),
                (overlay_set_color, reg1, 0x00b300),
            (else_try),
                (overlay_set_color, reg1, 0xff0000),
            (try_end),

            (position_set_x, pos1, ":x_name"),
            (store_sub, ":y_new", ":y_name", 80),
            (position_set_y, pos1, ":y_new"),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),
        (try_end),
        (val_add, ":x_name", 230),
    (try_end),
    (set_container_overlay, -1),#end scroll
  ]),

  ## Check for buttonpress
  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":button_pressed_id"),
    (try_begin),
        (eq, ":button_pressed_id", "$g_jrider_faction_report_return_to_menu"), # pressed  (Return to menu)
        (troop_set_slot, "trp_global_variables", g_show_troop_banner, 0),
        (start_presentation, "prsnt_legion_management"),
    (else_try),
        (eq, "$g_notification_menu_var1", 1),#not emperor
        (assign, ":end", active_npcs_end),
        (assign, ":choice", -1),

        (try_begin),
            (eq, "$g_notification_menu_var1", 0),#is emperor
            (assign, ":begin", active_npcs_begin),
        (else_try),
            (assign, ":begin", active_npcs_including_player_begin),
        (try_end),

        (try_for_range, ":slot", ":begin", ":end"),
            (try_begin),
                (eq, ":slot", active_npcs_including_player_begin),
                (assign, ":slot", "trp_player"),
            (try_end),
            (troop_slot_eq, "trp_temp_array_b", ":slot", ":button_pressed_id"),
            (assign, ":choice", ":slot"),
            (assign, ":end", -1),
        (try_end),

        (this_or_next|eq, ":choice", "trp_player"),
        (is_between, ":choice", active_npcs_begin, active_npcs_end),
        (call_script, "script_get_influence_cost_for_decision", ":choice", decision_legate, 0),
        (assign, ":cost", reg0),
        (try_begin),
            (troop_slot_ge, "trp_player", slot_troop_influence, ":cost"),
            (eq, ":end", -1),
            (try_begin),
                (gt, "$temp_troop", 1),
                (call_script, "script_troop_set_rank", "$temp_troop", slot_troop_aux, -1),
                (try_begin),
                    (troop_slot_eq, "$temp_troop", slot_lord_reputation_type, lrep_martial),
                    (call_script, "script_change_player_relation_with_troop", "$temp_troop", -30),
                (else_try),
                    (troop_slot_eq, "$temp_troop", slot_lord_reputation_type, lrep_quarrelsome),
                    (call_script, "script_change_player_relation_with_troop", "$temp_troop", -30),
                (else_try),
                    (troop_slot_eq, "$temp_troop", slot_lord_reputation_type, lrep_selfrighteous),
                    (call_script, "script_change_player_relation_with_troop", "$temp_troop", -25),
                (else_try),
                    (troop_slot_eq, "$temp_troop", slot_lord_reputation_type, lrep_cunning),
                    (call_script, "script_change_player_relation_with_troop", "$temp_troop", -25),
                (else_try),
                    (troop_slot_eq, "$temp_troop", slot_lord_reputation_type, lrep_debauched),
                    (call_script, "script_change_player_relation_with_troop", "$temp_troop", -20),
                (else_try),
                    (troop_slot_eq, "$temp_troop", slot_lord_reputation_type, lrep_goodnatured),
                    (call_script, "script_change_player_relation_with_troop", "$temp_troop", -15),
                (else_try),
                    (troop_slot_eq, "$temp_troop", slot_lord_reputation_type, lrep_upstanding),
                    (call_script, "script_change_player_relation_with_troop", "$temp_troop", -22),
                (else_try),
                    (call_script, "script_change_player_relation_with_troop", "$temp_troop", -26),
                (try_end),
                (call_script, "script_change_relation_with_family_friends_enemies", "$temp_troop", -1, 10, "trp_player"),
                (str_store_troop_name, s49, "$temp_troop"),
                (display_message, "@{s49} is dismissed from service."),
                (call_script, "script_change_lord_party_to_fit_rank", "$temp_troop"),
            (try_end),

            (store_add, ":cohort", "$temp4_1", "pt_cohors_aux"),
            (call_script, "script_get_cohort_name_to_s5", ":cohort"),
            (str_store_troop_name, s51, ":choice"),
            (display_log_message, "@{s51} is the new tribune of {s5}!"),
            (call_script, "script_troop_set_rank", ":choice", slot_troop_govern, -1),
            (call_script, "script_troop_set_rank", ":choice", slot_troop_legion, -1),
            (call_script, "script_troop_set_rank", ":choice", slot_troop_aux, ":cohort"),

            (call_script, "script_change_lord_party_to_fit_rank", ":choice"),

            (try_begin),
                (troop_slot_eq, ":choice", slot_lord_reputation_type, lrep_martial),
                (call_script, "script_change_player_relation_with_troop", ":choice", 56),
            (else_try),
                (troop_slot_eq, ":choice", slot_lord_reputation_type, lrep_quarrelsome),
                (call_script, "script_change_player_relation_with_troop", ":choice", 35),
            (else_try),
                (troop_slot_eq, ":choice", slot_lord_reputation_type, lrep_selfrighteous),
                (call_script, "script_change_player_relation_with_troop", ":choice", 42),
            (else_try),
                (troop_slot_eq, ":choice", slot_lord_reputation_type, lrep_cunning),
                (call_script, "script_change_player_relation_with_troop", ":choice", 40),
            (else_try),
                (troop_slot_eq, ":choice", slot_lord_reputation_type, lrep_debauched),
                (call_script, "script_change_player_relation_with_troop", ":choice", 45),
            (else_try),
                (troop_slot_eq, ":choice", slot_lord_reputation_type, lrep_goodnatured),
                (call_script, "script_change_player_relation_with_troop", ":choice", 50),
            (else_try),
                (troop_slot_eq, ":choice", slot_lord_reputation_type, lrep_upstanding),
                (call_script, "script_change_player_relation_with_troop", ":choice", 52),
            (else_try),
                (call_script, "script_change_player_relation_with_troop", ":choice", 43),
            (try_end),
            (val_mul, ":cost", -1),
            (call_script, "script_change_influence", "trp_player", ":cost"),
            (store_current_day, ":day"),
            (val_add, ":day", 2),
            (troop_set_slot, "$g_talk_troop", slot_troop_bachus, ":day"),
            (show_object_details_overlay, 1),
            (presentation_set_duration, 0),
        (else_try),
            (display_message, "str_not_enough_influence", color_bad_news),
        (try_end),
    (else_try),
        (assign, ":end", active_npcs_end),
        (assign, ":choice", -1),
        (try_for_range, ":slot", active_npcs_begin, ":end"),
            (troop_slot_eq, "trp_temp_array_b", ":slot", ":button_pressed_id"),
            (assign, ":choice", ":slot"),
            (assign, ":end", -1),
        (try_end),
        (is_between, ":choice", active_npcs_begin, active_npcs_end),
        (eq, ":end", -1),
        (try_begin),
            (gt, "$temp_troop", 1),
            (call_script, "script_troop_set_rank", "$temp_troop", slot_troop_aux, -1),
            (try_begin),
                (troop_slot_eq, "$temp_troop", slot_lord_reputation_type, lrep_martial),
                (call_script, "script_change_player_relation_with_troop", "$temp_troop", -30),
            (else_try),
                (troop_slot_eq, "$temp_troop", slot_lord_reputation_type, lrep_quarrelsome),
                (call_script, "script_change_player_relation_with_troop", "$temp_troop", -30),
            (else_try),
                (troop_slot_eq, "$temp_troop", slot_lord_reputation_type, lrep_selfrighteous),
                (call_script, "script_change_player_relation_with_troop", "$temp_troop", -25),
            (else_try),
                (troop_slot_eq, "$temp_troop", slot_lord_reputation_type, lrep_cunning),
                (call_script, "script_change_player_relation_with_troop", "$temp_troop", -25),
            (else_try),
                (troop_slot_eq, "$temp_troop", slot_lord_reputation_type, lrep_debauched),
                (call_script, "script_change_player_relation_with_troop", "$temp_troop", -20),
            (else_try),
                (troop_slot_eq, "$temp_troop", slot_lord_reputation_type, lrep_goodnatured),
                (call_script, "script_change_player_relation_with_troop", "$temp_troop", -15),
            (else_try),
                (troop_slot_eq, "$temp_troop", slot_lord_reputation_type, lrep_upstanding),
                (call_script, "script_change_player_relation_with_troop", "$temp_troop", -22),
            (else_try),
                (call_script, "script_change_player_relation_with_troop", "$temp_troop", -26),
            (try_end),
            (str_store_troop_name, s49, "$temp_troop"),
            (display_message, "@{s49} is dismissed from service."),
            (call_script, "script_change_lord_party_to_fit_rank", "$temp_troop"),
        (try_end),


        (store_add, ":cohort", "$temp4_1", "pt_cohors_aux"),
        (call_script, "script_get_cohort_name_to_s5", ":cohort"),
        (str_store_troop_name, s51, ":choice"),
        (display_log_message, "@{s51} is the new tribune of {s5}!"),

        (try_begin), #if it is a companion
            (is_between, ":choice", companions_begin, companions_end),
            (troop_slot_eq, ":choice", slot_troop_occupation, slto_player_companion),
            #banner
            # (call_script, "script_set_troop_banner_according_to_faction", ":choice", "$players_kingdom"),

            (remove_member_from_party, ":choice", "p_main_party"),
            (troop_set_slot, ":choice", slot_troop_occupation, slto_kingdom_hero),
            (troop_set_slot, ":choice", slot_troop_playerparty_history, dplmc_pp_history_granted_fief),
            (troop_set_slot, ":choice", slot_troop_leaded_party, -1),
            (troop_set_faction, ":choice", "fac_player_supporters_faction"),

            (try_begin),
                (troop_slot_eq, ":choice", slot_troop_original_faction, 0),
                (troop_set_slot, ":choice", slot_troop_original_faction, "$players_kingdom"),
            (try_end),

            (store_character_level, ":renown", ":choice"),
            (val_mul, ":renown", 15),
            (val_max, ":renown", 200),
            (call_script, "script_change_troop_renown", ":choice", ":renown"),

            (troop_get_slot, ":initial_wealth", ":choice", slot_troop_wealth),
            (store_troop_gold, ":initial_gold", ":choice"), #SB : account actual abstracted wealth
            (val_add, ":initial_gold", ":initial_wealth"),

            (store_skill_level, ":modifier", "skl_trade", ":choice"),
            (store_skill_level, ":skill_level", "skl_looting", ":choice"),
            (val_add, ":modifier", ":skill_level"),
            (val_add, ":modifier", 10),
            (val_mul, ":initial_gold", ":modifier"),
            (val_add, ":initial_gold", 5),
            (val_div, ":initial_gold", 10),

            (troop_set_slot, ":choice", slot_troop_wealth, ":initial_gold"), #represents accumulated loot
            ##diplomacy end+

            #SB : add a decent horse if none present
            (try_begin),
                (troop_slot_eq, ":choice", dplmc_slot_upgrade_horse, 1),
                (troop_get_inventory_slot, ":cur_horse", ":choice", ek_horse),
                (eq, ":cur_horse", -1),
                (store_random_in_range, ":item_no","itm_horse_1", "itm_steppe_horse_1"),
                (troop_set_inventory_slot, ":choice", ek_horse, ":item_no"),
                (store_random_in_range, ":imod", imod_stubborn, imod_fresh),
                (troop_set_inventory_slot_modifier, ":choice", ek_horse, ":imod"),
            (try_end),

            #civilian equipment
            (troop_add_item, ":choice", "itm_graves_simple_2"),
            (troop_add_item, ":choice", "itm_roman_toga"),

            #SB : change troop base type (if player hasn't touched it already) after adding equipment
            (try_begin),
                (troop_get_class, ":class", ":choice"),
                (eq, ":class", grc_infantry),
                (assign, ":slot_end", ek_head),
                (try_for_range, ":item_slot", ek_item_0, ":slot_end"),
                    (troop_get_inventory_slot, ":item_no", ":choice", ":item_slot"),
                    (gt, ":item_no", -1),
                    (item_get_type, ":itp", ":item_no"),
                    (this_or_next|is_between, ":itp", itp_type_bow, itp_type_goods),
                    (is_between, ":itp", itp_type_pistol, itp_type_bullets),
                    (assign, ":class", grc_archers),
                    (assign, ":slot_end", -1),
                (try_end),
                (try_begin),
                    (troop_get_inventory_slot, ":cur_horse", ":choice", ek_horse),
                    (gt, ":cur_horse", -1),
                    (assign, ":class", grc_cavalry),
                (try_end),
                (troop_set_class, ":choice", ":class"),
            (try_end),
            (troop_set_auto_equip, ":choice", 1), #dckplmc
            (call_script, "script_dplmc_npc_morale", ":choice", 0), #just get the number
            (store_div, ":relation_boost", reg0, 3),
            (call_script, "script_troop_change_relation_with_troop", ":choice", "trp_player", ":relation_boost"),
        (try_end),#END governor
        (call_script, "script_troop_set_rank", ":choice", slot_troop_govern, -1),
        (call_script, "script_troop_set_rank", ":choice", slot_troop_legion, -1),
        (call_script, "script_troop_set_rank", ":choice", slot_troop_aux, ":cohort"),
        (call_script, "script_change_lord_party_to_fit_rank", ":choice"),

        (try_begin),
            (troop_slot_eq, ":choice", slot_lord_reputation_type, lrep_martial),
            (call_script, "script_change_player_relation_with_troop", ":choice", 56),
        (else_try),
            (troop_slot_eq, ":choice", slot_lord_reputation_type, lrep_quarrelsome),
            (call_script, "script_change_player_relation_with_troop", ":choice", 35),
        (else_try),
            (troop_slot_eq, ":choice", slot_lord_reputation_type, lrep_selfrighteous),
            (call_script, "script_change_player_relation_with_troop", ":choice", 42),
        (else_try),
            (troop_slot_eq, ":choice", slot_lord_reputation_type, lrep_cunning),
            (call_script, "script_change_player_relation_with_troop", ":choice", 40),
        (else_try),
            (troop_slot_eq, ":choice", slot_lord_reputation_type, lrep_debauched),
            (call_script, "script_change_player_relation_with_troop", ":choice", 45),
        (else_try),
            (troop_slot_eq, ":choice", slot_lord_reputation_type, lrep_goodnatured),
            (call_script, "script_change_player_relation_with_troop", ":choice", 50),
        (else_try),
            (troop_slot_eq, ":choice", slot_lord_reputation_type, lrep_upstanding),
            (call_script, "script_change_player_relation_with_troop", ":choice", 52),
        (else_try),
            (call_script, "script_change_player_relation_with_troop", ":choice", 43),
        (try_end),
        (start_presentation, "prsnt_legion_management"),
    (try_end),
  ]),

  (ti_on_presentation_run, [
    (try_begin),
        (key_clicked, key_space),
        (set_fixed_point_multiplier, 1000),
        (mouse_get_position, pos31),

        (position_get_x, reg31, pos31),
        (position_get_y, reg32, pos31),

        (display_message, "@X: {reg31} | Y: {reg32}"),
    (try_end),
  ]),
]),

("legion_select_hq", 0, 0, [
    (ti_on_presentation_load,
      [
        (presentation_set_duration, 999999),
        (set_fixed_point_multiplier, 1000),

        # # #0. BACKROUND
        (create_mesh_overlay, reg0, "mesh_load_window"),
        (position_set_x, pos1, -1),
        (position_set_y, pos1, -1),
        (overlay_set_position, reg0, pos1),
        (position_set_x, pos1, 1002),
        (position_set_y, pos1, 1002),
        (overlay_set_size, reg0, pos1),

        (try_begin),
            (eq, "$temp4_1", 13),#player
            (str_store_troop_name_plural, s20, "trp_players_legion"),#handle player legion
        (else_try),
            (store_add, ":string", "$temp4_1", "str_lover_talk"),
            (str_store_string, s20, ":string"),
        (try_end),
        (str_store_string, s1, ":string"),
        (str_store_party_name, s2, "$temp4"),
        (create_text_overlay, reg1, "@You can change the headquarter of the {s1} by pressing on the respective town. Currently it is in {s2} and marked with an eagle.", tf_center_justify|tf_scrollable),
        (position_set_x, pos1, 1100),
        (position_set_y, pos1, 1100),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 770),
        (position_set_y, pos1, 560),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 190),
        (position_set_y, pos1, 150),
        (overlay_set_area_size, reg1, pos1),
      ## initialization part begin

        # presentation obj: begin from top left corner
        (assign, ":init_pos_x", 15), # init x
        (assign, ":init_pos_y", 725), # init y

        # world map
        (assign, ":min_map_x", -300*1000),
        (assign, ":max_map_x", 270*1000),
        (assign, ":min_map_y", -225*1000),
        (assign, ":max_map_y", 210*1000),

        # also begin from top left corner
        (assign, ":init_map_x", ":min_map_x"), # init map_x
        (assign, ":init_map_y", ":max_map_y"), # init map_y

        # move length of p_temp_party, total_cols and total_rows
        (assign, ":party_move_length_x", 2750*(520/360)),
        (assign, ":party_move_length_y", 2750*(535/290)),
        (store_sub, ":total_cols", ":max_map_x", ":min_map_x"),
        (store_sub, ":total_rows", ":max_map_y", ":min_map_y"),
        (val_div, ":total_cols", ":party_move_length_x"),
        (val_div, ":total_rows", ":party_move_length_y"),

        # color_block_length
        (assign, ":color_block_length", 4),
        (store_mul, ":color_block_size", ":color_block_length", 50),
        (position_set_x, pos2, ":color_block_size"),
        (position_set_y, pos2, ":color_block_size"),


        (try_for_range, ":i", walled_centers_begin, walled_centers_end),
            (troop_set_slot, "trp_temp_array_a", ":i", -1),
            (troop_set_slot, "trp_temp_array_b", ":i", -1),
        (try_end),

        (assign, ":pos_x", ":init_pos_x"), # assign to cur pos_x
        (assign, ":pos_y", ":init_pos_y"), # assign to cur pos_y
        (assign, ":map_x", ":init_map_x"), # assign to cur map_x
        (assign, ":map_y", ":init_map_y"), # assign to cur map_y
        ## draw whole map
        (try_for_range, ":unused_rows", 0, ":total_rows"),
            (try_for_range, ":unused_cols", 0, ":total_cols"),
                (assign, ":dest_color", 0xFFFFFF), # default
                (position_set_x, pos3, ":map_x"),
                (position_set_y, pos3, ":map_y"),
                (party_set_position, "p_temp_party", pos3),
                (party_get_current_terrain, ":current_terrain", "p_temp_party"),
                (try_begin),
                    (this_or_next|eq, ":current_terrain", rt_water),
                    (this_or_next|eq, ":current_terrain", rt_deep_water),
                    (this_or_next|eq, ":current_terrain", rt_river),
                    (eq, ":current_terrain", rt_bridge),
                    (assign, ":dest_color", 0x0066FF), # default
                (else_try),
                    (call_script, "script_get_closest_center_and_minor", "p_temp_party"),
                    (assign, ":nearest_center", reg0),
                    (try_begin),
                        (gt, ":nearest_center", -1),
                        (store_faction_of_party, ":center_faction", ":nearest_center"),
                        (this_or_next|is_between, ":center_faction", kingdoms_begin, kingdoms_end),
                        (is_between, ":center_faction", minor_kingdoms_begin, minor_kingdoms_end),
                        (faction_get_color, ":dest_color", ":center_faction"),
                    (try_end),
                (try_end),
                (create_mesh_overlay, reg0, "mesh_white_plane"),
                (overlay_set_color, reg0, ":dest_color"),
                (position_set_x, pos1, ":pos_x"),
                (position_set_y, pos1, ":pos_y"),
                (overlay_set_position, reg0, pos1),
                (overlay_set_size, reg0, pos2), # color block size

                ## draw borderlines begin [optional]
                # borderlines length and whidth
                (store_add, ":line_length", ":color_block_size", 1*50),
                (assign, ":line_whidth", 1*50),
                # find bound_center
                (call_script, "script_get_closest_center_and_minor", "p_temp_party"),
                (assign, ":nearest_center", reg0),
                (try_begin),
                    (lt, ":nearest_center", last_static_party),
                    (gt, ":nearest_center", -1),
                    (party_slot_eq, ":nearest_center", slot_party_type, spt_village),
                    (party_get_slot, ":bound_center", ":nearest_center", slot_village_bound_center),
                (else_try),
                    (assign, ":bound_center", ":nearest_center"), # itself
                (try_end),
                # compare with the left side color block
                (try_begin),
                    (store_sub, ":map_x_2", ":map_x", ":party_move_length_x"),
                    (assign, ":map_y_2", ":map_y"),
                    (position_set_x, pos4, ":map_x_2"),
                    (position_set_y, pos4, ":map_y_2"),
                    (party_set_position, "p_temp_party", pos4),
                    (party_get_current_terrain, ":current_terrain_2", "p_temp_party"),
                    (try_begin),
                        (assign, ":continue", 0),
                        (try_begin),
                            (neq, ":current_terrain", rt_water),
                            (neq, ":current_terrain", rt_bridge),
                            (neq, ":current_terrain", rt_river),
                            (neq, ":current_terrain", 6),
                            (neq, ":current_terrain_2", rt_water),
                            (neq, ":current_terrain_2", rt_bridge),
                             (neq, ":current_terrain_2", rt_river),
                            (neq, ":current_terrain_2", 6),
                            (call_script, "script_get_closest_center_and_minor", "p_temp_party"),
                            (assign, ":nearest_center_2", reg0),
                            (try_begin),
                                (gt, ":nearest_center_2", -1),
                                (lt, ":nearest_center_2", last_static_party),
                                (try_begin),
                                    (party_slot_eq, ":nearest_center_2", slot_party_type, spt_village),
                                    (party_get_slot, ":bound_center_2", ":nearest_center_2", slot_village_bound_center),
                                (else_try),
                                    (assign, ":bound_center_2", ":nearest_center_2"), # itself
                                (try_end),
                                (neq, ":bound_center_2", ":bound_center"),
                                (assign, ":continue", 1),
                            (try_end),
                        (try_end),
                        (eq, ":continue", 1),
                        (create_mesh_overlay, reg0, "mesh_white_plane"),
                        (overlay_set_color, reg0, 0),
                        (position_set_x, pos1, ":pos_x"),
                        (position_set_y, pos1, ":pos_y"),
                        (overlay_set_position, reg0, pos1),
                        (position_set_x, pos1, ":line_whidth"),
                        (position_set_y, pos1, ":line_length"),
                        (overlay_set_size, reg0, pos1),
                    (try_end),
                (try_end),
            # compare with the under color block
                (try_begin),
                    (assign, ":map_x_2", ":map_x"),
                    (store_sub, ":map_y_2", ":map_y", ":party_move_length_y"),
                    (position_set_x, pos4, ":map_x_2"),
                    (position_set_y, pos4, ":map_y_2"),
                    (party_set_position, "p_temp_party", pos4),
                    (party_get_current_terrain, ":current_terrain_2", "p_temp_party"),
                    (try_begin),
                        (assign, ":continue", 0),
                        (try_begin),
                            (neq, ":current_terrain", rt_water),
                            (neq, ":current_terrain", 6),
                            (neq, ":current_terrain", rt_bridge),
                            (neq, ":current_terrain", rt_river),
                            (neq, ":current_terrain_2", rt_water),
                            (neq, ":current_terrain_2", 6),
                            (neq, ":current_terrain_2", rt_bridge),
                             (neq, ":current_terrain_2", rt_river),
                            (call_script, "script_get_closest_center_and_minor", "p_temp_party"),
                            (assign, ":nearest_center_2", reg0),
                            (try_begin),
                                (lt, ":nearest_center_2", last_static_party),
                                (gt, ":nearest_center_2", -1),
                                (try_begin),
                                    (party_slot_eq, ":nearest_center_2", slot_party_type, spt_village),
                                    (party_get_slot, ":bound_center_2", ":nearest_center_2", slot_village_bound_center),
                                (else_try),
                                    (assign, ":bound_center_2", ":nearest_center_2"),
                                (try_end),
                                (neq, ":bound_center_2", ":bound_center"),
                                (assign, ":continue", 1),
                            (try_end),
                            # (else_try),
                            # (neq, ":current_terrain", ":current_terrain_2"),
                            # (this_or_next|eq, ":current_terrain", rt_water),
                            # (this_or_next|eq, ":current_terrain", rt_river),
                            # (this_or_next|eq, ":current_terrain", rt_bridge),
                            # (this_or_next|eq, ":current_terrain", 6),
                            # (this_or_next|eq, ":current_terrain_2", 6),
                            # (this_or_next|eq, ":current_terrain_2", rt_bridge),
                            # (this_or_next|eq, ":current_terrain_2", rt_river),
                            # (eq, ":current_terrain_2", rt_water),
                            # (assign, ":continue", 1),
                        (try_end),
                        (eq, ":continue", 1),
                        (create_mesh_overlay, reg0, "mesh_white_plane"),
                        (overlay_set_color, reg0, 0),
                        (position_set_x, pos1, ":pos_x"),
                        (position_set_y, pos1, ":pos_y"),
                        (overlay_set_position, reg0, pos1),
                        (position_set_x, pos1, ":line_length"),
                        (position_set_y, pos1, ":line_whidth"),
                        (overlay_set_size, reg0, pos1),
                    (try_end),
                (try_end),
                # ## draw borderlines end [optional]

                # offset
                (val_add, ":pos_x", ":color_block_length"),
                (val_add, ":map_x", ":party_move_length_x"),
            (try_end),
            # offset
            (assign, ":pos_x", ":init_pos_x"),
            (val_sub, ":pos_y", ":color_block_length"),
            (assign, ":map_x", ":init_map_x"),
            (val_sub, ":map_y", ":party_move_length_y"),
        (try_end),

        (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
            (store_faction_of_party, ":center_faction", ":center_no"),
            (eq, ":center_faction", "$players_kingdom"),
            (party_get_position, pos4, ":center_no"),
            (position_get_x, ":center_x", pos4),
            (position_get_y, ":center_y", pos4),
            (val_sub, ":center_x", ":init_map_x"),
            (val_sub, ":center_y", ":init_map_y"),
            (val_mul, ":center_x", ":color_block_length"),
            (val_mul, ":center_y", ":color_block_length"),
            (val_div, ":center_x", ":party_move_length_x"),
            (val_div, ":center_y", ":party_move_length_y"),
            (val_add, ":center_x", ":init_pos_x"),
            (val_add, ":center_y", ":init_pos_y"),
            # offset and size
            (try_begin),
                (party_slot_eq, ":center_no", slot_party_type, spt_town),
                (assign, ":block_size", 20),
            (else_try),
                (assign, ":block_size", 12),
            (try_end),
            (val_mul, ":block_size", 50),
            # block
            (try_begin),
                (neq, ":center_no", "$temp4"),
                (create_image_button_overlay, reg0, "mesh_white_dot", "mesh_white_dot"),
                (overlay_set_color, reg0, 0),
                (position_set_x, pos1, ":center_x"),
                (position_set_y, pos1, ":center_y"),
                (overlay_set_position, reg0, pos1),
                (position_set_x, pos1, ":block_size"),
                (position_set_y, pos1, ":block_size"),
                (overlay_set_size, reg0, pos1),
                (troop_set_slot, "trp_temp_array_a", ":center_no", reg0), # overlay center
            (else_try),
                (create_mesh_overlay, reg0, "mesh_pic_standard"),
                # (overlay_set_color, reg0, 0),
                (store_sub, ":new_center_x", ":center_x", 13),
                (store_sub, ":new_center_y", ":center_y", 0),
                (position_set_x, pos1, ":new_center_x"),
                (position_set_y, pos1, ":new_center_y"),
                (overlay_set_position, reg0, pos1),
                (position_set_x, pos1, ":block_size"),
                (position_set_y, pos1, ":block_size"),
                (overlay_set_size, reg0, pos1),
                (troop_set_slot, "trp_temp_array_a", ":center_no", reg0), # overlay center
            (try_end),
            # center name label
            (str_store_party_name, s1, ":center_no"),
            (create_text_overlay, reg1, s1, tf_center_justify),
            (store_add, ":text_x", ":center_x", 0),
            (store_add, ":text_y", ":center_y", 10),
            (position_set_x, pos1, ":text_x"),
            (position_set_y, pos1, ":text_y"),
            (overlay_set_position, reg1, pos1),
            (overlay_set_color, reg1, 0),
            (position_set_x, pos1, 780),
            (position_set_y, pos1, 780),
            (overlay_set_size, reg1, pos1),
            (overlay_set_display, reg1, 0),
            (troop_set_slot, "trp_temp_array_b", ":center_no", reg1), #overlay label name center
        (try_end),

        # Done
        (create_game_button_overlay, "$g_presentation_obj_5", "str_done"),
        (position_set_x, pos1, 400),
        (position_set_y, pos1, 30),
        (overlay_set_position, "$g_presentation_obj_5", pos1),
    ]),
    (ti_on_presentation_mouse_enter_leave,[
    (store_trigger_param_1, ":object"),
    (store_trigger_param_2, ":enter_leave"),
    (assign, ":end", walled_centers_end),
    (try_for_range, ":center", walled_centers_begin, ":end"),
        (troop_slot_eq, "trp_temp_array_a", ":center", ":object"),
        (assign, ":end", -1),
    (try_end),
    (eq, ":end", -1),
    (troop_get_slot,":id","trp_temp_array_b", ":center"),
    # show center name, owner when mouse over it
    (store_sub, ":display_overlay", 1, ":enter_leave"),
    (overlay_set_display, ":id", ":display_overlay"),
    ]),

  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":object"),
    # (store_trigger_param_2, ":value"),

    #Click on done
    (try_begin),
        (eq, ":object", "$g_presentation_obj_5"),
        (start_presentation, "prsnt_legion_management"),
    (else_try),
        (assign, ":end", walled_centers_end),
        (try_for_range, ":center", walled_centers_begin, ":end"),
            (troop_slot_eq, "trp_temp_array_a", ":center", ":object"),
            (assign, ":end", -1),
        (try_end),
        (eq, ":end", -1),
        (try_begin),
            (eq, ":center", "$temp4"),
            (display_message, "@Current headquarter.", message_alert),
        (else_try),
            (store_add, ":slot_hq", slot_legion_home_begin, "$temp4_1"),
            (troop_set_slot, "trp_province_array", ":slot_hq", ":center"),
            (call_script, "script_legion_hq_set_banner", ":center", "$temp4_1"),#set banner prop
            (str_store_party_name, s1, ":center"),
            (store_add, ":string", "str_lover_talk", "$temp4_1"),
            (str_store_string, s2, ":string"),
            (display_log_message, "@{s1} is the new headquarter of the {s2}"),
            (start_presentation, "prsnt_legion_management"),
        (try_end),
    (try_end),
  ]),
]),
##########LEGION MANAGEMENT END

##province management BEGIN
("influence_nero", 0, 0, [
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    # #0. BACKROUND
    (create_mesh_overlay, reg0, "mesh_load_window"),
    (position_set_x, pos1, -1),
    (position_set_y, pos1, -1),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 1002),
    (position_set_y, pos1, 1002),
    (overlay_set_size, reg0, pos1),

    # Presentation title, centered at the top
    (create_text_overlay, reg1, "@_You can influence the Princeps to change governors_", tf_center_justify),
    (position_set_x, pos1, 500), # Higher, means more toward the right
    (position_set_y, pos1, 700), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1300),
    (position_set_y, pos1, 1300),
    (overlay_set_size, reg1, pos1),

    (create_text_overlay, reg1, "@Hint: Only imperial provinces are displayed as senatorial provinces are under control of the senate.", tf_center_justify),
    (position_set_x, pos1, 500), # Higher, means more toward the right
    (position_set_y, pos1, 680), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (overlay_set_color, reg1, 0x00007F),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),

    # Back to menu - graphical button
    (create_game_button_overlay, reg1, "str_return"),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 23),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_jrider_faction_report_return_to_menu", reg1),

    #switch to map view
    # (create_game_button_overlay, reg1, "@World Map"),
    # (position_set_x, pos1, 600),
    # (position_set_y, pos1, 23),
    # (overlay_set_position, reg1, pos1),
    # (assign, "$g_jrider_faction_coat_of_arms", reg1),


    # clear the string globals that we'll use
    (str_clear, s0),
    (str_clear, s20),
    (str_clear, s21),
    (str_clear, s23),
    (str_clear, s24),
    # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
    (create_text_overlay, reg1, s0, tf_scrollable_style_2),
    (position_set_x, pos1, 50),
    (position_set_y, pos1, 70),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 860),
    (position_set_y, pos1, 527),
    (overlay_set_area_size, reg1, pos1),


    (create_text_overlay, reg0, "@Province", tf_left_align),
    (position_set_x, pos1, 50),
    (position_set_y, pos1, 615),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@Governor", tf_left_align),
    (position_set_x, pos1, 220),###+160
    (position_set_y, pos1, 615),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@Relation", tf_left_align),
    (position_set_x, pos1, 500),###+160
    (position_set_y, pos1, 615),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@Personality", tf_left_align),
    (position_set_x, pos1, 600),###+110
    (position_set_y, pos1, 615),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),

    # (create_text_overlay, reg0, "@Type", tf_left_align),
    # (position_set_x, pos1, 720),###+110
    # (position_set_y, pos1, 615),
    # (overlay_set_position, reg0, pos1),
    # (position_set_x, pos2, 1200),
    # (position_set_y, pos2, 1200),
    # (overlay_set_size, reg0, pos2),

    (assign, ":num_lines", 0),
    (try_for_range_backwards, ":province", slot_province_governor_begin, p_provinces_end),
        (troop_set_slot, "trp_temp_array_a", ":province", 0),
        (store_add, ":slot", ":province", slot_province_senatorial_begin),
        (troop_get_slot, ":is_senatorial", "trp_province_array", ":slot"),
        (lt, ":is_senatorial", 1),
        (troop_get_slot, ":governor", "trp_province_array", ":province"),
        (gt, ":governor", 0),
        (assign, ":break", walled_centers_end),
        (try_for_range, ":center", walled_centers_begin, ":break"),
            (store_faction_of_party, ":fac", ":center"),
            (eq, ":fac", "$players_kingdom"),
            (party_slot_eq, ":center", slot_center_province, ":province"),
            (assign, ":break", -1),
        (try_end),
        (eq, ":break", -1),
        (val_add, ":num_lines", 1),
    (try_end),
    (position_set_x, pos1, 0),
    (store_mul, ":y_name", 40, ":num_lines"),##get y for size of the scrollable overlay
    ##text size of the table
    (position_set_x, pos2, 900),
    (position_set_y, pos2, 900),

    (assign, ":slot", 0),
    (set_container_overlay, reg1),#start scroll
    (try_for_range_backwards, ":province", slot_province_governor_begin, p_provinces_end),
        (store_add, ":slot", ":province", slot_province_senatorial_begin),
        (troop_get_slot, ":is_senatorial", "trp_province_array", ":slot"),
        (lt, ":is_senatorial", 1),
        (troop_get_slot, ":governor", "trp_province_array", ":province"),
        (gt, ":governor", 0),
        (neg|faction_slot_eq, "$players_kingdom", slot_faction_leader, ":governor"),

        (assign, ":break", walled_centers_end),
        (try_for_range, ":center", walled_centers_begin, ":break"),
            (store_faction_of_party, ":fac", ":center"),
            (eq, ":fac", "$players_kingdom"),
            (party_slot_eq, ":center", slot_center_province, ":province"),
            (assign, ":break", -1),
        (try_end),
        (eq, ":break", -1),

        (assign, ":x_name", 0),

        ##creat some lines
        (create_mesh_overlay, reg1, "mesh_white_plane"),
        (overlay_set_color, reg1, 0x000000),#line color
        (position_set_x, pos3, 180000),
        (position_set_y, pos3, 50),
        (overlay_set_size, reg1, pos3),
        (position_set_x, pos3, 0),
        (store_add, ":y_name_line", ":y_name", 16), # set it below 2 pix of current position
        (position_set_y, pos3, ":y_name_line"),
        (overlay_set_position, reg1, pos3),

        #name
        (store_add, ":string", ":province", "str_province_begin"),
        (str_store_string, s20, ":string"),
        (create_text_overlay, reg0, "@{s20}", tf_left_align),
        (position_set_x, pos1, ":x_name"),
        (position_set_y, pos1, ":y_name"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_color, reg0, 0xcc8400),
        (overlay_set_size, reg0, pos2),

        (val_add, ":x_name", 170),

        (try_begin),
            (ge, ":governor", 0),
            (str_store_troop_name, s20, ":governor"),
        (else_try),
            (str_store_string, s20, "str_dplmc_none"),
        (try_end),

        (create_text_overlay, reg0, "@{s20}", tf_left_align),
        (position_set_y, pos1, ":y_name"),
        (position_set_x, pos1, ":x_name"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_size, reg0, pos2),

        (val_add, ":x_name", 300),

        (try_begin),
            (ge, ":governor", 0),
            # (troop_get_slot, reg0, ":governor", slot_troop_player_relation),
            (call_script, "script_troop_get_player_relation", ":governor"),
            (str_store_string, s20, "str_reg0"),
        (else_try),
            (str_store_string, s20, "str_dplmc_none"),
        (try_end),
        (create_text_overlay, reg1, s20, tf_left_align),
        (try_begin),
            (gt, ":governor", 0),
            (call_script, "script_troop_get_player_relation", ":governor"),
            (ge, reg0, 1),
            (overlay_set_color, reg1, 0x00b300),
        (else_try),
            (gt, ":governor", 0),
            (call_script, "script_troop_get_player_relation", ":governor"),
            (lt, reg0, 0),
            (overlay_set_color, reg1, 0xff0000),
        (try_end),
        (position_set_y, pos1, ":y_name"),
        (position_set_x, pos1, ":x_name"),
        (overlay_set_position, reg1, pos1),
        (overlay_set_size, reg1, pos2),

        (val_add, ":x_name", 100),

        (try_begin),
            (gt, ":governor", 0),
            (troop_get_slot, ":personality", ":governor", slot_lord_reputation_type),
            (store_add, ":string", ":personality", "str_personality_archetypes"),
            (str_store_string, s22, ":string"),
        (else_try),
            (eq, ":governor", 0),
            (call_script, "script_print_honor_to_s60"),
            (str_store_string_reg, s22, s60),
        (else_try),
            (str_store_string, s22, "str_dplmc_none"),
        (try_end),

        (create_text_overlay, reg0, "@{s22}", tf_left_align),
        (position_set_y, pos1, ":y_name"),
        (position_set_x, pos1, ":x_name"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_size, reg0, pos2),

        # (val_add, ":x_name", 95),
        # (store_add, ":slot", ":province", slot_province_senatorial_begin),
        # (troop_get_slot, ":is_senatorial", "trp_province_array", ":slot"),

        # (try_begin),
            # (ge, ":is_senatorial", 1),
            # (str_store_string, s22, "@Senatorial"),
        # (else_try),
            # (str_store_string, s22, "@Imperial"),
        # (try_end),
        # (create_text_overlay, reg0, "@{s22}", tf_left_align),
        # (position_set_y, pos1, ":y_name"),
        # (position_set_x, pos1, ":x_name"),
        # (overlay_set_position, reg0, pos1),
        # (overlay_set_size, reg0, pos2),

        (try_begin),
            (le, ":is_senatorial", 0),
            (val_add, ":x_name", 100),
            (create_text_overlay, reg0, "@Change Governor (Use Influence)", tf_left_align),
            (position_set_x, pos1, ":x_name"),
            (position_set_y, pos1, ":y_name"),
            (overlay_set_position, reg0, pos1),
            (overlay_set_size, reg0, pos2),
            # #creat button
            (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
            (overlay_set_position, reg10, pos1),
            (overlay_set_size, reg10, pos2),
            (overlay_set_alpha, reg10, 0),
            (overlay_set_color, reg10, 0xDDDDDD),
            (troop_set_slot, "trp_temp_array_a", ":province", reg10),
        (try_end),

        (val_sub, ":y_name", 40),
    (try_end),
    (set_container_overlay, -1),#end scroll
  ]),

   ## Check for buttonpress
  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":button_pressed_id"),
    (try_begin),
        (eq, ":button_pressed_id", "$g_jrider_faction_report_return_to_menu"), # pressed  (Return to menu)
        (presentation_set_duration, 0),
        (show_object_details_overlay, 1),
    (else_try),
        (assign, ":end", p_provinces_end),
        (try_for_range, ":slot", slot_province_governor_begin, ":end"),
            (troop_slot_eq, "trp_temp_array_a", ":slot", ":button_pressed_id"),
            (assign, "$g_notification_menu_var2", ":slot"),
            (assign, ":end", -1),
        (try_end),
        (eq, ":end", -1),
        (troop_get_slot, "$g_notification_menu_var1", "trp_province_array", "$g_notification_menu_var2"),
        (start_presentation, "prsnt_influence_governor_change"),
    (try_end),
  ]),

  (ti_on_presentation_run, [
    (try_begin),
        (key_clicked, key_escape),
        (presentation_set_duration, 0),
        (show_object_details_overlay, 1),
    (else_try),
        (key_clicked, key_space),
        (set_fixed_point_multiplier, 1000),
        (mouse_get_position, pos31),

        (position_get_x, reg31, pos31),
        (position_get_y, reg32, pos31),

        (display_message, "@X: {reg31} | Y: {reg32}"),
    (try_end),
  ]),
]),

##province management BEGIN
("influence_senate", 0, 0, [
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    # #0. BACKROUND
    (create_mesh_overlay, reg0, "mesh_load_window"),
    (position_set_x, pos1, -1),
    (position_set_y, pos1, -1),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 1002),
    (position_set_y, pos1, 1002),
    (overlay_set_size, reg0, pos1),

    # Presentation title, centered at the top
    (create_text_overlay, reg1, "@You can influence the Senate to change governors", tf_center_justify),
    (position_set_x, pos1, 500), # Higher, means more toward the right
    (position_set_y, pos1, 700), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1300),
    (position_set_y, pos1, 1300),
    (overlay_set_size, reg1, pos1),

    (str_clear, s0),
    (try_begin),
        (ge, "$g_is_emperor", 1),
        (str_store_string, s0, "@Click on the province name to change its typ to imperial."),
    (try_end),

    (create_text_overlay, reg1, "@Hint: Only senatorial provinces are displayed as imperial provinces are under control of the Princeps. {s0}", tf_center_justify),
    (position_set_x, pos1, 500), # Higher, means more toward the right
    (position_set_y, pos1, 680), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (overlay_set_color, reg1, 0x00007F),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),

    # Back to menu - graphical button
    (create_game_button_overlay, reg1, "str_return"),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 23),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_jrider_faction_report_return_to_menu", reg1),

    #switch to map view
    # (create_game_button_overlay, reg1, "@World Map"),
    # (position_set_x, pos1, 600),
    # (position_set_y, pos1, 23),
    # (overlay_set_position, reg1, pos1),
    # (assign, "$g_jrider_faction_coat_of_arms", reg1),

    (create_text_overlay, reg0, "@Province", tf_left_align),
    (position_set_x, pos1, 50),
    (position_set_y, pos1, 615),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@Governor", tf_left_align),
    (position_set_x, pos1, 220),###+160
    (position_set_y, pos1, 615),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@Relation", tf_left_align),
    (position_set_x, pos1, 500),###+160
    (position_set_y, pos1, 615),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@Personality", tf_left_align),
    (position_set_x, pos1, 600),###+110
    (position_set_y, pos1, 615),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),

    # (create_text_overlay, reg0, "@Type", tf_left_align),
    # (position_set_x, pos1, 720),###+110
    # (position_set_y, pos1, 615),
    # (overlay_set_position, reg0, pos1),
    # (position_set_x, pos2, 1200),
    # (position_set_y, pos2, 1200),
    # (overlay_set_size, reg0, pos2),

    # clear the string globals that we'll use
    (str_clear, s0),
    (str_clear, s20),
    (str_clear, s21),
    (str_clear, s23),
    (str_clear, s24),
    # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
    (create_text_overlay, reg1, s0, tf_scrollable_style_2),
    (position_set_x, pos1, 50),
    (position_set_y, pos1, 70),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 860),
    (position_set_y, pos1, 527),
    (overlay_set_area_size, reg1, pos1),
    (set_container_overlay, reg1),#start scroll

    (assign, ":num_lines", 0),
    (try_for_range_backwards, ":province", slot_province_governor_begin, p_provinces_end),
        (troop_set_slot, "trp_temp_array_a", ":province", 0),
        (troop_set_slot, "trp_temp_array_b", ":province", 0),
        (store_add, ":slot", ":province", slot_province_senatorial_begin),
        (troop_get_slot, ":is_senatorial", "trp_province_array", ":slot"),
        (ge, ":is_senatorial", 1),
        (troop_get_slot, ":governor", "trp_province_array", ":province"),
        (gt, ":governor", 0),
        (assign, ":break", walled_centers_end),
        (try_for_range, ":center", walled_centers_begin, ":break"),
            (store_faction_of_party, ":fac", ":center"),
            (eq, ":fac", "$players_kingdom"),
            (party_slot_eq, ":center", slot_center_province, ":province"),
            (assign, ":break", -1),
        (try_end),
        (eq, ":break", -1),
        (val_add, ":num_lines", 1),
    (try_end),
    (position_set_x, pos1, 0),
    (store_mul, ":y_name", 40, ":num_lines"),##get y for size of the scrollable overlay
    ##text size of the table
    (position_set_x, pos2, 900),
    (position_set_y, pos2, 900),

    (assign, ":slot", 0),
    (try_for_range_backwards, ":province", slot_province_governor_begin, p_provinces_end),
        (store_add, ":slot", ":province", slot_province_senatorial_begin),
        (troop_get_slot, ":is_senatorial", "trp_province_array", ":slot"),
        (ge, ":is_senatorial", 1),
        (troop_get_slot, ":governor", "trp_province_array", ":province"),
        (ge, ":governor", 0),
        (neg|faction_slot_eq, "$players_kingdom", slot_faction_leader, ":governor"),

        (assign, ":break", walled_centers_end),
        (try_for_range, ":center", walled_centers_begin, ":break"),
            (store_faction_of_party, ":fac", ":center"),
            (eq, ":fac", "$players_kingdom"),
            (party_slot_eq, ":center", slot_center_province, ":province"),
            (assign, ":break", -1),
        (try_end),
        (eq, ":break", -1),

        (assign, ":x_name", 0),

        ##creat some lines
        (create_mesh_overlay, reg1, "mesh_white_plane"),
        (overlay_set_color, reg1, 0x000000),#line color
        (position_set_x, pos3, 180000),
        (position_set_y, pos3, 50),
        (overlay_set_size, reg1, pos3),
        (position_set_x, pos3, 0),
        (store_add, ":y_name_line", ":y_name", 16), # set it below 2 pix of current position
        (position_set_y, pos3, ":y_name_line"),
        (overlay_set_position, reg1, pos3),

        #name
        (store_add, ":string", ":province", "str_province_begin"),
        (str_store_string, s20, ":string"),
        (create_text_overlay, reg0, "@{s20}", tf_left_align),
        (position_set_x, pos1, ":x_name"),
        (position_set_y, pos1, ":y_name"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_color, reg0, 0xcc8400),
        (overlay_set_size, reg0, pos2),

        (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
        (overlay_set_position, reg10, pos1),
        (overlay_set_size, reg10, pos2),
        (overlay_set_alpha, reg10, 0),
        (overlay_set_color, reg10, 0xDDDDDD),
        (troop_set_slot, "trp_temp_array_b", ":province", reg10),

        (val_add, ":x_name", 170),

        (try_begin),
            (ge, ":governor", 0),
            (str_store_troop_name, s20, ":governor"),
        (else_try),
            (str_store_string, s20, "str_dplmc_none"),
        (try_end),

        (create_text_overlay, reg0, "@{s20}", tf_left_align),
        (position_set_y, pos1, ":y_name"),
        (position_set_x, pos1, ":x_name"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_size, reg0, pos2),

        (val_add, ":x_name", 300),

        (try_begin),
            (ge, ":governor", 0),
            # (troop_get_slot, reg0, ":governor", slot_troop_player_relation),
            (call_script, "script_troop_get_player_relation", ":governor"),#prints to reg0
            (str_store_string, s20, "str_reg0"),
        (else_try),
            (str_store_string, s20, "str_dplmc_none"),
        (try_end),
        (create_text_overlay, reg1, s20, tf_left_align),
        (try_begin),
            (gt, ":governor", 0),
            (call_script, "script_troop_get_player_relation", ":governor"),
            (ge, reg0, 1),
            (overlay_set_color, reg1, 0x00b300),
        (else_try),
            (gt, ":governor", 0),
            (call_script, "script_troop_get_player_relation", ":governor"),
            (lt, reg0, 0),
            (overlay_set_color, reg1, 0xff0000),
        (try_end),
        (position_set_y, pos1, ":y_name"),
        (position_set_x, pos1, ":x_name"),
        (overlay_set_position, reg1, pos1),
        (overlay_set_size, reg1, pos2),

        (val_add, ":x_name", 100),

        (try_begin),
            (gt, ":governor", 0),
            (troop_get_slot, ":personality", ":governor", slot_lord_reputation_type),
            (store_add, ":string", ":personality", "str_personality_archetypes"),
            (str_store_string, s22, ":string"),
        (else_try),
            (eq, ":governor", 0),
            (call_script, "script_print_honor_to_s60"),
            (str_store_string_reg, s22, s60),
        (else_try),
            (str_store_string, s22, "str_dplmc_none"),
        (try_end),

        (create_text_overlay, reg0, "@{s22}", tf_left_align),
        (position_set_y, pos1, ":y_name"),
        (position_set_x, pos1, ":x_name"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_size, reg0, pos2),

        # (val_add, ":x_name", 95),
        # (store_add, ":slot", ":province", slot_province_senatorial_begin),
        # (troop_get_slot, ":is_senatorial", "trp_province_array", ":slot"),

        # (try_begin),
            # (ge, ":is_senatorial", 1),
            # (str_store_string, s22, "@Senatorial"),
        # (else_try),
            # (str_store_string, s22, "@Imperial"),
        # (try_end),
        # (create_text_overlay, reg0, "@{s22}", tf_left_align),
        # (position_set_y, pos1, ":y_name"),
        # (position_set_x, pos1, ":x_name"),
        # (overlay_set_position, reg0, pos1),
        # (overlay_set_size, reg0, pos2),

        (try_begin),
            (ge, ":is_senatorial", 1),
            (val_add, ":x_name", 100),
            (create_text_overlay, reg0, "@Change Governor (senate support)", tf_left_align),
            (overlay_set_color, reg0, 0x0000FF),
            (position_set_x, pos1, ":x_name"),
            (position_set_y, pos1, ":y_name"),
            (overlay_set_position, reg0, pos1),
            (overlay_set_size, reg0, pos2),
            # #creat button
            (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
            (overlay_set_position, reg10, pos1),
            (overlay_set_size, reg10, pos2),
            (overlay_set_alpha, reg10, 0),
            (overlay_set_color, reg10, 0xDDDDDD),
            (troop_set_slot, "trp_temp_array_a", ":province", reg10),
        (try_end),

        (val_sub, ":y_name", 40),
    (try_end),
    (set_container_overlay, -1),#end scroll
  ]),

   ## Check for buttonpress
  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":button_pressed_id"),
    (try_begin),
        (eq, ":button_pressed_id", "$g_jrider_faction_report_return_to_menu"), # pressed  (Return to menu)
        (presentation_set_duration, 0),
        (jump_to_menu, "mnu_senatus"),
    (else_try),
        (assign, ":end", p_provinces_end),
        (try_for_range, ":slot", slot_province_governor_begin, ":end"),
            (troop_slot_eq, "trp_temp_array_a", ":slot", ":button_pressed_id"),
            (assign, "$g_notification_menu_var2", ":slot"),
            (assign, ":end", -1),
        (try_end),
        (eq, ":end", -1),
        (troop_get_slot, "$g_notification_menu_var1", "trp_province_array", "$g_notification_menu_var2"),
        (start_presentation, "prsnt_influence_governor_change_senate"),
    (else_try),
        (ge, "$g_is_emperor", 1),
        (assign, ":end", p_provinces_end),
        (try_for_range, ":slot", slot_province_governor_begin, ":end"),
            (troop_slot_eq, "trp_temp_array_b", ":slot", ":button_pressed_id"),
            (assign, "$temp4_1", ":slot"),
            (assign, ":end", -1),
        (try_end),
        (eq, ":end", -1),
        (start_presentation, "prsnt_make_province_imperial"),
    (try_end),
  ]),
  (ti_on_presentation_run, [
    (try_begin),
        (key_clicked, key_escape),
        (presentation_set_duration, 0),
    (else_try),
        (key_clicked, key_space),
        (set_fixed_point_multiplier, 1000),
        (mouse_get_position, pos31),

        (position_get_x, reg31, pos31),
        (position_get_y, reg32, pos31),

        (display_message, "@X: {reg31} | Y: {reg32}"),
    (try_end),
  ]),
]),

("province_management", 0, 0, [
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    # #0. BACKROUND
    (create_mesh_overlay, reg0, "mesh_load_window"),
    (position_set_x, pos1, -1),
    (position_set_y, pos1, -1),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 1002),
    (position_set_y, pos1, 1002),
    (overlay_set_size, reg0, pos1),

    # Presentation title, centered at the top
    (create_text_overlay, reg1, "@_Province List_", tf_center_justify),
    (position_set_x, pos1, 500), # Higher, means more toward the right
    (position_set_y, pos1, 685), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1500),
    (position_set_y, pos1, 1500),
    (overlay_set_size, reg1, pos1),

    (create_text_overlay, reg1, "@Hint: You can select a new governor only for Imperial provinces. The senate will assign governors for senatorial provinces automatically. Click on the province type to MAKE IMPERIAL PROVINCES SENATORIAL. TO MAKE SENATORIAL PROVINCES IMPERIAL you need to VISIT THE SENATE.", tf_scrollable_style_2),
    (position_set_x, pos1, 575), # Higher, means more toward the right
    (position_set_y, pos1, 525), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (overlay_set_color, reg1, 0x00007F),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 350),
    (position_set_y, pos1, 200),
    (overlay_set_area_size, reg1, pos1),

    # Back to menu - graphical button
    (create_game_button_overlay, reg1, "str_return"),
    (position_set_x, pos1, 400),
    (position_set_y, pos1, 23),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_jrider_faction_report_return_to_menu", reg1),

    #switch to map view
    (create_game_button_overlay, reg1, "@World Map"),
    (position_set_x, pos1, 600),
    (position_set_y, pos1, 23),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_jrider_faction_coat_of_arms", reg1),

    # clear the string globals that we'll use
    (str_clear, s0),
    (str_clear, s20),
    (str_clear, s21),
    (str_clear, s23),
    (str_clear, s24),
    # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
    (create_text_overlay, reg1, s0, tf_scrollable_style_2),
    (position_set_x, pos1, 50),
    (position_set_y, pos1, 70),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 860),
    (position_set_y, pos1, 527),
    (overlay_set_area_size, reg1, pos1),


    (create_text_overlay, reg0, "@Province", tf_left_align),
    (position_set_x, pos1, 50),
    (position_set_y, pos1, 615),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@Governor", tf_left_align),
    (position_set_x, pos1, 220),###+160
    (position_set_y, pos1, 615),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@Relation", tf_left_align),
    (position_set_x, pos1, 500),###+160
    (position_set_y, pos1, 615),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@Personality", tf_left_align),
    (position_set_x, pos1, 600),###+110
    (position_set_y, pos1, 615),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),

    (create_text_overlay, reg0, "@Type", tf_left_align),
    (position_set_x, pos1, 720),###+110
    (position_set_y, pos1, 615),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos2, 1200),
    (position_set_y, pos2, 1200),
    (overlay_set_size, reg0, pos2),

    (assign, ":num_lines", 0),
    (try_for_range_backwards, ":province", slot_province_governor_begin, p_provinces_end),
        (troop_set_slot, "trp_temp_array_b", ":province", 0),
        (troop_set_slot, "trp_temp_array_a", ":province", 0),
        (assign, ":break", walled_centers_end),
        (try_for_range, ":center", walled_centers_begin, ":break"),
            (store_faction_of_party, ":fac", ":center"),
            (eq, ":fac", "$players_kingdom"),
            (party_slot_eq, ":center", slot_center_province, ":province"),
            (assign, ":break", -1),
        (try_end),
        (eq, ":break", -1),
        (val_add, ":num_lines", 1),
    (try_end),
    (position_set_x, pos1, 0),
    (store_mul, ":y_name", 40, ":num_lines"),##get y for size of the scrollable overlay
    ##text size of the table
    (position_set_x, pos2, 900),
    (position_set_y, pos2, 900),

    (assign, ":slot", 0),
    (set_container_overlay, reg1),#start scroll
    (try_for_range_backwards, ":province", slot_province_governor_begin, p_provinces_end),

        (assign, ":break", walled_centers_end),
        (try_for_range, ":center", walled_centers_begin, ":break"),
            (store_faction_of_party, ":fac", ":center"),
            (eq, ":fac", "$players_kingdom"),
            (party_slot_eq, ":center", slot_center_province, ":province"),
            (assign, ":break", -1),
        (try_end),
        (eq, ":break", -1),

        (assign, ":x_name", 0),

        ##creat some lines
        (create_mesh_overlay, reg1, "mesh_white_plane"),
        (overlay_set_color, reg1, 0x000000),#line color
        (position_set_x, pos3, 180000),
        (position_set_y, pos3, 50),
        (overlay_set_size, reg1, pos3),
        (position_set_x, pos3, 0),
        (store_add, ":y_name_line", ":y_name", 16), # set it below 2 pix of current position
        (position_set_y, pos3, ":y_name_line"),
        (overlay_set_position, reg1, pos3),

        #name
        (store_add, ":string", ":province", "str_province_begin"),
        (str_store_string, s20, ":string"),
        (create_text_overlay, reg0, "@{s20}", tf_left_align),
        (position_set_x, pos1, ":x_name"),
        (position_set_y, pos1, ":y_name"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_color, reg0, 0xcc8400),
        (overlay_set_size, reg0, pos2),

        (val_add, ":x_name", 170),

        (troop_get_slot, ":governor", "trp_province_array", ":province"),
        (try_begin),
            (eq, ":governor", 0),
            (str_store_string, s20, "@You."),
        (else_try),
            (gt, ":governor", 0),
            (str_store_troop_name, s20, ":governor"),
        (else_try),
            (str_store_string, s20, "str_dplmc_none"),
        (try_end),

        (create_text_overlay, reg0, "@{s20}", tf_left_align),
        (position_set_y, pos1, ":y_name"),
        (position_set_x, pos1, ":x_name"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_size, reg0, pos2),

        (val_add, ":x_name", 300),

        (try_begin),
            (gt, ":governor", 0),
            # (troop_get_slot, reg0, ":governor", slot_troop_player_relation),
            (call_script, "script_troop_get_player_relation", ":governor"),
            (str_store_string, s20, "str_reg0"),
        (else_try),
            (str_store_string, s20, "str_dplmc_none"),
        (try_end),
        (create_text_overlay, reg1, s20, tf_left_align),
        (try_begin),
            (gt, ":governor", 0),
            (call_script, "script_troop_get_player_relation", ":governor"),
            (ge, reg0, 1),
            (overlay_set_color, reg1, 0x00b300),
        (else_try),
            (gt, ":governor", 0),
            (call_script, "script_troop_get_player_relation", ":governor"),
            (lt, reg0, 0),
            (overlay_set_color, reg1, 0xff0000),
        (try_end),
        (position_set_y, pos1, ":y_name"),
        (position_set_x, pos1, ":x_name"),
        (overlay_set_position, reg1, pos1),
        (overlay_set_size, reg1, pos2),

        (val_add, ":x_name", 100),

        (try_begin),
            (gt, ":governor", 0),
            (troop_get_slot, ":personality", ":governor", slot_lord_reputation_type),
            (store_add, ":string", ":personality", "str_personality_archetypes"),
            (str_store_string, s22, ":string"),
        (else_try),
            (eq, ":governor", 0),
            (call_script, "script_print_honor_to_s60"),
            (str_store_string_reg, s22, s60),
        (else_try),
            (str_store_string, s22, "str_dplmc_none"),
        (try_end),

        (create_text_overlay, reg0, "@{s22}", tf_left_align),
        (position_set_y, pos1, ":y_name"),
        (position_set_x, pos1, ":x_name"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_size, reg0, pos2),

        (val_add, ":x_name", 95),

        (store_add, ":slot", ":province", slot_province_senatorial_begin),
        (troop_get_slot, ":is_senatorial", "trp_province_array", ":slot"),

        (try_begin),
            (ge, ":is_senatorial", 1),
            (str_store_string, s22, "@Senatorial"),
        (else_try),
            (str_store_string, s22, "@Imperial"),
        (try_end),
        (create_text_overlay, reg0, "@{s22}", tf_left_align),
        (position_set_y, pos1, ":y_name"),
        (position_set_x, pos1, ":x_name"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_size, reg0, pos2),

        (try_begin),
            (le, ":is_senatorial", 0),

            (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
            (overlay_set_position, reg10, pos1),
            (overlay_set_size, reg10, pos2),
            (overlay_set_alpha, reg10, 0),
            (overlay_set_color, reg10, 0xDDDDDD),
            (troop_set_slot, "trp_temp_array_b", ":province", reg10),

            (val_add, ":x_name", 100),
            (try_begin),
                (gt, ":governor", 0),
                (str_store_string, s0, "@Change Governor"),
            (else_try),
                (str_store_string, s0, "@Assign Governor"),
            (try_end),
            (create_text_overlay, reg0, "str_s0", tf_left_align),
            (overlay_set_color, reg0, 0x0000FF),
            (position_set_x, pos1, ":x_name"),
            (position_set_y, pos1, ":y_name"),
            (overlay_set_position, reg0, pos1),
            (overlay_set_size, reg0, pos2),
            # #creat button
            (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
            (overlay_set_position, reg10, pos1),
            (overlay_set_size, reg10, pos2),
            (overlay_set_alpha, reg10, 0),
            (overlay_set_color, reg10, 0xDDDDDD),
            (troop_set_slot, "trp_temp_array_a", ":province", reg10),
        (try_end),

        (val_sub, ":y_name", 40),
    (try_end),
    (set_container_overlay, -1),#end scroll
  ]),

   ## Check for buttonpress
  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":button_pressed_id"),
    (try_begin),
        (eq, ":button_pressed_id", "$g_jrider_faction_report_return_to_menu"), # pressed  (Return to menu)
        (presentation_set_duration, 0),
        (show_object_details_overlay, 1),
    (else_try),
        (eq, ":button_pressed_id", "$g_jrider_faction_coat_of_arms"), # pressed  (Return to menu)
        (show_object_details_overlay, 0),
        (start_presentation, "prsnt_worldmap_fief_selection_feudal"),
    (else_try),
        (assign, ":end", p_provinces_end),
        (try_for_range, ":slot", slot_province_governor_begin, ":end"),
            (troop_slot_eq, "trp_temp_array_b", ":slot", ":button_pressed_id"),
            (assign, "$temp4_1", ":slot"),
            (assign, ":end", -1),
        (try_end),
        (eq, ":end", -1),

        (start_presentation, "prsnt_make_province_senatorial"),
    (else_try),
        (assign, ":end", p_provinces_end),
        (try_for_range, ":slot", slot_province_governor_begin, ":end"),
            (troop_slot_eq, "trp_temp_array_a", ":slot", ":button_pressed_id"),
            (assign, "$temp4_1", ":slot"),
            (assign, ":end", -1),
        (try_end),
        (eq, ":end", -1),

        (troop_get_slot, ":governor", "trp_province_array", "$temp4_1"),
        (try_begin),
            (gt, ":governor", 0),
            (store_faction_of_troop, ":fac", ":governor"),
            (neq, ":fac", "$players_kingdom"),
            (display_message, "@Due to the civil war the province is in turmoil.", message_alert),
            (display_message, "@It is not possible to change the governor now.", message_alert),
        (else_try),
            (eq, "$g_player_court", "$fief_selected"),
            (display_message, "@Can't grant capital!"),
        (else_try),
            (assign, "$g_presentation_credits_obj_9_alpha", 1),
            (start_presentation, "prsnt_governor_selection"),
        (try_end),
    (try_end),
  ]),
  (ti_on_presentation_run, [
    (try_begin),
        (key_clicked, key_escape),
        (presentation_set_duration, 0),
        (show_object_details_overlay, 1),
    (else_try),
        (key_clicked, key_space),
        (set_fixed_point_multiplier, 1000),
        (mouse_get_position, pos31),

        (position_get_x, reg31, pos31),
        (position_get_y, reg32, pos31),

        (display_message, "@X: {reg31} | Y: {reg32}"),
    (try_end),
  ]),
]),

("governor_selection", 0, 0, [
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    # #0. BACKROUND
    (create_mesh_overlay, reg0, "mesh_load_window"),
    (position_set_x, pos1, -1),
    (position_set_y, pos1, -1),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 1002),
    (position_set_y, pos1, 1002),
    (overlay_set_size, reg0, pos1),

    #init variables
    (assign, ":num_lords", 0),
    (try_for_range, ":active_npc", active_npcs_including_player_begin, active_npcs_end),
        (try_begin),
            (eq, ":active_npc", active_npcs_including_player_begin),
            (assign, ":active_npc", "trp_player"),
        (try_end),
        (troop_set_slot, "trp_temp_array_b", ":active_npc", 0),
        (neq, "$temp_troop", ":active_npc"),
        (assign, ":c", 0),
        (try_begin),
            (eq, ":active_npc", "trp_player"),
            (neg|troop_slot_ge, ":active_npc", slot_troop_govern, 1),
            (assign, ":c", 1),
        (else_try),
            (store_troop_faction, ":npc_faction", ":active_npc"),
            (eq, ":npc_faction", "$players_kingdom"),
            (troop_slot_eq, ":active_npc", slot_troop_occupation, slto_kingdom_hero),
            (neg|troop_slot_ge, ":active_npc", slot_troop_legion, 1),
            (neg|troop_slot_ge, ":active_npc", slot_troop_aux, 1),
            (neg|troop_slot_ge, ":active_npc", slot_troop_govern, 1),
            (assign, ":c", 1),
        (else_try),
            (main_party_has_troop, ":active_npc"),
            (neq, ":active_npc", "trp_npc35"),
            ##diplomacy start+ Prevent this from appearing for already-enfeoffed troops
            (call_script, "script_get_number_of_hero_centers", ":active_npc"),
            (eq, reg0, 0),
            (neg|troop_slot_eq, ":active_npc", slot_troop_playerparty_history, dplmc_pp_history_lord_rejoined),
            (neg|troop_slot_eq, ":active_npc", slot_troop_playerparty_history, dplmc_pp_history_granted_fief),
            (neg|troop_slot_eq, ":active_npc", slot_troop_occupation, slto_kingdom_hero),
            (neg|is_between, ":active_npc", lords_begin, lords_end),
            (neg|is_between, ":active_npc", kings_begin, kings_end),
            (neg|is_between, ":active_npc", kingdom_ladies_begin, kingdom_ladies_end),
            (assign, ":c", 1),
        (try_end),
        (eq, ":c", 1),

        (val_add, ":num_lords", 1),
    (try_end),

    (store_add, ":string", "$temp4_1", "str_province_begin"),
    (str_store_string, s22, ":string"),
    # Presentation title, centered at the top
    (troop_get_slot, "$temp_troop", "trp_province_array", "$temp4_1"),
    (try_begin),
        (gt, "$temp_troop", 0),
        (str_store_troop_name, s20, "$temp_troop"),
        (str_store_string, s21, "@Currently the province is governed by {s20}."),
    (else_try),
        (eq, "$temp_troop", 0),
        (str_store_string, s21, "@Currently the province is governed by you."),
    (else_try),
        (str_store_string, s21, "@The province has no governor at all."),
    (try_end),
    (create_text_overlay, reg1, "@_You can select a new governor for {s22}. {s21}_", tf_center_justify),
    (position_set_x, pos1, 550), # Higher, means more toward the right
    (position_set_y, pos1, 710), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1100),
    (position_set_y, pos1, 1100),
    (overlay_set_size, reg1, pos1),

    (try_begin),
        (gt, "$temp_troop", -1),
        (troop_get_slot, ":personality", "$temp_troop", slot_lord_reputation_type),
        (store_add, ":string", ":personality", "str_personality_archetypes"),
        (str_store_string, s22, ":string"),
        # (troop_get_slot, reg20, "$temp_troop", slot_troop_player_relation),
        (call_script, "script_troop_get_player_relation", "$temp_troop"),
        (assign, reg20, reg0),
        (create_text_overlay, reg1, "@Current relation with the governor: {reg20}. Personality of the governor: {s22}", tf_center_justify),
        (position_set_x, pos1, 550), # Higher, means more toward the right
        (position_set_y, pos1, 685), # Higher, means more toward the top
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 1100),
        (position_set_y, pos1, 1100),
        (overlay_set_size, reg1, pos1),
    (try_end),

    (try_begin),
        (gt, "$temp_troop", -1),
        # (store_mul, ":troop", "$temp_troop", 2),
        (create_mesh_overlay_with_tableau_material, reg0, -1, "tableau_troop_note_mesh", "$temp_troop"),
        (position_set_x, pos1, 10),
        (position_set_y, pos1, 540),
        (overlay_set_position, reg0, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 500),
        (overlay_set_size, reg0, pos1),
    (try_end),

    #get additional information about the province
    (call_script, "script_get_province_relation_modifier", "$temp4_1", -1),
    (create_text_overlay, reg1, "str_s0", tf_center_justify),
    (position_set_x, pos1, 550), # Higher, means more toward the right
    (position_set_y, pos1, 650), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (overlay_set_color, reg1, 0x00007F),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),

    (call_script, "script_write_economic_info_to_s0", "$temp4_1", 1),
    (create_text_overlay, reg1, "str_s0", tf_center_justify),
    (position_set_x, pos1, 550), # Higher, means more toward the right
    (position_set_y, pos1, 620), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (overlay_set_color, reg1, 0x00007F),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),

    # Back to menu - graphical button
    (create_game_button_overlay, reg1, "str_return"),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 23),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_jrider_faction_report_return_to_menu", reg1),

    ##creat a lines
    (create_mesh_overlay, reg1, "mesh_white_plane"),
    (overlay_set_color, reg1, 0x000000),#line color
    (position_set_x, pos3, 200000),
    (position_set_y, pos3, 50),
    (overlay_set_size, reg1, pos3),
    (position_set_x, pos3, 0),
    (position_set_y, pos3, 530),
    (overlay_set_position, reg1, pos3),


    (create_text_overlay, reg1, "@Available nobles and companions:", tf_left_align),
    (position_set_x, pos1, 25), # Higher, means more toward the right
    (position_set_y, pos1, 510), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (overlay_set_color, reg1, 0x00007F),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),

    # # clear the string globals that we'll use
    (str_clear, s0),
    # (str_clear, s20),
    # (str_clear, s21),
    # (str_clear, s23),
    # (str_clear, s24),
    # # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
    (create_text_overlay, reg1, s0, tf_scrollable_style_2),
    (position_set_x, pos1, 50),
    (position_set_y, pos1, 50),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 450),
    (overlay_set_area_size, reg1, pos1),

    # (position_set_x, pos1, 0),
    (store_div, ":y_name", ":num_lords", 4),##get y for size of the scrollable overlay
    (val_mul, ":y_name", 210),
    (assign, ":x_name", 20),
    #text size
    (position_set_x, pos2, 900),
    (position_set_y, pos2, 900),

    # (assign, ":slot", 0),
    (set_container_overlay, reg1),#start scroll
    (try_for_range, ":active_npc", active_npcs_including_player_begin, active_npcs_end),
        (try_begin),
            (eq, ":active_npc", active_npcs_including_player_begin),
            (assign, ":active_npc", "trp_player"),
        (try_end),
        (neq, "$temp_troop", ":active_npc"),
        (assign, ":c", 0),
        (try_begin),
            (eq, ":active_npc", "trp_player"),
            (neg|troop_slot_ge, ":active_npc", slot_troop_govern, 1),
            (assign, ":c", 1),
        (else_try),
            (store_troop_faction, ":npc_faction", ":active_npc"),
            (eq, ":npc_faction", "$players_kingdom"),
            (troop_slot_eq, ":active_npc", slot_troop_occupation, slto_kingdom_hero),
            (neg|troop_slot_ge, ":active_npc", slot_troop_legion, 1),
            (neg|troop_slot_ge, ":active_npc", slot_troop_aux, 1),
            (neg|troop_slot_ge, ":active_npc", slot_troop_govern, 1),
            (assign, ":c", 1),
        (else_try),
            (main_party_has_troop, ":active_npc"),
            (neq, ":active_npc", "trp_npc35"),
            ##diplomacy start+ Prevent this from appearing for already-enfeoffed troops
            (call_script, "script_get_number_of_hero_centers", ":active_npc"),
            (eq, reg0, 0),
            (neg|troop_slot_eq, ":active_npc", slot_troop_playerparty_history, dplmc_pp_history_lord_rejoined),
            (neg|troop_slot_eq, ":active_npc", slot_troop_playerparty_history, dplmc_pp_history_granted_fief),
            (neg|troop_slot_eq, ":active_npc", slot_troop_occupation, slto_kingdom_hero),
            (neg|is_between, ":active_npc", lords_begin, lords_end),
            (neg|is_between, ":active_npc", kings_begin, kings_end),
            (neg|is_between, ":active_npc", kingdom_ladies_begin, kingdom_ladies_end),
            (assign, ":c", 1),
        (try_end),
        (eq, ":c", 1),
        (try_begin),
            (gt, ":x_name", 920),
            (assign, ":x_name", 0),
            (val_sub, ":y_name", 220),
        (try_end),
        (troop_set_slot, "trp_global_variables", g_show_troop_banner, 1),
        (create_mesh_overlay_with_tableau_material, reg0, -1, "tableau_troop_note_mesh", ":active_npc"),
        (position_set_x, pos1, ":x_name"),
        (position_set_y, pos1, ":y_name"),
        (overlay_set_position, reg0, pos1),
        (position_set_x, pos3, 500),
        (position_set_y, pos3, 500),
        (overlay_set_size, reg0, pos3),

        # #creat button
        (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
        (overlay_set_position, reg10, pos1),
        (position_set_x, pos3, 1000),
        (position_set_y, pos3, 2000),
        (overlay_set_size, reg10, pos3),
        (overlay_set_alpha, reg10, 0),
        (overlay_set_color, reg10, 0xDDDDDD),
        (troop_set_slot, "trp_temp_array_b", ":active_npc", reg10),

        (try_begin),
            (neq, ":active_npc", "trp_player"),
            (str_store_troop_name, s22, ":active_npc"),
            # (troop_get_slot, reg20, ":active_npc", slot_troop_player_relation),
            (call_script, "script_troop_get_player_relation", ":active_npc"),
            (assign, reg20, reg0),
            (create_text_overlay, reg1, "@{s22}, relation: {reg20}", tf_left_align),
            (position_set_x, pos1, ":x_name"),
            (store_sub, ":y_new", ":y_name", 20),
            (position_set_y, pos1, ":y_new"),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),
        (else_try),
            (create_text_overlay, reg1, "@You.", tf_left_align),
            (position_set_x, pos1, ":x_name"),
            (store_sub, ":y_new", ":y_name", 20),
            (position_set_y, pos1, ":y_new"),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),
        (try_end),

        (try_begin),
            (neq, ":active_npc", "trp_player"),
            (troop_get_slot, ":personality", ":active_npc", slot_lord_reputation_type),
            (store_add, ":string", ":personality", "str_personality_archetypes"),
            (str_store_string, s22, ":string"),

            (create_text_overlay, reg1, "@Personality: {s22}", tf_left_align),
            (position_set_x, pos1, ":x_name"),
            (store_sub, ":y_new", ":y_name", 40),
            (position_set_y, pos1, ":y_new"),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),
        (try_end),
        (val_add, ":x_name", 230),
    (try_end),
    (set_container_overlay, -1),#end scroll
  ]),
  ## Check for buttonpress
  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":button_pressed_id"),
    (try_begin),
        (eq, ":button_pressed_id", "$g_jrider_faction_report_return_to_menu"), # pressed  (Return to menu)
        (troop_set_slot, "trp_global_variables", g_show_troop_banner, 0),
        (try_begin),
            (eq, "$g_presentation_credits_obj_9_alpha", 1),
            (start_presentation, "prsnt_province_management"),
        (else_try),
            (start_presentation, "prsnt_worldmap_fief_selection_feudal"),
        (try_end),
    (else_try),
        (try_for_range, ":slot", active_npcs_including_player_begin, active_npcs_end),
            (try_begin),
                (eq, ":slot", active_npcs_including_player_begin),
                (assign, ":slot", "trp_player"),
            (try_end),
            (troop_slot_eq, "trp_temp_array_b", ":slot", ":button_pressed_id"),
            (assign, "$temp2", ":slot"),
            (start_presentation, "prsnt_governor_change"),
        (try_end),
    (try_end),
  ]),

  (ti_on_presentation_run, [
    (try_begin),
        (key_clicked, key_space),
        (set_fixed_point_multiplier, 1000),
        (mouse_get_position, pos31),

        (position_get_x, reg31, pos31),
        (position_get_y, reg32, pos31),

        (display_message, "@X: {reg31} | Y: {reg32}"),
    (try_end),
  ]),
]),

("governor_change", 0, 0, [
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    # #0. BACKROUND
    (create_mesh_overlay, reg0, "mesh_load_window"),
    (position_set_x, pos1, -1),
    (position_set_y, pos1, -1),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 1002),
    (position_set_y, pos1, 1002),
    (overlay_set_size, reg0, pos1),

    (store_add, ":string", "$temp4_1", "str_province_begin"),
    (str_store_string, s22, ":string"),
    (str_store_troop_name, s40, "$temp2"),
    (create_text_overlay, reg1, "@_Do you wish to appoint {s40} as governor for {s22}?", tf_center_justify),
    (position_set_x, pos1, 550), # Higher, means more toward the right
    (position_set_y, pos1, 710), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1100),
    (position_set_y, pos1, 1100),
    (overlay_set_size, reg1, pos1),

    (troop_get_slot, "$temp_troop", "trp_province_array", "$temp4_1"),
    (try_begin),
        (gt, "$temp_troop", 0),
        (str_store_troop_name, s20, "$temp_troop"),
        (str_store_string, s21, "@Currently the province is governed by {s20}."),
    (else_try),
        (eq, "$temp_troop", 0),
        (str_store_string, s21, "@Currently the province is governed by you."),
    (else_try),
        (str_store_string, s21, "@The province has no governor at all."),
    (try_end),
    (create_text_overlay, reg1, "@_{s21}_", tf_center_justify),
    (position_set_x, pos1, 550), # Higher, means more toward the right
    (position_set_y, pos1, 685), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1100),
    (position_set_y, pos1, 1100),
    (overlay_set_size, reg1, pos1),

    (try_begin),
        (gt, "$temp_troop", -1),
        (troop_get_slot, ":personality", "$temp_troop", slot_lord_reputation_type),
        (store_add, ":string", ":personality", "str_personality_archetypes"),
        (str_store_string, s22, ":string"),
        # (troop_get_slot, reg20, "$temp_troop", slot_troop_player_relation),
        (call_script, "script_troop_get_player_relation", "$temp_troop"),
        (assign, reg20, reg0),
        (str_store_troop_name_plural, s30, "$temp_troop"),
        (try_begin),
            (neq, "$temp_troop", "trp_player"),
            (create_text_overlay, reg1, "@Current governor: {s30}.^Relation: {reg20}.^Personality: {s22}", tf_center_justify),
        (else_try),
            (create_text_overlay, reg1, "@Current governor: {s30} (You).", tf_center_justify),
        (try_end),
        (position_set_x, pos1, 160), # Higher, means more toward the right
        (position_set_y, pos1, 470-100), # Higher, means more toward the top
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 1100),
        (position_set_y, pos1, 1100),
        (overlay_set_size, reg1, pos1),
    (try_end),

    (try_begin),
        (gt, "$temp_troop", -1),
        # (store_mul, ":troop", "$temp_troop", 2),
        (create_mesh_overlay_with_tableau_material, reg0, -1, "tableau_troop_note_mesh", "$temp_troop"),
        (position_set_x, pos1, 90),
        (position_set_y, pos1, 540-100),
        (overlay_set_position, reg0, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 500),
        (overlay_set_size, reg0, pos1),
    (try_end),

    (create_mesh_overlay_with_tableau_material, reg0, -1, "tableau_troop_note_mesh", "$temp2"),
    (position_set_x, pos1, 710),
    (position_set_y, pos1, 540-100),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 500),
    (overlay_set_size, reg0, pos1),

    # (troop_get_slot, reg20, "$temp2", slot_troop_player_relation),
    (call_script, "script_troop_get_player_relation", "$temp2"),
    (assign, reg20, reg0),
    (troop_get_slot, ":personality", "$temp2", slot_lord_reputation_type),
    (store_add, ":string", ":personality", "str_personality_archetypes"),
    (str_store_string, s22, ":string"),
    (str_store_troop_name, s33, "$temp2"),
    (try_begin),
        (neq, "$temp2", "trp_player"),
        (create_text_overlay, reg1, "@Choice: {s33}.^Relation: {reg20}.^Personality: {s22}", tf_center_justify),
    (else_try),
        (create_text_overlay, reg1, "@Choice: {s33} (you).", tf_center_justify),
    (try_end),
    (position_set_x, pos1, 780), # Higher, means more toward the right
    (position_set_y, pos1, 470-100), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1100),
    (position_set_y, pos1, 1100),
    (overlay_set_size, reg1, pos1),

    #get additional information about the province
    (try_begin),
        (neq, "$temp_troop", "trp_player"),
        (call_script, "script_get_province_relation_modifier", "$temp4_1", -1),
        (try_begin),
            (gt, reg0, 1),
            (gt, "$temp_troop", 0),
            (str_store_string, s0, "@{s0} Thus, replacing the current governor will result in a relation loose with him."),
        (try_end),
        (create_text_overlay, reg1, "str_s0", tf_center_justify),
        (position_set_x, pos1, 550), # Higher, means more toward the right
        (position_set_y, pos1, 650), # Higher, means more toward the top
        (overlay_set_position, reg1, pos1),
        (overlay_set_color, reg1, 0x00007F),
        (position_set_x, pos1, 1000),
        (position_set_y, pos1, 1000),
        (overlay_set_size, reg1, pos1),
    (try_end),

    # Back to menu - graphical button
    (create_game_button_overlay, reg1, "str_return"),
    (position_set_x, pos1, 250),
    (position_set_y, pos1, 23),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_jrider_faction_report_return_to_menu", reg1),

    (create_game_button_overlay, reg1, "@Accept"),
    (position_set_x, pos1, 750),
    (position_set_y, pos1, 23),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_credits_obj_1", reg1),
  ]),
   ## Check for buttonpress
  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":button_pressed_id"),
    (try_begin),
        (eq, ":button_pressed_id", "$g_jrider_faction_report_return_to_menu"), # pressed  (Return to menu)
        (start_presentation, "prsnt_governor_selection"),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_credits_obj_1"), # pressed  (Return to menu)
        (try_begin),
            (gt, "$temp_troop", -1),
            (call_script, "script_troop_set_rank", "$temp_troop", slot_troop_govern, -1),
            (call_script, "script_change_lord_party_to_fit_rank", "$temp_troop"),
        (try_end),

        (try_begin), #if it is a companion
            (is_between, "$temp2", companions_begin, companions_end),
            (troop_slot_eq, "$temp2", slot_troop_occupation, slto_player_companion),
            #banner
            # (call_script, "script_set_troop_banner_according_to_faction", "$temp2", "$players_kingdom"),

            (remove_member_from_party, "$temp2", "p_main_party"),
            (troop_set_slot, "$temp2", slot_troop_occupation, slto_kingdom_hero),
            (troop_set_slot, "$temp2", slot_troop_playerparty_history, dplmc_pp_history_granted_fief),

            (troop_set_faction, "$temp2", "fac_player_supporters_faction"),

            (try_begin),
                (troop_slot_eq, "$temp2", slot_troop_original_faction, 0),
                (troop_set_slot, "$temp2", slot_troop_original_faction, "$players_kingdom"),
            (try_end),

            (store_character_level, ":renown", "$temp2"),
            (val_mul, ":renown", 15),
            (val_max, ":renown", 200),
            (call_script, "script_change_troop_renown", "$temp2", ":renown"),

            (troop_get_slot, ":initial_wealth", "$temp2", slot_troop_wealth),
            (store_troop_gold, ":initial_gold", "$temp2"), #SB : account actual abstracted wealth
            (val_add, ":initial_gold", ":initial_wealth"),

            (store_skill_level, ":modifier", "skl_trade", "$temp2"),
            (store_skill_level, ":skill_level", "skl_looting", "$temp2"),
            (val_add, ":modifier", ":skill_level"),
            (val_add, ":modifier", 10),
            (val_mul, ":initial_gold", ":modifier"),
            (val_add, ":initial_gold", 5),
            (val_div, ":initial_gold", 10),

            (troop_set_slot, "$temp2", slot_troop_wealth, ":initial_gold"), #represents accumulated loot
            ##diplomacy end+

            #SB : add a decent horse if none present
            (try_begin),
                (troop_slot_eq, "$temp2", dplmc_slot_upgrade_horse, 1),
                (troop_get_inventory_slot, ":cur_horse", "$temp2", ek_horse),
                (eq, ":cur_horse", -1),
                (store_random_in_range, ":item_no","itm_horse_1", "itm_steppe_horse_1"),
                (troop_set_inventory_slot, "$temp2", ek_horse, ":item_no"),
                (store_random_in_range, ":imod", imod_stubborn, imod_fresh),
                (troop_set_inventory_slot_modifier, "$temp2", ek_horse, ":imod"),
            (try_end),

            #civilian equipment
            (troop_add_item, "$temp2", "itm_graves_simple_2"),
            (troop_add_item, "$temp2", "itm_roman_toga"),

            #SB : change troop base type (if player hasn't touched it already) after adding equipment
            (try_begin),
                (troop_get_class, ":class", "$temp2"),
                (eq, ":class", grc_infantry),
                (assign, ":slot_end", ek_head),
                (try_for_range, ":item_slot", ek_item_0, ":slot_end"),
                    (troop_get_inventory_slot, ":item_no", "$temp2", ":item_slot"),
                    (gt, ":item_no", -1),
                    (item_get_type, ":itp", ":item_no"),
                    (this_or_next|is_between, ":itp", itp_type_bow, itp_type_goods),
                    (is_between, ":itp", itp_type_pistol, itp_type_bullets),
                    (assign, ":class", grc_archers),
                    (assign, ":slot_end", -1),
                (try_end),
                (try_begin),
                    (troop_get_inventory_slot, ":cur_horse", "$temp2", ek_horse),
                    (gt, ":cur_horse", -1),
                    (assign, ":class", grc_cavalry),
                (try_end),
                (troop_set_class, "$temp2", ":class"),
            (try_end),

            (troop_set_auto_equip, "$temp2", 1), #dckplmc

            (call_script, "script_dplmc_npc_morale", "$temp2", 0), #just get the number
            (store_div, ":relation_boost", reg0, 3),
            (call_script, "script_troop_change_relation_with_troop", "$temp2", "trp_player", ":relation_boost"),
        (try_end),#END companion

        (call_script, "script_troop_set_rank", "$temp2", slot_troop_govern, "$temp4_1"),

        (try_for_range, ":center", walled_centers_begin, walled_centers_end),
            (store_faction_of_party, ":center_faction", ":center"),
            (eq, ":center_faction", "$players_kingdom"),
            (party_get_slot, ":province", ":center", slot_center_province),
            (eq, ":province", "$temp4_1"),
            (call_script, "script_give_center_to_lord2", ":center", "$temp2", 0),
        (try_end),

        (call_script, "script_get_province_relation_modifier", "$temp4_1", "$temp2"),
        (assign, ":relation_change", reg0),
        (call_script, "script_troop_change_relation_with_troop", "trp_player", "$temp2", ":relation_change"),

        (try_begin),
            (gt, "$temp_troop", 0),
            (gt, ":relation_change", 0),
            (val_mul, ":relation_change", -1),
            (call_script, "script_troop_change_relation_with_troop", "trp_player", "$temp_troop", ":relation_change"),
        (try_end),

        (troop_set_slot, "trp_province_array", "$temp4_1", "$temp2"),

        (troop_set_slot, "trp_global_variables", g_show_troop_banner, 0),
        (start_presentation, "prsnt_province_management"),
    (try_end),
  ]),

  (ti_on_presentation_run, [
    (try_begin),
        (key_clicked, key_space),
        (set_fixed_point_multiplier, 1000),
        (mouse_get_position, pos31),

        (position_get_x, reg31, pos31),
        (position_get_y, reg32, pos31),

        (display_message, "@X: {reg31} | Y: {reg32}"),
    (try_end),
  ]),
]),

("make_province_senatorial", 0, 0,[
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    # #0. BACKROUND
    (create_mesh_overlay, reg0, "mesh_load_window"),
    (position_set_x, pos1, -1),
    (position_set_y, pos1, -1),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 1002),
    (position_set_y, pos1, 1002),
    (overlay_set_size, reg0, pos1),

    (store_add, ":string", "$temp4_1", "str_province_begin"),
    (str_store_string, s22, ":string"),
    (str_store_troop_name, s40, "$temp2"),
    (create_text_overlay, reg1, "@Are you sure you want to make {s22} a senatorial province?", tf_center_justify),
    (position_set_x, pos1, 550), # Higher, means more toward the right
    (position_set_y, pos1, 710), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1100),
    (position_set_y, pos1, 1100),
    (overlay_set_size, reg1, pos1),

    (troop_get_slot, "$temp_troop", "trp_province_array", "$temp4_1"),
    (try_begin),
        (gt, "$temp_troop", 0),
        (str_store_troop_name, s20, "$temp_troop"),
        (str_store_string, s21, "@Currently the province is governed by {s20}. The current governor will continue governing the province for one year and then the senate will elect a new one."),
    (else_try),
        (eq, "$temp_troop", 0),
        (str_store_string, s21, "@Currently the province is governed by you. You will continue governing the province for one year and then the senate will elect a new one."),
    (else_try),
        (str_store_string, s21, "@The province has no governor at all."),
    (try_end),
    (create_text_overlay, reg1, "@{s21}", tf_center_justify),
    (position_set_x, pos1, 550), # Higher, means more toward the right
    (position_set_y, pos1, 680), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),

    (try_begin),
        (gt, "$temp_troop", -1),
        (troop_get_slot, ":personality", "$temp_troop", slot_lord_reputation_type),
        (store_add, ":string", ":personality", "str_personality_archetypes"),
        (str_store_string, s22, ":string"),
        # (troop_get_slot, reg20, "$temp_troop", slot_troop_player_relation),
        (call_script, "script_troop_get_player_relation", "$temp_troop"),
        (assign, reg20, reg0),
        (str_store_troop_name_plural, s30, "$temp_troop"),
        (try_begin),
            (neq, "$temp_troop", "trp_player"),
            (create_text_overlay, reg1, "@Current governor: {s30}.^Relation: {reg20}.^Personality: {s22}", tf_center_justify),
        (else_try),
            (create_text_overlay, reg1, "@Current governor: {s30} (You).", tf_center_justify),
        (try_end),
        (position_set_x, pos1, 160), # Higher, means more toward the right
        (position_set_y, pos1, 470-100), # Higher, means more toward the top
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 1100),
        (position_set_y, pos1, 1100),
        (overlay_set_size, reg1, pos1),
    (try_end),

    (try_begin),
        (gt, "$temp_troop", -1),
        # (store_mul, ":troop", "$temp_troop", 2),
        (create_mesh_overlay_with_tableau_material, reg0, -1, "tableau_troop_note_mesh", "$temp_troop"),
        (position_set_x, pos1, 90),
        (position_set_y, pos1, 540-100),
        (overlay_set_position, reg0, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 500),
        (overlay_set_size, reg0, pos1),
    (try_end),

    #get additional information about the province
    (call_script, "script_get_province_relation_modifier", "$temp4_1", -1),
    (create_text_overlay, reg1, "str_s0", tf_center_justify),
    (position_set_x, pos1, 550), # Higher, means more toward the right
    (position_set_y, pos1, 650), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (overlay_set_color, reg1, 0x00007F),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),

    (create_text_overlay, reg1, "@A hint from your advisors: Senatorial provinces are known to be more corrupt as imperial provinces, as there is no way to inspect them via procurators. Also during events the possible choices will be limited.", tf_scrollable_style_2),
    (position_set_x, pos1, 475), # Higher, means more toward the right
    (position_set_y, pos1, 200), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (overlay_set_color, reg1, 0x00007F),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 400),
    (position_set_y, pos1, 300),
    (overlay_set_area_size, reg1, pos1),


    # Back to menu - graphical button
    (create_game_button_overlay, reg1, "str_return"),
    (position_set_x, pos1, 250),
    (position_set_y, pos1, 23),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_jrider_faction_report_return_to_menu", reg1),

    (create_game_button_overlay, reg1, "@Accept"),
    (position_set_x, pos1, 750),
    (position_set_y, pos1, 23),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_credits_obj_1", reg1),
  ]),
  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":button_pressed_id"),
    (try_begin),
        (eq, ":button_pressed_id", "$g_jrider_faction_report_return_to_menu"), # pressed  (Return to menu)
        (start_presentation, "prsnt_province_management"),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_credits_obj_1"), # pressed  (Return to menu)

        (call_script, "script_change_player_relation_with_center", "p_town_6", 25),
        (call_script, "script_change_senate_support", 15, 0),
        (store_add, ":slot", slot_province_senatorial_begin, "$temp4_1"),
        (troop_set_slot, "trp_province_array", ":slot", 84),#
        (start_presentation, "prsnt_province_management"),
    (try_end),
  ]),
  (ti_on_presentation_run, [
    (try_begin),
        (key_clicked, key_space),
        (set_fixed_point_multiplier, 1000),
        (mouse_get_position, pos31),

        (position_get_x, reg31, pos31),
        (position_get_y, reg32, pos31),

        (display_message, "@X: {reg31} | Y: {reg32}"),
    (try_end),
  ]),
]),

("make_province_imperial", 0, 0, [
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    # #0. BACKROUND
    (create_mesh_overlay, reg0, "mesh_load_window"),
    (position_set_x, pos1, -1),
    (position_set_y, pos1, -1),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 1002),
    (position_set_y, pos1, 1002),
    (overlay_set_size, reg0, pos1),

    (store_add, ":string", "$temp4_1", "str_province_begin"),
    (str_store_string, s22, ":string"),
    (str_store_troop_name, s40, "$temp2"),
    (troop_get_slot, reg10, "trp_senator_dummy", slot_senate_support),
    (create_text_overlay, reg1, "@Are you sure you want to make {s22} an imperial province?^Required senate support: 66%. Current senate support: {reg10}.", tf_center_justify),
    (position_set_x, pos1, 550), # Higher, means more toward the right
    (position_set_y, pos1, 680), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1100),
    (position_set_y, pos1, 1100),
    (overlay_set_size, reg1, pos1),

    (troop_get_slot, "$temp_troop", "trp_province_array", "$temp4_1"),
    (try_begin),
        (gt, "$temp_troop", 0),
        (str_store_troop_name, s20, "$temp_troop"),
        (str_store_string, s21, "@Currently the province is governed by {s20}. The current governor will continue governing the province until you change him."),
    (else_try),
        (eq, "$temp_troop", 0),
        (str_store_string, s21, "@Currently the province is governed by you. You will continue governing the province until you change him."),
    (else_try),
        (str_store_string, s21, "@The province has no governor at all. You will have to elect one."),
    (try_end),
    (create_text_overlay, reg1, "@_{s21}_", tf_center_justify),
    (position_set_x, pos1, 550), # Higher, means more toward the right
    (position_set_y, pos1, 650), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),

    (try_begin),
        (gt, "$temp_troop", -1),
        (troop_get_slot, ":personality", "$temp_troop", slot_lord_reputation_type),
        (store_add, ":string", ":personality", "str_personality_archetypes"),
        (str_store_string, s22, ":string"),
        # (troop_get_slot, reg20, "$temp_troop", slot_troop_player_relation),
        (call_script, "script_troop_get_player_relation", "$temp_troop"),
        (assign, reg20, reg0),
        (str_store_troop_name_plural, s30, "$temp_troop"),
        (try_begin),
            (neq, "$temp_troop", "trp_player"),
            (create_text_overlay, reg1, "@Current governor: {s30}.^Relation: {reg20}.^Personality: {s22}", tf_center_justify),
        (else_try),
            (create_text_overlay, reg1, "@Current governor: {s30} (You).", tf_center_justify),
        (try_end),
        (position_set_x, pos1, 160), # Higher, means more toward the right
        (position_set_y, pos1, 470-100), # Higher, means more toward the top
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 1100),
        (position_set_y, pos1, 1100),
        (overlay_set_size, reg1, pos1),
    (try_end),

    (try_begin),
        (gt, "$temp_troop", -1),
        # (store_mul, ":troop", "$temp_troop", 2),
        (create_mesh_overlay_with_tableau_material, reg0, -1, "tableau_troop_note_mesh", "$temp_troop"),
        (position_set_x, pos1, 90),
        (position_set_y, pos1, 540-100),
        (overlay_set_position, reg0, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 500),
        (overlay_set_size, reg0, pos1),
    (try_end),

    #get additional information about the province
    (call_script, "script_get_province_relation_modifier", "$temp4_1", -1),
    (create_text_overlay, reg1, "str_s0", tf_center_justify),
    (position_set_x, pos1, 550), # Higher, means more toward the right
    (position_set_y, pos1, 620), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (overlay_set_color, reg1, 0x00007F),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),

    (create_text_overlay, reg1, "@A hint from your advisors: Senatorial provinces are known to be more corrupt as imperial provinces, as there is no way to inspect them via procurators. Also during events the possible choices will be limited.", tf_scrollable_style_2),
    (position_set_x, pos1, 475), # Higher, means more toward the right
    (position_set_y, pos1, 200), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (overlay_set_color, reg1, 0x00007F),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 400),
    (position_set_y, pos1, 300),
    (overlay_set_area_size, reg1, pos1),


    # Back to menu - graphical button
    (create_game_button_overlay, reg1, "str_return"),
    (position_set_x, pos1, 250),
    (position_set_y, pos1, 23),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_jrider_faction_report_return_to_menu", reg1),

    (create_game_button_overlay, reg1, "@Accept"),
    (position_set_x, pos1, 750),
    (position_set_y, pos1, 23),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_credits_obj_1", reg1),
  ]),
  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":button_pressed_id"),
    (try_begin),
        (eq, ":button_pressed_id", "$g_jrider_faction_report_return_to_menu"), # pressed  (Return to menu)
        (start_presentation, "prsnt_influence_senate"),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_credits_obj_1"), # pressed  (Return to menu)

        (try_begin),
            (troop_slot_ge, "trp_senator_dummy", slot_senate_support, 66),
            (call_script, "script_change_player_relation_with_center", "p_town_6", -35),
            (store_mul, ":support_lost", number_of_senators, -1),
            (val_div, ":support_lost", 2),
            (call_script, "script_change_senate_support", ":support_lost", 0),
            (store_add, ":slot", slot_province_senatorial_begin, "$temp4_1"),
            (troop_set_slot, "trp_province_array", ":slot", 0),#
            (start_presentation, "prsnt_influence_senate"),
        (else_try),
            (display_message, "@You need more senate support!", message_alert),
        (try_end),
    (try_end),
  ]),
  (ti_on_presentation_run, [
    (try_begin),
        (key_clicked, key_space),
        (set_fixed_point_multiplier, 1000),
        (mouse_get_position, pos31),

        (position_get_x, reg31, pos31),
        (position_get_y, reg32, pos31),

        (display_message, "@X: {reg31} | Y: {reg32}"),
    (try_end),
  ]),
]),

("province_notifiction_player", 0, 0, [
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    # #0. BACKROUND
    (create_mesh_overlay, reg0, "mesh_load_window"),
    (position_set_x, pos1, -1),
    (position_set_y, pos1, -1),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 1002),
    (position_set_y, pos1, 1002),
    (overlay_set_size, reg0, pos1),

    #init variables
    (assign, ":num_lords", 0),
    (try_for_range, ":active_npc", active_npcs_begin, active_npcs_end),
        (troop_set_slot, "trp_temp_array_b", ":active_npc", 0),
        (store_troop_faction, ":npc_faction", ":active_npc"),
        (eq, ":npc_faction", "$players_kingdom"),
        (troop_slot_eq, ":active_npc", slot_troop_occupation, slto_kingdom_hero),
        (neg|troop_slot_ge, ":active_npc", slot_troop_legion, 1),
        (neg|troop_slot_ge, ":active_npc", slot_troop_aux, 1),
        (neg|troop_slot_ge, ":active_npc", slot_troop_govern, 1),
        (val_add, ":num_lords", 1),
    (try_end),

    (store_add, ":slot", "$g_notification_menu_var2", slot_province_senatorial_begin),
    (troop_get_slot, ":is_senatorial", "trp_province_array", ":slot"),

    (store_faction_of_troop, ":faction", "$g_notification_menu_var1"),
    (try_begin),
        (ge, ":is_senatorial", 1),
        (store_current_day, ":day"),
        (val_add, ":day", 84),
        (troop_set_slot, "trp_province_array", ":slot", ":day"),#reset timer
        (str_store_string, s23, "@The senate"),
    (else_try),
        (faction_get_slot, ":leader", ":faction", slot_faction_leader),
        (str_store_troop_name, s23, ":leader"),
    (try_end),

    (store_add, ":string", "$g_notification_menu_var2", "str_province_begin"),
    (str_store_string, s22, ":string"),
    (str_store_troop_name, s40, "$g_notification_menu_var1"),
    (call_script, "script_write_economic_info_to_s0", "$g_notification_menu_var2", 0),
    (str_clear, s1),
    (try_begin),
        (le, "$g_is_emperor", 0),
        (str_store_string, s1, "@ You can also select yourself for the honor, if you have no governorship already. "),
    (try_end),

    (create_text_overlay, reg1, "@{s23} decided that {s40} shall recieve governorship of {s22}. You may use your influence to change the decision. Just press on the portrait of a character to select him as new governor. Your influence will be reduced accordingly.{s1}{s0}", tf_scrollable_style_2|tf_center_justify),
    (position_set_x, pos1, 950),
    (position_set_y, pos1, 950),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 225),
    (position_set_y, pos1, 650),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 700),
    (position_set_y, pos1, 80),
    (overlay_set_area_size, reg1, pos1),

    #get additional information about the province
    (call_script, "script_get_province_relation_modifier", "$g_notification_menu_var2", -1),#the text here is for emperor
    (create_text_overlay, reg1, "str_s0", tf_scrollable_style_2|tf_center_justify),
    (position_set_x, pos1, 950),
    (position_set_y, pos1, 950),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 225),
    (position_set_y, pos1, 590),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 700),
    (position_set_y, pos1, 60),
    (overlay_set_area_size, reg1, pos1),
    (overlay_set_color, reg1, 0x0000FF),

    (try_begin),
        (ge, ":is_senatorial", 1),
        (troop_get_slot, reg22, "trp_senator_dummy", slot_senate_support),
        (str_store_string, s23, "@Senate support: {reg22}"),
    (else_try),
        (troop_get_slot, reg22, "trp_player", slot_troop_influence),
        (str_store_string, s23, "@Influence: {reg22}"),
    (try_end),
    (create_text_overlay, reg1, "@{s23}", tf_center_justify),
    (position_set_x, pos1, 560), # Higher, means more toward the right
    (position_set_y, pos1, 570), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),

    (troop_set_slot, "trp_global_variables", g_show_troop_banner, 1),
    (create_mesh_overlay_with_tableau_material, reg0, -1, "tableau_troop_note_mesh", "$g_notification_menu_var1"),
    (position_set_x, pos1, 40),
    (position_set_y, pos1, 580),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 450),
    (position_set_y, pos1, 450),
    (overlay_set_size, reg0, pos1),

    (troop_get_slot, ":personality", "$g_notification_menu_var1", slot_lord_reputation_type),
    (store_add, ":string", ":personality", "str_personality_archetypes"),
    (str_store_string, s22, ":string"),
    # (troop_get_slot, reg20, "$g_notification_menu_var1", slot_troop_player_relation),
    (call_script, "script_troop_get_player_relation", "$g_notification_menu_var1"),
    (assign, reg20, reg0),
    (str_store_troop_name_plural, s30, "$g_notification_menu_var1"),
    (create_text_overlay, reg1, "@Canditate: {s30}.^Relation: {reg20}.^Personality: {s22}", tf_center_justify),
    (position_set_x, pos1, 110), # Higher, means more toward the right
    (position_set_y, pos1, 515), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 950),
    (position_set_y, pos1, 950),
    (overlay_set_size, reg1, pos1),


    # Back to menu - graphical button
    (create_game_button_overlay, reg1, "str_return"),
    (position_set_x, pos1, 450),
    (position_set_y, pos1, 20),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_jrider_faction_report_return_to_menu", reg1),

    # (create_game_button_overlay, reg1, "@Accept"),
    # (position_set_x, pos1, 750),
    # (position_set_y, pos1, 23),
    # (overlay_set_position, reg1, pos1),
    # (assign, "$g_presentation_credits_obj_1", reg1),

    # # clear the string globals that we'll use
    (str_clear, s0),
    # (str_clear, s20),
    # (str_clear, s21),
    # (str_clear, s23),
    # (str_clear, s24),
    # # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
    (create_text_overlay, reg1, s0, tf_scrollable_style_2),
    (position_set_x, pos1, 50),
    (position_set_y, pos1, 50),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 450),
    (overlay_set_area_size, reg1, pos1),

    # (position_set_x, pos1, 0),
    (store_div, ":y_name", ":num_lords", 4),##get y for size of the scrollable overlay
    (val_mul, ":y_name", 225),
    (assign, ":x_name", 20),
    #text size
    (position_set_x, pos2, 900),
    (position_set_y, pos2, 900),

    (set_container_overlay, reg1),#start scroll
    (try_for_range, ":active_npc", active_npcs_including_player_begin, active_npcs_end),
        (neq, ":active_npc", "$g_notification_menu_var1"),
        (try_begin),
            (eq, ":active_npc", active_npcs_including_player_begin),
            (le, "$g_is_emperor", 0),
            (assign, ":active_npc", "trp_player"),
            (assign, ":npc_faction", "$players_kingdom"),
        (else_try),
            (store_troop_faction, ":npc_faction", ":active_npc"),
        (try_end),
        (neq, ":active_npc", active_npcs_including_player_begin),
        (eq, ":npc_faction", "$players_kingdom"),
        (troop_slot_eq, ":active_npc", slot_troop_occupation, slto_kingdom_hero),
        (neg|troop_slot_ge, ":active_npc", slot_troop_legion, 1),
        (neg|troop_slot_ge, ":active_npc", slot_troop_aux, 1),
        (neg|troop_slot_ge, ":active_npc", slot_troop_govern, 1),

        (try_begin),
            (gt, ":x_name", 920),
            (assign, ":x_name", 0),
            (val_sub, ":y_name", 220),
        (try_end),
        (troop_set_slot, "trp_global_variables", g_show_troop_banner, 1),
        (create_mesh_overlay_with_tableau_material, reg0, -1, "tableau_troop_note_mesh", ":active_npc"),
        (position_set_x, pos1, ":x_name"),
        (position_set_y, pos1, ":y_name"),
        (overlay_set_position, reg0, pos1),
        (position_set_x, pos3, 450),
        (position_set_y, pos3, 450),
        (overlay_set_size, reg0, pos3),

        # #creat button
        (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
        (overlay_set_position, reg10, pos1),
        (position_set_x, pos3, 1000),
        (position_set_y, pos3, 2000),
        (overlay_set_size, reg10, pos3),
        (overlay_set_alpha, reg10, 0),
        (overlay_set_color, reg10, 0xDDDDDD),
        (troop_set_slot, "trp_temp_array_b", ":active_npc", reg10),

        (try_begin),
            (le, ":is_senatorial", 0),
            (troop_get_slot, ":influence", "trp_player", slot_troop_influence),
        (else_try),
            (troop_get_slot, ":influence", "trp_senator_dummy", slot_senate_support),
        (try_end),

        (try_begin),
            (neq, ":active_npc", "trp_player"),
            (str_store_troop_name, s22, ":active_npc"),
            # (troop_get_slot, reg20, ":active_npc", slot_troop_player_relation),
            (call_script, "script_troop_get_player_relation", ":active_npc"),
            (assign, reg20, reg0),
            (create_text_overlay, reg1, "@{s22}, relation: {reg20}", tf_left_align),
            (position_set_x, pos1, ":x_name"),
            (store_sub, ":y_new", ":y_name", 20),
            (position_set_y, pos1, ":y_new"),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),

            (troop_get_slot, ":personality", ":active_npc", slot_lord_reputation_type),
            (store_add, ":string", ":personality", "str_personality_archetypes"),
            (str_store_string, s22, ":string"),

            (create_text_overlay, reg1, "@Personality: {s22}", tf_left_align),
            (position_set_x, pos1, ":x_name"),
            (store_sub, ":y_new", ":y_name", 40),
            (position_set_y, pos1, ":y_new"),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),

            (call_script, "script_get_influence_cost_for_decision", ":active_npc", decision_governorship, "$g_notification_menu_var2"),
            (create_text_overlay, reg1, "@Influence cost: {reg0}", tf_left_align),
            (try_begin),
                (gt, ":influence", reg0),
                (overlay_set_color, reg1, 0x00b300),
            (else_try),
                (overlay_set_color, reg1, 0xff0000),
            (try_end),

            (position_set_x, pos1, ":x_name"),
            (store_sub, ":y_new", ":y_name", 60),
            (position_set_y, pos1, ":y_new"),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),

        (else_try),
            (create_text_overlay, reg1, "@You.", tf_left_align),
            (position_set_x, pos1, ":x_name"),
            (store_sub, ":y_new", ":y_name", 20),
            (position_set_y, pos1, ":y_new"),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),

            (call_script, "script_get_influence_cost_for_decision", ":active_npc", decision_governorship, "$g_notification_menu_var2"),
            (create_text_overlay, reg1, "@Influence cost: {reg0}", tf_left_align),
            (try_begin),
                (gt, ":influence", reg0),
                (overlay_set_color, reg1, 0x00b300),
            (else_try),
                (overlay_set_color, reg1, 0xff0000),
            (try_end),
            (position_set_x, pos1, ":x_name"),
            (store_sub, ":y_new", ":y_name", 40),
            (position_set_y, pos1, ":y_new"),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),
        (try_end),
        (val_add, ":x_name", 230),
    (try_end),
    (set_container_overlay, -1),#end scroll
  ]),
 ## Check for buttonpress
  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":button_pressed_id"),
    (try_begin),
        (eq, ":button_pressed_id", "$g_jrider_faction_report_return_to_menu"), # pressed  (Return to menu)
        (troop_get_slot, ":old_governor", "trp_province_array", "$g_notification_menu_var2"),
        (try_begin),
            (gt, ":old_governor", -1),
            (neq, ":old_governor", "$g_notification_menu_var1"),
            (call_script, "script_troop_set_rank", ":old_governor", slot_troop_govern, -1),
            (call_script, "script_change_lord_party_to_fit_rank", ":old_governor"),
        (try_end),

        (call_script, "script_troop_set_rank", "$g_notification_menu_var1", slot_troop_govern, "$g_notification_menu_var2"),

        (try_for_range, ":center", walled_centers_begin, walled_centers_end),
            (store_faction_of_party, ":center_faction", ":center"),
            (eq, ":center_faction", "$players_kingdom"),
            (party_get_slot, ":province", ":center", slot_center_province),
            (eq, ":province", "$g_notification_menu_var2"),
            (call_script, "script_give_center_to_lord2", ":center", "$g_notification_menu_var1", 0),
        (try_end),

        (call_script, "script_get_province_relation_modifier", "$g_notification_menu_var2", "$g_notification_menu_var1"),
        (assign, ":relation_change", reg0),
        (faction_get_slot, ":leader", "$players_kingdom", slot_faction_leader),
        (call_script, "script_troop_change_relation_with_troop", ":leader", "$g_notification_menu_var1", ":relation_change"),

        (troop_set_slot, "trp_province_array", "$g_notification_menu_var2", "$g_notification_menu_var1"),

        (troop_set_slot, "trp_global_variables", g_show_troop_banner, 0),
        (jump_to_menu, "mnu_auto_return_map"),
        (presentation_set_duration, 0),
    (else_try),
        (store_add, ":slot", "$g_notification_menu_var2", slot_province_senatorial_begin),
        (troop_get_slot, ":is_senatorial", "trp_province_array", ":slot"),
        (try_begin),
            (le, ":is_senatorial", 0),
            (troop_get_slot, ":influence", "trp_player", slot_troop_influence),
        (else_try),
            (troop_get_slot, ":influence", "trp_senator_dummy", slot_senate_support),
        (try_end),
        (try_for_range, ":choice", active_npcs_including_player_begin, active_npcs_end),

            (try_begin),
                (eq, ":choice", active_npcs_including_player_begin),
                (assign, ":choice", "trp_player"),
            (try_end),

            (troop_slot_eq, "trp_temp_array_b", ":choice", ":button_pressed_id"),

            (call_script, "script_get_influence_cost_for_decision", ":choice", decision_governorship, "$g_notification_menu_var2"),
            (assign, ":cost", reg0),
            (try_begin),
                (lt, ":influence", ":cost"),
                (display_message, "@You don't have enough influence!", color_bad_news),
            (try_end),
            (ge, ":influence", ":cost"),

            (val_mul, ":cost", -1),
            (try_begin),
                (le, ":is_senatorial", 0),
                (call_script, "script_change_influence", "trp_player", ":cost"),
            (else_try),
                (val_mul, ":cost", number_of_senators),
                (val_div, ":cost", 100),
                (call_script, "script_change_senate_support", ":cost", 0),
            (try_end),

            (troop_get_slot, ":old_governor", "trp_province_array", "$g_notification_menu_var2"),
            (try_begin),
                (gt, ":old_governor", -1),
                (call_script, "script_troop_set_rank", ":old_governor", slot_troop_govern, -1),
                (call_script, "script_change_lord_party_to_fit_rank", ":old_governor"),
            (try_end),

            (call_script, "script_troop_set_rank", ":choice", slot_troop_govern, "$g_notification_menu_var2"),

            (try_for_range, ":center", walled_centers_begin, walled_centers_end),
                (store_faction_of_party, ":center_faction", ":center"),
                (eq, ":center_faction", "$players_kingdom"),
                (party_get_slot, ":province", ":center", slot_center_province),
                (eq, ":province", "$g_notification_menu_var2"),
                (call_script, "script_give_center_to_lord2", ":center", ":choice", 0),
            (try_end),

            (call_script, "script_get_province_relation_modifier", "$g_notification_menu_var2", ":choice"),
            (assign, ":relation_change", reg0),
            (call_script, "script_troop_change_relation_with_troop", "trp_player", ":choice", ":relation_change"),

            # (try_begin),
                # (gt, "$temp_troop", 0),
                # (gt, ":relation_change", 0),
                # (val_mul, ":relation_change", -1),
                # (call_script, "script_troop_change_relation_with_troop", "trp_player", "$temp_troop", ":relation_change"),
            # (try_end),

            (troop_set_slot, "trp_province_array", "$g_notification_menu_var2", ":choice"),

            (troop_set_slot, "trp_global_variables", g_show_troop_banner, 0),
            (jump_to_menu, "mnu_auto_return_map"),
            (presentation_set_duration, 0),
        (try_end),
    (try_end),
  ]),

  (ti_on_presentation_run, [
    (try_begin),
        (key_clicked, key_space),
        (set_fixed_point_multiplier, 1000),
        (mouse_get_position, pos31),

        (position_get_x, reg31, pos31),
        (position_get_y, reg32, pos31),

        (display_message, "@X: {reg31} | Y: {reg32}"),
    (try_end),
  ]),
]),

("influence_governor_change", 0, 0, [
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    # #0. BACKROUND
    (create_mesh_overlay, reg0, "mesh_load_window"),
    (position_set_x, pos1, -1),
    (position_set_y, pos1, -1),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 1002),
    (position_set_y, pos1, 1002),
    (overlay_set_size, reg0, pos1),

    #init variables
    (assign, ":num_lords", 0),
    (try_for_range, ":active_npc", active_npcs_including_player_begin, active_npcs_end),
        (try_begin),
            (eq, ":active_npc", active_npcs_including_player_begin),
            (assign, ":active_npc", "trp_player"),
            (assign, ":npc_faction", "$players_kingdom"),
        (else_try),
            (store_troop_faction, ":npc_faction", ":active_npc"),
        (try_end),
        (troop_set_slot, "trp_temp_array_b", ":active_npc", 0),

        (eq, ":npc_faction", "$players_kingdom"),
        (troop_slot_eq, ":active_npc", slot_troop_occupation, slto_kingdom_hero),
        (neg|troop_slot_ge, ":active_npc", slot_troop_legion, 1),
        (neg|troop_slot_ge, ":active_npc", slot_troop_aux, 1),
        (neg|troop_slot_ge, ":active_npc", slot_troop_govern, 1),
        (val_add, ":num_lords", 1),
    (try_end),

    (store_add, ":string", "$g_notification_menu_var2", "str_province_begin"),
    (str_store_string, s22, ":string"),
    (str_store_troop_name, s40, "$g_notification_menu_var1"),
    (call_script, "script_write_economic_info_to_s0", "$g_notification_menu_var2", 0),
    (create_text_overlay, reg1, "@{s40} is currently governor of {s22}. You may use your influence to assign a new governor.^Economic information: {s0}", tf_scrollable|tf_center_justify),
    (position_set_x, pos1, 155), # Higher, means more toward the right
    (position_set_y, pos1, 610), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 750),
    (position_set_y, pos1, 100),
    (overlay_set_area_size, reg1, pos1),

    (troop_get_slot, reg22, "trp_player", slot_troop_influence),
    (str_store_string, s23, "@Your influence: {reg22}"),
    (create_text_overlay, reg1, "@{s23}", tf_center_justify),
    (position_set_x, pos1, 530), # Higher, means more toward the right
    (position_set_y, pos1, 700-100), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),

    (troop_set_slot, "trp_global_variables", g_show_troop_banner, 1),
    (create_mesh_overlay_with_tableau_material, reg0, -1, "tableau_troop_note_mesh", "$g_notification_menu_var1"),
    (position_set_x, pos1, 20),
    (position_set_y, pos1, 540),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 500),
    (overlay_set_size, reg0, pos1),

    (troop_get_slot, ":personality", "$g_notification_menu_var1", slot_lord_reputation_type),
    (store_add, ":string", ":personality", "str_personality_archetypes"),
    (str_store_string, s22, ":string"),
    # (troop_get_slot, reg20, "$g_notification_menu_var1", slot_troop_player_relation),
    (call_script, "script_troop_get_player_relation", "$g_notification_menu_var1"),
    (assign, reg20, reg0),
    (str_store_troop_name_plural, s30, "$g_notification_menu_var1"),
    (create_text_overlay, reg1, "@Canditate: {s30}.^Relation: {reg20}.^Personality: {s22}", tf_center_justify),
    (position_set_x, pos1, 90), # Higher, means more toward the right
    (position_set_y, pos1, 470), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1100),
    (position_set_y, pos1, 1100),
    (overlay_set_size, reg1, pos1),

    #get additional information about the province
    (call_script, "script_get_province_relation_modifier", "$g_notification_menu_var2", -1),#the text here is for emperor
    # (assign,":easy_to_rule",reg0),
    # (try_begin),
        # (eq, ":easy_to_rule", -1),
        # (str_store_string, s0, "@The provine of {s1} is considered to be unruly. Whom ever you support with your influence will lose some relation with you."),
    # (else_try),
        # (eq, ":easy_to_rule", -2),
        # (str_store_string, s0, "@The provine of {s1} is considered to be unruly and rebellious. Whom ever you support with your influence will lose relation with you."),
    # (else_try),
        # (eq, ":easy_to_rule", 1),
        # (str_store_string, s0, "@The provine of {s1} is considered to be easy to rule. Whom ever you support with your influence will some gain relation with you."),
    # (else_try),
        # (eq, ":easy_to_rule", 2),
        # (str_store_string, s0, "@The provine of {s1} is considered to be easy to rule and prestigious. Whom ever you support with your influence will gain relation with you."),
    # (try_end),
    (create_text_overlay, reg1, "str_s0", tf_scrollable|tf_center_justify),
    (overlay_set_color, reg1, 0x00007F),
    (position_set_x, pos1, 155), # Higher, means more toward the right
    (position_set_y, pos1, 570), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 750),
    (position_set_y, pos1, 100),
    (overlay_set_area_size, reg1, pos1),

    # Back to menu - graphical button
    (create_game_button_overlay, reg1, "str_return"),
    (position_set_x, pos1, 450),
    (position_set_y, pos1, 20),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_jrider_faction_report_return_to_menu", reg1),

    # (create_game_button_overlay, reg1, "@Accept"),
    # (position_set_x, pos1, 750),
    # (position_set_y, pos1, 23),
    # (overlay_set_position, reg1, pos1),
    # (assign, "$g_presentation_credits_obj_1", reg1),

    # # clear the string globals that we'll use
    (str_clear, s0),
    # (str_clear, s20),
    # (str_clear, s21),
    # (str_clear, s23),
    # (str_clear, s24),
    # # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
    (create_text_overlay, reg1, s0, tf_scrollable_style_2),
    (position_set_x, pos1, 50),
    (position_set_y, pos1, 50),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 450),
    (overlay_set_area_size, reg1, pos1),

    # (position_set_x, pos1, 0),
    (store_div, ":y_name", ":num_lords", 4),##get y for size of the scrollable overlay
    (val_mul, ":y_name", 250),
    (assign, ":x_name", 20),
    #text size
    (position_set_x, pos2, 900),
    (position_set_y, pos2, 900),

    (set_container_overlay, reg1),#start scroll
    (try_for_range, ":active_npc", active_npcs_including_player_begin, active_npcs_end),

        (call_script, "script_cf_is_no_goy", ":active_npc"), # block goys for roman main story

        (neq, ":active_npc", "$g_notification_menu_var1"),
        (try_begin),
            (eq, ":active_npc", active_npcs_including_player_begin),
            (assign, ":active_npc", "trp_player"),
            (assign, ":npc_faction", "$players_kingdom"),
        (else_try),
            (store_troop_faction, ":npc_faction", ":active_npc"),
        (try_end),

        (eq, ":npc_faction", "$players_kingdom"),
        (troop_slot_eq, ":active_npc", slot_troop_occupation, slto_kingdom_hero),
        (neg|troop_slot_ge, ":active_npc", slot_troop_legion, 1),
        (neg|troop_slot_ge, ":active_npc", slot_troop_aux, 1),
        (neg|troop_slot_ge, ":active_npc", slot_troop_govern, 1),

        (try_begin),
            (gt, ":x_name", 920),
            (assign, ":x_name", 0),
            (val_sub, ":y_name", 220),
        (try_end),
        (troop_set_slot, "trp_global_variables", g_show_troop_banner, 1),
        (create_mesh_overlay_with_tableau_material, reg0, -1, "tableau_troop_note_mesh", ":active_npc"),
        (position_set_x, pos1, ":x_name"),
        (position_set_y, pos1, ":y_name"),
        (overlay_set_position, reg0, pos1),
        (position_set_x, pos3, 500),
        (position_set_y, pos3, 500),
        (overlay_set_size, reg0, pos3),

        # #creat button
        (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
        (overlay_set_position, reg10, pos1),
        (position_set_x, pos3, 1000),
        (position_set_y, pos3, 2000),
        (overlay_set_size, reg10, pos3),
        (overlay_set_alpha, reg10, 0),
        (overlay_set_color, reg10, 0xDDDDDD),
        (troop_set_slot, "trp_temp_array_b", ":active_npc", reg10),

        # (try_begin),
            # (le, ":is_senatorial", 0),
        (troop_get_slot, ":influence", "trp_player", slot_troop_influence),
        # (else_try),
            # (troop_get_slot, ":influence", "trp_senator_dummy", slot_senate_support),
        # (try_end),

        (try_begin),
            (neq, ":active_npc", "trp_player"),
            (str_store_troop_name, s22, ":active_npc"),
            # (troop_get_slot, reg20, ":active_npc", slot_troop_player_relation),
            (call_script, "script_troop_get_player_relation", ":active_npc"),
            (assign, reg20, reg0),
            (create_text_overlay, reg1, "@{s22}, relation: {reg20}", tf_left_align),
            (position_set_x, pos1, ":x_name"),
            (store_sub, ":y_new", ":y_name", 20),
            (position_set_y, pos1, ":y_new"),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),

            (troop_get_slot, ":personality", ":active_npc", slot_lord_reputation_type),
            (store_add, ":string", ":personality", "str_personality_archetypes"),
            (str_store_string, s22, ":string"),

            (create_text_overlay, reg1, "@Personality: {s22}", tf_left_align),
            (position_set_x, pos1, ":x_name"),
            (store_sub, ":y_new", ":y_name", 40),
            (position_set_y, pos1, ":y_new"),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),

            (call_script, "script_get_influence_cost_for_decision", ":active_npc", decision_governorship, "$g_notification_menu_var2"),
            (create_text_overlay, reg1, "@Influence cost: {reg0}", tf_left_align),
            (try_begin),
                (gt, ":influence", reg0),
                (overlay_set_color, reg1, 0x00b300),
            (else_try),
                (overlay_set_color, reg1, 0xff0000),
            (try_end),

            (position_set_x, pos1, ":x_name"),
            (store_sub, ":y_new", ":y_name", 60),
            (position_set_y, pos1, ":y_new"),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),

        (else_try),
            (create_text_overlay, reg1, "@You.", tf_left_align),
            (position_set_x, pos1, ":x_name"),
            (store_sub, ":y_new", ":y_name", 20),
            (position_set_y, pos1, ":y_new"),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),

            (call_script, "script_get_influence_cost_for_decision", ":active_npc", decision_governorship, "$g_notification_menu_var2"),
            (create_text_overlay, reg1, "@Influence cost: {reg0}", tf_left_align),
            (try_begin),
                (gt, ":influence", reg0),
                (overlay_set_color, reg1, 0x00b300),
            (else_try),
                (overlay_set_color, reg1, 0xff0000),
            (try_end),
            (position_set_x, pos1, ":x_name"),
            (store_sub, ":y_new", ":y_name", 40),
            (position_set_y, pos1, ":y_new"),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),
        (try_end),
        (val_add, ":x_name", 230),
    (try_end),
    (set_container_overlay, -1),#end scroll
  ]),
  ## Check for buttonpress
  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":button_pressed_id"),
    (try_begin),
        (eq, ":button_pressed_id", "$g_jrider_faction_report_return_to_menu"), # pressed  (Return to menu)
        (start_presentation, "prsnt_influence_nero"),
    (else_try),
        (store_add, ":slot", "$g_notification_menu_var2", slot_province_senatorial_begin),
        (troop_get_slot, ":is_senatorial", "trp_province_array", ":slot"),
        (try_begin),
            (le, ":is_senatorial", 0),
            (troop_get_slot, ":influence", "trp_player", slot_troop_influence),
        (else_try),
            (troop_get_slot, ":influence", "trp_senator_dummy", slot_senate_support),
        (try_end),
        (try_for_range, ":choice", active_npcs_including_player_begin, active_npcs_end),

            (try_begin),
                (eq, ":choice", active_npcs_including_player_begin),
                (assign, ":choice", "trp_player"),
            (try_end),

            (troop_slot_eq, "trp_temp_array_b", ":choice", ":button_pressed_id"),

            (call_script, "script_get_influence_cost_for_decision", ":choice", decision_governorship, "$g_notification_menu_var2"),
            (assign, ":cost", reg0),
            (try_begin),
                (lt, ":influence", ":cost"),
                (display_message, "@You don't have enough influence!", color_bad_news),
            (try_end),
            (ge, ":influence", ":cost"),

            (val_mul, ":cost", -1),
            (try_begin),
                (le, ":is_senatorial", 0),
                (call_script, "script_change_influence", "trp_player", ":cost"),
            (else_try),
                (val_mul, ":cost", number_of_senators),
                (val_div, ":cost", 100),
                (call_script, "script_change_senate_support", ":cost", 0),
            (try_end),

            (troop_get_slot, ":old_governor", "trp_province_array", "$g_notification_menu_var2"),
            (try_begin),
                (gt, ":old_governor", -1),
                (call_script, "script_troop_set_rank", ":old_governor", slot_troop_govern, -1),
                (call_script, "script_change_lord_party_to_fit_rank", ":old_governor"),
            (try_end),

            (call_script, "script_troop_set_rank", ":choice", slot_troop_govern, "$g_notification_menu_var2"),

            (try_for_range, ":center", walled_centers_begin, walled_centers_end),
                (store_faction_of_party, ":center_faction", ":center"),
                (eq, ":center_faction", "$players_kingdom"),
                (party_get_slot, ":province", ":center", slot_center_province),
                (eq, ":province", "$g_notification_menu_var2"),
                (call_script, "script_give_center_to_lord2", ":center", ":choice", 0),
            (try_end),

            (call_script, "script_get_province_relation_modifier", "$g_notification_menu_var2", ":choice"),
            (assign, ":relation_change", reg0),

            (try_begin),
                (gt, ":choice", "trp_player"),
                (call_script, "script_change_player_relation_with_troop", ":choice", ":relation_change"),
            (try_end),

            (try_begin),
                (gt, ":old_governor", 0),
                (gt, ":relation_change", 0),
                (val_mul, ":relation_change", -2),
                (call_script, "script_change_player_relation_with_troop", ":old_governor", ":relation_change"),
            (try_end),

            (troop_set_slot, "trp_province_array", "$g_notification_menu_var2", ":choice"),

            (call_script, "script_change_player_honor", -5),

            (store_current_day, ":day"),
            (val_add, ":day", 2),
            (troop_set_slot, "$g_talk_troop", slot_troop_bachus, ":day"),
            (troop_set_slot, "trp_global_variables", g_show_troop_banner, 0),
            (show_object_details_overlay, 1),
            (presentation_set_duration, 0),
        (try_end),
    (try_end),
  ]),
  (ti_on_presentation_run, [
    (try_begin),
        (key_clicked, key_space),
        (set_fixed_point_multiplier, 1000),
        (mouse_get_position, pos31),

        (position_get_x, reg31, pos31),
        (position_get_y, reg32, pos31),

        (display_message, "@X: {reg31} | Y: {reg32}"),
    (try_end),
  ]),
]),
("influence_governor_change_senate", 0, 0, [
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    # #0. BACKROUND
    (create_mesh_overlay, reg0, "mesh_load_window"),
    (position_set_x, pos1, -1),
    (position_set_y, pos1, -1),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 1002),
    (position_set_y, pos1, 1002),
    (overlay_set_size, reg0, pos1),

    (try_begin),
        (ge, "$g_is_emperor", 1),
        (assign, ":begin_loop", active_npcs_begin),
    (else_try),
        (assign, ":begin_loop", active_npcs_including_player_begin),
    (try_end),

    #init variables
    (assign, ":num_lords", 0),
    (try_for_range, ":active_npc", ":begin_loop", active_npcs_end),
        (try_begin),
            (eq, ":active_npc", active_npcs_including_player_begin),
            (assign, ":active_npc", "trp_player"),
            (assign, ":npc_faction", "$players_kingdom"),
        (else_try),
            (store_troop_faction, ":npc_faction", ":active_npc"),
        (try_end),
        (troop_set_slot, "trp_temp_array_b", ":active_npc", 0),

        (eq, ":npc_faction", "$players_kingdom"),
        (troop_slot_eq, ":active_npc", slot_troop_occupation, slto_kingdom_hero),
        (neg|troop_slot_ge, ":active_npc", slot_troop_legion, 1),
        (neg|troop_slot_ge, ":active_npc", slot_troop_aux, 1),
        (neg|troop_slot_ge, ":active_npc", slot_troop_govern, 1),
        (val_add, ":num_lords", 1),
    (try_end),

    (store_add, ":string", "$g_notification_menu_var2", "str_province_begin"),
    (str_store_string, s22, ":string"),
    (str_store_troop_name, s40, "$g_notification_menu_var1"),
    (call_script, "script_write_economic_info_to_s0", "$g_notification_menu_var2", 0),
    (create_text_overlay, reg1, "@{s40} is currently governor of {s22}. You may use your senate support to assign a new governor. Economic information: {s0}", tf_scrollable_style_2|tf_center_justify),
    (position_set_x, pos1, 950),
    (position_set_y, pos1, 950),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 225),
    (position_set_y, pos1, 650),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 700),
    (position_set_y, pos1, 80),
    (overlay_set_area_size, reg1, pos1),

    #get additional information about the province
    (call_script, "script_get_province_relation_modifier", "$g_notification_menu_var2", -1),#the text here is for emperor
    (create_text_overlay, reg1, "str_s0", tf_scrollable_style_2|tf_center_justify),
    (position_set_x, pos1, 950),
    (position_set_y, pos1, 950),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 225),
    (position_set_y, pos1, 590),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 700),
    (position_set_y, pos1, 60),
    (overlay_set_area_size, reg1, pos1),
    (overlay_set_color, reg1, 0x0000FF),

    (troop_get_slot, reg22, "trp_senator_dummy", slot_senate_support),
    (str_store_string, s23, "@Your senate support: {reg22}"),
    (create_text_overlay, reg1, "@{s23}", tf_center_justify),
    (position_set_x, pos1, 560), # Higher, means more toward the right
    (position_set_y, pos1, 570), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),

    (troop_set_slot, "trp_global_variables", g_show_troop_banner, 1),
    (create_mesh_overlay_with_tableau_material, reg0, -1, "tableau_troop_note_mesh", "$g_notification_menu_var1"),
    (position_set_x, pos1, 40),
    (position_set_y, pos1, 580),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 450),
    (position_set_y, pos1, 450),
    (overlay_set_size, reg0, pos1),

    (troop_get_slot, ":personality", "$g_notification_menu_var1", slot_lord_reputation_type),
    (store_add, ":string", ":personality", "str_personality_archetypes"),
    (str_store_string, s22, ":string"),
    # (troop_get_slot, reg20, "$g_notification_menu_var1", slot_troop_player_relation),
    (call_script, "script_troop_get_player_relation", "$g_notification_menu_var1"),
    (assign, reg20, reg0),
    (str_store_troop_name_plural, s30, "$g_notification_menu_var1"),
    (create_text_overlay, reg1, "@{s30}.^Relation: {reg20}.^Personality: {s22}", tf_center_justify),
    (position_set_x, pos1, 110), # Higher, means more toward the right
    (position_set_y, pos1, 515), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 950),
    (position_set_y, pos1, 950),
    (overlay_set_size, reg1, pos1),

    # Back to menu - graphical button
    (create_game_button_overlay, reg1, "str_return"),
    (position_set_x, pos1, 450),
    (position_set_y, pos1, 20),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_jrider_faction_report_return_to_menu", reg1),

    # (create_game_button_overlay, reg1, "@Accept"),
    # (position_set_x, pos1, 750),
    # (position_set_y, pos1, 23),
    # (overlay_set_position, reg1, pos1),
    # (assign, "$g_presentation_credits_obj_1", reg1),

    # # clear the string globals that we'll use
    (str_clear, s0),
    # (str_clear, s20),
    # (str_clear, s21),
    # (str_clear, s23),
    # (str_clear, s24),
    # # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
    (create_text_overlay, reg1, s0, tf_scrollable_style_2),
    (position_set_x, pos1, 50),
    (position_set_y, pos1, 50),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 450),
    (overlay_set_area_size, reg1, pos1),

    # (position_set_x, pos1, 0),
    (store_div, ":y_name", ":num_lords", 4),##get y for size of the scrollable overlay
    (val_mul, ":y_name", 210),
    (assign, ":x_name", 20),
    #text size
    (position_set_x, pos2, 900),
    (position_set_y, pos2, 900),

    (set_container_overlay, reg1),#start scroll
    (try_for_range, ":active_npc", ":begin_loop", active_npcs_end),

        (call_script, "script_cf_is_no_goy", ":active_npc"), # block goys for roman main story

        (neq, ":active_npc", "$g_notification_menu_var1"),
        (try_begin),
            (eq, ":active_npc", active_npcs_including_player_begin),
            (lt, "$g_is_emperor", 1),
            (assign, ":active_npc", "trp_player"),
            (assign, ":npc_faction", "$players_kingdom"),
        (else_try),
            (store_troop_faction, ":npc_faction", ":active_npc"),
        (try_end),
        (neq, ":active_npc", active_npcs_including_player_begin),
        (eq, ":npc_faction", "$players_kingdom"),
        (troop_slot_eq, ":active_npc", slot_troop_occupation, slto_kingdom_hero),
        (neg|troop_slot_ge, ":active_npc", slot_troop_legion, 1),
        (neg|troop_slot_ge, ":active_npc", slot_troop_aux, 1),
        (neg|troop_slot_ge, ":active_npc", slot_troop_govern, 1),

        (try_begin),
            (gt, ":x_name", 920),
            (assign, ":x_name", 0),
            (val_sub, ":y_name", 220),
        (try_end),
        (troop_set_slot, "trp_global_variables", g_show_troop_banner, 1),
        (create_mesh_overlay_with_tableau_material, reg0, -1, "tableau_troop_note_mesh", ":active_npc"),
        (position_set_x, pos1, ":x_name"),
        (position_set_y, pos1, ":y_name"),
        (overlay_set_position, reg0, pos1),
        (position_set_x, pos3, 450),
        (position_set_y, pos3, 450),
        (overlay_set_size, reg0, pos3),

        # #creat button
        (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
        (overlay_set_position, reg10, pos1),
        (position_set_x, pos3, 1000),
        (position_set_y, pos3, 2000),
        (overlay_set_size, reg10, pos3),
        (overlay_set_alpha, reg10, 0),
        (overlay_set_color, reg10, 0xDDDDDD),
        (troop_set_slot, "trp_temp_array_b", ":active_npc", reg10),

        # (try_begin),
            # (le, ":is_senatorial", 0),
        (troop_get_slot, ":influence", "trp_senator_dummy", slot_senate_support),
        # (else_try),
            # (troop_get_slot, ":influence", "trp_senator_dummy", slot_senate_support),
        # (try_end),

        (try_begin),
            (neq, ":active_npc", "trp_player"),
            (str_store_troop_name, s22, ":active_npc"),
            # (troop_get_slot, reg20, ":active_npc", slot_troop_player_relation),
            (call_script, "script_troop_get_player_relation", ":active_npc"),
            (assign, reg20, reg0),
            (create_text_overlay, reg1, "@{s22}, relation: {reg20}", tf_left_align),
            (position_set_x, pos1, ":x_name"),
            (store_sub, ":y_new", ":y_name", 20),
            (position_set_y, pos1, ":y_new"),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),

            (troop_get_slot, ":personality", ":active_npc", slot_lord_reputation_type),
            (store_add, ":string", ":personality", "str_personality_archetypes"),
            (str_store_string, s22, ":string"),

            (create_text_overlay, reg1, "@Personality: {s22}", tf_left_align),
            (position_set_x, pos1, ":x_name"),
            (store_sub, ":y_new", ":y_name", 40),
            (position_set_y, pos1, ":y_new"),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),

            (call_script, "script_get_influence_cost_for_decision", ":active_npc", decision_governorship, "$g_notification_menu_var2"),
            (create_text_overlay, reg1, "@Senate support cost: {reg0}", tf_left_align),
            (try_begin),
                (ge, ":influence", reg0),
                (overlay_set_color, reg1, 0x00b300),
            (else_try),
                (overlay_set_color, reg1, 0xff0000),
            (try_end),

            (position_set_x, pos1, ":x_name"),
            (store_sub, ":y_new", ":y_name", 60),
            (position_set_y, pos1, ":y_new"),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),

        (else_try),
            (create_text_overlay, reg1, "@You.", tf_left_align),
            (position_set_x, pos1, ":x_name"),
            (store_sub, ":y_new", ":y_name", 20),
            (position_set_y, pos1, ":y_new"),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),

            (call_script, "script_get_influence_cost_for_decision", ":active_npc", decision_governorship, "$g_notification_menu_var2"),
            (create_text_overlay, reg1, "@Senate support cost: {reg0}", tf_left_align),
            (try_begin),
                (ge, ":influence", reg0),
                (overlay_set_color, reg1, 0x00b300),
            (else_try),
                (overlay_set_color, reg1, 0xff0000),
            (try_end),
            (position_set_x, pos1, ":x_name"),
            (store_sub, ":y_new", ":y_name", 40),
            (position_set_y, pos1, ":y_new"),
            (overlay_set_position, reg1, pos1),
            (overlay_set_size, reg1, pos2),
        (try_end),
        (val_add, ":x_name", 230),
    (try_end),
    (set_container_overlay, -1),#end scroll
  ]),
  ## Check for buttonpress
  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":button_pressed_id"),
    (try_begin),
        (eq, ":button_pressed_id", "$g_jrider_faction_report_return_to_menu"), # pressed  (Return to menu)
        (start_presentation, "prsnt_influence_senate"),
    (else_try),
        (store_add, ":slot", "$g_notification_menu_var2", slot_province_senatorial_begin),
        (troop_get_slot, ":is_senatorial", "trp_province_array", ":slot"),
        (try_begin),
            (le, ":is_senatorial", 0),
            (troop_get_slot, ":influence", "trp_player", slot_troop_influence),
        (else_try),
            (troop_get_slot, ":influence", "trp_senator_dummy", slot_senate_support),
        (try_end),
        (try_for_range, ":choice", active_npcs_including_player_begin, active_npcs_end),
            (try_begin),
                (eq, ":choice", active_npcs_including_player_begin),
                (assign, ":choice", "trp_player"),
            (try_end),
            (troop_slot_eq, "trp_temp_array_b", ":choice", ":button_pressed_id"),
            (call_script, "script_get_influence_cost_for_decision", ":choice", decision_governorship, "$g_notification_menu_var2"),
            (assign, ":cost", reg0),
            (try_begin),
                (lt, ":influence", ":cost"),
                (display_message, "@You don't have enough influence!", color_bad_news),
            (try_end),
            (ge, ":influence", ":cost"),

            (val_mul, ":cost", -1),
            (try_begin),
                (le, ":is_senatorial", 0),
                (call_script, "script_change_influence", "trp_player", ":cost"),
            (else_try),
                (val_mul, ":cost", number_of_senators),
                (val_div, ":cost", 100),
                (call_script, "script_change_senate_support", ":cost", 0),
            (try_end),

            (troop_get_slot, ":old_governor", "trp_province_array", "$g_notification_menu_var2"),
            (try_begin),
                (gt, ":old_governor", -1),
                (call_script, "script_troop_set_rank", ":old_governor", slot_troop_govern, -1),
                (call_script, "script_change_lord_party_to_fit_rank", ":old_governor"),
            (try_end),

            (call_script, "script_troop_set_rank", ":choice", slot_troop_govern, "$g_notification_menu_var2"),

            (try_for_range, ":center", walled_centers_begin, walled_centers_end),
                (store_faction_of_party, ":center_faction", ":center"),
                (eq, ":center_faction", "$players_kingdom"),
                (party_get_slot, ":province", ":center", slot_center_province),
                (eq, ":province", "$g_notification_menu_var2"),
                (call_script, "script_give_center_to_lord2", ":center", ":choice", 0),
            (try_end),

            (call_script, "script_get_province_relation_modifier", "$g_notification_menu_var2", ":choice"),
            (assign, ":relation_change", reg0),

            (try_begin),
                (gt, ":choice", "trp_player"),
                (call_script, "script_change_player_relation_with_troop", ":choice", ":relation_change"),
            (try_end),

            (try_begin),
                (gt, ":old_governor", 0),
                (gt, ":relation_change", 0),
                (val_mul, ":relation_change", -2),
                (call_script, "script_change_player_relation_with_troop", ":old_governor", ":relation_change"),
            (try_end),

            (troop_set_slot, "trp_province_array", "$g_notification_menu_var2", ":choice"),

            (call_script, "script_change_player_honor", -5),

            (store_current_day, ":day"),
            (val_add, ":day", 84),
            (troop_set_slot, "trp_province_array", ":slot", ":day"),

            (troop_set_slot, "trp_global_variables", g_show_troop_banner, 0),
            (start_presentation, "prsnt_influence_senate"),
            # (jump_to_menu, "mnu_senatus"),
        (try_end),
    (try_end),
  ]),
  (ti_on_presentation_run, [
    (try_begin),
        (key_clicked, key_space),
        (set_fixed_point_multiplier, 1000),
        (mouse_get_position, pos31),

        (position_get_x, reg31, pos31),
        (position_get_y, reg32, pos31),

        (display_message, "@X: {reg31} | Y: {reg32}"),
    (try_end),
  ]),
]),
##province management END#########################################################################################################################

####Begin NEW FIEF MANAGEMENT
# Arris Feudal World Map. (Based on previous work by Rubik)
    #
    # Uses trp_temp_array_a and trp_temp_array_b to store info about centers (feuds) and lords, stored sequentially.
    # Search above with scripts "search_fiefs_tmp" and "search_lords_tmp" respectively.
    # Returns indexes of results in trp_temp_array_c, number of matches in reg0
    #
    # Fields in trp_temp_array_a (centers):
    #    - id overlay center
    #    - id center
    #    - id overlay label name center
    #    - id overlay label owner
    #    - id lord
    #    - overlay center display state
    #
    # Fields in trp_temp_array_b (lords)
    #     - id lord
    #     - color lord
    #    - id button overlay in lord list
    #    - id item in combo box vassal (-1 if not vassal)


("worldmap_fief_selection_feudal", 0, 0, [
  (ti_on_presentation_load,[
        #init variables
        (assign, "$g_presentation_obj_5", -1),
        (assign, "$first_center_btn", -1),
        (assign, "$last_center_btn", -1),
        (assign, "$btn_endcolor", -1),
        (assign, "$slider_color", -1),
        (assign, "$lbl_name_color_lord", -1),
        (assign, "$first_lord_btn", -1),
        (assign, "$last_lord_btn", -1),
        (assign, "$chk_unassigned", -1),
        (assign, "$g_btn_show_toggle", -1),
        (assign, "$factions", -1),
        (assign, "$cbo_grant", -1),
        (assign, "$g_help", -1),
        (assign, "$g_presentation_obj_1", -1),
        (assign, "$g_presentation_obj_2", -1),
        (assign, "$g_presentation_obj_3", -1),

        (presentation_set_duration, 999999),
        (set_fixed_point_multiplier, 1000),

        # #0. BACKROUND
        (create_mesh_overlay, reg0, "mesh_load_window"),
        (position_set_x, pos1, -1),
        (position_set_y, pos1, -1),
        (overlay_set_position, reg0, pos1),
        (position_set_x, pos1, 1002),
        (position_set_y, pos1, 1002),
        (overlay_set_size, reg0, pos1),

        ## initialization part begin


        # presentation obj: begin from top left corner
        (assign, ":init_pos_x", 15), # init x
        (assign, ":init_pos_y", 725), # init y

        # world map
        (assign, ":min_map_x", -300*1000),
        (assign, ":max_map_x", 270*1000),
        (assign, ":min_map_y", -225*1000),
        (assign, ":max_map_y", 210*1000),

        # also begin from top left corner
        (assign, ":init_map_x", ":min_map_x"), # init map_x
        (assign, ":init_map_y", ":max_map_y"), # init map_y

        # move length of p_temp_party, total_cols and total_rows
        (assign, ":party_move_length_x", 2750*(520/360)),
        (assign, ":party_move_length_y", 2750*(535/290)),
        (store_sub, ":total_cols", ":max_map_x", ":min_map_x"),
        (store_sub, ":total_rows", ":max_map_y", ":min_map_y"),
        (val_div, ":total_cols", ":party_move_length_x"),
        (val_div, ":total_rows", ":party_move_length_y"),

        # color_block_length
        (assign, ":color_block_length", 4),
        (store_mul, ":color_block_size", ":color_block_length", 50),
        (position_set_x, pos2, ":color_block_size"),
        (position_set_y, pos2, ":color_block_size"),

        #count lords
        (assign, "$n_lords", 1),#player
        (try_for_range, ":id_npc", active_npcs_begin, active_npcs_end),
            (neg|troop_slot_eq, ":id_npc", slot_troop_occupation, dplmc_slto_dead),
            (neg|troop_slot_eq, ":id_npc", slot_troop_occupation, dplmc_slto_exile),
            (neg|troop_slot_eq, ":id_npc", slot_troop_occupation, dplmc_slto_heir),
            (val_add, "$n_lords", 1),
        (try_end),

        (store_sub, "$n_centers", walled_centers_end, walled_centers_begin),
        (val_add, "$n_centers", 1),

        (try_for_range, ":i", 0, 1000),
            (troop_set_slot, "trp_temp_array_a", ":i", -1),
            (troop_set_slot, "trp_temp_array_b", ":i", -1),
            (troop_set_slot, "trp_temp_array_c", ":i", -1),
        (try_end),

      ## initialization part end

        (assign, ":pos_x", ":init_pos_x"), # assign to cur pos_x
        (assign, ":pos_y", ":init_pos_y"), # assign to cur pos_y
        (assign, ":map_x", ":init_map_x"), # assign to cur map_x
        (assign, ":map_y", ":init_map_y"), # assign to cur map_y
        ## draw whole map
        (try_for_range, ":unused_rows", 0, ":total_rows"),
          (try_for_range, ":unused_cols", 0, ":total_cols"),
            (assign, ":dest_color", 0xFFFFFF), # default
            (position_set_x, pos3, ":map_x"),
            (position_set_y, pos3, ":map_y"),
            (party_set_position, "p_temp_party", pos3),
            (party_get_current_terrain, ":current_terrain", "p_temp_party"),
            (try_begin),
              (this_or_next|eq, ":current_terrain", rt_water),
              (this_or_next|eq, ":current_terrain", rt_deep_water),
              (this_or_next|eq, ":current_terrain", rt_river),
              (eq, ":current_terrain", rt_bridge),
              (assign, ":dest_color", 0x0066FF), # default
            (else_try),
              (call_script, "script_get_closest_center_and_minor", "p_temp_party"),
              (assign, ":nearest_center", reg0),
              (try_begin),
                (lt, ":nearest_center", last_static_party),
                (gt, ":nearest_center", -1),
                (store_faction_of_party, ":center_faction", ":nearest_center"),
                (this_or_next|is_between, ":center_faction", kingdoms_begin, kingdoms_end),
                (is_between, ":center_faction", minor_kingdoms_begin, minor_kingdoms_end),
                (faction_get_color, ":dest_color", ":center_faction"),
              (try_end),
            (try_end),
            (create_mesh_overlay, reg0, "mesh_white_plane"),
            (overlay_set_color, reg0, ":dest_color"),
            (position_set_x, pos1, ":pos_x"),
            (position_set_y, pos1, ":pos_y"),
            (overlay_set_position, reg0, pos1),
            (overlay_set_size, reg0, pos2), # color block size

            ## draw borderlines begin [optional]
            # borderlines length and whidth
            (store_add, ":line_length", ":color_block_size", 1*50),
            (assign, ":line_whidth", 1*50),
            # find bound_center
            (call_script, "script_get_closest_center_and_minor", "p_temp_party"),
            (assign, ":nearest_center", reg0),
            (try_begin),
              (gt, ":nearest_center", -1),
              (lt, ":nearest_center", last_static_party),
              (party_slot_eq, ":nearest_center", slot_party_type, spt_village),
              (party_get_slot, ":bound_center", ":nearest_center", slot_village_bound_center),
            (else_try),
              (assign, ":bound_center", ":nearest_center"), # itself
            (try_end),
            # compare with the left side color block
            (try_begin),
              (store_sub, ":map_x_2", ":map_x", ":party_move_length_x"),
              (assign, ":map_y_2", ":map_y"),
              (position_set_x, pos4, ":map_x_2"),
              (position_set_y, pos4, ":map_y_2"),
              (party_set_position, "p_temp_party", pos4),
              (party_get_current_terrain, ":current_terrain_2", "p_temp_party"),
              (try_begin),
                (assign, ":continue", 0),
                (try_begin),
                  (neq, ":current_terrain", rt_water),
                  (neq, ":current_terrain", rt_bridge),
                  (neq, ":current_terrain", rt_river),
                  (neq, ":current_terrain", 6),
                  (neq, ":current_terrain_2", rt_water),
                  (neq, ":current_terrain_2", rt_bridge),
                   (neq, ":current_terrain_2", rt_river),
                  (neq, ":current_terrain_2", 6),
                  (call_script, "script_get_closest_center_and_minor", "p_temp_party"),
                  (assign, ":nearest_center_2", reg0),
                  (try_begin),
                    (lt, ":nearest_center_2", last_static_party),
                    (gt, ":nearest_center_2", -1),
                    (try_begin),
                      (party_slot_eq, ":nearest_center_2", slot_party_type, spt_village),
                      (party_get_slot, ":bound_center_2", ":nearest_center_2", slot_village_bound_center),
                    (else_try),
                      (assign, ":bound_center_2", ":nearest_center_2"), # itself
                    (try_end),
                    (neq, ":bound_center_2", ":bound_center"),
                    (assign, ":continue", 1),
                  (try_end),
                (try_end),
                (eq, ":continue", 1),
                (create_mesh_overlay, reg0, "mesh_white_plane"),
                (overlay_set_color, reg0, 0),
                (position_set_x, pos1, ":pos_x"),
                (position_set_y, pos1, ":pos_y"),
                (overlay_set_position, reg0, pos1),
                (position_set_x, pos1, ":line_whidth"),
                (position_set_y, pos1, ":line_length"),
                (overlay_set_size, reg0, pos1),
              (try_end),
            (try_end),
            # compare with the under color block
            (try_begin),
              (assign, ":map_x_2", ":map_x"),
              (store_sub, ":map_y_2", ":map_y", ":party_move_length_y"),
              (position_set_x, pos4, ":map_x_2"),
              (position_set_y, pos4, ":map_y_2"),
              (party_set_position, "p_temp_party", pos4),
              (party_get_current_terrain, ":current_terrain_2", "p_temp_party"),
              (try_begin),
                (assign, ":continue", 0),
                (try_begin),
                  (neq, ":current_terrain", rt_water),
                  (neq, ":current_terrain", 6),
                  (neq, ":current_terrain", rt_bridge),
                  (neq, ":current_terrain", rt_river),
                  (neq, ":current_terrain_2", rt_water),
                  (neq, ":current_terrain_2", 6),
                  (neq, ":current_terrain_2", rt_bridge),
                   (neq, ":current_terrain_2", rt_river),
                  (call_script, "script_get_closest_center_and_minor", "p_temp_party"),
                  (assign, ":nearest_center_2", reg0),
                  (try_begin),
                    (lt, ":nearest_center_2", last_static_party),
                    (gt, ":nearest_center_2", -1),
                    (try_begin),
                      (party_slot_eq, ":nearest_center_2", slot_party_type, spt_village),
                      (party_get_slot, ":bound_center_2", ":nearest_center_2", slot_village_bound_center),
                    (else_try),
                      (assign, ":bound_center_2", ":nearest_center_2"),
                    (try_end),
                    (neq, ":bound_center_2", ":bound_center"),
                    (assign, ":continue", 1),
                  (try_end),
                # (else_try),
                  # (neq, ":current_terrain", ":current_terrain_2"),
                  # (this_or_next|eq, ":current_terrain", rt_water),
                  # (this_or_next|eq, ":current_terrain", rt_river),
                  # (this_or_next|eq, ":current_terrain", rt_bridge),
                  # (this_or_next|eq, ":current_terrain", 6),
                  # (this_or_next|eq, ":current_terrain_2", 6),
                  # (this_or_next|eq, ":current_terrain_2", rt_bridge),
                  # (this_or_next|eq, ":current_terrain_2", rt_river),
                  # (eq, ":current_terrain_2", rt_water),
                  # (assign, ":continue", 1),
                (try_end),
                (eq, ":continue", 1),
                (create_mesh_overlay, reg0, "mesh_white_plane"),
                (overlay_set_color, reg0, 0),
                (position_set_x, pos1, ":pos_x"),
                (position_set_y, pos1, ":pos_y"),
                (overlay_set_position, reg0, pos1),
                (position_set_x, pos1, ":line_length"),
                (position_set_y, pos1, ":line_whidth"),
                (overlay_set_size, reg0, pos1),
              (try_end),
            (try_end),
            # ## draw borderlines end [optional]

            # offset
            (val_add, ":pos_x", ":color_block_length"),
            (val_add, ":map_x", ":party_move_length_x"),
          (try_end),
          # offset
          (assign, ":pos_x", ":init_pos_x"),
          (val_sub, ":pos_y", ":color_block_length"),
          (assign, ":map_x", ":init_map_x"),
          (val_sub, ":map_y", ":party_move_length_y"),
        (try_end),

        ## blocks of centers
        (assign, ":slot_no", 0),
        (try_for_range, ":center_no", walled_centers_begin, walled_centers_end),
          (party_is_active, ":center_no"),
          (party_get_position, pos4, ":center_no"),
          (position_get_x, ":center_x", pos4),
          (position_get_y, ":center_y", pos4),
          (val_sub, ":center_x", ":init_map_x"),
          (val_sub, ":center_y", ":init_map_y"),
          (val_mul, ":center_x", ":color_block_length"),
          (val_mul, ":center_y", ":color_block_length"),
          (val_div, ":center_x", ":party_move_length_x"),
          (val_div, ":center_y", ":party_move_length_y"),
          (val_add, ":center_x", ":init_pos_x"),
          (val_add, ":center_y", ":init_pos_y"),
          # offset and size
          (try_begin),
            (party_slot_eq, ":center_no", slot_party_type, spt_town),
            (assign, ":block_size", 20),
          (else_try),
            (party_slot_eq, ":center_no", slot_party_type, spt_castle),
            (assign, ":block_size", 12),
          (else_try),
            (party_slot_eq, ":center_no", slot_party_type, spt_village),
            (assign, ":block_size", 8),
          (try_end),
          (val_mul, ":block_size", 50),
          # block
          (create_image_button_overlay, reg0, "mesh_white_dot", "mesh_white_dot"),
          (overlay_set_color, reg0, 0),
          (position_set_x, pos1, ":center_x"),
          (position_set_y, pos1, ":center_y"),
          (overlay_set_position, reg0, pos1),
          (position_set_x, pos1, ":block_size"),
          (position_set_y, pos1, ":block_size"),
          (overlay_set_size, reg0, pos1),
          (troop_set_slot, "trp_temp_array_a", ":slot_no", reg0), # overlay center
          (val_add, ":slot_no", 1),
          (troop_set_slot, "trp_temp_array_a", ":slot_no", ":center_no"), #id center

          # center name label
          (str_store_party_name, s1, ":center_no"),
          (create_text_overlay, reg1, s1, tf_center_justify),
          (store_add, ":text_x", ":center_x", 0),
          (store_add, ":text_y", ":center_y", 10),
          (position_set_x, pos1, ":text_x"), (position_set_y, pos1, ":text_y"),
          (overlay_set_position, reg1, pos1),
          (overlay_set_color, reg1, 0),
          (position_set_x, pos1, 780), (position_set_y, pos1, 780),
          (overlay_set_size, reg1, pos1),
          (overlay_set_display, reg1, 0),
          (val_add, ":slot_no", 1),
          (troop_set_slot, "trp_temp_array_a", ":slot_no", reg1), #overlay label name center

          # owner name label
          (party_get_slot, ":lord", ":center_no", slot_town_lord),
          (try_begin),
            (gt, ":lord", -1),
            (str_store_troop_name, s1, ":lord"),
          (else_try),
            (str_store_string, s1, "@Unassigned"),
          (try_end),
          (create_text_overlay, reg1, s1, tf_center_justify),
          (store_add, ":text_x", ":center_x", 0),
          (store_add, ":text_y", ":center_y", -25),
          (position_set_x, pos1, ":text_x"), (position_set_y, pos1, ":text_y"),
          (overlay_set_position, reg1, pos1),
          (overlay_set_color, reg1, 0),
          (position_set_x, pos1, 780), (position_set_y, pos1, 780),
          (overlay_set_size, reg1, pos1),
          (overlay_set_display, reg1, 0),
          (val_add, ":slot_no", 1),
          (troop_set_slot, "trp_temp_array_a", ":slot_no", reg1), #overlay label owner
          # id center owner
          (try_begin),
            (gt, ":lord", -1),
            (val_add, ":slot_no", 1),
            (troop_set_slot, "trp_temp_array_a", ":slot_no", ":lord"),
          (else_try),
            (val_add, ":slot_no", 1),
            (troop_set_slot, "trp_temp_array_a", ":slot_no", -1),
          (try_end),
          # overlay center display state
          (val_add, ":slot_no", 1),
          (troop_set_slot, "trp_temp_array_a", ":slot_no", 0),

          (val_add, ":slot_no", 1),
        (try_end),

        (troop_get_slot, "$first_center_btn", "trp_temp_array_a", 0),
        (val_sub, ":slot_no", 6),
        (troop_get_slot, "$last_center_btn", "trp_temp_array_a", ":slot_no"),

        ##end block centers

        #Color codes for lords
        (assign, ":indx", -1),
        (try_for_range, ":id_npc", active_npcs_begin, active_npcs_end),
            (neg|troop_slot_eq, ":id_npc", slot_troop_occupation, dplmc_slto_dead),
            (neg|troop_slot_eq, ":id_npc", slot_troop_occupation, dplmc_slto_exile),
            (neg|troop_slot_eq, ":id_npc", slot_troop_occupation, dplmc_slto_heir),
            (store_random_in_range, ":color_lord", 0, 10000),
            (val_mul, ":color_lord", 16777215), (val_div, ":color_lord", 10000),
            (val_add, ":indx", 1),
            (troop_set_slot, "trp_temp_array_b", ":indx", ":id_npc"),
            (val_add, ":indx", 1),
            (troop_set_slot, "trp_temp_array_b", ":indx", ":color_lord"),
            (val_add, ":indx", 2),
        (try_end),

        #player color
        (store_random_in_range, ":color_lord", 0, 10000),
        (val_mul, ":color_lord", 16777215), (val_div, ":color_lord", 10000),
        (val_add, ":indx", 1),
        (troop_set_slot, "trp_temp_array_b", ":indx", 0),
        (val_add, ":indx", 1),
        (troop_set_slot, "trp_temp_array_b", ":indx", ":color_lord"),

        #List Lords
        (str_clear, s0),
        (create_text_overlay, "$list_lords", s0, tf_scrollable),
        (position_set_x, pos1, 765),
        (position_set_y, pos1, 260),
        (overlay_set_position, "$list_lords", pos1),
        (position_set_x, pos1, 200),
        (position_set_y, pos1, 4100),
        (overlay_set_size, "$list_lords", pos1),
        (position_set_x, pos1, 200), (position_set_y, pos1, 250),
        (overlay_set_area_size, "$list_lords", pos1),
        (set_container_overlay, "$list_lords"),
        (assign, ":x_pos", 160), (assign, ":y_pos", 4000),
        #human
        (str_store_troop_name, s0, 0),
        (create_game_button_overlay, reg1 , "@{s0}", tf_center_justify),
        (position_set_x, pos3, ":x_pos"),
        (position_set_y, pos3, ":y_pos"),
        (overlay_set_position, reg1, pos3),
        (position_set_x, pos3, 100), (position_set_y, pos3, 25),
        (overlay_set_size, reg1, pos3),
        (val_sub, ":y_pos", 25),

        (call_script, "script_search_lords_tmp", 0, 0),
        (troop_get_slot, ":indx", "trp_temp_array_c",0),
        (val_add, ":indx", 2),
        (troop_set_slot, "trp_temp_array_b",":indx", reg1),

        (assign, "$first_lord_btn", reg1),

        (try_begin),
            (ge, "$g_player_chancellor", 1),
            #lords
            (try_for_range, ":id_npc", active_npcs_begin, active_npcs_end),
                (neg|troop_slot_eq, ":id_npc", slot_troop_occupation, dplmc_slto_dead),
                (neg|troop_slot_eq, ":id_npc", slot_troop_occupation, dplmc_slto_exile),
                (neg|troop_slot_eq, ":id_npc", slot_troop_occupation, dplmc_slto_heir),
                (str_store_troop_name_plural, s0, ":id_npc"),
                (create_game_button_overlay, reg1 , "@{s0}", tf_center_justify),
                (call_script, "script_search_lords_tmp", 0, ":id_npc"),
                (troop_get_slot, ":indx", "trp_temp_array_c",0),
                (val_add, ":indx", 2),
                (troop_set_slot, "trp_temp_array_b",":indx", reg1),
                (position_set_x, pos3, ":x_pos"),
                (position_set_y, pos3, ":y_pos"),
                (overlay_set_position, reg1, pos3),
                (position_set_x, pos3, 100), (position_set_y, pos3, 25),
                (overlay_set_size, reg1, pos3),
                (val_sub, ":y_pos", 25),
            (try_end),
        (try_end),

        (assign, "$last_lord_btn", reg1),
        (set_container_overlay, -1),

        #Checkbox show all unassigned
        (create_check_box_overlay, "$chk_unassigned", "mesh_checkbox_off", "mesh_checkbox_on"),
        (position_set_x, pos1, 840),
        (position_set_y, pos1, 700),
        (overlay_set_position, "$chk_unassigned", pos1),
        (create_text_overlay, "$chk_unassigned_lbl", "@Show unassigned"),
        (position_set_x, pos1, 870),
        (position_set_y, pos1, 700),
        (overlay_set_position, "$chk_unassigned_lbl", pos1),
        (position_set_x, pos1, 780), (position_set_y, pos1, 780),
        (overlay_set_size, "$chk_unassigned_lbl", pos1),

        #Show all toggle
        (create_game_button_overlay, "$g_btn_show_toggle", "@Show All/None"),
        (position_set_x, pos1, 914),
        (position_set_y, pos1, 650),
        (overlay_set_position, "$g_btn_show_toggle", pos1),
        (assign, "$show_toggle", 1),

        #Owner name
        (create_text_overlay, "$lbl_name_color_lord", "@None2"),
        (position_set_x, pos1, 825), (position_set_y, pos1, 700),
        (overlay_set_position, "$lbl_name_color_lord", pos1),
        (position_set_x, pos1, 780), (position_set_y, pos1, 780),
        (overlay_set_size, "$lbl_name_color_lord", pos1),
        (overlay_set_color, "$lbl_name_color_lord", 0xFFFFFF),
        (overlay_set_display, "$lbl_name_color_lord", 0),

        #Custom color slider
        (create_slider_overlay, "$slider_color", 0, 0xFFFFFF),
        (position_set_x, pos1, 950), (position_set_y, pos1, 670),
        (overlay_set_position, "$slider_color", pos1),
        (position_set_x, pos1, 600), (position_set_y, pos1, 780),
        (overlay_set_size, "$slider_color", pos1),
        (overlay_set_display, "$slider_color", 0),

        #End color edit
        (create_game_button_overlay, "$btn_endcolor", "@OK"),
        (position_set_x, pos1, 900), (position_set_y, pos1, 640),
        (overlay_set_position, "$btn_endcolor", pos1),
        (position_set_x, pos1, 100), (position_set_y, pos1, 25),
        (overlay_set_size, "$btn_endcolor", pos1),
        (overlay_set_color, "$btn_endcolor", 0xFFFFFF),
        (overlay_set_display, "$btn_endcolor", 0),

        (try_begin),
            (ge, "$g_player_chancellor", 1),
            #faction label
            (create_text_overlay, "$show_faction_lbl", "@Show faction:"),
            (position_set_x, pos1, 845),
            (position_set_y, pos1, 610),
            (overlay_set_position, "$show_faction_lbl", pos1),
            (position_set_x, pos1, 780), (position_set_y, pos1, 780),
            (overlay_set_size, "$show_faction_lbl", pos1),

            #Combo box factions (hardcoded because few)
            (create_combo_button_overlay, "$factions"),
            (try_for_range, ":unused", kingdoms_begin, kingdoms_end),
                (faction_slot_eq, ":unused", slot_faction_state, sfs_active),
                (str_store_faction_name, s1, ":unused"),
                (overlay_add_item, "$factions", "@{s1}"),
            (try_end),
            (position_set_x, pos1, 955),
            (position_set_y, pos1, 575),
            (overlay_set_position, "$factions", pos1),
            (position_set_x, pos1, 550),
            (position_set_y, pos1, 700),
            (overlay_set_size, "$factions", pos1),
        (try_end),

        #label lord to grant fief
        (create_text_overlay, "$lbl_name_grant_lord", "@Grant fief to..."),
        (position_set_x, pos1, 840),
        (position_set_y, pos1, 700),
        (overlay_set_position, "$lbl_name_grant_lord", pos1),
        (position_set_x, pos1, 780), (position_set_y, pos1, 780),
        (overlay_set_size, "$lbl_name_grant_lord", pos1),
        (overlay_set_color, "$lbl_name_grant_lord", 0x0000FF),
        (overlay_set_display, "$lbl_name_grant_lord", 0),

        #combo box vassals
        (assign, ":i", 0 ),

        (create_combo_button_overlay, "$cbo_grant"),

        (try_for_range, ":id_npc", active_npcs_begin, active_npcs_end),
            (neg|troop_slot_eq, ":id_npc", slot_troop_occupation, dplmc_slto_dead),
            (neg|troop_slot_eq, ":id_npc", slot_troop_occupation, dplmc_slto_exile),
            (neg|troop_slot_eq, ":id_npc", slot_troop_occupation, dplmc_slto_heir),
            (store_troop_faction, ":npc_faction", ":id_npc"),
            (eq, ":npc_faction", "$players_kingdom"),

            (str_store_troop_name, s0, ":id_npc"),
            (overlay_add_item, "$cbo_grant", s0),

            (call_script, "script_search_lords_tmp", 0, ":id_npc"),
            (troop_get_slot, ":indx", "trp_temp_array_c",0),
            (val_add, ":indx", 3),
            (troop_set_slot, "trp_temp_array_b", ":indx", ":i"),
            (val_add, ":i", 1),
        (try_end),

        (call_script, "script_search_lords_tmp", 0, 0),
        (troop_get_slot, ":indx", "trp_temp_array_c",reg0),
        (val_add, ":indx", 3),
        (troop_set_slot, "trp_temp_array_b", ":indx", ":i"),
        (str_store_troop_name, s0, 0),
        (overlay_add_item, "$cbo_grant", s0),
        (val_add, ":i", 1),
        (overlay_add_item, "$cbo_grant", "@None"),
        (overlay_set_val, "$cbo_grant", ":i"),
        (assign, "$last_indx_cbogrant", ":i"),

        (position_set_x, pos1, 945), (position_set_y, pos1, 640),
        (overlay_set_position, "$cbo_grant", pos1),
        (position_set_x, pos1, 550), (position_set_y, pos1, 700),
        (overlay_set_size, "$cbo_grant", pos1),
        (overlay_set_display, "$cbo_grant", 0),

        # Done
        (create_game_button_overlay, "$g_presentation_obj_5", "str_done"),
        (position_set_x, pos1, 400),
        (position_set_y, pos1, 30),
        (overlay_set_position, "$g_presentation_obj_5", pos1),

        (try_begin),
            (faction_slot_eq, "$players_kingdom", slot_faction_government_type, gov_imperial),
            (create_game_button_overlay, "$g_presentation_obj_3", "@Province List"),
            (position_set_x, pos1, 600),
            (position_set_y, pos1, 30),
            (overlay_set_position, "$g_presentation_obj_3", pos1),
        (try_end),
        #Help
        (create_button_overlay, "$g_help", "@Help"),
        (position_set_x, pos1, 825), (position_set_y, pos1, 30),
        (overlay_set_position, "$g_help", pos1),


        #6. DESCRIPTION
        #headline
        (create_text_overlay, reg1, "str_empty_string", tf_center_justify),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 200),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (assign, "$g_presentation_obj_1", reg1),

        (create_text_overlay, reg1, "str_empty_string", tf_center_justify),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 120),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (assign, "$g_presentation_obj_2", reg1),
      ]),
      (ti_on_presentation_mouse_enter_leave,
      [
        (store_trigger_param_1, ":object"),
        (store_trigger_param_2, ":enter_leave"),

        (ge, ":object", "$first_center_btn"),
        (le, ":object", "$last_center_btn"),

        # show center name, owner when mouse over it
        (store_sub, ":display_overlay", 1, ":enter_leave"),

        (call_script, "script_search_fiefs_tmp", 0, ":object"),
        (troop_get_slot, ":indx0", "trp_temp_array_c", 0),

        (gt, ":indx0", -1),

        (store_add, ":indx1", ":indx0", 2),
        (troop_get_slot, ":id_lbl_name", "trp_temp_array_a", ":indx1"),
        (val_sub, ":indx1", 1),
        (troop_get_slot, ":center", "trp_temp_array_a", ":indx1"),
        #additional info text
        (str_clear, s1),
        (str_clear, s2),
        (str_clear, s3),
        (str_clear, s4),
        (str_store_party_name, s1, ":center"),
        (str_store_string,s2,"@{s1}"),

        (party_get_slot, ":lord", ":center", slot_town_lord),
        (try_begin),
            (gt, ":lord", -1),
            (str_store_troop_name_plural, s4, ":lord"),
        (else_try),
            (str_store_string, s4, "@Unassigned"),
        (try_end),
        (str_store_string,s3,"@{s4}"),

        (try_begin),
            (gt, "$g_player_chamberlain", 1),
            (party_get_slot, reg1, ":center", slot_town_prosperity),
            (str_store_string, s3, "@Prosperity: {reg1}^{s3}"),
            (party_get_slot, reg1, ":center", slot_center_capital),
            (str_store_string, s3, "@Capital: {reg1}^{s3}"),
        (try_end),

        (party_get_slot, ":province", ":center", slot_center_province),
        (store_add, ":string", ":province", "str_province_begin"),
        (str_store_string, s1, ":string"),

        (store_add, ":slot", ":province", slot_province_senatorial_begin),
        (troop_get_slot, ":is_senatorial", "trp_province_array", ":slot"),
        (try_begin),
            (ge, ":is_senatorial", 1),
            (str_store_string, s22, "@Senatorial"),
        (else_try),
            (str_store_string, s22, "@Imperial"),
        (try_end),

        (str_store_string, s3, "@Province: {s1} ({s22})^{s3}"),

        (overlay_set_display, "$g_presentation_obj_1", ":display_overlay"),
        (overlay_set_display, "$g_presentation_obj_2", ":display_overlay"),
        (overlay_set_text, "$g_presentation_obj_1", s2),
        (overlay_set_text, "$g_presentation_obj_2", s3),

        (store_add, ":indx1", ":indx0", 3),
        (troop_get_slot, ":id_lbl_lord", "trp_temp_array_a", ":indx1"),
        (overlay_set_display, ":id_lbl_name", ":display_overlay"),
        (overlay_set_display, ":id_lbl_lord", ":display_overlay"),
      ]),

    (ti_on_presentation_event_state_change,
      [
        (store_trigger_param_1, ":object"),
        (store_trigger_param_2, ":value"),

        #Click on done
        (try_begin),
            (eq, ":object", "$g_presentation_obj_5"),
            (show_object_details_overlay, 1),
            (presentation_set_duration, 0),
        (else_try),
            (eq, ":object", "$g_presentation_obj_3"),
            (start_presentation, "prsnt_province_management"),
        (else_try),
        #Click on center
            (ge, ":object", "$first_center_btn"),
            (le, ":object", "$last_center_btn"),
            (neg | key_is_down, key_right_shift),
            (neg | key_is_down, key_left_shift),
            (neg | key_is_down, key_right_control),
            (neg | key_is_down, key_left_control),
            #find lord
            (call_script, "script_search_fiefs_tmp", 0, ":object"),
            (troop_get_slot, ":indx0", "trp_temp_array_c", 0),
            (store_add, ":indx1", ":indx0", 4),
            (troop_get_slot, ":lord", "trp_temp_array_a", ":indx1"),
            (store_add, ":indx1", ":indx0", 5),
            (troop_get_slot, ":display_state", "trp_temp_array_a", ":indx1"),
            #find lord color
            (try_begin),
                (gt, ":lord", -1),
                (call_script, "script_search_lords_tmp", 0, ":lord"),
                (troop_get_slot, ":indx0", "trp_temp_array_c", 0),
                (store_add, ":indx1", ":indx0", 1),
                (troop_get_slot, ":color_lord", "trp_temp_array_b", ":indx1"),
            (else_try),
                (assign, ":color_lord", 0xFFFFFF),
            (try_end),
            #find lord button
            (store_add, ":indx1", ":indx0", 2),
            (troop_get_slot, ":id_btn", "trp_temp_array_b", ":indx1"),
            #color fiefs lord
            (call_script, "script_search_fiefs_tmp", 4, ":lord"),
            (assign, ":end", reg0),
            (try_for_range, ":i", 0, ":end"),
                (troop_get_slot, ":indx0", "trp_temp_array_c", ":i"),
                (store_add, ":indx1", ":indx0", 5),
                (troop_get_slot, ":lord_center", "trp_temp_array_a", ":indx0"),
                (gt, ":lord_center", -1),
                (try_begin),
                    (eq, ":display_state", 1),
                    (troop_set_slot,  "trp_temp_array_a", ":indx1", 0),
                    (overlay_set_color, ":lord_center", 0),
                (else_try),
                    (troop_set_slot,  "trp_temp_array_a", ":indx1", 1),
                    (overlay_set_color, ":lord_center", ":color_lord"),
                (try_end),
            (try_end),
            #update lord button
            (try_begin),
                (gt,":lord",-1),
                (gt, ":id_btn", -1),
                (try_begin),
                    (eq, ":display_state", 1),
                    (overlay_set_color, ":id_btn", 0),
                (else_try),
                    (overlay_set_color, ":id_btn", 0x0066FF),
                (try_end),
            (try_end),
            #update unassigned chkbox
            (try_begin),
                (lt, ":lord", 0),
                (try_begin),
                    (eq, ":display_state", 1),
                    (assign, ":display_state", 0),
                (else_try),
                    (assign, ":display_state", 1),
                (try_end),
                (overlay_set_val, "$chk_unassigned", ":display_state"),
            (try_end),
        #click on center+shift, assigned
        (else_try),
            (ge, ":object", "$first_center_btn"),
            (le, ":object", "$last_center_btn"),
            (this_or_next| key_is_down, key_right_shift), (key_is_down, key_left_shift),

            (call_script, "script_search_fiefs_tmp", 0, ":object"),    (troop_get_slot, ":indx0", "trp_temp_array_c", 0),
            (store_add, ":indx1", ":indx0", 4),    (troop_get_slot, ":lord", "trp_temp_array_a", ":indx1"),
            (store_add, ":indx1", ":indx0", 5),    (troop_get_slot, ":selected", "trp_temp_array_a", ":indx1"),

            (eq, ":selected", 1), (gt, ":lord", -1),

            (call_script, "script_toggle_controls_worldmap", 0),
            (overlay_set_display, "$lbl_name_color_lord", 1),
            (overlay_set_display, "$slider_color", 1),
            (overlay_set_display, "$btn_endcolor", 1),
            (call_script, "script_search_lords_tmp", 0, ":lord"), (troop_get_slot, ":indx0", "trp_temp_array_c", 0),
            (store_add, ":indx1", ":indx0", 1),    (troop_get_slot, ":color_lord", "trp_temp_array_b", ":indx1"),
            #init color controls
            (troop_get_slot, ":color_lord", "trp_temp_array_a", ":lord"),
            (str_store_troop_name, s0, ":lord"),
            (overlay_set_text, "$lbl_name_color_lord", s0),
            (overlay_set_val, "$slider_color", ":color_lord"),
            (assign, "$id_color_lord", ":lord"),
        #click on button end color edit
        (else_try),
            (eq, ":object", "$btn_endcolor"),
            (call_script, "script_toggle_controls_worldmap", 1),
            (overlay_set_display, "$lbl_name_color_lord", 0),
            (overlay_set_display, "$slider_color", 0),
            (overlay_set_display, "$btn_endcolor", 0),
        (else_try),
        #move color slider
            (eq, ":object", "$slider_color"),

            (call_script, "script_search_fiefs_tmp", 4, "$id_color_lord"),
            (assign, ":end", reg0),
            (try_for_range, ":i", 0, ":end"),
                (troop_get_slot, ":indx0", "trp_temp_array_c", ":i"),
                (troop_get_slot, ":lord_center", "trp_temp_array_a", ":indx0"),
                (gt, ":lord_center", -1),
                (overlay_set_color, ":lord_center", ":value"),
            (try_end),

            (call_script, "script_search_lords_tmp", 0, "$id_color_lord"), (troop_get_slot, ":indx0", "trp_temp_array_c", 0),
            (store_add, ":indx1", ":indx0", 1), (troop_set_slot, "trp_temp_array_b", ":indx1", ":value"),
        (else_try),
        #Click on lord's list
            (ge, ":object", "$first_lord_btn"),
            (le, ":object", "$last_lord_btn"),
            (call_script, "script_search_lords_tmp", 2, ":object"),
            (troop_get_slot, ":indx0", "trp_temp_array_c", 0), (troop_get_slot, ":id_lord", "trp_temp_array_b", ":indx0"),
            (store_add, ":indx1", ":indx0", 1), (troop_get_slot, ":color_lord", "trp_temp_array_b", ":indx1"),

            (try_begin),
                (call_script, "script_search_fiefs_tmp", 4, ":id_lord"),
                (assign, ":end", reg0),
                (gt, ":end", 0),
                (troop_get_slot, ":indx0", "trp_temp_array_c", 0),
                (store_add, ":indx1", ":indx0", 5),
                (troop_get_slot, ":selected", "trp_temp_array_a", ":indx1"),

                (try_for_range, ":i", 0, ":end"),
                    (troop_get_slot, ":indx0", "trp_temp_array_c", ":i"),
                    (troop_get_slot, ":id_overlay_center", "trp_temp_array_a", ":indx0"),
                    (gt, ":id_overlay_center", -1),
                    (try_begin),
                        (eq, ":selected", 0),
                        (overlay_set_color, ":object", 0x0066FF),
                        (overlay_set_color, ":id_overlay_center", ":color_lord"),
                        (store_add, ":indx1", ":indx0", 5),
                        (troop_set_slot, "trp_temp_array_a", ":indx1", 1),
                    (else_try),
                        (overlay_set_color, ":object", 0),
                        (overlay_set_color, ":id_overlay_center", 0),
                        (store_add, ":indx1", ":indx0", 5),
                        (troop_set_slot, "trp_temp_array_a", ":indx1", 0),
                    (try_end),
                (try_end),

            (else_try),
                (display_message, "@Selected lord has no fiefs."),
            (try_end),
        (else_try),
        #Click show unassigned
            (eq, ":object", "$chk_unassigned"),
            (try_begin),
                (eq, ":value", 1),
                (assign, ":color", 0xFFFFFF),
            (else_try),
                (assign, ":color", 0),
            (try_end),
            (call_script, "script_search_fiefs_tmp", 4, -1),
            (assign, ":end", reg0),
            (try_for_range, ":i", 0, ":end"),
                (troop_get_slot, ":indx0", "trp_temp_array_c", ":i"),
                (troop_get_slot, ":id_overlay_center", "trp_temp_array_a", ":indx0"),
                (gt, ":id_overlay_center", -1),
                (overlay_set_color, ":id_overlay_center", ":color"),
                (store_add, ":indx1", ":indx0", 5),
                (troop_set_slot, "trp_temp_array_a", ":indx1", ":value" ),
            (try_end),
        (else_try),
        #Click show all toggle
            (eq, ":object", "$g_btn_show_toggle"),
            #update centers
            (try_for_range, ":i", 0, "$n_centers"),
                (store_mul, ":indx0", ":i", 6),
                (troop_get_slot, ":center_overlay", "trp_temp_array_a", ":indx0"),
                (gt, ":center_overlay", -1),
                (store_add, ":indx1", ":indx0", 4),
                (troop_get_slot, ":lord", "trp_temp_array_a", ":indx1"),
                (store_add, ":indx_display_state", ":indx0", 5),

                (try_begin),
                    (eq, ":lord", -1),
                    (assign, ":color", 0xFFFFFF),
                (else_try),
                    (call_script, "script_search_lords_tmp", 0, ":lord"),
                    (troop_get_slot, ":indx0", "trp_temp_array_c", 0),
                    (store_add, ":indx1", ":indx0", 1),
                    (troop_get_slot, ":color", "trp_temp_array_b", ":indx1"),
                (try_end),

                (try_begin),
                    (eq, "$show_toggle", 1),
                    (overlay_set_color, ":center_overlay", ":color"),
                    (troop_set_slot, "trp_temp_array_a", ":indx_display_state", 1),

                (else_try),
                    (overlay_set_color, ":center_overlay", 0),
                    (troop_set_slot, "trp_temp_array_a", ":indx_display_state", 0),
                (try_end),

            (try_end),

            #update lord buttons, checkbox unassigned
            (try_begin),
                (eq, "$show_toggle", 1),
                (assign, "$show_toggle", 0),
                (assign, ":color_button", 0x0066FF),
                (overlay_set_val, "$chk_unassigned", 1),
            (else_try),
                (assign, "$show_toggle", 1),
                (assign, ":color_button", 0),
                (overlay_set_val, "$chk_unassigned", 0),
            (try_end),

            (try_for_range, ":btn_lord", "$first_lord_btn", "$last_lord_btn"),
                (overlay_set_color, ":btn_lord", ":color_button"),
            (try_end),
            (val_add,":btn_lord", 1),
            (overlay_set_color, ":btn_lord", ":color_button"),
        (else_try),
        #change on faction show combo
            (eq, ":object", "$factions"),

            #set all lord buttons to unselected
            (store_add, ":limit",  "$last_lord_btn", 1),
            (try_for_range, ":i", "$first_lord_btn", ":limit"),
                (overlay_set_color, ":i", 0),
            (try_end),

            #paint centers of chosen faction
            (store_add, ":fac_id", "fac_player_supporters_faction", ":value"),

            (try_for_range, ":i", 0, "$n_centers"),
                (store_mul, ":indx0", ":i", 6),
                (troop_get_slot, ":center_overlay", "trp_temp_array_a", ":indx0"),
                (gt, ":center_overlay", -1),
                (store_add, ":indx1", ":indx0", 1),
                (troop_get_slot, ":id_center", "trp_temp_array_a", ":indx1"),
                (is_between, ":id_center", walled_centers_begin, walled_centers_end),
                (store_add, ":indx1", ":indx0", 4),
                (troop_get_slot, ":lord", "trp_temp_array_a", ":indx1"),
                (store_faction_of_party, ":fac", ":id_center"),
                (store_add, ":indx_display_state", ":indx0", 5),

                (try_begin),
                    (eq, ":fac_id", ":fac"),
                    (call_script, "script_search_lords_tmp", 0, ":lord"),
                    (assign, ":end", reg0),
                    #if no lord, white
                    (try_begin),
                        (eq, ":end", 0),
                        (assign, ":color", 0xFFFFFF),
                    (else_try), #lord color and button lord as marked
                        (troop_get_slot, ":indx0", "trp_temp_array_c", 0),
                        (store_add, ":indx1", ":indx0", 1),
                        (troop_get_slot, ":color", "trp_temp_array_b", ":indx1"),
                        (store_add, ":indx1", ":indx0", 2),
                        (troop_get_slot, ":btn_lord", "trp_temp_array_b", ":indx1"),
                        (gt, ":btn_lord", 1),
                        (overlay_set_color, ":btn_lord", 0x0066FF),
                    (try_end),

                    (overlay_set_color, ":center_overlay", ":color"),
                    (troop_set_slot, "trp_temp_array_a", ":indx_display_state", 1),

                (else_try),
                    (overlay_set_color, ":center_overlay", 0),
                    (troop_set_slot, "trp_temp_array_a", ":indx_display_state", 0),
                (try_end),

            (try_end),
        (else_try),
        #click on center + control
            # (eq, "$gShowFeudalMap", 1), #assign only if dialog with minister first
            (ge, ":object", "$first_center_btn"),
            (le, ":object", "$last_center_btn"),
            (this_or_next| key_is_down, key_right_control),
            (key_is_down, key_left_control),

            (call_script, "script_search_fiefs_tmp", 0, ":object"),
            (gt, reg0, 0),
            (troop_get_slot, ":indx0", "trp_temp_array_c", 0),
            (store_add, ":indx1", ":indx0", 5),
            (troop_get_slot, ":display_state", "trp_temp_array_a", ":indx1"),
            (eq, ":display_state", 1),
            (store_add, ":indx1", ":indx0", 4),
            (troop_get_slot, ":lord", "trp_temp_array_a", ":indx1"),

            (assign, ":c", 0),
            (try_begin),
                (faction_slot_eq, "$players_kingdom", slot_faction_government_type, gov_imperial),
                (assign, ":c", 1),
            (else_try),
                (this_or_next | eq, ":lord", -1),
                (eq, ":lord", 0), #assign only unassigned or player owned
                (assign, ":c", 1),
            (try_end),
            (eq, ":c", 1),

            (store_add, ":indx1", ":indx0", 1),
            (troop_get_slot, "$fief_selected", "trp_temp_array_a", ":indx1"),
            (is_between, "$fief_selected", walled_centers_begin, walled_centers_end),
            (try_begin),
                (eq, "$g_player_court", "$fief_selected"),
                (display_message, "@Can't grant capital!"),
            (else_try),
                (faction_slot_eq, "$players_kingdom", slot_faction_government_type, gov_imperial),
                (party_get_slot, "$temp4_1", "$fief_selected", slot_center_province),
                (store_add, ":slot", "$temp4_1", slot_province_senatorial_begin),
                (try_begin),
                    (troop_slot_ge, "trp_province_array", ":slot", 1),
                    (display_message, "@The province is senatorial. You cannot change its governor", message_alert),
                (else_try),
                    (troop_get_slot, ":governor", "trp_province_array", "$temp4_1"),
                    (gt, ":governor", 0),
                    (store_faction_of_troop, ":fac", ":governor"),
                    (neq, ":fac", "$players_kingdom"),
                    (display_message, "@Due to the civil war the province is in turmoil.", message_alert),
                    (display_message, "@It is not possible to change the governor now.", message_alert),
                (else_try),
                    (assign, "$g_presentation_credits_obj_9_alpha", 0),
                    (start_presentation, "prsnt_governor_selection"),
                (try_end),
            (else_try),
                (store_faction_of_party, ":party_faction", "$fief_selected"),
                (neq, ":party_faction", "fac_player_supporters_faction"),
                (display_message, "@Unassigned settlement not part of your kingdom!"),
            (else_try),
                (call_script, "script_toggle_controls_worldmap", 0),
                (overlay_set_display, "$lbl_name_grant_lord", 1),
                (overlay_set_display, "$cbo_grant", 1),
                (overlay_set_val, "$cbo_grant",  "$last_indx_cbogrant"),
            (try_end),
        (else_try),
        #change on grant combo
            (eq, ":object", "$cbo_grant"),
            (call_script, "script_search_lords_tmp" , 3, ":value"),
            (assign, ":end", reg0),
            (try_begin),
                (eq, ":end", 0),    #case None
            (else_try),

                (troop_get_slot, ":indx0", "trp_temp_array_c", 0),
                (store_add, ":indx1", ":indx0", 0),
                (troop_get_slot, ":lord", "trp_temp_array_b", ":indx1"),

                (is_between, "$fief_selected", walled_centers_begin, walled_centers_end),
                (this_or_next|is_between, ":lord", active_npcs_begin, active_npcs_end),
                (eq, ":lord", "trp_player"),
                (call_script, "script_give_center_to_lord2", "$fief_selected", ":lord", 0),

                #if fief was on agenda, remove from agenda
                (faction_get_slot, ":fief_on_agenda", "fac_player_supporters_faction", slot_faction_political_issue),
                (try_begin),
                    (eq, ":fief_on_agenda", "$fief_selected"),
                    (faction_set_slot, "fac_player_supporters_faction", slot_faction_political_issue, -1),
                (try_end),

                (call_script, "script_add_log_entry", logent_castle_given_to_lord_by_player, "trp_player", "$fief_selected", ":lord", "$g_encountered_party_faction"),
                (str_store_party_name, s1, "$fief_selected"),
                (display_message, "@{s1} is granted to {s0}.", 0xFF00FF),

                #update lists fief & lords, overlays center and label name
                (call_script, "script_search_fiefs_tmp" , 1, "$fief_selected"),
                (troop_get_slot, ":indx0", "trp_temp_array_c", 0),
                (store_add, ":indx1", ":indx0", 4),
                (troop_set_slot, "trp_temp_array_a", ":indx1", ":lord"),

                (troop_get_slot, ":center_overlay", "trp_temp_array_a", ":indx0"),
                (gt, ":center_overlay", -1),
                (store_add, ":indx1", ":indx0", 3),
                (troop_get_slot, ":id_overlay_name", "trp_temp_array_a", ":indx1"),

                (call_script, "script_search_lords_tmp" , 0, ":lord"),
                (troop_get_slot, ":indx0", "trp_temp_array_c", 0),
                (store_add, ":indx1", ":indx0", 1),
                (troop_get_slot, ":color", "trp_temp_array_b", ":indx1"),

                (str_store_troop_name, s0, ":lord"),

                (overlay_set_text, ":id_overlay_name", s0),
                (overlay_set_color, ":center_overlay", ":color"),
            (try_end),

            (call_script, "script_toggle_controls_worldmap", 1),
            (overlay_set_display, "$lbl_name_grant_lord", 0),
            (overlay_set_display, "$cbo_grant", 0),
        (else_try),
        #Click on help
            (eq, ":object", "$g_help"),
            (dialog_box, "str_tutorial_assign_fiefs", "@Tutorial"),
        (try_end),
      ]),

  ]),
####END NEW FIEF MANAGEMENT

#mod trailer
("intro", 0, mesh_mp_ui_bg, [
  (ti_on_presentation_load,[
    (play_track, "track_trailer_0", 2),

    (presentation_set_duration, 1000000),
    (assign, "$g_presentation_state", -5),
    (assign, "$temp", 0),#timer

    (try_for_range, ":slot", 0, 1000),
        (troop_set_slot, "trp_temp_array_a", ":slot", -1),
    (try_end),

    (create_text_overlay,"$g_presentation_obj_12", "@Press ESCAPE to leave"),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size,"$g_presentation_obj_12", pos1),
    (position_set_x, pos1, 25),
    (position_set_y, pos1, 725),
    (overlay_set_position,"$g_presentation_obj_12", pos1),
  ]),

  (ti_on_presentation_run,[
    (store_trigger_param_1, ":cur_time"),#mili seconds
    (set_fixed_point_multiplier, 1000),
    # (assign, reg1, ":cur_time"),
    # (display_message, "@time: {reg1}"),
    (try_begin),#mona
        (eq, "$g_presentation_state", -5),
        (create_mesh_overlay, "$g_presentation_obj_11", "mesh_white_plane"),
        (overlay_set_color, "$g_presentation_obj_11", 0x000000),#line color
        (position_set_x, pos3, 10000000),
        (position_set_y, pos3, 10000000),
        (overlay_set_size, "$g_presentation_obj_11", pos3),
        (position_set_x, pos3, 0),
        (position_set_y, pos3, 0),
        (overlay_set_position, "$g_presentation_obj_11", pos3),

        (create_text_overlay, "$g_presentation_obj_13", "@PILOS Studios", tf_center_justify|tf_double_space|tf_vertical_align_center),
        (overlay_set_color, "$g_presentation_obj_13", 0xFFFFFF),
        (overlay_set_alpha, "$g_presentation_obj_13", 0),
        (position_set_x, pos1, 2250),
        (position_set_y, pos1, 2250),
        (overlay_set_size, "$g_presentation_obj_13", pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 375),
        (overlay_set_position, "$g_presentation_obj_13", pos1),
        (overlay_animate_to_alpha, "$g_presentation_obj_13", 2000, 0xFF),
        (val_add, "$temp", 3250),
        (val_add, "$g_presentation_state", 1),
    (else_try),
        (eq, "$g_presentation_state", -4),
        (gt, ":cur_time", "$temp"),
        (overlay_animate_to_alpha, "$g_presentation_obj_13", 1000, 0x00),
        (val_add, "$temp", 1250),
        (val_add, "$g_presentation_state", 1),
    (else_try),
        (eq, "$g_presentation_state", -3),
        (gt, ":cur_time", "$temp"),
        (create_text_overlay, "$g_presentation_obj_14", "@presents", tf_center_justify|tf_double_space|tf_vertical_align_center),
        (overlay_set_color, "$g_presentation_obj_14", 0xFFFFFF),
        (overlay_set_alpha, "$g_presentation_obj_14", 0),
        (position_set_x, pos1, 2250),
        (position_set_y, pos1, 2250),
        (overlay_set_size, "$g_presentation_obj_14", pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 375),
        (overlay_set_position, "$g_presentation_obj_14", pos1),
        (overlay_animate_to_alpha, "$g_presentation_obj_14", 2000, 0xFF),
        (val_add, "$temp", 2750),
        (val_add, "$g_presentation_state", 1),
    (else_try),
        (eq, "$g_presentation_state", -2),
        (gt, ":cur_time", "$temp"),
        (overlay_animate_to_alpha, "$g_presentation_obj_14", 1000, 0x00),
        (val_add, "$temp", 1250),
        (val_add, "$g_presentation_state", 1),
    (else_try),
        (eq, "$g_presentation_state", -1),
        (gt, ":cur_time", "$temp"),
        (create_text_overlay, "$g_presentation_obj_15", "@AUT CAESAR AUT NIHIL", tf_center_justify|tf_double_space|tf_vertical_align_center),
        (overlay_set_color, "$g_presentation_obj_15", 0xFFFFFF),
        (overlay_set_alpha, "$g_presentation_obj_15", 0),
        (position_set_x, pos1, 3000),
        (position_set_y, pos1, 3000),
        (overlay_set_size, "$g_presentation_obj_15", pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 375),
        (overlay_set_position, "$g_presentation_obj_15", pos1),
        (overlay_animate_to_alpha, "$g_presentation_obj_15", 2000, 0xFF),
        (val_add, "$temp", "$temp", 4000),
        (val_add, "$g_presentation_state", 1),
    (else_try),
        (eq, "$g_presentation_state", 0),
        (gt, ":cur_time", "$temp"),
        (overlay_animate_to_alpha, "$g_presentation_obj_15", 1500, 0x00),
        (val_add, "$temp", 2500),
        (val_add, "$g_presentation_state", 1),
    (else_try),
        (gt, ":cur_time", "$temp"),
        (eq, "$g_presentation_state", 1),
        (val_add, "$g_presentation_state", 1),

        (overlay_animate_to_alpha, "$g_presentation_obj_11",  1500, 0x00),

        (create_mesh_overlay, reg0, "mesh_main_menu_dust"),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, 0),
        (overlay_set_position, reg0, pos1),

        (create_mesh_overlay, "$g_presentation_obj_1", "mesh_pic_roman_map"),
        (position_set_x, pos1, 1000),
        (position_set_y, pos1, 1000),
        (overlay_set_size, "$g_presentation_obj_1", pos1),
        (overlay_set_alpha, "$g_presentation_obj_1", 0x00),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, 0),
        (overlay_set_position, "$g_presentation_obj_1", pos1),
        (overlay_animate_to_alpha, "$g_presentation_obj_1", 5000, 0xFF),
        # (overlay_animate_to_highlight_color, "$g_presentation_obj_1", 5000, 0xfdf427),

        (play_track, "track_trailer_1", 1),

        # (create_text_overlay, "$g_presentation_obj_20", "str_intro_01", tf_scrollable|tf_center_justify),

        (play_sound, "snd_intro_1", 1),

        # (position_set_x, pos1, 1500),
        # (position_set_y, pos1, 1500),
        # (overlay_set_size, "$g_presentation_obj_20", pos1),
        # (position_set_x, pos1, 600),
        # (position_set_y, pos1, 560),
        # (overlay_set_position, "$g_presentation_obj_20", pos1),
        # (position_set_x, pos1, 350),
        # (position_set_y, pos1, 150),
        # (overlay_set_area_size, "$g_presentation_obj_20", pos1),
        (val_add, "$temp", 13000),
    (else_try),
        (gt, ":cur_time", "$temp"),
        (eq, "$g_presentation_state", 2),
        (val_add, "$g_presentation_state", 1),
        #(overlay_animate_to_alpha, "$g_presentation_obj_1", 0, 0),
        (play_sound, "snd_battle", 1),
        (position_set_x, pos2, 365),
        (position_set_y, pos2, 391),
        (try_for_range, ":slot", 0, 15),
            (create_mesh_overlay, reg1, "mesh_pic_standard"),
            (overlay_set_position, reg1, pos2),
            (overlay_set_alpha, reg1, 0x00),
            (overlay_animate_to_alpha, reg1, 2500, 0xFF),
          #  (overlay_animate_to_highlight_color, reg1, 2500, 0xfdf427),
            (troop_set_slot, "trp_temp_array_a", ":slot", reg1),
            (overlay_set_display, reg1, 0),
        (try_end),

        (create_mesh_overlay, "$g_presentation_obj_2", "mesh_pic_roman_kingdom"),
        (position_set_x, pos1, 1000),
        (position_set_y, pos1, 1000),
        (overlay_set_size, "$g_presentation_obj_2", pos1),
        (overlay_set_alpha, "$g_presentation_obj_2", 0x00),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, 0),
        (overlay_set_position, "$g_presentation_obj_2", pos1),
        (overlay_animate_to_alpha, "$g_presentation_obj_2", 5000, 0xFF),
        (val_add, "$temp", 18000),
      #  (overlay_animate_to_highlight_color, "$g_presentation_obj_2", 5000, 0xfdf427),
    (else_try),
        (gt, ":cur_time", "$temp"),
        (eq, "$g_presentation_state", 3),
        (val_add, "$g_presentation_state", 1),

        (troop_get_slot, ":id", "trp_temp_array_a", 0),
        (overlay_set_display, ":id", 1),
        #spain
        (position_set_x, pos2, 140),
        (position_set_y, pos2, 325),
        (overlay_animate_to_position, ":id", 3000, pos2),

        (troop_get_slot, ":id", "trp_temp_array_a", 1),
        (overlay_set_display, ":id", 1),
        #magna graecia
        (position_set_x, pos2, 400),
        (position_set_y, pos2, 360),
        (overlay_animate_to_position, ":id", 3000, pos2),

        (create_mesh_overlay, "$g_presentation_obj_3", "mesh_pic_roman_punic"),
        (position_set_x, pos1, 1000),
        (position_set_y, pos1, 1000),
        (overlay_set_size, "$g_presentation_obj_3", pos1),
        (overlay_set_alpha, "$g_presentation_obj_3", 0x00),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, 0),
        (overlay_set_position, "$g_presentation_obj_3", pos1),
        (overlay_animate_to_alpha, "$g_presentation_obj_3", 5000, 0xFF),
        # (overlay_animate_to_highlight_color, "$g_presentation_obj_3", 5000, 0xfdf427),

        # (overlay_set_text, "$g_presentation_obj_20", "str_intro_02"),

        (play_sound, "snd_intro_2", 1),

        (val_add, "$temp", 14000),
    (else_try),
        (gt, ":cur_time", "$temp"),
        (eq, "$g_presentation_state", 4),
        (play_sound, "snd_battle", 1),
        (troop_get_slot, ":id", "trp_temp_array_a", 2),
        (overlay_set_display, ":id", 1),
        #gallia cisalpina
        (position_set_x, pos2, 320),
        (position_set_y, pos2, 455),
        (overlay_animate_to_position, ":id", 3000, pos2),

        (troop_get_slot, ":id", "trp_temp_array_a", 3),
        (overlay_set_display, ":id", 1),
        #greece
        (position_set_x, pos2, 491),
        (position_set_y, pos2, 372),
        (overlay_animate_to_position, ":id", 3000, pos2),

        (troop_get_slot, ":id", "trp_temp_array_a", 4),
        (overlay_set_display, ":id", 1),
        #carthage
        (position_set_x, pos2, 307),
        (position_set_y, pos2, 275),
        (overlay_animate_to_position, ":id", 3000, pos2),

        (create_mesh_overlay, "$g_presentation_obj_4", "mesh_pic_roman_late_republic"),
        (position_set_x, pos1, 1000),
        (position_set_y, pos1, 1000),
        (overlay_set_size, "$g_presentation_obj_4", pos1),
        (overlay_set_alpha, "$g_presentation_obj_4", 0x00),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, 0),
        (overlay_set_position, "$g_presentation_obj_4", pos1),
        (overlay_animate_to_alpha, "$g_presentation_obj_4", 5000, 0xFF),
      #  (overlay_animate_to_highlight_color, "$g_presentation_obj_4", 5000, 0xfdf427),
        (val_add, "$g_presentation_state", 1),

        # (overlay_set_text, "$g_presentation_obj_20", "str_intro_03"),

        (play_sound, "snd_intro_3", 1),
        (val_add, "$temp", 6000),
    (else_try),
        (gt, ":cur_time", "$temp"),
        (eq, "$g_presentation_state", 5),
        (play_track, "track_trailer_2", 1),
        (val_add, "$g_presentation_state", 1),
        (val_add, "$temp", 8000),
    (else_try),
        (gt, ":cur_time", "$temp"),
        (eq, "$g_presentation_state", 6),

        (troop_get_slot, ":id", "trp_temp_array_a", 5),
        (overlay_set_display, ":id", 1),
        #gaul
        (position_set_x, pos2, 216),
        (position_set_y, pos2, 507),
        (overlay_animate_to_position, ":id", 3000, pos2),

        (troop_get_slot, ":id", "trp_temp_array_a", 6),
        (overlay_set_display, ":id", 1),
        #asia
        (position_set_x, pos2, 676),
        (position_set_y, pos2, 354),
        (overlay_animate_to_position, ":id", 3000, pos2),

        (troop_get_slot, ":id", "trp_temp_array_a", 7),
        (overlay_set_display, ":id", 1),
        #cyrenecia
        (position_set_x, pos2, 508),
        (position_set_y, pos2, 218),
        (overlay_animate_to_position, ":id", 3000, pos2),

        (create_mesh_overlay, "$g_presentation_obj_5", "mesh_pic_roman_caesar"),
        (position_set_x, pos1, 1000),
        (position_set_y, pos1, 1000),
        (overlay_set_size, "$g_presentation_obj_5", pos1),
        (overlay_set_alpha, "$g_presentation_obj_5", 0x00),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, 0),
        (overlay_set_position, "$g_presentation_obj_5", pos1),
        (overlay_animate_to_alpha, "$g_presentation_obj_5", 5000, 0xFF),
        # (overlay_animate_to_highlight_color, "$g_presentation_obj_5", 5000, 0xfdf427),
        (val_add, "$g_presentation_state", 1),

        # (overlay_set_text, "$g_presentation_obj_20", "str_intro_04"),

        (play_sound, "snd_intro_4", 1),
        (val_add, "$temp", 23000),
    (else_try),
        (gt, ":cur_time", "$temp"),
        (eq, "$g_presentation_state", 7),
        (play_sound, "snd_battle", 1),
        (troop_get_slot, ":id", "trp_temp_array_a", 8),
        (overlay_set_display, ":id", 1),
        #judea
        (position_set_x, pos2, 717),
        (position_set_y, pos2, 252),
        (overlay_animate_to_position, ":id", 3000, pos2),

        (troop_get_slot, ":id", "trp_temp_array_a", 9),
        (overlay_set_display, ":id", 1),
        #egypt
        (position_set_x, pos2, 623),
        (position_set_y, pos2, 197),
        (overlay_animate_to_position, ":id", 3000, pos2),

        (troop_get_slot, ":id", "trp_temp_array_a", 10),
        (overlay_set_display, ":id", 1),
        #britain
        (position_set_x, pos2, 176),
        (position_set_y, pos2, 581),
        (overlay_animate_to_position, ":id", 3000, pos2),

        (troop_get_slot, ":id", "trp_temp_array_a", 11),
        (overlay_set_display, ":id", 1),
        #noricum
        (position_set_x, pos2, 435),
        (position_set_y, pos2, 487),
        (overlay_animate_to_position, ":id", 3000, pos2),

        (troop_get_slot, ":id", "trp_temp_array_a", 12),
        (overlay_set_display, ":id", 1),
        #thracia
        (position_set_x, pos2, 572),
        (position_set_y, pos2, 408),
        (overlay_animate_to_position, ":id", 3000, pos2),

        (troop_get_slot, ":id", "trp_temp_array_a", 13),
        (overlay_set_display, ":id", 1),
        #mauretania
        (position_set_x, pos2, 117),
        (position_set_y, pos2, 253),
        (overlay_animate_to_position, ":id", 3000, pos2),

        (create_mesh_overlay, "$g_presentation_obj_6", "mesh_pic_roman_imperial"),
        (position_set_x, pos1, 1000),
        (position_set_y, pos1, 1000),
        (overlay_set_size, "$g_presentation_obj_6", pos1),
        (overlay_set_alpha, "$g_presentation_obj_6", 0x00),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, 0),
        (overlay_set_position, "$g_presentation_obj_6", pos1),
        (overlay_animate_to_alpha, "$g_presentation_obj_6", 5000, 0xFF),
        # (overlay_animate_to_highlight_color, "$g_presentation_obj_6", 5000, 0xfdf427),
        (val_add, "$g_presentation_state", 1),
        (play_track, "track_final_glory", 1),

        # (overlay_set_text, "$g_presentation_obj_20", "str_intro_05"),

        (play_sound, "snd_intro_5", 1),
        (val_add, "$temp", 9000),
    (else_try),
        (gt, ":cur_time", "$temp"),
        (eq, "$g_presentation_state", 8),
        (overlay_animate_to_alpha, "$g_presentation_obj_1", 2500, 0x00),
        (overlay_animate_to_alpha, "$g_presentation_obj_2", 2500, 0x00),
        (overlay_animate_to_alpha, "$g_presentation_obj_3", 2500, 0x00),
        (overlay_animate_to_alpha, "$g_presentation_obj_4", 2500, 0x00),
        (overlay_animate_to_alpha, "$g_presentation_obj_5", 2500, 0x00),
        (overlay_animate_to_alpha, "$g_presentation_obj_6", 2500, 0x00),

        (try_for_range, ":slot", 0, 15),
            (troop_get_slot, reg1, "trp_temp_array_a", ":slot"),
            (overlay_animate_to_alpha, reg1, 2500, 0x00),
        (try_end),

        #(overlay_animate_to_alpha, "$g_presentation_obj_10", 2500, 0x00),
        # (overlay_set_display, "$g_presentation_obj_20", 0),

        (val_add, "$g_presentation_state", 1),
        (val_add, "$temp", 5000),
    (else_try),#pic_triumph
        (gt, ":cur_time", "$temp"),
        (eq, "$g_presentation_state", 9),


        (create_mesh_overlay, "$g_presentation_obj_7", "mesh_pic_roman_triumph"),
        (position_set_x, pos1, 1000),
        (position_set_y, pos1, 1000),
        (overlay_set_size, "$g_presentation_obj_7", pos1),
        (overlay_set_alpha, "$g_presentation_obj_7", 0x00),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, 0),
        (overlay_set_position, "$g_presentation_obj_7", pos1),
        (overlay_animate_to_alpha, "$g_presentation_obj_7", 4000, 0xFF),
        #(overlay_animate_to_highlight_color, "$g_presentation_credits_obj_1", 3000, 0xfdf427),
        (val_add, "$g_presentation_state", 1),

        (val_add, "$temp", 9500),
    (else_try),#pic_triumph
        (gt, ":cur_time", "$temp"),
        (eq, "$g_presentation_state", 10),
        (overlay_animate_to_alpha, "$g_presentation_obj_7", 4000, 0x00),

        (val_add, "$g_presentation_state", 1),
        (val_add, "$temp", 4500),
    (else_try),#
        (gt, ":cur_time", "$temp"),
        (eq, "$g_presentation_state", 11),
        (val_add, "$g_presentation_state", 1),
        (create_mesh_overlay, "$g_presentation_credits_obj_2", "mesh_pic_roman_decadence"),
        (position_set_x, pos1, 1000),
        (position_set_y, pos1, 1000),
        (overlay_set_size, "$g_presentation_credits_obj_2", pos1),
        (overlay_set_alpha, "$g_presentation_credits_obj_2", 0x00),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, 0),
        (overlay_set_position, "$g_presentation_credits_obj_2", pos1),
        (overlay_animate_to_alpha, "$g_presentation_credits_obj_2", 4000, 0xFF),
        (val_add, "$temp", 9500),
        # (overlay_animate_to_highlight_color, "$g_presentation_credits_obj_2", 2500, 0x675f5f),
    (else_try),#
        (gt, ":cur_time", "$temp"),
        (eq, "$g_presentation_state", 12),
        (val_add, "$g_presentation_state", 1),
        (overlay_animate_to_alpha, "$g_presentation_credits_obj_2", 4000, 0x00),
        (val_add, "$temp", 4500),
    (else_try),
        (gt, ":cur_time", "$temp"),
        (eq, "$g_presentation_state", 13),
        (val_add, "$g_presentation_state", 1),
        (create_mesh_overlay, "$g_presentation_obj_8", "mesh_pic_roman_murder"),
        (position_set_x, pos1, 1000),
        (position_set_y, pos1, 1000),
        (overlay_set_size, "$g_presentation_obj_8", pos1),
        (overlay_set_alpha, "$g_presentation_obj_8", 0x00),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, 0),
        (overlay_set_position, "$g_presentation_obj_8", pos1),
        (overlay_animate_to_alpha, "$g_presentation_obj_8", 4000, 0xFF),
        (val_add, "$temp", 9500),
          #(overlay_animate_to_highlight_color, "$g_presentation_credits_obj_1", 2500, 0x949494),
    (else_try),#
        (gt, ":cur_time", "$temp"),
        (eq, "$g_presentation_state", 14),
        (val_add, "$g_presentation_state", 1),
        (overlay_animate_to_alpha, "$g_presentation_obj_8", 4000, 0x00),
        (val_add, "$temp", 4500),
    (else_try),
        (gt, ":cur_time", "$temp"),
        (eq, "$g_presentation_state", 15),
        (val_add, "$g_presentation_state", 1),
        (create_mesh_overlay, "$g_presentation_obj_9", "mesh_pic_roman_glory"),
        (position_set_x, pos1, 1000),
        (position_set_y, pos1, 1000),
        (overlay_set_size, "$g_presentation_obj_9", pos1),
        (overlay_set_alpha, "$g_presentation_obj_9", 0x00),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, 0),
        (overlay_set_position, "$g_presentation_obj_9", pos1),
        (overlay_animate_to_alpha, "$g_presentation_obj_9", 4000, 0xFF),
        (val_add, "$temp", 9500),
        #(overlay_animate_to_highlight_color, "$g_presentation_credits_obj_1", 2500, 0x675f5f),
    (else_try),#
        (gt, ":cur_time", "$temp"),
        (eq, "$g_presentation_state", 16),
        (val_add, "$g_presentation_state", 1),
        (overlay_animate_to_alpha, "$g_presentation_obj_9", 4000, 0x00),
        (val_add, "$temp", 4500),
    (else_try),
        (gt, ":cur_time", "$temp"),
        (eq, "$g_presentation_state", 17),
        (val_add, "$g_presentation_state", 1),
        (create_mesh_overlay, "$g_presentation_obj_10", "mesh_pic_roman_nero"),

        # (overlay_set_text, "$g_presentation_obj_20", "str_intro_06"),
        (play_sound, "snd_intro_6", 1),

        # (overlay_set_display, "$g_presentation_obj_20", 1),

        (position_set_x, pos1, 1000),
        (position_set_y, pos1, 1000),
        (overlay_set_size, "$g_presentation_obj_10", pos1),
        (overlay_set_alpha, "$g_presentation_obj_10", 0x00),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, 0),
        (overlay_set_position, "$g_presentation_obj_10", pos1),
        (overlay_animate_to_alpha, "$g_presentation_obj_10", 4000, 0xFF),
        (val_add, "$temp", 19000),
        #(overlay_animate_to_highlight_color, "$g_presentation_credits_obj_1", 2500, 0x675f5f),
    (else_try),#mona
        (gt, ":cur_time", "$temp"),
        (eq, "$g_presentation_state", 18),
        (val_add, "$g_presentation_state", 1),
        (overlay_animate_to_alpha, "$g_presentation_obj_10", 3500, 0x00),
        (overlay_set_alpha, "$g_presentation_obj_11", 0xFF),
        (val_add, "$temp", 4000),
    (else_try),
        (gt, ":cur_time", "$temp"),
        (eq, "$g_presentation_state", 19),
        (presentation_set_duration, 0),
        (jump_to_menu, "mnu_choose_attribute_1"),
        (val_add, "$temp", 500),
    (try_end),
  ]),
   ## END presentation event state change trigger
  (ti_on_presentation_run, [
    (try_begin),
        (key_clicked, key_escape),
        (presentation_set_duration, 0),
        (jump_to_menu, "mnu_choose_attribute_1"),
        (stop_all_sounds),
    # (else_try),
    #     (key_clicked, key_space),
    #     (set_fixed_point_multiplier, 1000),
    #     (mouse_get_position, pos31),

    #     (position_get_x, reg31, pos31),
    #     (position_get_y, reg32, pos31),

    #     (display_message, "@X: {reg31} | Y: {reg32}"),
    (try_end),
  ]),
]),

("display_special_items", 0, 0, [
  (ti_on_presentation_load,[
    (set_fixed_point_multiplier, 1000),
    #set up item list in temp
    (try_for_range, ":value", 0, 1500),
        (troop_set_slot, "trp_temp_array_c", ":value", 0),
    (try_end),
    (assign, ":slot", 0),
    (try_for_range_backwards, ":item", legendary_items_begin, legendary_items_end),
        (neq, ":item", "itm_caesars_sword_melee"),
        (troop_set_slot, "trp_temp_array_c", ":slot", ":item"),
        (val_add, ":slot", 1),
    (try_end),
    (store_sub, "$cheat_find_item_range_begin", ":slot", 1),#stores number of items

    #0. BACKROUND
    (create_mesh_overlay, reg0, "mesh_mp_ui_bg"),
    (position_set_x, pos1, -1),
    (position_set_y, pos1, -1),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 1002),
    (position_set_y, pos1, 1002),
    (overlay_set_size, reg0, pos1),

    (str_store_string, s1, "@Legendary items that can be found in-game are displayed.^You can view a description by selecting an item."),
    (create_text_overlay, reg1, s1, tf_double_space|tf_scrollable),
    (position_set_x, pos1, 30),
    (position_set_y, pos1, 600),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 400),
    (position_set_y, pos1, 100),
    (overlay_set_area_size, reg1, pos1),
    (position_set_x, pos1, 1100),
    (position_set_y, pos1, 1100),
    (overlay_set_size, reg1, pos1),


    (try_begin),
        (gt, "$selected_item", -1),
        (str_store_item_name, s2, "$selected_item"),
        (item_get_value, reg22, "$selected_item"),
        (str_store_string, s1, "@{s2}"),

        # item description
        (store_sub, ":description", "$selected_item", legendary_items_begin),
        (val_add, ":description", "str_description_hercules_club"),
        (create_text_overlay, reg1, ":description", tf_double_space|tf_scrollable),
        (position_set_x, pos1, 650),
        (position_set_y, pos1, 100),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 325),
        (position_set_y, pos1, 500),
        (overlay_set_area_size, reg1, pos1),
        (position_set_x, pos1, 1100),
        (position_set_y, pos1, 1100),
        (overlay_set_size, reg1, pos1),

        (try_begin),
            (is_between, "$selected_item", "itm_roman_rich_vitellius", "itm_female_slave1"),
            (create_text_overlay, reg1, "@The player can't have this item!", tf_center_justify),
            (position_set_x, pos1, 475),
            (position_set_y, pos1, 410),
            (overlay_set_position, reg1, pos1),
            (position_set_x, pos1, 1100),
            (position_set_y, pos1, 1100),
            (overlay_set_size, reg1, pos1),
            (overlay_set_color, reg1, message_alert),
        (else_try),
            (str_store_string, s0, "@You haven't found this item yet."),
            (assign, ":colour", message_negative),
            (try_begin),
                (item_get_slot, ":hour_found", "$selected_item", slot_item_discovered),
                (ge, ":hour_found", 0),
                (call_script, "script_game_get_date_text", 0, ":hour_found"),
                (str_store_string, s0, "@You have discovered this item on {s1}."),
                (assign, ":colour", 0x00AA00),
            (try_end),

            (create_text_overlay, reg1, "str_s0", tf_center_justify),
            (position_set_x, pos1, 475),
            (position_set_y, pos1, 410),
            (overlay_set_position, reg1, pos1),
            (position_set_x, pos1, 1100),
            (position_set_y, pos1, 1100),
            (overlay_set_size, reg1, pos1),
            (overlay_set_color, reg1, ":colour"),


            (str_store_string, s0, "@You don't have this item in inventory."),
            (assign, ":colour", message_negative),
            (try_begin),
                (player_has_item, "$selected_item"),
                (str_store_string, s0, "@You have this item in inventory."),
                (assign, ":colour", 0x00AA00),
            (else_try),
                (troop_has_item_equipped, "trp_pseudo_troop_end", "$selected_item"),
                (str_store_string, s0, "@You have this item on your second outfit."),
                (assign, ":colour", 0x00AA00),
            (else_try),
                (troop_has_item_equipped, "trp_player",  "$selected_item"),
                (str_store_string, s0, "@You are currently wearing this item."),
                (assign, ":colour", 0x00AA00),
            (try_end),

            (create_text_overlay, reg1, "str_s0", tf_center_justify),
            (position_set_x, pos1, 475),
            (position_set_y, pos1, 375),
            (overlay_set_position, reg1, pos1),
            (position_set_x, pos1, 1100),
            (position_set_y, pos1, 1100),
            (overlay_set_size, reg1, pos1),
            (overlay_set_color, reg1, ":colour"),
        (try_end),
    (else_try),
        (str_store_string, s1, "@No item is selected."),
    (try_end),
    (create_text_overlay, reg1, s1, tf_center_justify),
    (position_set_x, pos1, 475),
    (position_set_y, pos1, 615),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),


    (assign, "$g_presentation_credits_obj_1", -1),
    (try_begin),
        (gt, "$selected_item", -1),
        (create_mesh_overlay_with_item_id, "$g_presentation_credits_obj_1", "$selected_item"),
        (position_set_x, pos1, 610-200+65),
        (position_set_y, pos1,  250+300),
        (overlay_set_position, "$g_presentation_credits_obj_1", pos1),
        (position_set_x, pos1, 1000),
        (position_set_y, pos1, 1000),
        (overlay_set_size, "$g_presentation_credits_obj_1", pos1),
    (try_end),
    (create_mesh_overlay, "$g_presentation_credits_obj_2", "mesh_inv_slot"),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, "$g_presentation_credits_obj_2", pos1),
    (position_set_x, pos1, 560-200+65),
    (position_set_y, pos1, 200+300),
    (overlay_set_position, "$g_presentation_credits_obj_2", pos1),
    (try_begin),
        (eq, "$selected_item", -1),
        (overlay_set_alpha, "$g_presentation_credits_obj_2", 100),
    (try_end),

    (str_clear, s0),
    (create_text_overlay, "$g_presentation_obj_1", s0, tf_scrollable),
    (position_set_x, pos1, 30),
    (position_set_y, pos1, 25),
    (overlay_set_position, "$g_presentation_obj_1", pos1),
    (position_set_x, pos1, 270),
    (position_set_y, pos1, 600),
    (overlay_set_area_size, "$g_presentation_obj_1", pos1),
    (set_container_overlay, "$g_presentation_obj_1"),

    (assign, ":pos_x", 0),
    # (assign, ":pos_y", 2575),
    (assign, ":pos_y", 0),
    (assign, ":slot_no", 0),

    (store_div, ":end", "$cheat_find_item_range_begin", 3),
    (val_add, ":end", 1),
    # (val_min, ":slot_no", 96),
    # (try_begin),
        # (store_mod, ":mod", "$cheat_find_item_range_begin", 3),
        # (eq, ":mod", 0),
        # (store_div, ":end", "$cheat_find_item_range_begin", 3),
    # (else_try),
        # (store_div, ":end", "$cheat_find_item_range_begin", 3),
        # (val_add, ":end", 1),
    # (try_end),

    # (assign, reg4, ":end"),
    # (assign, reg5, "$cheat_find_item_range_begin"),
    # (display_message, "@{reg4} {reg5}"),
    # (val_min, ":end", 96),

    #create dynamic item list
    (try_for_range, ":unused_height", 0, ":end"),
        (try_for_range, ":unused_width", 0, 3),
            (create_mesh_overlay, "$g_presentation_obj_1", "mesh_inv_slot"),
            (position_set_x, pos1, 890),
            (position_set_y, pos1, 830),
            (overlay_set_size, "$g_presentation_obj_1", pos1),
            (position_set_x, pos1, ":pos_x"),
            (position_set_y, pos1, ":pos_y"),
            (overlay_set_position, "$g_presentation_obj_1", pos1),
            (create_mesh_overlay, "$g_presentation_obj_1", "mesh_mp_inventory_choose"),

            (position_set_x, pos1, 712),
            (position_set_y, pos1, 650),
            (overlay_set_size, "$g_presentation_obj_1", pos1),
            (position_set_x, pos1, ":pos_x"),
            (position_set_y, pos1, ":pos_y"),
            (overlay_set_position, "$g_presentation_obj_1", pos1),

            (troop_set_slot, "trp_temp_array_a", ":slot_no", "$g_presentation_obj_1"),
            (troop_get_slot, ":item_no", "trp_temp_array_c", ":slot_no"),

            (try_begin),
                (this_or_next|player_has_item, ":item_no"),
                (this_or_next|troop_has_item_equipped, "trp_pseudo_troop_end",  ":item_no"),
                (troop_has_item_equipped, "trp_player",  ":item_no"),
                (overlay_set_color, "$g_presentation_obj_1", 0x00AA00),
            (else_try),
                (overlay_set_color, "$g_presentation_obj_1", message_negative),
            (try_end),

            # (store_add,":num_temp",":slot_no","$cheat_find_item_range_begin"),
            # (store_add,":item_no",":num_temp","itm_no_item"),
            (try_begin),
                # (lt, ":item_no", horses_end),
                (gt, ":item_no", 0),
                (create_mesh_overlay_with_item_id, "$g_presentation_obj_1", ":item_no"),
                (position_set_x, pos1, 890),
                (position_set_y, pos1, 830),
                (overlay_set_size, "$g_presentation_obj_1", pos1),
                (store_add, ":item_x", ":pos_x", 44),
                (store_add, ":item_y", ":pos_y", 41),
                (position_set_x, pos1, ":item_x"),
                (position_set_y, pos1, ":item_y"),
                (overlay_set_position, "$g_presentation_obj_1", pos1),
                (troop_set_slot, "trp_temp_array_b", ":item_no", "$g_presentation_obj_1"),
			      (try_end),

            (val_add, ":slot_no", 1),
			      (val_add, ":pos_x", 89),
        (try_end),
        (assign, ":pos_x", 0),
        (val_add, ":pos_y", 83),
    (try_end),
    (set_container_overlay, -1),

    (position_set_x, pos2, 50),
    (position_set_y, pos2, 50),
    (create_game_button_overlay, "$g_presentation_obj_12", "@Go back.", 0),
    (position_set_x, pos1, 750),
    (position_set_y, pos1, 60),
    (overlay_set_position, "$g_presentation_obj_12", pos1),
    (overlay_set_area_size, "$g_presentation_obj_12", pos2),
    #(call_script, "script_presentation_load"),
    (presentation_set_duration, 999999),
  ]),
  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":object"),
    (try_begin),
        (eq,":object","$g_presentation_obj_12"),
			  (presentation_set_duration, 0),
    (try_end),
	]),
  (ti_on_presentation_mouse_enter_leave,[
    (store_trigger_param_1, ":object"),
    (store_trigger_param_2, ":enter_leave"),
    (try_begin),
        (eq, ":enter_leave", 0),
        (store_add, ":end", "$cheat_find_item_range_begin", 1),
        (try_for_range, ":slot_no", 0, ":end"),
            (troop_slot_eq, "trp_temp_array_a", ":slot_no", ":object"),
            (troop_get_slot, ":item_no", "trp_temp_array_c", ":slot_no"),
        (try_begin),
        (gt, ":item_no", 0),
        (troop_get_slot, ":target_obj", "trp_temp_array_b", ":item_no"),
        (overlay_get_position, pos0, ":target_obj"),
        (show_item_details, ":item_no", pos0, 100),
        (assign, "$g_current_opened_item_details", ":item_no"),
        (try_end),
            (assign, ":end", -1),
        (try_end),
        (eq, ":end", -1),
    (else_try),
        (store_add, ":end", "$cheat_find_item_range_begin", 1),
        (try_for_range, ":slot_no", 0, ":end"),
            (troop_slot_eq, "trp_temp_array_a", ":slot_no", ":object"),
            (try_begin),
                (eq, "$g_current_opened_item_details", ":item_no"),
                (close_item_details),
            (try_end),
            (assign, ":end", -1),
        (try_end),
        (eq, ":end", -1),
    (try_end),
  ]),
  (ti_on_presentation_mouse_press,[
	  (store_trigger_param_1, ":object"),
    (store_trigger_param_2, ":mouse_state"),
    (try_begin),
        (eq, ":mouse_state", 0),
        (store_add, ":end", "$cheat_find_item_range_begin", 1),
        (try_for_range, ":slot_no", 0, ":end"),
            (troop_slot_eq, "trp_temp_array_a", ":slot_no", ":object"),
            (troop_get_slot, ":item_no", "trp_temp_array_c", ":slot_no"),
            # (store_add,":num_temp",":slot_no","$cheat_find_item_range_begin"),
            # (store_add,":item_no",":num_temp","itm_no_item"),
            (try_begin),
                (eq, "$current_item", -1),
                (gt, ":item_no", 0),
                (troop_get_slot, ":target_obj", "trp_temp_array_b", ":item_no"),
                (assign,"$current_item",":item_no"),
                (overlay_set_display, ":target_obj", 0),
                # (call_script, "script_cf_item_can_be_used_by_custom_troop", "$current_item"),
                (create_mesh_overlay_with_item_id, "$g_presentation_credits_obj_1", "$current_item"),
                (position_set_x, pos1, 1000),
                (position_set_y, pos1, 1000),
                (overlay_set_size, "$g_presentation_credits_obj_1", pos1),
            (else_try),
                (eq, "$current_item", ":item_no"),
                (troop_get_slot, ":target_obj", "trp_temp_array_b", ":item_no"),
                (overlay_set_display,":target_obj", 1),
                (assign,"$g_presentation_credits_obj_1",-1),
                (assign,"$current_item",-1),
                (start_presentation, "prsnt_display_special_items"),
            (try_end),
        (try_end),
        (try_begin),
            (eq, ":object", "$g_presentation_credits_obj_2"),
            # (try_for_range, ":slot_no", 0, 9),
            # (store_add,":slot_offset",":slot_no",50),
            # (troop_slot_eq, "trp_temp_array_c", ":slot_offset", ":object"),
            # (troop_get_slot, ":slot_item","trp_temp_array_b", ":slot_no"),
            # (troop_get_slot, ":target_obj","trp_temp_array_c", ":slot_no"),
            (try_begin),
                (gt,"$current_item",-1),
                # (eq,"$selected_item",-1),
                (overlay_get_position, pos0, "$g_presentation_credits_obj_2"),
                (overlay_set_position, "$g_presentation_credits_obj_1", pos0),
                # (troop_set_slot, "trp_temp_array_b", ":slot_no", "$current_item"),
                (assign, "$selected_item", "$current_item"),
                (assign,"$current_item",-1),
                (start_presentation, "prsnt_display_special_items"),
                # (else_try),
                # (eq, "$current_item", -1),
                # (overlay_set_display,":target_obj", 0),
                # (assign,"$g_presentation_credits_obj_1",-1),
                # (neq, ":slot_item", 0),
                # (create_mesh_overlay_with_item_id, "$g_presentation_credits_obj_1", ":slot_item"),
                # (position_set_x, pos1, 1000),
                # (position_set_y, pos1, 1000),
                # (overlay_set_size, "$g_presentation_credits_obj_1", pos1),
                # (assign,"$current_item",":slot_item"),
                # (troop_set_slot, "trp_temp_array_b", ":slot_no", 0),
                # (overlay_set_alpha, ":object", 100),
            (else_try),
                (eq,"$current_item",-1),
                (gt,"$selected_item",-1),
                (assign,"$selected_item",-1),
                (start_presentation, "prsnt_display_special_items"),
            (try_end),
        (try_end),
    (else_try),
        (eq, ":mouse_state", 1),
        (gt,"$current_item",-1),
        (assign,"$current_item",-1),
		    # (call_script,"script_custom_troop_inventory_change","$temp_troop"),
        (start_presentation, "prsnt_display_special_items"),
    (try_end),
	]),

  (ti_on_presentation_run,[
    (set_fixed_point_multiplier, 1000),
    #(try_begin),
    #   (this_or_next|key_clicked, key_escape),
    #   (key_clicked, key_right_mouse_button),
    # 	(call_script,"script_custom_troop_inventory_reset","$temp_troop"),
    #(presentation_set_duration, 0),
    # (call_script,"script_get_custom_troop_info"),
    # (call_script,"script_store_custom_troop_info_to_slot","trp_temp_array_b"),
    # (start_presentation, "prsnt_custom_troop"),
    #(try_end),
    (gt,"$current_item",-1),
    (mouse_get_position, pos1),
	  (overlay_set_position, "$g_presentation_credits_obj_1", pos1),
	  #(call_script, "script_presentation_run"),
	]),
]),

# ###weapon_selection
 # ("weapon_selection", 0, 0, [
    # (ti_on_presentation_load,
     # [
        # (set_fixed_point_multiplier, 1000),

        # (try_begin),
            # (gt, "$cheat_find_item_range_begin", legendary_items_begin),
            # (assign, "$cheat_find_item_range_begin", "itm_arrows"),
        # (try_end),

        # #0. BACKROUND
        # (create_mesh_overlay, reg0, "mesh_mp_ui_bg"),
        # (position_set_x, pos1, -1),
        # (position_set_y, pos1, -1),
        # (overlay_set_position, reg0, pos1),
        # (position_set_x, pos1, 1002),
        # (position_set_y, pos1, 1002),
        # (overlay_set_size, reg0, pos1),

        # # (store_mul, ":cur_troop", "$temp_troop", 2), #with weapons
		# # (create_mesh_overlay_with_tableau_material, "$g_presentation_obj_5", -1, "tableau_game_party_window", ":cur_troop"),## tableau_game_character_sheet
        # # (position_set_x, pos1, 1000),
        # # (position_set_y, pos1, 1000),
        # # (overlay_set_size, "$g_presentation_obj_5", pos1),
		# # (position_set_x, pos1, 300),
		# # (position_set_y, pos1, 20),
		# # (overlay_set_position, "$g_presentation_obj_5", pos1),

        # (create_button_overlay, "$g_presentation_obj_3", "@Next", tf_center_justify),
        # (position_set_x, pos1, 185),
        # (position_set_y, pos1, 35),
        # (overlay_set_position, "$g_presentation_obj_3", pos1),
        # (position_set_x, pos1, 1000),
        # (position_set_y, pos1, 1000),
        # (overlay_set_area_size, "$g_presentation_obj_3", pos1),

        # (create_button_overlay, "$g_presentation_obj_3_back", "@Previous", tf_center_justify),
        # (position_set_x, pos1, 95),
        # (position_set_y, pos1, 35),
        # (overlay_set_position, "$g_presentation_obj_3_back", pos1),
        # (position_set_x, pos1, 1000),
        # (position_set_y, pos1, 1000),
        # (overlay_set_area_size, "$g_presentation_obj_3_back", pos1),

		# # (call_script,"script_custom_troop_inventory_total_price","$temp_troop"),
		# # (call_script,"script_custom_troop_inventory_total_weight","$temp_troop"),
	    # # (create_text_overlay,"$g_presentation_obj_6","@Price {reg42}^Weight {reg43}",tf_left_align),
		# # (position_set_x, pos1, 530),
        # # (position_set_y, pos1, 240),
		# # (overlay_set_position, "$g_presentation_obj_6", pos1),
        # # (position_set_x, pos1, 1000),
        # # (position_set_y, pos1, 1000),
        # # (overlay_set_size, "$g_presentation_obj_6", pos1),

        # (assign, reg5, "$cheat_find_item_range_begin"),
        # (store_add, reg6, "$cheat_find_item_range_begin", 96),
	    # (val_min, reg6, legendary_items_begin),
	    # (val_sub, reg6, 1),

	    # (create_text_overlay,"$g_presentation_obj_4","@{reg5} to {reg6}",0),
		# (position_set_x, pos1, 110),
        # (position_set_y, pos1, 700),
		# (overlay_set_position, "$g_presentation_obj_4", pos1),
        # (position_set_x, pos1, 1200),
        # (position_set_y, pos1, 1000),
        # (overlay_set_size, "$g_presentation_obj_4", pos1),

        # (str_store_string, s1, "@You can order to craft any item you like. It will take between two or seven days until the item is crafted. As the smith has to buy all the materials, the overall price of the ordered item will be much higher than the price displayed. Just select an item and place it on the spot below."),

        # (try_begin),
            # (gt, "$selected_item", -1),
            # (str_store_item_name, s2, "$selected_item"),
            # (item_get_value, reg22, "$selected_item"),
            # (str_clear, s33),
            # (try_begin),
                # (eq, "$g_talk_troop", "trp_smith_master"),
                # (store_mul, reg23, reg22, 2),
                # (str_store_string, s33, "@Your personal latifundia smith is cheaper than common town smiths."),
            # (else_try),
                # (item_get_type, ":type", "$selected_item"),
                # (is_between, "$g_talk_troop", weapon_merchants_begin, weapon_merchants_end),
                # (this_or_next|eq, ":type", itp_type_head_armor),
                # (this_or_next|eq, ":type", itp_type_body_armor),
                # (this_or_next|eq, ":type", itp_type_hand_armor),
                # (eq, ":type", itp_type_foot_armor),
                # (store_mul, reg23, reg22, 4),
                # (str_store_string, s33, "@As he is a weapon produceer you pay extra for armours!"),
            # (else_try),
                # (is_between, "$g_talk_troop", armor_merchants_begin, armor_merchants_end),
                # (this_or_next|eq, ":type", itp_type_one_handed_wpn),
                # (this_or_next|eq, ":type", itp_type_bolts),
                # (this_or_next|eq, ":type", itp_type_shield),
                # (this_or_next|eq, ":type", itp_type_two_handed_wpn),
                # (this_or_next|eq, ":type", itp_type_bow),
                # (this_or_next|eq, ":type", itp_type_crossbow),
                # (this_or_next|eq, ":type", itp_type_thrown),
                # (this_or_next|eq, ":type", itp_type_pistol),
                # (this_or_next|eq, ":type", itp_type_musket),
                # (this_or_next|eq, ":type", itp_type_bullets),
                # (this_or_next|eq, ":type", itp_type_polearm),
                # (eq, ":type", itp_type_arrows),
                # (store_mul, reg23, reg22, 4),
                # (str_store_string, s33, "@As he is an armour produceer you pay extra for weapons!"),
            # (else_try),
                # (store_mul, reg23, reg22, 3),
            # (try_end),
            # (try_begin),
                # (neq, "$g_talk_troop", "trp_smith_master"),#not latifundia
                # (party_get_slot, ":original_faction", "$g_encountered_party", slot_center_original_faction),
                # (faction_get_slot, ":culture", ":original_faction", slot_faction_culture),
                # (neg|item_has_faction, "$selected_item", ":culture"),
                # (val_mul, reg23, 3),
                # (val_div, reg23, 2),
                # (str_store_string, s33, "@{s33} The selected item is from a foreign culture. Thus its more expansive to get the materials."),
            # (try_end),

            # (item_get_type, ":type", "$selected_item"),
            # (call_script, "script_get_item_modifier_effects", ":type", "$temp4_1"),
            # (val_mul, reg23, reg5),
            # (val_div, reg23, 100),

            # (store_add, reg24, reg23, reg22),
            # (assign, "$temp1", reg24),
            # (store_div, reg25, reg23,100),
            # (val_clamp, reg25, 2, 8),
            # (assign, "$temp2", reg25),
            # (str_store_string, s1, "@{s1}^^Selected item: {s2}. Base price: {reg22}. Material costs: {reg23}. Total cost: {reg24}. Crafting time: {reg25} days.^^{s33}"),
        # (try_end),

        # (create_text_overlay, reg1, s1, tf_double_space|tf_scrollable),
        # (position_set_x, pos1, 550),
        # (position_set_y, pos1, 100),
        # (overlay_set_position, reg1, pos1),
        # (position_set_x, pos1, 400),
        # (position_set_y, pos1, 500),
        # (overlay_set_area_size, reg1, pos1),
        # (position_set_x, pos1, 1100),
        # (position_set_y, pos1, 1100),
        # (overlay_set_size, reg1, pos1),

        # (assign, "$g_presentation_credits_obj_1", -1),
        # (try_begin),
            # (gt, "$selected_item", -1),
            # (create_mesh_overlay_with_item_id, "$g_presentation_credits_obj_1", "$selected_item"),
            # (position_set_x, pos1, 605),
            # (position_set_y, pos1, 245),
            # (overlay_set_position, "$g_presentation_credits_obj_1", pos1),
            # (position_set_x, pos1, 890),
            # (position_set_y, pos1, 830),
            # (overlay_set_size, "$g_presentation_credits_obj_1", pos1),
        # (try_end),
        # (create_mesh_overlay, "$g_presentation_credits_obj_2", "mesh_inv_slot"),
        # (position_set_x, pos1, 890),
        # (position_set_y, pos1, 830),
        # (overlay_set_size, "$g_presentation_credits_obj_2", pos1),
        # (position_set_x, pos1, 560),
        # (position_set_y, pos1, 200),
        # (overlay_set_position, "$g_presentation_credits_obj_2", pos1),
        # (try_begin),
            # (eq, "$selected_item", -1),
            # (overlay_set_alpha, "$g_presentation_credits_obj_2", 100),
        # (try_end),

        # # (assign, ":pos_y_0_0", 605),
        # # (assign, ":pos_y_0_1", 650),
        # # (assign, ":pos_y_1_0", 605),
        # # (assign, ":pos_y_1_1", 650),
		# # (position_set_x, pos10, 890),
		# # (position_set_y, pos10, 830),
        # # (assign, ":slot_no", 0),
        # # (try_for_range, ":unused_width", 0, 3),
		  # # (try_for_range, ":unused_height", 0, 4),
			# # (try_begin),
				# # (is_between,":slot_no",0,4),
				# # (troop_get_slot, ":slot_item", "trp_temp_array_b",":slot_no"),
				# # (create_mesh_overlay_with_item_id, "$g_presentation_obj_1", ":slot_item"),
				# # (position_set_x, pos1, 598),
				# # (position_set_y, pos1,  ":pos_y_0_1"),
				# # (overlay_set_position, "$g_presentation_obj_1", pos1),
				# # (overlay_set_size, "$g_presentation_obj_1", pos10),
				# # (troop_set_slot, "trp_temp_array_c", ":slot_no", "$g_presentation_obj_1"),
				# # (create_mesh_overlay, "$g_presentation_obj_1", "mesh_inv_slot"),
				# # (position_set_x, pos1, 890),
				# # (position_set_y, pos1, 890),
				# # (overlay_set_size, "$g_presentation_obj_1", pos1),
				# # (position_set_x, pos1, 553),
				# # (position_set_y, pos1,  ":pos_y_0_0"),
				# # (overlay_set_position, "$g_presentation_obj_1", pos1),
				# # (try_begin),
					# # (eq,":slot_item",0),
					# # (overlay_set_alpha, "$g_presentation_obj_1", 100),
				# # (try_end),
				# # (store_add,":slot_offset",":slot_no",50),
				# # (troop_set_slot, "trp_temp_array_c",":slot_offset", "$g_presentation_obj_1"),
				# # (val_sub,  ":pos_y_0_0", 89),
				# # (val_sub,  ":pos_y_0_1", 89),
			# # (else_try),
				# # (is_between,":slot_no",4,7),
				# # (troop_get_slot, ":slot_item", "trp_temp_array_b",":slot_no"),
				# # (create_mesh_overlay_with_item_id, "$g_presentation_obj_1", ":slot_item"),
				# # (position_set_x, pos1, 495),
				# # (position_set_y, pos1,  ":pos_y_1_1"),
				# # (overlay_set_position, "$g_presentation_obj_1", pos1),
				# # (overlay_set_size, "$g_presentation_obj_1", pos10),
				# # (troop_set_slot, "trp_temp_array_c", ":slot_no", "$g_presentation_obj_1"),
				# # (create_mesh_overlay, "$g_presentation_obj_1", "mesh_inv_slot"),
				# # (position_set_x, pos1, 890),
				# # (position_set_y, pos1, 890),
				# # (overlay_set_size, "$g_presentation_obj_1", pos1),
				# # (position_set_x, pos1, 450),
				# # (position_set_y, pos1,  ":pos_y_1_0"),
				# # (overlay_set_position, "$g_presentation_obj_1", pos1),
				# # (try_begin),
					# # (eq,":slot_item",0),
					# # (overlay_set_alpha, "$g_presentation_obj_1", 100),
				# # (try_end),
				# # (store_add,":slot_offset",":slot_no",50),
				# # (troop_set_slot, "trp_temp_array_c", ":slot_offset", "$g_presentation_obj_1"),
				# # (val_sub,  ":pos_y_1_0", 89),
				# # (val_sub,  ":pos_y_1_1", 89),
			# # (else_try),
				# # (eq,":slot_no",7),
				# # (troop_get_slot, ":slot_item", "trp_temp_array_b",":slot_no"),
				# # (create_mesh_overlay_with_item_id, "$g_presentation_obj_1", ":slot_item"),
				# # (position_set_x, pos1, 405),
				# # (position_set_y, pos1,  565),
				# # (overlay_set_position, "$g_presentation_obj_1", pos1),
				# # (overlay_set_size, "$g_presentation_obj_1", pos10),
				# # (troop_set_slot, "trp_temp_array_c", ":slot_no", "$g_presentation_obj_1"),
				# # (create_mesh_overlay, "$g_presentation_obj_1", "mesh_inv_slot"),
				# # (position_set_x, pos1, 890),
				# # (position_set_y, pos1, 830),
				# # (overlay_set_size, "$g_presentation_obj_1", pos1),
				# # (position_set_x, pos1, 360),
				# # (position_set_y, pos1,  520),
				# # (overlay_set_position, "$g_presentation_obj_1", pos1),
				# # (try_begin),
					# # (eq,":slot_item",0),
					# # (overlay_set_alpha, "$g_presentation_obj_1", 100),
				# # (try_end),
				# # (store_add,":slot_offset",":slot_no",50),
				# # (troop_set_slot, "trp_temp_array_c", ":slot_offset", "$g_presentation_obj_1"),
			# # (else_try),
				# # (eq,":slot_no",8),
				# # (troop_get_slot, ":slot_item", "trp_temp_array_b",":slot_no"),
				# # (create_mesh_overlay_with_item_id, "$g_presentation_obj_1", ":slot_item"),
				# # (position_set_x, pos1, 405),
				# # (position_set_y, pos1,  365),
				# # (overlay_set_position, "$g_presentation_obj_1", pos1),
				# # (overlay_set_size, "$g_presentation_obj_1", pos10),
				# # (troop_set_slot, "trp_temp_array_c", ":slot_no", "$g_presentation_obj_1"),
				# # (create_mesh_overlay, "$g_presentation_obj_1", "mesh_inv_slot"),
				# # (position_set_x, pos1, 890),
				# # (position_set_y, pos1, 830),
				# # (overlay_set_size, "$g_presentation_obj_1", pos1),
				# # (position_set_x, pos1, 360),
				# # (position_set_y, pos1,  320),
				# # (overlay_set_position, "$g_presentation_obj_1", pos1),
				# # (try_begin),
					# # (eq,":slot_item",0),
					# # (overlay_set_alpha, "$g_presentation_obj_1", 100),
				# # (try_end),
				# # (store_add,":slot_offset",":slot_no",50),
				# # (troop_set_slot, "trp_temp_array_c", ":slot_offset", "$g_presentation_obj_1"),
			# # (try_end),
            # # (val_add, ":slot_no", 1),
			# # (assign,reg30,":slot_no"),
			# # #(display_message,"@{reg30}"),
          # # (try_end),
        # # (try_end),

        # (str_clear, s0),
        # (create_text_overlay, "$g_presentation_obj_1", s0, tf_scrollable),
        # (position_set_x, pos1, 15),
        # (position_set_y, pos1, 100),
        # (overlay_set_position, "$g_presentation_obj_1", pos1),
        # (position_set_x, pos1, 270),
        # (position_set_y, pos1, 600),
        # (overlay_set_area_size, "$g_presentation_obj_1", pos1),
        # (set_container_overlay, "$g_presentation_obj_1"),

        # (assign, ":pos_x", 0),
        # (assign, ":pos_y", 2575),
        # (assign, ":slot_no", 0),
        # (try_for_range, ":unused_height", 0, 32),
          # (try_for_range, ":unused_width", 0, 3),
            # (create_mesh_overlay, "$g_presentation_obj_1", "mesh_inv_slot"),
            # (position_set_x, pos1, 890),
            # (position_set_y, pos1, 830),
            # (overlay_set_size, "$g_presentation_obj_1", pos1),
            # (position_set_x, pos1, ":pos_x"),
            # (position_set_y, pos1, ":pos_y"),
            # (overlay_set_position, "$g_presentation_obj_1", pos1),
            # (create_mesh_overlay, "$g_presentation_obj_1", "mesh_mp_inventory_choose"),
			# (overlay_set_alpha, "$g_presentation_obj_1", 0),
            # (position_set_x, pos1, 712),
            # (position_set_y, pos1, 650),
            # (overlay_set_size, "$g_presentation_obj_1", pos1),
            # (position_set_x, pos1, ":pos_x"),
            # (position_set_y, pos1, ":pos_y"),
            # (overlay_set_position, "$g_presentation_obj_1", pos1),
            # (troop_set_slot, "trp_temp_array_a", ":slot_no", "$g_presentation_obj_1"),
            # (store_add,":num_temp",":slot_no","$cheat_find_item_range_begin"),
            # (store_add,":item_no",":num_temp","itm_no_item"),
			# (try_begin),
				# (lt, ":item_no", legendary_items_begin),
			    # # (call_script, "script_cf_item_can_be_used_by_custom_troop", ":item_no"),
				# (create_mesh_overlay_with_item_id, "$g_presentation_obj_1", ":item_no"),
				# (position_set_x, pos1, 890),
				# (position_set_y, pos1, 830),
				# (overlay_set_size, "$g_presentation_obj_1", pos1),
				# (store_add, ":item_x", ":pos_x", 44),
				# (store_add, ":item_y", ":pos_y", 41),
				# (position_set_x, pos1, ":item_x"),
				# (position_set_y, pos1, ":item_y"),
				# (overlay_set_position, "$g_presentation_obj_1", pos1),
				# (troop_set_slot, "trp_temp_array_b", ":num_temp", "$g_presentation_obj_1"),
            # (try_end),
            # (val_add, ":slot_no", 1),
			# (val_add, ":pos_x", 89),
          # (try_end),
          # (assign, ":pos_x", 0),
          # (val_sub, ":pos_y", 83),
        # (try_end),

        # (set_container_overlay, -1),

        # #modifier
        # (try_begin),
            # (gt, "$selected_item", -1),

            # (create_text_overlay,reg1,"@Modifier:",0),
            # (position_set_x, pos1, 770),
            # (position_set_y, pos1, 250),
            # (overlay_set_position,reg1, pos1),
            # (position_set_x, pos1, 1200),
            # (position_set_y, pos1, 1000),
            # (overlay_set_size,reg1, pos1),

            # (item_get_type, ":type", "$selected_item"),
            # (assign, ":imod", "$temp4_1"),#use this for item modifier
            # (create_combo_button_overlay, "$g_presentation_obj_admin_panel_6"),
            # (position_set_x, pos1, 900),
            # (position_set_y, pos1, 200),
            # (overlay_set_position, "$g_presentation_obj_admin_panel_6", pos1),

            # (position_set_x, pos1, 750),
            # (position_set_y, pos1, 900),
            # (overlay_set_size, "$g_presentation_obj_admin_panel_6", pos1),

            # (try_begin),
                # (eq, ":type", itp_type_horse),
                # (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Heavy"),
                # (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Spirited"),
                # (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Champion"),
                # (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@None"),
                # (try_begin),
                  # (eq, ":imod", imod_heavy),
                  # (overlay_set_val, "$g_presentation_obj_admin_panel_6", 0),
                # (else_try),
                  # (eq, ":imod", imod_spirited),
                  # (overlay_set_val, "$g_presentation_obj_admin_panel_6", 1),
                # (else_try),
                  # (eq, ":imod", imod_champion),
                  # (overlay_set_val, "$g_presentation_obj_admin_panel_6", 2),
                # (else_try),
                  # (overlay_set_val, "$g_presentation_obj_admin_panel_6", 3),
                # (try_end),
            # (else_try),
                # (eq, ":type", itp_type_shield),
                # (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Thick"),
                # (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Reinforced"),
                # (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@None"),
                # (try_begin),
                  # (eq, ":imod", imod_thick),
                  # (overlay_set_val, "$g_presentation_obj_admin_panel_6", 0),
                # (else_try),
                  # (eq, ":imod", imod_reinforced),
                  # (overlay_set_val, "$g_presentation_obj_admin_panel_6", 1),
                # (else_try),
                  # (overlay_set_val, "$g_presentation_obj_admin_panel_6", 2),
                # (try_end),
            # (else_try),
                # (ge, ":type", itp_type_head_armor),
                # (le, ":type", itp_type_hand_armor),
                # (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Sturdy"),
                # (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Thick"),
                # (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Hardened"),
                # (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Reinforced"),
                # (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Lordly"),
                # (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@None"),
                # (try_begin),
                  # (eq, ":imod", imod_sturdy),
                  # (overlay_set_val, "$g_presentation_obj_admin_panel_6", 0),
                # (else_try),
                  # (eq, ":imod", imod_thick),
                  # (overlay_set_val, "$g_presentation_obj_admin_panel_6", 1),
                # (else_try),
                  # (eq, ":imod", imod_hardened),
                  # (overlay_set_val, "$g_presentation_obj_admin_panel_6", 2),
                # (else_try),
                  # (eq, ":imod", imod_reinforced),
                  # (overlay_set_val, "$g_presentation_obj_admin_panel_6", 3),
                # (else_try),
                  # (eq, ":imod", imod_lordly),
                  # (overlay_set_val, "$g_presentation_obj_admin_panel_6", 4),
                # (else_try),
                  # (overlay_set_val, "$g_presentation_obj_admin_panel_6", 5),
                # (try_end),
            # (else_try),
                # (this_or_next | eq, ":type", itp_type_one_handed_wpn),
                # (this_or_next | eq, ":type", itp_type_two_handed_wpn),
                # (this_or_next | eq, ":type", itp_type_polearm),
                # (this_or_next | eq, ":type", itp_type_bow),
                # (this_or_next | eq, ":type", itp_type_crossbow),
                # (this_or_next | eq, ":type", itp_type_pistol),
                # (eq, ":type", itp_type_musket),
                # (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Heavy"),
                # (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Strong"),
                # (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Balanced"),
                # (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Tempered"),
                # (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Masterwork"),
                # (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@None"),
                # (try_begin),
                  # (eq, ":imod", imod_heavy),
                  # (overlay_set_val, "$g_presentation_obj_admin_panel_6", 0),
                # (else_try),
                  # (eq, ":imod", imod_strong),
                  # (overlay_set_val, "$g_presentation_obj_admin_panel_6", 1),
                # (else_try),
                  # (eq, ":imod", imod_balanced),
                  # (overlay_set_val, "$g_presentation_obj_admin_panel_6", 2),
                # (else_try),
                  # (eq, ":imod", imod_tempered),
                  # (overlay_set_val, "$g_presentation_obj_admin_panel_6", 3),
                # (else_try),
                  # (eq, ":imod", imod_masterwork),
                  # (overlay_set_val, "$g_presentation_obj_admin_panel_6", 4),
                # (else_try),
                  # (overlay_set_val, "$g_presentation_obj_admin_panel_6", 5),
                # (try_end),
            # (else_try),
                # (this_or_next | eq, ":type", itp_type_arrows),
                # (this_or_next | eq, ":type", itp_type_bolts),
                # (this_or_next | eq, ":type", itp_type_bullets),
                # (eq, ":type", itp_type_thrown),
                # (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Large Bag"),
                # (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Heavy"),
                # (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Balanced"),
                # (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@None"),
                # (try_begin),
                  # (eq, ":imod", imod_large_bag),
                  # (overlay_set_val, "$g_presentation_obj_admin_panel_6", 0),
                # (else_try),
                  # (eq, ":imod", imod_heavy),
                  # (overlay_set_val, "$g_presentation_obj_admin_panel_6", 1),
                # (else_try),
                  # (eq, ":imod", imod_balanced),
                  # (overlay_set_val, "$g_presentation_obj_admin_panel_6", 2),
                # (else_try),
                  # (overlay_set_val, "$g_presentation_obj_admin_panel_6", 3),
                # (try_end),
            # (try_end),
        # (try_end),

        # (assign, "$g_presentation_obj_11", -1),
        # (try_begin),
            # (gt, "$selected_item", -1),
            # (position_set_x, pos2, 50),
            # (position_set_y, pos2, 50),
            # (create_game_button_overlay, "$g_presentation_obj_11", "@Craft it.", 0),
            # (position_set_x, pos1, 550),
            # (position_set_y, pos1, 60),
            # (overlay_set_position, "$g_presentation_obj_11", pos1),
            # (overlay_set_area_size, "$g_presentation_obj_11", pos2),
        # (try_end),

        # (position_set_x, pos2, 50),
        # (position_set_y, pos2, 50),
        # (create_game_button_overlay, "$g_presentation_obj_12", "@Forget it.", 0),
        # (position_set_x, pos1, 750),
        # (position_set_y, pos1, 60),
        # (overlay_set_position, "$g_presentation_obj_12", pos1),
        # (overlay_set_area_size, "$g_presentation_obj_12", pos2),
	  # #(call_script, "script_presentation_load"),
      # (presentation_set_duration, 999999),
     # ]),

    # (ti_on_presentation_event_state_change,
      # [
        # (store_trigger_param_1, ":object"),
        # (store_trigger_param_2, ":value"),

		# (try_begin),
            # (eq, ":object", "$g_presentation_obj_admin_panel_6"),
            # (item_get_type, ":type", "$selected_item"),
            # (try_begin),
                # (eq, ":type", itp_type_horse),
                # (try_begin),
                    # (eq, ":value", 0),
                    # (assign, "$temp4_1", imod_heavy),
                # (else_try),
                    # (eq, ":value", 1),
                    # (assign, "$temp4_1", imod_spirited),
                # (else_try),
                    # (eq, ":value", 2),
                    # (assign, "$temp4_1", imod_champion),
                # (else_try),
                    # (assign, "$temp4_1", -1),
                # (try_end),
            # (else_try),
                # (eq, ":type", itp_type_shield),
                # (try_begin),
                    # (eq, ":value", 0),
                    # (assign, "$temp4_1", imod_thick),
                # (else_try),
                    # (eq, ":value", 1),
                    # (assign, "$temp4_1", imod_reinforced),
                # (else_try),
                    # (eq, ":value", 2),
                    # (assign, "$temp4_1", -1),
                # (try_end),
            # (else_try),
                # (ge, ":type", itp_type_head_armor),
                # (le, ":type", itp_type_hand_armor),
                # (try_begin),
                    # (eq, ":value", 0),
                    # (assign, "$temp4_1", imod_sturdy),
                # (else_try),
                    # (eq, ":value", 1),
                    # (assign, "$temp4_1", imod_thick),
                # (else_try),
                    # (eq, ":value", 2),
                    # (assign, "$temp4_1", imod_hardened),
                # (else_try),
                    # (eq, ":value", 3),
                    # (assign, "$temp4_1", imod_reinforced),
                # (else_try),
                    # (eq, ":value", 4),
                    # (assign, "$temp4_1", imod_lordly),
                # (else_try),
                    # (assign, "$temp4_1", -1),
                # (try_end),
            # (else_try),
                # (this_or_next | eq, ":type", itp_type_one_handed_wpn),
                # (this_or_next | eq, ":type", itp_type_two_handed_wpn),
                # (this_or_next | eq, ":type", itp_type_polearm),
                # (this_or_next | eq, ":type", itp_type_bow),
                # (this_or_next | eq, ":type", itp_type_crossbow),
                # (this_or_next | eq, ":type", itp_type_pistol),
                # (eq, ":type", itp_type_musket),
                # (try_begin),
                    # (eq, ":value", 0),
                    # (assign, "$temp4_1", imod_heavy),
                # (else_try),
                    # (eq, ":value", 1),
                    # (assign, "$temp4_1", imod_strong),
                # (else_try),
                    # (eq, ":value", 2),
                    # (assign, "$temp4_1", imod_balanced),
                # (else_try),
                    # (eq, ":value", 3),
                    # (assign, "$temp4_1", imod_tempered),
                # (else_try),
                    # (eq, ":value", 4),
                    # (assign, "$temp4_1", imod_masterwork),
                # (else_try),
                    # (assign, "$temp4_1", -1),
                # (try_end),
            # (else_try),
                # (this_or_next | eq, ":type", itp_type_arrows),
                # (this_or_next | eq, ":type", itp_type_bolts),
                # (this_or_next | eq, ":type", itp_type_bullets),
                # (eq, ":type", itp_type_thrown),
                # (try_begin),
                    # (eq, ":value", 0),
                    # (assign, "$temp4_1", imod_large_bag),
                # (else_try),
                    # (eq, ":value", 1),
                    # (assign, "$temp4_1", imod_heavy),
                # (else_try),
                    # (eq, ":value", 2),
                    # (assign, "$temp4_1", imod_balanced),
                # (else_try),
                    # (assign, "$temp4_1", -1),
                # (try_end),
            # (try_end),
            # (start_presentation, "prsnt_weapon_selection"),
        # (else_try),
			# (eq,":object","$g_presentation_obj_3_back"),
			# (val_sub, "$cheat_find_item_range_begin", 96),
			# (try_begin),
				# (le, "$cheat_find_item_range_begin", "itm_arrows"),
				# (assign, "$cheat_find_item_range_begin", legendary_items_begin),
				# (val_sub, "$cheat_find_item_range_begin", 96),
			# (try_end),
			# (start_presentation, "prsnt_weapon_selection"),
        # (else_try),
			# (eq,":object","$g_presentation_obj_3"),
			# (val_add, "$cheat_find_item_range_begin", 96),
			# (try_begin),
				# (ge, "$cheat_find_item_range_begin", legendary_items_begin),
				# (assign, "$cheat_find_item_range_begin", "itm_arrows"),
			# (try_end),
			# (start_presentation, "prsnt_weapon_selection"),
        # (else_try),
			# (eq,":object","$g_presentation_obj_11"),
            # (try_begin),
                # (store_item_kind_count, ":has_item", "$selected_item", "$g_talk_troop"),
                # (ge, ":has_item", 1),
                # (display_message,"@The merchant sells this items. Buy it from him instead of ordering it to be crafted!",0x888888),#grey
            # (else_try),
                # (neg|quest_slot_eq, "qst_wlodowiecus_adventure_1", slot_quest_current_state, 6),
                # (neg|item_has_faction, "$selected_item", "fac_culture_1"),
                # (item_has_faction, "$selected_item", "fac_minor_kingdoms_end"),
                # (display_message,"@Greek items are locked. You need to find Pavel to activate it!",0x888888),#grey
            # (else_try),
                # (store_troop_gold, ":g", "trp_player"),
                # (ge, ":g", "$temp1"),
                # (troop_remove_gold, "trp_player", "$temp1"),
                # (val_mul, "$temp2", 24),
                # (store_current_hours, ":hours"),
                # (val_add, ":hours", "$temp2"),
                # (troop_set_slot, "$g_talk_troop", slot_crafting_order_time, ":hours"),
                # (troop_set_slot, "$g_talk_troop", slot_crafting_order_time_modifier, "$temp4_1"),
                # (troop_set_slot, "$g_talk_troop", slot_crafting_order_item, "$selected_item"),
                # (try_begin),
                    # (troop_slot_eq, "trp_global_variables", start_town_conversation, 1),
                    # (jump_to_menu, "mnu_town_trade"),
                # (try_end),
                # (presentation_set_duration, 0),
                # (display_message,"@You ordered to craft an item!",message_alert),#grey
            # (else_try),
                # (display_message,"str_not_enough_gold",0x888888),#grey
            # (try_end),
        # (else_try),
			# (eq,":object","$g_presentation_obj_12"),
            # (try_begin),
                # (troop_slot_eq, "trp_global_variables", start_town_conversation, 1),
                # (jump_to_menu, "mnu_town_trade"),
            # (try_end),
			# (presentation_set_duration, 0),
        # (try_end),

	  # ]),

    # (ti_on_presentation_mouse_enter_leave,
      # [
      # (store_trigger_param_1, ":object"),
      # (store_trigger_param_2, ":enter_leave"),

      # (try_begin),
        # (eq, ":enter_leave", 0),
        # (try_for_range, ":slot_no", 0, 96),
          # (troop_slot_eq, "trp_temp_array_a", ":slot_no", ":object"),
		  # (store_add,":num_temp",":slot_no","$cheat_find_item_range_begin"),
		  # (store_add,":item_no",":num_temp","itm_no_item"),
		  # # (call_script, "script_cf_item_can_be_used_by_custom_troop", ":item_no"),
	      # (try_begin),
			# (lt, ":item_no", legendary_items_begin),
			# (troop_get_slot, ":target_obj", "trp_temp_array_b", ":num_temp"),
			# (overlay_get_position, pos0, ":target_obj"),
			# (show_item_details, ":item_no", pos0, 100),
			# (assign, "$g_current_opened_item_details", ":num_temp"),
		  # (try_end),
        # (try_end),
      # (else_try),
        # (try_for_range, ":slot_no", 0, 96),
          # (troop_slot_eq, "trp_temp_array_a", ":slot_no", ":object"),
          # (try_begin),
            # (eq, "$g_current_opened_item_details", ":num_temp"),
            # (close_item_details),
          # (try_end),
        # (try_end),
      # (try_end),
    # ]),

    # (ti_on_presentation_mouse_press,
     # [
	  # (store_trigger_param_1, ":object"),
      # (store_trigger_param_2, ":mouse_state"),

      # (try_begin),
        # (eq, ":mouse_state", 0),
        # (try_for_range, ":slot_no", 0, 96),
          # (troop_slot_eq, "trp_temp_array_a", ":slot_no", ":object"),
		  # (store_add,":num_temp",":slot_no","$cheat_find_item_range_begin"),
		  # (store_add,":item_no",":num_temp","itm_no_item"),
          # (try_begin),
			# (eq, "$current_item", -1),
			# (lt, ":item_no", legendary_items_begin),
            # (troop_get_slot, ":target_obj", "trp_temp_array_b", ":num_temp"),
			# (assign,"$current_item",":num_temp"),
			# (overlay_set_display, ":target_obj", 0),
			# # (call_script, "script_cf_item_can_be_used_by_custom_troop", "$current_item"),
			# (create_mesh_overlay_with_item_id, "$g_presentation_credits_obj_1", "$current_item"),
			# (position_set_x, pos1, 1000),
			# (position_set_y, pos1, 1000),
			# (overlay_set_size, "$g_presentation_credits_obj_1", pos1),
		  # (else_try),
			# (eq, "$current_item", ":num_temp"),
            # (troop_get_slot, ":target_obj", "trp_temp_array_b", ":num_temp"),
			# (overlay_set_display,":target_obj", 1),
			# (assign,"$g_presentation_credits_obj_1",-1),
			# (assign,"$current_item",-1),
			# (start_presentation, "prsnt_weapon_selection"),
          # (try_end),
        # (try_end),
        # (try_begin),
          # (eq, ":object", "$g_presentation_credits_obj_2"),
        # # (try_for_range, ":slot_no", 0, 9),
		  # # (store_add,":slot_offset",":slot_no",50),
          # # (troop_slot_eq, "trp_temp_array_c", ":slot_offset", ":object"),
		  # # (troop_get_slot, ":slot_item","trp_temp_array_b", ":slot_no"),
		  # # (troop_get_slot, ":target_obj","trp_temp_array_c", ":slot_no"),
          # (try_begin),
			# (gt,"$current_item",-1),
			# # (eq,"$selected_item",-1),
            # (overlay_get_position, pos0, "$g_presentation_credits_obj_2"),
            # (overlay_set_position, "$g_presentation_credits_obj_1", pos0),
            # # (troop_set_slot, "trp_temp_array_b", ":slot_no", "$current_item"),
            # (assign, "$selected_item", "$current_item"),
            # (assign,"$current_item",-1),
            # (start_presentation, "prsnt_weapon_selection"),
		 # # (else_try),
		   # # (eq, "$current_item", -1),
			# # (overlay_set_display,":target_obj", 0),
			# # (assign,"$g_presentation_credits_obj_1",-1),
			# # (neq, ":slot_item", 0),
			# # (create_mesh_overlay_with_item_id, "$g_presentation_credits_obj_1", ":slot_item"),
			# # (position_set_x, pos1, 1000),
			# # (position_set_y, pos1, 1000),
			# # (overlay_set_size, "$g_presentation_credits_obj_1", pos1),
			# # (assign,"$current_item",":slot_item"),
			# # (troop_set_slot, "trp_temp_array_b", ":slot_no", 0),
			# # (overlay_set_alpha, ":object", 100),
          # (else_try),
			# (eq,"$current_item",-1),
			# (gt,"$selected_item",-1),
            # (assign,"$selected_item",-1),
            # (start_presentation, "prsnt_weapon_selection"),
          # (try_end),
        # (try_end),
	  # (else_try),
        # (eq, ":mouse_state", 1),
		# (gt,"$current_item",-1),
		# (assign,"$current_item",-1),
		# # (call_script,"script_custom_troop_inventory_change","$temp_troop"),
        # (start_presentation, "prsnt_weapon_selection"),
      # (try_end),

	  # ]),

    # (ti_on_presentation_run,
     # [
      # (set_fixed_point_multiplier, 1000),

     # #(try_begin),
     # #   (this_or_next|key_clicked, key_escape),
     # #   (key_clicked, key_right_mouse_button),
	 # # 	(call_script,"script_custom_troop_inventory_reset","$temp_troop"),
        # #(presentation_set_duration, 0),
	   # # (call_script,"script_get_custom_troop_info"),
	   # # (call_script,"script_store_custom_troop_info_to_slot","trp_temp_array_b"),
       # # (start_presentation, "prsnt_custom_troop"),
      # #(try_end),

     # (gt,"$current_item",-1),
     # (mouse_get_position, pos1),
	 # (overlay_set_position, "$g_presentation_credits_obj_1", pos1),

	  # #(call_script, "script_presentation_run"),

	  # ]),
  # ]),
# ###item_selection for crafting or importing horses
("item_selection", 0, 0, [
  (ti_on_presentation_load,[
    (set_fixed_point_multiplier, 1000),
    #set up item list in temp
    (try_for_range, ":value", 0, 1500),
        (troop_set_slot, "trp_temp_array_c", ":value", 0),
        # (troop_set_slot, "trp_temp_array_b", ":value", 0),
        # (troop_set_slot, "trp_temp_array_a", ":value", 0),
    (try_end),
    (assign, ":slot", 0),
    (try_for_range_backwards, ":item", "itm_arena_shield_red", legendary_items_begin),
        (neq, ":item", "itm_stones_siege"),
        (neq, ":item", "itm_keys"),
        (neq, ":item", "itm_bride_dress"),
        (neq, ":item", "itm_bride_crown"),
        (neq, ":item", "itm_flower_crown"),
        (neq, ":item", "itm_lyre_rich"),
        (neq, ":item", "itm_lyre"),
        (neq, ":item", "itm_lute"),
        (neq, ":item", "itm_flute"),
        (neq, ":item", "itm_torch"),
        (neq, ":item", "itm_torch2"),
        (neq, ":item", "itm_ballista_mounted"),
        (assign, ":c1", 1),
        (try_begin),
            (neg|quest_slot_eq, "qst_wlodowiecus_adventure_1", slot_quest_current_state, 6),
            (neg|item_has_faction, ":item", "fac_culture_1"),
            (item_has_faction, ":item", "fac_minor_kingdoms_end"),
            # (display_message,"@Greek items are locked. You need to find Pavel to activate it!",0x888888),#grey
            (assign, ":c1", 0),
        (try_end),
        (eq, ":c1", 1),
        (try_begin),
            (this_or_next|is_between, "$g_talk_troop", horse_merchants_begin,horse_merchants_end),
            (eq, "$g_talk_troop", "trp_master_breeder"),
            (item_get_type, ":type", ":item"),
            (eq, ":type", itp_type_horse),
            # (store_item_kind_count, ":has_item", ":item", "$g_talk_troop"),
            # (lt, ":has_item", 1),
            (troop_set_slot, "trp_temp_array_c", ":slot", ":item"),
            (val_add, ":slot", 1),
        (else_try),
            (this_or_next|is_between, "$g_talk_troop", armor_merchants_begin,armor_merchants_end),
            (this_or_next|is_between, "$g_talk_troop", weapon_merchants_begin,weapon_merchants_end),
            (eq, "$g_talk_troop", "trp_smith_master"),
            (item_get_type, ":type", ":item"),
            (assign, ":c", 0),
            (try_begin),
                (eq, "$temp3", 0),
                (eq, ":type", itp_type_one_handed_wpn),
                (assign, ":c", 1),
            (else_try),
                (eq, "$temp3", 1),
                (eq, ":type", itp_type_two_handed_wpn),
                (assign, ":c", 1),
            (else_try),
                (eq, "$temp3", 2),
                (eq, ":type", itp_type_polearm),
                (assign, ":c", 1),
            (else_try),
                (eq, "$temp3", 3),
                (this_or_next|eq, ":type", itp_type_thrown),
                (this_or_next|eq, ":type", itp_type_musket),
                (this_or_next|eq, ":type", itp_type_pistol),
                (this_or_next|eq, ":type", itp_type_bullets),
                (this_or_next|eq, ":type", itp_type_bow),
                (this_or_next|eq, ":type", itp_type_crossbow),
                (this_or_next|eq, ":type", itp_type_bolts),
                (eq, ":type", itp_type_arrows),
                (assign, ":c", 1),
            (else_try),
                (eq, "$temp3", 4),
                (eq, ":type", itp_type_shield),
                (assign, ":c", 1),
            (else_try),
                (eq, "$temp3", 5),
                (eq, ":type", itp_type_head_armor),
                (assign, ":c", 1),
            (else_try),
                (eq, "$temp3", 6),
                (eq, ":type", itp_type_body_armor),
                (assign, ":c", 1),
            (else_try),
                (eq, "$temp3", 7),
                (eq, ":type", itp_type_foot_armor),
                (assign, ":c", 1),
            (else_try),
                (eq, "$temp3", 8),
                (eq, ":type", itp_type_hand_armor),
                (assign, ":c", 1),
            (try_end),
            (eq, ":c", 1),
            (troop_set_slot, "trp_temp_array_c", ":slot", ":item"),
            (val_add, ":slot", 1),
        (try_end),
    (try_end),
    (store_sub, "$cheat_find_item_range_begin", ":slot", 1),#stores number of items
    # (try_begin),
        # (gt, "$cheat_find_item_range_begin", horses_end),
        # (assign, "$cheat_find_item_range_begin", horses_begin),
    # (try_end),

    #0. BACKROUND
    (create_mesh_overlay, reg0, "mesh_mp_ui_bg"),
    (position_set_x, pos1, -1),
    (position_set_y, pos1, -1),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 1002),
    (position_set_y, pos1, 1002),
    (overlay_set_size, reg0, pos1),

      # (store_mul, ":cur_troop", "$temp_troop", 2), #with weapons
    # (create_mesh_overlay_with_tableau_material, "$g_presentation_obj_5", -1, "tableau_game_party_window", ":cur_troop"),## tableau_game_character_sheet
      # (position_set_x, pos1, 1000),
      # (position_set_y, pos1, 1000),
      # (overlay_set_size, "$g_presentation_obj_5", pos1),
    # (position_set_x, pos1, 300),
    # (position_set_y, pos1, 20),
    # (overlay_set_position, "$g_presentation_obj_5", pos1),

      # (create_button_overlay, "$g_presentation_obj_3", "@Next", tf_center_justify),
      # (position_set_x, pos1, 185),
      # (position_set_y, pos1, 35),
      # (overlay_set_position, "$g_presentation_obj_3", pos1),
      # (position_set_x, pos1, 1000),
      # (position_set_y, pos1, 1000),
      # (overlay_set_area_size, "$g_presentation_obj_3", pos1),

      # (create_button_overlay, "$g_presentation_obj_3_back", "@Previous", tf_center_justify),
      # (position_set_x, pos1, 95),
      # (position_set_y, pos1, 35),
      # (overlay_set_position, "$g_presentation_obj_3_back", pos1),
      # (position_set_x, pos1, 1000),
      # (position_set_y, pos1, 1000),
      # (overlay_set_area_size, "$g_presentation_obj_3_back", pos1),

    # (call_script,"script_custom_troop_inventory_total_price","$temp_troop"),
    # (call_script,"script_custom_troop_inventory_total_weight","$temp_troop"),
    # (create_text_overlay,"$g_presentation_obj_6","@Price {reg42}^Weight {reg43}",tf_left_align),
    # (position_set_x, pos1, 530),
      # (position_set_y, pos1, 240),
    # (overlay_set_position, "$g_presentation_obj_6", pos1),
      # (position_set_x, pos1, 1000),
      # (position_set_y, pos1, 1000),
      # (overlay_set_size, "$g_presentation_obj_6", pos1),

      # (assign, reg6, "$cheat_find_item_range_begin"),
      # (store_sub, reg5, "$cheat_find_item_range_begin", 96),
      # (val_min, reg5, 0),
    # # (val_min, reg6, horses_end),
    # # (val_sub, reg6, 1),

    (assign, "$g_presentation_obj_admin_panel_7", -1),
    (try_begin),
        (this_or_next|is_between, "$g_talk_troop", armor_merchants_begin,armor_merchants_end),
        (this_or_next|is_between, "$g_talk_troop", weapon_merchants_begin,weapon_merchants_end),
        (eq, "$g_talk_troop", "trp_smith_master"),
        (create_combo_button_overlay, "$g_presentation_obj_admin_panel_7"),
        (position_set_x, pos1, 450),
        (position_set_y, pos1, 700),
        (overlay_set_position, "$g_presentation_obj_admin_panel_7", pos1),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 900),
        (overlay_set_size, "$g_presentation_obj_admin_panel_7", pos1),

        (overlay_add_item, "$g_presentation_obj_admin_panel_7", "@One Handed Weapons"),
        (overlay_add_item, "$g_presentation_obj_admin_panel_7", "@Two Handed Weapons"),
        (overlay_add_item, "$g_presentation_obj_admin_panel_7", "@Polearms"),
        (overlay_add_item, "$g_presentation_obj_admin_panel_7", "@Missile Weapons"),
        (overlay_add_item, "$g_presentation_obj_admin_panel_7", "@Shields"),
        (overlay_add_item, "$g_presentation_obj_admin_panel_7", "@Helmets and Caps"),
        (overlay_add_item, "$g_presentation_obj_admin_panel_7", "@Armours and Tunics"),
        (overlay_add_item, "$g_presentation_obj_admin_panel_7", "@Boots"),
        (overlay_add_item, "$g_presentation_obj_admin_panel_7", "@Gloves and Rings"),

        (overlay_set_val, "$g_presentation_obj_admin_panel_7", "$temp3"),

        # (overlay_set_additional_render_height, "$g_presentation_obj_admin_panel_7", 100000),
    (try_end),
    # (create_text_overlay,"$g_presentation_obj_4","@{reg5} to {reg6}",0),
    # (position_set_x, pos1, 110),
    # (position_set_y, pos1, 700),
    # (overlay_set_position, "$g_presentation_obj_4", pos1),
    # (position_set_x, pos1, 1200),
    # (position_set_y, pos1, 1000),
    # (overlay_set_size, "$g_presentation_obj_4", pos1),

    (try_begin),
        (this_or_next|is_between, "$g_talk_troop", horse_merchants_begin,horse_merchants_end),
        (eq, "$g_talk_troop", "trp_master_breeder"),
        (str_store_string, s1, "@You can order to import a mount. It can take between one and ten days until the mount has arrived. Just select a mount and place it on the spot below."),

        (try_begin),
            (gt, "$selected_item", -1),
            (str_store_item_name, s2, "$selected_item"),
            (item_get_value, reg22, "$selected_item"),
            (str_clear, s33),
            (try_begin),
                (eq, "$g_talk_troop", "trp_master_breeder"),
                (store_mul, reg23, reg22, 2),
                (str_store_string, s33, "@Your personal latifundia horse breeder is cheaper than common town merchants."),
            (else_try),
                (store_mul, reg23, reg22, 3),
            (try_end),
            (try_begin),
                (neq, "$g_talk_troop", "trp_master_breeder"),#not latifundia
                (party_get_slot, ":original_faction", "$g_encountered_party", slot_center_original_faction),
                (faction_get_slot, ":culture", ":original_faction", slot_faction_culture),
                (neg|item_has_faction, "$selected_item", ":culture"),
                (val_mul, reg23, 3),
                (val_div, reg23, 2),
                (str_store_string, s33, "@{s33} The selected mount is from a foreign culture. Thus its more expansive to import it."),
            (try_end),

            (item_get_type, ":type", "$selected_item"),
            (call_script, "script_get_item_modifier_effects", ":type", "$temp4_1"),
            (val_mul, reg23, reg5),
            (val_div, reg23, 100),

            (store_add, reg24, reg23, reg22),
            (assign, "$temp1", reg24),
            (assign, ":minimum_distance", 1000),
            (assign, ":minimum_town", -1),
            (try_for_range, ":towns", towns_begin, towns_end),
                (neq, ":towns", "$current_town"),
                (party_get_slot, ":original_faction", ":towns", slot_center_original_faction),
                (faction_get_slot, ":culture", ":original_faction", slot_faction_culture),
                (item_has_faction, "$selected_item", ":culture"),
                (store_distance_to_party_from_party, ":distance", ":towns", "p_main_party"),
                (lt, ":distance",":minimum_distance"),
                (assign, ":minimum_distance", ":distance"),
                (assign, ":minimum_town", ":towns"),
                # (str_store_party_name, s22, ":towns"),
                # (display_message, "@Nearest town of culture: {s22}."),
            (try_end),
            (try_begin),
                (gt, ":minimum_town", -1),
                (str_store_party_name, s22, ":minimum_town"),
                (str_store_string, s33, "@{s33} The mount will be imported from a breeder near {s22}."),
            (try_end),
            (store_div, reg25, ":minimum_distance", 10),
            (val_clamp, reg25, 1, 11),
            (assign, "$temp2", reg25),

            (str_store_string, s1, "@{s1}^^Selected mount: {s2}. Base price: {reg22}. Import costs: {reg23}. Total cost: {reg24}. Import time: {reg25} days.^^{s33}"),
        (try_end),
    (else_try),
        (str_store_string, s1, "@You can order to craft any item you like. It will take between two or seven days until the item is crafted. As the smith has to buy all the materials, the overall price of the ordered item will be much higher than the price displayed. Just select an item and place it on the spot below."),

        (try_begin),
            (gt, "$selected_item", -1),
            (str_store_item_name, s2, "$selected_item"),
            (item_get_value, reg22, "$selected_item"),
            (str_clear, s33),
            (assign, ":time", 1),
            (try_begin),
                (eq, "$g_talk_troop", "trp_smith_master"),
                (store_mul, reg23, reg22, 2),
                (str_store_string, s33, "@Your personal latifundia smith is cheaper than common town smiths."),
            (else_try),
                (item_get_type, ":type", "$selected_item"),
                (is_between, "$g_talk_troop", weapon_merchants_begin, weapon_merchants_end),
                (this_or_next|eq, ":type", itp_type_head_armor),
                (this_or_next|eq, ":type", itp_type_body_armor),
                (this_or_next|eq, ":type", itp_type_hand_armor),
                (eq, ":type", itp_type_foot_armor),
                (store_mul, reg23, reg22, 4),
                (str_store_string, s33, "@As he is a weapon produceer you pay extra for armours!"),
                (val_add, ":time", 1),
            (else_try),
                (is_between, "$g_talk_troop", armor_merchants_begin, armor_merchants_end),
                (this_or_next|eq, ":type", itp_type_one_handed_wpn),
                (this_or_next|eq, ":type", itp_type_bolts),
                (this_or_next|eq, ":type", itp_type_shield),
                (this_or_next|eq, ":type", itp_type_two_handed_wpn),
                (this_or_next|eq, ":type", itp_type_bow),
                (this_or_next|eq, ":type", itp_type_crossbow),
                (this_or_next|eq, ":type", itp_type_thrown),
                (this_or_next|eq, ":type", itp_type_pistol),
                (this_or_next|eq, ":type", itp_type_musket),
                (this_or_next|eq, ":type", itp_type_bullets),
                (this_or_next|eq, ":type", itp_type_polearm),
                (eq, ":type", itp_type_arrows),
                (store_mul, reg23, reg22, 4),
                (str_store_string, s33, "@As he is an armour produceer you pay extra for weapons!"),
                (val_add, ":time", 1),
            (else_try),
                (store_mul, reg23, reg22, 3),
            (try_end),
            (try_begin),
                (neq, "$g_talk_troop", "trp_smith_master"),#not latifundia
                (party_get_slot, ":original_faction", "$g_encountered_party", slot_center_original_faction),
                (faction_get_slot, ":culture", ":original_faction", slot_faction_culture),
                (neg|item_has_faction, "$selected_item", ":culture"),
                (val_mul, reg23, 3),
                (val_div, reg23, 2),
                (str_store_string, s33, "@{s33} The selected item is from a foreign culture. Thus its more expansive to get the materials."),
                (val_add, ":time", 2),
            (try_end),

            (item_get_type, ":type", "$selected_item"),
            (call_script, "script_get_item_modifier_effects", ":type", "$temp4_1"),
            (val_mul, reg23, reg5),
            (val_div, reg23, 100),

            (store_add, reg24, reg23, reg22),
            (assign, "$temp1", reg24),
            (store_div, ":base_prise_modifier", reg22, 1000),
            (store_add, reg25, ":time", ":base_prise_modifier"),
            (val_clamp, reg25, 1, 8),
            (assign, "$temp2", reg25),
            (str_store_string, s1, "@{s1}^^Selected item: {s2}. Base price: {reg22}. Material costs: {reg23}. Total cost: {reg24}. Crafting time: {reg25} days.^^{s33}"),
        (try_end),
    (try_end),

    (create_text_overlay, reg1, s1, tf_double_space|tf_scrollable),
    (position_set_x, pos1, 550),
    (position_set_y, pos1, 100),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 400),
    (position_set_y, pos1, 500),
    (overlay_set_area_size, reg1, pos1),
    (position_set_x, pos1, 1100),
    (position_set_y, pos1, 1100),
    (overlay_set_size, reg1, pos1),

    (assign, "$g_presentation_credits_obj_1", -1),
    (try_begin),
        (gt, "$selected_item", -1),
        (create_mesh_overlay_with_item_id, "$g_presentation_credits_obj_1", "$selected_item"),
        (position_set_x, pos1, 610),
        (position_set_y, pos1,  250),
        (overlay_set_position, "$g_presentation_credits_obj_1", pos1),
        (position_set_x, pos1, 1000),
        (position_set_y, pos1, 1000),
        (overlay_set_size, "$g_presentation_credits_obj_1", pos1),
    (try_end),
    (create_mesh_overlay, "$g_presentation_credits_obj_2", "mesh_inv_slot"),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, "$g_presentation_credits_obj_2", pos1),
    (position_set_x, pos1, 560),
    (position_set_y, pos1, 200),
    (overlay_set_position, "$g_presentation_credits_obj_2", pos1),
    (try_begin),
        (eq, "$selected_item", -1),
        (overlay_set_alpha, "$g_presentation_credits_obj_2", 100),
    (try_end),

    (str_clear, s0),
    (create_text_overlay, "$g_presentation_obj_1", s0, tf_scrollable),
    (position_set_x, pos1, 15),
    (position_set_y, pos1, 100),
    (overlay_set_position, "$g_presentation_obj_1", pos1),
    (position_set_x, pos1, 270),
    (position_set_y, pos1, 600),
    (overlay_set_area_size, "$g_presentation_obj_1", pos1),
    (set_container_overlay, "$g_presentation_obj_1"),

    (assign, ":pos_x", 0),
    # (assign, ":pos_y", 2575),
    (assign, ":pos_y", 0),
    (assign, ":slot_no", 0),

    (store_div, ":end", "$cheat_find_item_range_begin", 3),
    (val_add, ":end", 1),
    # (val_min, ":slot_no", 96),
    # (try_begin),
        # (store_mod, ":mod", "$cheat_find_item_range_begin", 3),
        # (eq, ":mod", 0),
        # (store_div, ":end", "$cheat_find_item_range_begin", 3),
    # (else_try),
        # (store_div, ":end", "$cheat_find_item_range_begin", 3),
        # (val_add, ":end", 1),
    # (try_end),

    # (assign, reg4, ":end"),
    # (assign, reg5, "$cheat_find_item_range_begin"),
    # (display_message, "@{reg4} {reg5}"),
    # (val_min, ":end", 96),

    #create dynamic item list
    (try_for_range, ":unused_height", 0, ":end"),
        (try_for_range, ":unused_width", 0, 3),
            (create_mesh_overlay, "$g_presentation_obj_1", "mesh_inv_slot"),
            (position_set_x, pos1, 890),
            (position_set_y, pos1, 830),
            (overlay_set_size, "$g_presentation_obj_1", pos1),
            (position_set_x, pos1, ":pos_x"),
            (position_set_y, pos1, ":pos_y"),
            (overlay_set_position, "$g_presentation_obj_1", pos1),
            (create_mesh_overlay, "$g_presentation_obj_1", "mesh_mp_inventory_choose"),
			      (overlay_set_alpha, "$g_presentation_obj_1", 0),
            (position_set_x, pos1, 712),
            (position_set_y, pos1, 650),
            (overlay_set_size, "$g_presentation_obj_1", pos1),
            (position_set_x, pos1, ":pos_x"),
            (position_set_y, pos1, ":pos_y"),
            (overlay_set_position, "$g_presentation_obj_1", pos1),

            (troop_set_slot, "trp_temp_array_a", ":slot_no", "$g_presentation_obj_1"),
            (troop_get_slot, ":item_no", "trp_temp_array_c", ":slot_no"),

            # (store_add,":num_temp",":slot_no","$cheat_find_item_range_begin"),
            # (store_add,":item_no",":num_temp","itm_no_item"),
            (try_begin),
                # (lt, ":item_no", horses_end),
                (gt, ":item_no", 0),
                (create_mesh_overlay_with_item_id, "$g_presentation_obj_1", ":item_no"),
                (position_set_x, pos1, 890),
                (position_set_y, pos1, 830),
                (overlay_set_size, "$g_presentation_obj_1", pos1),
                (store_add, ":item_x", ":pos_x", 44),
                (store_add, ":item_y", ":pos_y", 41),
                (position_set_x, pos1, ":item_x"),
                (position_set_y, pos1, ":item_y"),
                (overlay_set_position, "$g_presentation_obj_1", pos1),
                (troop_set_slot, "trp_temp_array_b", ":item_no", "$g_presentation_obj_1"),
			      (try_end),

            (val_add, ":slot_no", 1),
			      (val_add, ":pos_x", 89),
        (try_end),
        (assign, ":pos_x", 0),
        (val_add, ":pos_y", 83),
    (try_end),
    (set_container_overlay, -1),

    #modifier
    (try_begin),
        (gt, "$selected_item", -1),

        (create_text_overlay,reg1,"@Modifier:",0),
        (position_set_x, pos1, 770),
        (position_set_y, pos1, 250),
        (overlay_set_position,reg1, pos1),
        (position_set_x, pos1, 1200),
        (position_set_y, pos1, 1000),
        (overlay_set_size,reg1, pos1),

        (item_get_type, ":type", "$selected_item"),
        (assign, ":imod", "$temp4_1"),#use this for item modifier
        (create_combo_button_overlay, "$g_presentation_obj_admin_panel_6"),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 200),
        (overlay_set_position, "$g_presentation_obj_admin_panel_6", pos1),

        (position_set_x, pos1, 750),
        (position_set_y, pos1, 900),
        (overlay_set_size, "$g_presentation_obj_admin_panel_6", pos1),

        (try_begin),
            (eq, ":type", itp_type_horse),
            (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Heavy"),
            (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Spirited"),
            (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Champion"),
            (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@None"),
            (try_begin),
              (eq, ":imod", imod_heavy),
              (overlay_set_val, "$g_presentation_obj_admin_panel_6", 0),
            (else_try),
              (eq, ":imod", imod_spirited),
              (overlay_set_val, "$g_presentation_obj_admin_panel_6", 1),
            (else_try),
              (eq, ":imod", imod_champion),
              (overlay_set_val, "$g_presentation_obj_admin_panel_6", 2),
            (else_try),
              (overlay_set_val, "$g_presentation_obj_admin_panel_6", 3),
            (try_end),
        (else_try),
            (eq, ":type", itp_type_shield),
            (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Thick"),
            (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Reinforced"),
            (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@None"),
            (try_begin),
              (eq, ":imod", imod_thick),
              (overlay_set_val, "$g_presentation_obj_admin_panel_6", 0),
            (else_try),
              (eq, ":imod", imod_reinforced),
              (overlay_set_val, "$g_presentation_obj_admin_panel_6", 1),
            (else_try),
              (overlay_set_val, "$g_presentation_obj_admin_panel_6", 2),
            (try_end),
        (else_try),
            (ge, ":type", itp_type_head_armor),
            (le, ":type", itp_type_hand_armor),
            (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Sturdy"),
            (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Thick"),
            (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Hardened"),
            (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Reinforced"),
            (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Lordly"),
            (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@None"),
            (try_begin),
              (eq, ":imod", imod_sturdy),
              (overlay_set_val, "$g_presentation_obj_admin_panel_6", 0),
            (else_try),
              (eq, ":imod", imod_thick),
              (overlay_set_val, "$g_presentation_obj_admin_panel_6", 1),
            (else_try),
              (eq, ":imod", imod_hardened),
              (overlay_set_val, "$g_presentation_obj_admin_panel_6", 2),
            (else_try),
              (eq, ":imod", imod_reinforced),
              (overlay_set_val, "$g_presentation_obj_admin_panel_6", 3),
            (else_try),
              (eq, ":imod", imod_lordly),
              (overlay_set_val, "$g_presentation_obj_admin_panel_6", 4),
            (else_try),
              (overlay_set_val, "$g_presentation_obj_admin_panel_6", 5),
            (try_end),
        (else_try),
            (this_or_next | eq, ":type", itp_type_one_handed_wpn),
            (this_or_next | eq, ":type", itp_type_two_handed_wpn),
            (this_or_next | eq, ":type", itp_type_polearm),
            (this_or_next | eq, ":type", itp_type_bow),
            (this_or_next | eq, ":type", itp_type_crossbow),
            (this_or_next | eq, ":type", itp_type_pistol),
            (eq, ":type", itp_type_musket),
            (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Heavy"),
            (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Strong"),
            (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Balanced"),
            (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Tempered"),
            (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Masterwork"),
            (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@None"),
            (try_begin),
              (eq, ":imod", imod_heavy),
              (overlay_set_val, "$g_presentation_obj_admin_panel_6", 0),
            (else_try),
              (eq, ":imod", imod_strong),
              (overlay_set_val, "$g_presentation_obj_admin_panel_6", 1),
            (else_try),
              (eq, ":imod", imod_balanced),
              (overlay_set_val, "$g_presentation_obj_admin_panel_6", 2),
            (else_try),
              (eq, ":imod", imod_tempered),
              (overlay_set_val, "$g_presentation_obj_admin_panel_6", 3),
            (else_try),
              (eq, ":imod", imod_masterwork),
              (overlay_set_val, "$g_presentation_obj_admin_panel_6", 4),
            (else_try),
              (overlay_set_val, "$g_presentation_obj_admin_panel_6", 5),
            (try_end),
        (else_try),
            (this_or_next | eq, ":type", itp_type_arrows),
            (this_or_next | eq, ":type", itp_type_bolts),
            (this_or_next | eq, ":type", itp_type_bullets),
            (eq, ":type", itp_type_thrown),
            (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Large Bag"),
            (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Heavy"),
            (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Balanced"),
            (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@None"),
            (try_begin),
              (eq, ":imod", imod_large_bag),
              (overlay_set_val, "$g_presentation_obj_admin_panel_6", 0),
            (else_try),
              (eq, ":imod", imod_heavy),
              (overlay_set_val, "$g_presentation_obj_admin_panel_6", 1),
            (else_try),
              (eq, ":imod", imod_balanced),
              (overlay_set_val, "$g_presentation_obj_admin_panel_6", 2),
            (else_try),
              (overlay_set_val, "$g_presentation_obj_admin_panel_6", 3),
            (try_end),
        (try_end),
    (try_end),

    #buttons
    (assign, "$g_presentation_obj_11", -1),
    (try_begin),
        (gt, "$selected_item", -1),
        (position_set_x, pos2, 50),
        (position_set_y, pos2, 50),
        (create_game_button_overlay, "$g_presentation_obj_11", "@Order it.", 0),
        (position_set_x, pos1, 550),
        (position_set_y, pos1, 60),
        (overlay_set_position, "$g_presentation_obj_11", pos1),
        (overlay_set_area_size, "$g_presentation_obj_11", pos2),
    (try_end),

    (position_set_x, pos2, 50),
    (position_set_y, pos2, 50),
    (create_game_button_overlay, "$g_presentation_obj_12", "@Go back.", 0),
    (position_set_x, pos1, 750),
    (position_set_y, pos1, 60),
    (overlay_set_position, "$g_presentation_obj_12", pos1),
    (overlay_set_area_size, "$g_presentation_obj_12", pos2),
    #(call_script, "script_presentation_load"),
    (presentation_set_duration, 999999),
  ]),
  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":object"),
    (store_trigger_param_2, ":value"),
    (try_begin),
        (eq, ":object", "$g_presentation_obj_admin_panel_7"),
        (assign, "$temp3", ":value"),
        (start_presentation, "prsnt_item_selection"),
    (else_try),
        (eq, ":object", "$g_presentation_obj_admin_panel_6"),
        (item_get_type, ":type", "$selected_item"),
        (try_begin),
            (eq, ":type", itp_type_horse),
            (try_begin),
                (eq, ":value", 0),
                (assign, "$temp4_1", imod_heavy),
            (else_try),
                (eq, ":value", 1),
                (assign, "$temp4_1", imod_spirited),
            (else_try),
                (eq, ":value", 2),
                (assign, "$temp4_1", imod_champion),
            (else_try),
                (assign, "$temp4_1", -1),
            (try_end),
        (else_try),
            (eq, ":type", itp_type_shield),
            (try_begin),
                (eq, ":value", 0),
                (assign, "$temp4_1", imod_thick),
            (else_try),
                (eq, ":value", 1),
                (assign, "$temp4_1", imod_reinforced),
            (else_try),
                (eq, ":value", 2),
                (assign, "$temp4_1", -1),
            (try_end),
        (else_try),
            (ge, ":type", itp_type_head_armor),
            (le, ":type", itp_type_hand_armor),
            (try_begin),
                (eq, ":value", 0),
                (assign, "$temp4_1", imod_sturdy),
            (else_try),
                (eq, ":value", 1),
                (assign, "$temp4_1", imod_thick),
            (else_try),
                (eq, ":value", 2),
                (assign, "$temp4_1", imod_hardened),
            (else_try),
                (eq, ":value", 3),
                (assign, "$temp4_1", imod_reinforced),
            (else_try),
                (eq, ":value", 4),
                (assign, "$temp4_1", imod_lordly),
            (else_try),
                (assign, "$temp4_1", -1),
            (try_end),
        (else_try),
            (this_or_next | eq, ":type", itp_type_one_handed_wpn),
            (this_or_next | eq, ":type", itp_type_two_handed_wpn),
            (this_or_next | eq, ":type", itp_type_polearm),
            (this_or_next | eq, ":type", itp_type_bow),
            (this_or_next | eq, ":type", itp_type_crossbow),
            (this_or_next | eq, ":type", itp_type_pistol),
            (eq, ":type", itp_type_musket),
            (try_begin),
                (eq, ":value", 0),
                (assign, "$temp4_1", imod_heavy),
            (else_try),
                (eq, ":value", 1),
                (assign, "$temp4_1", imod_strong),
            (else_try),
                (eq, ":value", 2),
                (assign, "$temp4_1", imod_balanced),
            (else_try),
                (eq, ":value", 3),
                (assign, "$temp4_1", imod_tempered),
            (else_try),
                (eq, ":value", 4),
                (assign, "$temp4_1", imod_masterwork),
            (else_try),
                (assign, "$temp4_1", -1),
            (try_end),
        (else_try),
            (this_or_next | eq, ":type", itp_type_arrows),
            (this_or_next | eq, ":type", itp_type_bolts),
            (this_or_next | eq, ":type", itp_type_bullets),
            (eq, ":type", itp_type_thrown),
            (try_begin),
                (eq, ":value", 0),
                (assign, "$temp4_1", imod_large_bag),
            (else_try),
                (eq, ":value", 1),
                (assign, "$temp4_1", imod_heavy),
            (else_try),
                (eq, ":value", 2),
                (assign, "$temp4_1", imod_balanced),
            (else_try),
                (assign, "$temp4_1", -1),
            (try_end),
        (try_end),
        (start_presentation, "prsnt_item_selection"),
        # (else_try),
        # (eq,":object","$g_presentation_obj_3_back"),
        # (val_sub, "$cheat_find_item_range_begin", 96),
        # (try_begin),
        # (le, "$cheat_find_item_range_begin", horses_begin),
        # (assign, "$cheat_find_item_range_begin", horses_end),
        # (val_sub, "$cheat_find_item_range_begin", 96),
        # (try_end),
        # (start_presentation, "prsnt_item_selection"),
        # (else_try),
        # (eq,":object","$g_presentation_obj_3"),
        # (val_add, "$cheat_find_item_range_begin", 96),
        # (try_begin),
        # (ge, "$cheat_find_item_range_begin", horses_end),
        # (assign, "$cheat_find_item_range_begin", horses_begin),
        # (try_end),
        # (start_presentation, "prsnt_item_selection"),
    (else_try),
			  (eq,":object","$g_presentation_obj_11"),
        (try_begin),
            # (store_item_kind_count, ":has_item", "$selected_item", "$g_talk_troop"),
            # (ge, ":has_item", 1),
            # (display_message,"@The merchant sells this horse. Buy it from him instead of important it!",0x888888),#grey
        # (else_try),
            (store_troop_gold, ":g", "trp_player"),
            (ge, ":g", "$temp1"),
            (troop_remove_gold, "trp_player", "$temp1"),
            (val_mul, "$temp2", 24),
            (store_current_hours, ":hours"),
            (val_add, ":hours", "$temp2"),
            (troop_set_slot, "$g_talk_troop", slot_crafting_order_time, ":hours"),
            (troop_set_slot, "$g_talk_troop", slot_crafting_order_time_modifier, "$temp4_1"),
            (troop_set_slot, "$g_talk_troop", slot_crafting_order_item, "$selected_item"),
            (try_begin),
                (troop_slot_eq, "trp_global_variables", start_town_conversation, 1),
                (jump_to_menu, "mnu_town_trade"),
            (try_end),
            (presentation_set_duration, 0),
            (display_message,"@You ordered an item!",message_alert),#grey
        (else_try),
            (display_message,"str_not_enough_gold",0x888888),#grey
        (try_end),
    (else_try),
        (eq,":object","$g_presentation_obj_12"),
        (try_begin),
            (troop_slot_eq, "trp_global_variables", start_town_conversation, 1),
            (jump_to_menu, "mnu_town_trade"),
        (try_end),
			  (presentation_set_duration, 0),
    (try_end),
	]),
  (ti_on_presentation_mouse_enter_leave,[
    (store_trigger_param_1, ":object"),
    (store_trigger_param_2, ":enter_leave"),

    (try_begin),
        (eq, ":enter_leave", 0),
        (store_add, ":end", "$cheat_find_item_range_begin", 1),
        (try_for_range, ":slot_no", 0, ":end"),
            (troop_slot_eq, "trp_temp_array_a", ":slot_no", ":object"),
            (troop_get_slot, ":item_no", "trp_temp_array_c", ":slot_no"),
        (try_begin),
        (gt, ":item_no", 0),
        (troop_get_slot, ":target_obj", "trp_temp_array_b", ":item_no"),
        (overlay_get_position, pos0, ":target_obj"),
        (show_item_details, ":item_no", pos0, 100),
        (assign, "$g_current_opened_item_details", ":item_no"),
        (try_end),
            (assign, ":end", -1),
        (try_end),
        (eq, ":end", -1),
    (else_try),
        (store_add, ":end", "$cheat_find_item_range_begin", 1),
        (try_for_range, ":slot_no", 0, ":end"),
            (troop_slot_eq, "trp_temp_array_a", ":slot_no", ":object"),
            (try_begin),
                (eq, "$g_current_opened_item_details", ":item_no"),
                (close_item_details),
            (try_end),
            (assign, ":end", -1),
        (try_end),
        (eq, ":end", -1),
    (try_end),
  ]),
  (ti_on_presentation_mouse_press,[
	  (store_trigger_param_1, ":object"),
    (store_trigger_param_2, ":mouse_state"),
    (try_begin),
        (eq, ":mouse_state", 0),
        (store_add, ":end", "$cheat_find_item_range_begin", 1),
        (try_for_range, ":slot_no", 0, ":end"),
            (troop_slot_eq, "trp_temp_array_a", ":slot_no", ":object"),
            (troop_get_slot, ":item_no", "trp_temp_array_c", ":slot_no"),
            # (store_add,":num_temp",":slot_no","$cheat_find_item_range_begin"),
            # (store_add,":item_no",":num_temp","itm_no_item"),
            (try_begin),
                (eq, "$current_item", -1),
                (gt, ":item_no", 0),
                (troop_get_slot, ":target_obj", "trp_temp_array_b", ":item_no"),
                (assign,"$current_item",":item_no"),
                (overlay_set_display, ":target_obj", 0),
                # (call_script, "script_cf_item_can_be_used_by_custom_troop", "$current_item"),
                (create_mesh_overlay_with_item_id, "$g_presentation_credits_obj_1", "$current_item"),
                (position_set_x, pos1, 1000),
                (position_set_y, pos1, 1000),
                (overlay_set_size, "$g_presentation_credits_obj_1", pos1),
            (else_try),
                (eq, "$current_item", ":item_no"),
                (troop_get_slot, ":target_obj", "trp_temp_array_b", ":item_no"),
                (overlay_set_display,":target_obj", 1),
                (assign,"$g_presentation_credits_obj_1",-1),
                (assign,"$current_item",-1),
                (start_presentation, "prsnt_item_selection"),
            (try_end),
        (try_end),
        (try_begin),
            (eq, ":object", "$g_presentation_credits_obj_2"),
            # (try_for_range, ":slot_no", 0, 9),
            # (store_add,":slot_offset",":slot_no",50),
            # (troop_slot_eq, "trp_temp_array_c", ":slot_offset", ":object"),
            # (troop_get_slot, ":slot_item","trp_temp_array_b", ":slot_no"),
            # (troop_get_slot, ":target_obj","trp_temp_array_c", ":slot_no"),
            (try_begin),
                (gt,"$current_item",-1),
                # (eq,"$selected_item",-1),
                (overlay_get_position, pos0, "$g_presentation_credits_obj_2"),
                (overlay_set_position, "$g_presentation_credits_obj_1", pos0),
                # (troop_set_slot, "trp_temp_array_b", ":slot_no", "$current_item"),
                (assign, "$selected_item", "$current_item"),
                (assign,"$current_item",-1),
                (start_presentation, "prsnt_item_selection"),
                # (else_try),
                # (eq, "$current_item", -1),
                # (overlay_set_display,":target_obj", 0),
                # (assign,"$g_presentation_credits_obj_1",-1),
                # (neq, ":slot_item", 0),
                # (create_mesh_overlay_with_item_id, "$g_presentation_credits_obj_1", ":slot_item"),
                # (position_set_x, pos1, 1000),
                # (position_set_y, pos1, 1000),
                # (overlay_set_size, "$g_presentation_credits_obj_1", pos1),
                # (assign,"$current_item",":slot_item"),
                # (troop_set_slot, "trp_temp_array_b", ":slot_no", 0),
                # (overlay_set_alpha, ":object", 100),
            (else_try),
                (eq,"$current_item",-1),
                (gt,"$selected_item",-1),
                (assign,"$selected_item",-1),
                (start_presentation, "prsnt_item_selection"),
            (try_end),
        (try_end),
    (else_try),
        (eq, ":mouse_state", 1),
        (gt,"$current_item",-1),
        (assign,"$current_item",-1),
		    # (call_script,"script_custom_troop_inventory_change","$temp_troop"),
        (start_presentation, "prsnt_item_selection"),
    (try_end),
	]),

  (ti_on_presentation_run,[
    (set_fixed_point_multiplier, 1000),
    #(try_begin),
    #   (this_or_next|key_clicked, key_escape),
    #   (key_clicked, key_right_mouse_button),
    # 	(call_script,"script_custom_troop_inventory_reset","$temp_troop"),
    #(presentation_set_duration, 0),
    # (call_script,"script_get_custom_troop_info"),
    # (call_script,"script_store_custom_troop_info_to_slot","trp_temp_array_b"),
    # (start_presentation, "prsnt_custom_troop"),
    #(try_end),
    (gt,"$current_item",-1),
    (mouse_get_position, pos1),
	  (overlay_set_position, "$g_presentation_credits_obj_1", pos1),
	  #(call_script, "script_presentation_run"),
	]),
]),
#######END ORDER WEAPONS ######################################################################################################################################################################################################
######################################################################################################################################################################################################
#########################################################################################################################################################################################################
#######presentation to customize troop ####################################################################################################################################################################################
("custom_troop_weapon_selection", 0, 0, [
  (ti_on_presentation_load,[
    (set_fixed_point_multiplier, 1000),

    (store_add, ":troop_inventory", "$temp_troop", 1),
    #set up item list in temp
    (try_for_range, ":value", 0, 1500),
        (troop_set_slot, "trp_temp_array_c", ":value", 0),
        (troop_set_slot, "trp_temp_array_olympia_c", ":value", 0),
        (troop_set_slot, ":troop_inventory", ":value", 0),#use it to store item modifier
    (try_end),


    (assign, reg1, 32),
    (try_for_range, ":current_slot", 0, 33),
        (troop_get_inventory_slot, ":item_no", ":troop_inventory", ":current_slot"),
        (gt, ":item_no", -1),
        (troop_get_inventory_slot_modifier, ":item_modifier", ":troop_inventory", ":current_slot"),
        (troop_set_slot, "trp_temp_array_olympia_c", reg1, ":item_no"),
        (troop_set_slot, ":troop_inventory", ":item_no", ":item_modifier"),#use it to store item modifier
        (val_sub, reg1, 1),
    (try_end),

    (assign, ":slot", 0),
    (try_for_range_backwards, ":item", "itm_arena_shield_red", legendary_items_begin),
        # (neq, ":item", "itm_stones_siege"),
        # (neq, ":item", "itm_keys"),
        # (neq, ":item", "itm_bride_dress"),
        # (neq, ":item", "itm_bride_crown"),
        # (neq, ":item", "itm_lyre_rich"),
        # (neq, ":item", "itm_lyre"),
        # (neq, ":item", "itm_lute"),
        # (neq, ":item", "itm_flute"),
        # (neq, ":item", "itm_torch"),
        # (neq, ":item", "itm_torch2"),
        # (neq, ":item", "itm_ballista_mounted"),
        # (neq, ":item", "itm_horn"),
        # (neq, ":item", "itm_horn"),
        # (neg|is_between, ":item", "itm_roman_lupa_dress", "itm_sarranid_cloth_robe"),
        # (neg|is_between, ":item", "itm_flower_crown", "itm_celtic_boots"),
        (assign, ":c0", 0),
        # (assign, reg0, "$temp2"),
        # (display_message, "@{reg0}"),
        (try_begin),
            (store_sub, ":number_cultures", cultures_end, cultures_begin),
            (le, "$temp2", ":number_cultures"),
            (try_begin),
                (neg|item_has_faction, ":item", "fac_gladiators"),
                (store_sub, ":culture", "$temp2", 1),
                (val_add, ":culture", cultures_begin),
                # (str_store_faction_name, s10, ":culture"),
                # (display_message, "@Selected culture: {s10}"),
                (try_begin),
                    (eq, ":culture", "fac_dark_knights"),
                    (assign, ":culture", "fac_minor_kingdoms_end"),
                (try_end),
                (item_has_faction, ":item", ":culture"),
                (assign, ":c0", 1),
            (try_end),
        (else_try),
            (assign, ":c0", 1),
        (try_end),
        (eq, ":c0", 1),

        (assign, ":c1", 1),
        (try_begin),
            (neg|quest_slot_eq, "qst_wlodowiecus_adventure_1", slot_quest_current_state, 6),
            (neg|item_has_faction, ":item", "fac_gladiators"),
            (item_has_faction, ":item", "fac_minor_kingdoms_end"),
            # (display_message,"@Greek items are locked. You need to find Pavel to activate it!",0x888888),#grey
            (assign, ":c1", 0),
        # (else_try),
        #     (neg|item_has_faction, ":item", ":player_culture"),
        #     (assign, ":c1", 0),
        (try_end),
        (eq, ":c1", 1),
        (assign, ":c1", 0),
        (try_begin),
            (troop_slot_eq, "trp_player", slot_troop_culture, "fac_culture_7"),
            (this_or_next|is_between, ":item", roman_noble_horses_begin, roman_noble_horses_end),
            (this_or_next|is_between, ":item", camels_begin, camels_end),
            (this_or_next|is_between, ":item", roman_horses_begin, roman_horses_end),
            (this_or_next|is_between, ":item", generic_horses_begin, generic_horses_end),
            (this_or_next|is_between, ":item", arabian_horses_begin, arabian_horses_end),
            (this_or_next|is_between, ":item", numidian_horses_begin, numidian_horses_end),
            (this_or_next|is_between, ":item", sling_rocks_begin, sling_rocks_end),
            (this_or_next|is_between, ":item", ballista_bolts_begin, ballista_bolts_end),
            (this_or_next|is_between, ":item", generic_arrows_begin, generic_arrows_end),
            (this_or_next|is_between, ":item", arabian_arrows_begin, arabian_arrows_end),
            (this_or_next|is_between, ":item", roman_armour_begin, roman_armour_end),
            (this_or_next|is_between, ":item", north_african_armoury_begin, north_african_armoury_end),
            (this_or_next|is_between, ":item", illyrian_armoury_begin, illyrian_armoury_end),
            (this_or_next|is_between, ":item", ibarian_armoury_begin, ibarian_armoury_end),
            (this_or_next|is_between, ":item", arabian_armoury_begin, arabian_armoury_end),
            (this_or_next|is_between, ":item", judean_armoury_begin, judean_armoury_end),
            (this_or_next|is_between, ":item", roman_tunics_begin, roman_tunics_end),
            (this_or_next|is_between, ":item", roman_helmets_begin, roman_helmets_end),
            (this_or_next|is_between, ":item", straw_hats_begin, straw_hats_end),
            (this_or_next|is_between, ":item", turbans_begin, turbans_end),
            (this_or_next|is_between, ":item", generic_hoods_begin, generic_hoods_end),
            (this_or_next|is_between, ":item", arabian_helmets_begin, arabian_helmets_end),
            (this_or_next|is_between, ":item", eastern_hats_begin, eastern_hats_end),
            (this_or_next|is_between, ":item", eastern_head_cloth_begin, eastern_head_cloth_end),
            (this_or_next|is_between, ":item", roman_military_boots_begin, roman_military_boots_end),
            (this_or_next|is_between, ":item", eastern_boots_begin, eastern_boots_end),
            (this_or_next|is_between, ":item", barbarian_boots_begin, barbarian_boots_end),
            (this_or_next|is_between, ":item", special_begin, special_end),
            (this_or_next|is_between, ":item", roman_weapons_begin, roman_weapons_end),
            (this_or_next|is_between, ":item", generic_polearms_begin, generic_polearms_end),
            (this_or_next|is_between, ":item", kontos_begin, kontos_end),
            (this_or_next|is_between, ":item", old_roman_shields_begin, old_roman_shields_end),
            (this_or_next|is_between, ":item", barbarian_boots_begin, barbarian_boots_end),
            (this_or_next|is_between, ":item", roman_round_shields_begin, roman_round_shields_end),
            (this_or_next|is_between, ":item", roman_signum_begin, roman_signum_end),
            (this_or_next|is_between, ":item", roman_vexilium_begin, roman_vexilium_end),
            (this_or_next|is_between, ":item", roman_shields_begin, roman_shields_end),
            (this_or_next|is_between, ":item", judean_shields_begin, judean_shields_end),
            (this_or_next|is_between, ":item", egyptian_shields_begin, egyptian_shields_end),
            (this_or_next|is_between, ":item", special_shields_begin, special_shields_end),
            (this_or_next|is_between, ":item", roman_javelins_begin, roman_javelins_end),
            (this_or_next|is_between, ":item", generic_javelins_begin, generic_javelins_end),
            (this_or_next|is_between, ":item", composite_bows_begin, composite_bows_end),
            (this_or_next|is_between, ":item", arabian_bows_begin, arabian_bows_end),
            (this_or_next|is_between, ":item", slings_begin, slings_end),
            (this_or_next|is_between, ":item", roman_music_begin, roman_music_end),
            (this_or_next|is_between, ":item", bandit_armoury_shit_begin, bandit_armoury_shit_end),
            (is_between, ":item", ballista_begin, ballista_end),
            (assign, ":c1", 1),
        (else_try),
            (this_or_next|troop_slot_eq, "trp_player", slot_troop_culture, "fac_culture_6"),
            (troop_slot_eq, "trp_player", slot_troop_culture, "fac_culture_5"),
            (this_or_next|is_between, ":item", parthian_horses_begin, parthian_horses_end),
            (this_or_next|is_between, ":item", camels_begin, camels_end),
            (this_or_next|is_between, ":item", steppe_horses_begin, steppe_horses_end),
            (this_or_next|is_between, ":item", generic_horses_begin, generic_horses_end),
            (this_or_next|is_between, ":item", arabian_horses_begin, arabian_horses_end),
            (this_or_next|is_between, ":item", roman_horses_begin, roman_horses_end),

            (this_or_next|is_between, ":item", sling_rocks_begin, sling_rocks_end),
            (this_or_next|is_between, ":item", sarmatian_arrows_begin, sarmatian_arrows_end),
            (this_or_next|is_between, ":item", generic_arrows_begin, generic_arrows_end),
            (this_or_next|is_between, ":item", arabian_arrows_begin, arabian_arrows_end),

            (this_or_next|is_between, ":item", parthian_armoury_begin, parthian_armoury_end),
            (this_or_next|is_between, ":item", indian_armoury_begin, indian_armoury_end),
            (this_or_next|is_between, ":item", sarmatian_armoury_begin, sarmatian_armoury_end),
            (this_or_next|is_between, ":item", scythian_armoury_begin, scythian_armoury_end),
            (this_or_next|is_between, ":item", arabian_armoury_begin, arabian_armoury_end),
            (this_or_next|is_between, ":item", persian_armoury_begin, persian_armoury_end),
            (this_or_next|is_between, ":item", eastern_armoury_begin, eastern_armoury_end),
            (this_or_next|is_between, ":item", saka_armoury_begin, saka_armoury_end),

            (this_or_next|is_between, ":item", straw_hats_begin, straw_hats_end),
            (this_or_next|is_between, ":item", turbans_begin, turbans_end),
            (this_or_next|is_between, ":item", generic_hoods_begin, generic_hoods_end),
            (this_or_next|is_between, ":item", phrygian_caps_begin, phrygian_caps_end),
            (this_or_next|is_between, ":item", eastern_hats_begin, eastern_hats_end),
            (this_or_next|is_between, ":item", eastern_head_cloth_begin, eastern_head_cloth_end),
            (this_or_next|is_between, ":item", sarmatian_helmets_begin, sarmatian_helmets_end),
            (this_or_next|is_between, ":item", alan_helmets_begin, alan_helmets_end),
            (this_or_next|is_between, ":item", caucasian_helmets_begin, caucasian_helmets_end),
            (this_or_next|is_between, ":item", eastern_helmets_begin, eastern_helmets_end),
            (this_or_next|is_between, ":item", parthian_helmets_begin, parthian_helmets_end),
            (this_or_next|is_between, ":item", saka_helmets_begin, saka_helmets_end),

            (this_or_next|is_between, ":item", sarmatian_boots_begin, sarmatian_boots_end),
            (this_or_next|is_between, ":item", eastern_boots_begin, eastern_boots_end),
            (this_or_next|is_between, ":item", barbarian_boots_begin, barbarian_boots_end),
            (this_or_next|is_between, ":item", cataphract_boots_begin, cataphract_boots_end),

            (this_or_next|is_between, ":item", special_begin, special_end),
            (this_or_next|is_between, ":item", eastern_weapons_begin, eastern_weapons_end),
            (this_or_next|is_between, ":item", generic_polearms_begin, generic_polearms_end),
            (this_or_next|is_between, ":item", kontos_begin, kontos_end),
            (this_or_next|is_between, ":item", caucasian_weapons_begin, caucasian_weapons_end),
            (this_or_next|is_between, ":item", arabian_weapons_begin, arabian_weapons_end),
            (this_or_next|is_between, ":item", parthian_weapons_begin, parthian_weapons_end),
            (this_or_next|is_between, ":item", maces_begin, maces_end),

            (this_or_next|is_between, ":item", indian_shields_begin, indian_shields_end),
            (this_or_next|is_between, ":item", eastern_cav_shields_begin, eastern_cav_shields_end),
            (this_or_next|is_between, ":item", eastern_shields_begin, eastern_shields_end),
            (this_or_next|is_between, ":item", caucasian_shields_begin, caucasian_shields_end),
            (this_or_next|is_between, ":item", generic_round_shields_begin, generic_round_shields_end),
            (this_or_next|is_between, ":item", barbarian_battle_standards_begin, barbarian_battle_standards_end),

            (this_or_next|is_between, ":item", caucasian_bows_begin, caucasian_bows_end),
            (this_or_next|is_between, ":item", eastern_javelins_begin, eastern_javelins_end),
            (this_or_next|is_between, ":item", generic_javelins_begin, generic_javelins_end),
            (this_or_next|is_between, ":item", composite_bows_begin, composite_bows_end),
            (this_or_next|is_between, ":item", arabian_bows_begin, arabian_bows_end),
            (this_or_next|is_between, ":item", slings_begin, slings_end),
            (is_between, ":item", barbarian_music_begin, barbarian_music_end),

            (assign, ":c1", 1),
        (else_try),
            (this_or_next|troop_slot_eq, "trp_player", slot_troop_culture, "fac_culture_8"),
            (troop_slot_eq, "trp_player", slot_troop_culture, "fac_culture_10"),
            (this_or_next|is_between, ":item", parthian_horses_begin, parthian_horses_end),
            (this_or_next|is_between, ":item", camels_begin, camels_end),
            (this_or_next|is_between, ":item", roman_horses_begin, roman_horses_end),
            (this_or_next|is_between, ":item", generic_horses_begin, generic_horses_end),
            (this_or_next|is_between, ":item", arabian_horses_begin, arabian_horses_end),
            (this_or_next|is_between, ":item", roman_noble_horses_begin, roman_noble_horses_end),

            (this_or_next|is_between, ":item", sling_rocks_begin, sling_rocks_end),
            (this_or_next|is_between, ":item", generic_arrows_begin, generic_arrows_end),
            (this_or_next|is_between, ":item", arabian_arrows_begin, arabian_arrows_end),

            (this_or_next|is_between, ":item", parthian_armoury_begin, parthian_armoury_end),
            (this_or_next|is_between, ":item", judean_armoury_begin, judean_armoury_end),
            (this_or_next|is_between, ":item", roman_tunics_begin, roman_tunics_end),
            (this_or_next|is_between, ":item", roman_armour_begin, roman_armour_end),
            (this_or_next|is_between, ":item", arabian_armoury_begin, arabian_armoury_end),
            (this_or_next|is_between, ":item", eastern_armoury_begin, eastern_armoury_end),

            (this_or_next|is_between, ":item", straw_hats_begin, straw_hats_end),
            (this_or_next|is_between, ":item", turbans_begin, turbans_end),
            (this_or_next|is_between, ":item", generic_hoods_begin, generic_hoods_end),
            (this_or_next|is_between, ":item", phrygian_caps_begin, phrygian_caps_end),
            (this_or_next|is_between, ":item", eastern_hats_begin, eastern_hats_end),
            (this_or_next|is_between, ":item", eastern_head_cloth_begin, eastern_head_cloth_end),
            (this_or_next|is_between, ":item", eastern_helmets_begin, eastern_helmets_end),
            (this_or_next|is_between, ":item", parthian_helmets_begin, parthian_helmets_end),
            (this_or_next|is_between, ":item", arabian_helmets_begin, arabian_helmets_end),
            (this_or_next|is_between, ":item", roman_helmets_begin, roman_helmets_end),

            (this_or_next|is_between, ":item", roman_civilian_boots_begin, roman_civilian_boots_end),
            (this_or_next|is_between, ":item", roman_military_boots_begin, roman_military_boots_end),
            (this_or_next|is_between, ":item", eastern_boots_begin, eastern_boots_end),

            (this_or_next|is_between, ":item", special_begin, special_end),
            (this_or_next|is_between, ":item", eastern_weapons_begin, eastern_weapons_end),
            (this_or_next|is_between, ":item", generic_polearms_begin, generic_polearms_end),
            (this_or_next|is_between, ":item", kontos_begin, kontos_end),
            (this_or_next|is_between, ":item", arabian_weapons_begin, arabian_weapons_end),
            (this_or_next|is_between, ":item", parthian_weapons_begin, parthian_weapons_end),
            (this_or_next|is_between, ":item", maces_begin, maces_end),

            (this_or_next|is_between, ":item", generic_round_shields_begin, generic_round_shields_end),
            (this_or_next|is_between, ":item", eastern_cav_shields_begin, eastern_cav_shields_end),
            (this_or_next|is_between, ":item", eastern_shields_begin, eastern_shields_end),
            (this_or_next|is_between, ":item", arabian_shields_begin, arabian_shields_end),
            (this_or_next|is_between, ":item", old_roman_shields_begin, old_roman_shields_end),
            (this_or_next|is_between, ":item", judean_shields_begin, judean_shields_end),
            (this_or_next|is_between, ":item", special_shields_begin, special_shields_end),
            (this_or_next|is_between, ":item", generic_shields_begin, generic_shields_end),
            (this_or_next|is_between, ":item", barbarian_battle_standards_begin, barbarian_battle_standards_end),

            (this_or_next|is_between, ":item", generic_bows_javelins_begin, generic_bows_javelins_end),
            (this_or_next|is_between, ":item", eastern_javelins_begin, eastern_javelins_end),
            (this_or_next|is_between, ":item", generic_javelins_begin, generic_javelins_end),
            (this_or_next|is_between, ":item", composite_bows_begin, composite_bows_end),
            (this_or_next|is_between, ":item", arabian_bows_begin, arabian_bows_end),
            (this_or_next|is_between, ":item", slings_begin, slings_end),
            (is_between, ":item", barbarian_music_begin, barbarian_music_end),

            (assign, ":c1", 1),

        (else_try),
            (this_or_next|troop_slot_eq, "trp_player", slot_troop_culture, "fac_culture_4"),
            (this_or_next|troop_slot_eq, "trp_player", slot_troop_culture, "fac_culture_2_1"),
            (troop_slot_eq, "trp_player", slot_troop_culture, "fac_culture_2"),
            (this_or_next|is_between, ":item", roman_noble_horses_begin, roman_noble_horses_end),
            (this_or_next|is_between, ":item", donkeys_begin, donkeys_end),
            (this_or_next|is_between, ":item", generic_horses_begin, generic_horses_end),
            (this_or_next|is_between, ":item", pack_horses_begin, pack_horses_end),
            (this_or_next|is_between, ":item", roman_horses_begin, roman_horses_end),

            (this_or_next|is_between, ":item", sling_rocks_begin, sling_rocks_end),
            (this_or_next|is_between, ":item", generic_arrows_begin, generic_arrows_end),

            (this_or_next|is_between, ":item", celtic_armoury_begin, celtic_armoury_end),
            (this_or_next|is_between, ":item", germanic_armoury_begin, germanic_armoury_end),
            (this_or_next|is_between, ":item", bandit_armoury_shit_begin, bandit_armoury_shit_end),

            (this_or_next|is_between, ":item", generic_hoods_begin, generic_hoods_end),
            (this_or_next|is_between, ":item", germanic_helmets_begin, germanic_helmets_end),
            (this_or_next|is_between, ":item", celtic_helmets_begin, celtic_helmets_end),
            (this_or_next|is_between, ":item", bandit_helmets_begin, bandit_helmets_end),

            (this_or_next|is_between, ":item", barbarian_boots_begin, barbarian_boots_end),

            (this_or_next|is_between, ":item", generic_axes_begin, generic_axes_end),
            (this_or_next|is_between, ":item", generic_polearms_begin, generic_polearms_end),
            (this_or_next|is_between, ":item", clubs_begin, clubs_end),
            (this_or_next|is_between, ":item", celtic_weapons_begin, celtic_weapons_end),
            (this_or_next|is_between, ":item", germanic_weapons_begin, germanic_weapons_end),
            (this_or_next|is_between, ":item", roman_weapons_begin, roman_weapons_end),

            (this_or_next|is_between, ":item", generic_round_shields_begin, generic_round_shields_end),
            (this_or_next|is_between, ":item", celtic_shields_begin, celtic_shields_end),
            (this_or_next|is_between, ":item", germanic_shields_begin, germanic_shields_end),
            (this_or_next|is_between, ":item", generic_shields_begin, generic_shields_end),
            (this_or_next|is_between, ":item", barbarian_battle_standards_begin, barbarian_battle_standards_end),

            (this_or_next|is_between, ":item", germanic_javelins_begin, germanic_javelins_end),
            (this_or_next|is_between, ":item", celtic_javelins_begin, celtic_javelins_end),
            (this_or_next|is_between, ":item", generic_javelins_begin, generic_javelins_end),
            (this_or_next|is_between, ":item", generic_bows_javelins_begin, generic_bows_javelins_end),
            (this_or_next|is_between, ":item", germanic_bows_begin, germanic_bows_end),
            (this_or_next|is_between, ":item", slings_begin, slings_end),
            (is_between, ":item", barbarian_music_begin, barbarian_music_end),

            (assign, ":c1", 1),

        (else_try),
            (troop_slot_eq, "trp_player", slot_troop_culture, "fac_culture_1"),

            (this_or_next|is_between, ":item", roman_noble_horses_begin, roman_noble_horses_end),
            (this_or_next|is_between, ":item", steppe_horses_begin, steppe_horses_end),
            (this_or_next|is_between, ":item", generic_horses_begin, generic_horses_end),
            (this_or_next|is_between, ":item", roman_horses_begin, roman_horses_end),

            (this_or_next|is_between, ":item", sling_rocks_begin, sling_rocks_end),
            (this_or_next|is_between, ":item", generic_arrows_begin, generic_arrows_end),
            (this_or_next|is_between, ":item", sarmatian_arrows_begin, sarmatian_arrows_end),

            (this_or_next|is_between, ":item", dacian_armoury_begin, dacian_armoury_end),
            (this_or_next|is_between, ":item", sarmatian_armoury_begin, sarmatian_armoury_end),
            (this_or_next|is_between, ":item", bandit_armoury_shit_begin, bandit_armoury_shit_end),

            (this_or_next|is_between, ":item", phrygian_caps_begin, phrygian_caps_end),
            (this_or_next|is_between, ":item", generic_hoods_begin, generic_hoods_end),
            (this_or_next|is_between, ":item", dacian_helmets_begin, dacian_helmets_end),
            (this_or_next|is_between, ":item", sarmatian_helmets_begin, sarmatian_helmets_end),
            (this_or_next|is_between, ":item", bandit_helmets_begin, bandit_helmets_end),

            (this_or_next|is_between, ":item", barbarian_boots_begin, barbarian_boots_end),
            (this_or_next|is_between, ":item", sarmatian_boots_begin, sarmatian_boots_end),

            (this_or_next|is_between, ":item", generic_axes_begin, generic_axes_end),
            (this_or_next|is_between, ":item", generic_polearms_begin, generic_polearms_end),
            (this_or_next|is_between, ":item", clubs_begin, clubs_end),
            (this_or_next|is_between, ":item", special_begin, special_end),
            (this_or_next|is_between, ":item", kontos_begin, kontos_end),
            (this_or_next|is_between, ":item", dacian_weapons_begin, dacian_weapons_end),
            (this_or_next|is_between, ":item", sarmatian_weapons_begin, sarmatian_weapons_end),

            (this_or_next|is_between, ":item", generic_round_shields_begin, generic_round_shields_end),
            (this_or_next|is_between, ":item", eastern_cav_shields_begin, eastern_cav_shields_end),
            (this_or_next|is_between, ":item", dacian_shields_begin, dacian_shields_end),
            (this_or_next|is_between, ":item", generic_shields_begin, generic_shields_end),
            (this_or_next|is_between, ":item", barbarian_battle_standards_begin, barbarian_battle_standards_end),

            (this_or_next|is_between, ":item", dacian_javelins_begin, dacian_javelins_end),
            (this_or_next|is_between, ":item", composite_bows_begin, composite_bows_end),
            (this_or_next|is_between, ":item", generic_javelins_begin, generic_javelins_end),
            (this_or_next|is_between, ":item", generic_bows_javelins_begin, generic_bows_javelins_end),
            (this_or_next|is_between, ":item", slings_begin, slings_end),
            (is_between, ":item", barbarian_music_begin, barbarian_music_end),

            (assign, ":c1", 1),

        (else_try),
            (this_or_next|troop_slot_eq, "trp_player", slot_troop_culture, "fac_culture_9"),
            (this_or_next|troop_slot_eq, "trp_player", slot_troop_culture, "fac_culture_14"),
            (troop_slot_eq, "trp_player", slot_troop_culture, "fac_culture_3"),

            (this_or_next|is_between, ":item", parthian_horses_begin, parthian_horses_end),
            (this_or_next|is_between, ":item", steppe_horses_begin, steppe_horses_end),
            (this_or_next|is_between, ":item", generic_horses_begin, generic_horses_end),

            (this_or_next|is_between, ":item", sling_rocks_begin, sling_rocks_end),
            (this_or_next|is_between, ":item", generic_arrows_begin, generic_arrows_end),
            (this_or_next|is_between, ":item", sarmatian_arrows_begin, sarmatian_arrows_end),

            (this_or_next|is_between, ":item", alan_armoury_begin, alan_armoury_end),
            (this_or_next|is_between, ":item", sarmatian_armoury_begin, sarmatian_armoury_end),
            (this_or_next|is_between, ":item", bandit_armoury_shit_begin, bandit_armoury_shit_end),
            (this_or_next|is_between, ":item", bosporan_armoury_begin, bosporan_armoury_end),
            (this_or_next|is_between, ":item", scythian_armoury_begin, scythian_armoury_end),
            (this_or_next|is_between, ":item", caucasian_armoury_begin, caucasian_armoury_end),
            (this_or_next|is_between, ":item", saka_armoury_begin, saka_armoury_end),

            (this_or_next|is_between, ":item", phrygian_caps_begin, phrygian_caps_end),
            (this_or_next|is_between, ":item", generic_hoods_begin, generic_hoods_end),
            (this_or_next|is_between, ":item", caucasian_helmets_begin, caucasian_helmets_end),
            (this_or_next|is_between, ":item", sarmatian_helmets_begin, sarmatian_helmets_end),
            (this_or_next|is_between, ":item", bosporan_helmets_begin, bosporan_helmets_end),
            (this_or_next|is_between, ":item", saka_helmets_begin, saka_helmets_end),
            (this_or_next|is_between, ":item", alan_helmets_begin, alan_helmets_end),

            (this_or_next|is_between, ":item", barbarian_boots_begin, barbarian_boots_end),
            (this_or_next|is_between, ":item", sarmatian_boots_begin, sarmatian_boots_end),

            (this_or_next|is_between, ":item", maces_begin, maces_end),
            (this_or_next|is_between, ":item", generic_polearms_begin, generic_polearms_end),
            (this_or_next|is_between, ":item", caucasian_weapons_begin, caucasian_weapons_end),
            (this_or_next|is_between, ":item", generic_axes_begin, generic_axes_end),
            (this_or_next|is_between, ":item", kontos_begin, kontos_end),
            (this_or_next|is_between, ":item", alan_weapons_begin, alan_weapons_end),
            (this_or_next|is_between, ":item", sarmatian_weapons_begin, sarmatian_weapons_end),

            (this_or_next|is_between, ":item", generic_round_shields_begin, generic_round_shields_end),
            (this_or_next|is_between, ":item", eastern_cav_shields_begin, eastern_cav_shields_end),
            (this_or_next|is_between, ":item", caucasian_shields_begin, caucasian_shields_end),
            (this_or_next|is_between, ":item", generic_shields_begin, generic_shields_end),
            (this_or_next|is_between, ":item", barbarian_battle_standards_begin, barbarian_battle_standards_end),

            (this_or_next|is_between, ":item", caucasian_bows_begin, caucasian_bows_end),
            (this_or_next|is_between, ":item", composite_bows_begin, composite_bows_end),
            (this_or_next|is_between, ":item", generic_javelins_begin, generic_javelins_end),
            (this_or_next|is_between, ":item", generic_bows_javelins_begin, generic_bows_javelins_end),
            (this_or_next|is_between, ":item", slings_begin, slings_end),
            (is_between, ":item", barbarian_music_begin, barbarian_music_end),

            (assign, ":c1", 1),

        (else_try),
            (this_or_next|troop_slot_eq, "trp_player", slot_troop_culture, "fac_culture_13"),
            (this_or_next|troop_slot_eq, "trp_player", slot_troop_culture, "fac_culture_11"),
            (troop_slot_eq, "trp_player", slot_troop_culture, "fac_culture_12"),
            (this_or_next|is_between, ":item", camels_begin, camels_end),
            (this_or_next|is_between, ":item", roman_horses_begin, roman_horses_end),
            (this_or_next|is_between, ":item", generic_horses_begin, generic_horses_end),
            (this_or_next|is_between, ":item", numidian_horses_begin, numidian_horses_end),
            (this_or_next|is_between, ":item", roman_noble_horses_begin, roman_noble_horses_end),

            (this_or_next|is_between, ":item", sling_rocks_begin, sling_rocks_end),
            (this_or_next|is_between, ":item", generic_arrows_begin, generic_arrows_end),

            (this_or_next|is_between, ":item", roman_tunics_begin, roman_tunics_end),
            (this_or_next|is_between, ":item", north_african_armoury_begin, north_african_armoury_end),
            (this_or_next|is_between, ":item", eastern_armoury_begin, eastern_armoury_end),

            (this_or_next|is_between, ":item", straw_hats_begin, straw_hats_end),
            (this_or_next|is_between, ":item", turbans_begin, turbans_end),
            (this_or_next|is_between, ":item", generic_hoods_begin, generic_hoods_end),
            (this_or_next|is_between, ":item", phrygian_caps_begin, phrygian_caps_end),
            (this_or_next|is_between, ":item", eastern_hats_begin, eastern_hats_end),
            (this_or_next|is_between, ":item", eastern_head_cloth_begin, eastern_head_cloth_end),
            (this_or_next|is_between, ":item", eastern_helmets_begin, eastern_helmets_end),
            (this_or_next|is_between, ":item", african_hats_begin, african_hats_end),

            (this_or_next|is_between, ":item", roman_civilian_boots_begin, roman_civilian_boots_end),
            (this_or_next|is_between, ":item", roman_military_boots_begin, roman_military_boots_end),
            (this_or_next|is_between, ":item", eastern_boots_begin, eastern_boots_end),

            (this_or_next|is_between, ":item", special_begin, special_end),
            (this_or_next|is_between, ":item", eastern_weapons_begin, eastern_weapons_end),
            (this_or_next|is_between, ":item", generic_polearms_begin, generic_polearms_end),
            (this_or_next|is_between, ":item", kontos_begin, kontos_end),
            (this_or_next|is_between, ":item", nubian_weapons_begin, nubian_weapons_end),
            (this_or_next|is_between, ":item", roman_weapons_begin, roman_weapons_end),
            (this_or_next|is_between, ":item", maces_begin, maces_end),

            (this_or_next|is_between, ":item", generic_round_shields_begin, generic_round_shields_end),
            (this_or_next|is_between, ":item", eastern_cav_shields_begin, eastern_cav_shields_end),
            (this_or_next|is_between, ":item", eastern_shields_begin, eastern_shields_end),
            (this_or_next|is_between, ":item", african_shields_begin, african_shields_end),
            (this_or_next|is_between, ":item", old_roman_shields_begin, old_roman_shields_end),
            (this_or_next|is_between, ":item", nubian_shields_begin, nubian_shields_end),
            (this_or_next|is_between, ":item", generic_shields_begin, generic_shields_end),
            (this_or_next|is_between, ":item", barbarian_battle_standards_begin, barbarian_battle_standards_end),

            (this_or_next|is_between, ":item", generic_bows_javelins_begin, generic_bows_javelins_end),
            (this_or_next|is_between, ":item", african_javelins_begin, african_javelins_end),
            (this_or_next|is_between, ":item", generic_javelins_begin, generic_javelins_end),
            (this_or_next|is_between, ":item", composite_bows_begin, composite_bows_end),
            (this_or_next|is_between, ":item", nubian_bows_begin, nubian_bows_end),
            (this_or_next|is_between, ":item", slings_begin, slings_end),
            (is_between, ":item", barbarian_music_begin, barbarian_music_end),

            (assign, ":c1", 1),

        (try_end),

        (this_or_next|is_between, ":item", greek_shields_begin, greek_shields_end),
        (this_or_next|is_between, ":item", greek_weapons_begin, greek_weapons_end),
        (this_or_next|is_between, ":item", greek_armoury_shit_begin, greek_armoury_shit_end),
        (this_or_next|is_between, ":item", greek_helmets_begin, greek_helmets_end),
        (eq, ":c1", 1),

        (item_get_type, ":type", ":item"),
        (assign, ":c", 0),
        (try_begin),
            (this_or_next|is_between,":item", roman_vexilium_begin, roman_vexilium_end),
            (this_or_next|is_between,":item", roman_signum_begin, roman_signum_end),
            (this_or_next|is_between,":item", barbarian_battle_standards_begin, barbarian_battle_standards_end),
            (this_or_next|is_between,":item", roman_music_begin, roman_music_end),
            (is_between,":item", barbarian_music_begin, barbarian_music_end),
            (try_begin),
                (eq, "$temp3", 10),
                (assign, ":c", 1),
            (try_end),
        (else_try),
            (eq, "$temp3", 0),
            (eq, ":type", itp_type_one_handed_wpn),
            (assign, ":c", 1),
        (else_try),
            (eq, "$temp3", 1),
            (eq, ":type", itp_type_two_handed_wpn),
            (assign, ":c", 1),
        (else_try),
            (eq, "$temp3", 2),
            (eq, ":type", itp_type_polearm),
            (assign, ":c", 1),
        (else_try),
            (eq, "$temp3", 3),
            (this_or_next|eq, ":type", itp_type_thrown),
            (this_or_next|eq, ":type", itp_type_musket),
            (this_or_next|eq, ":type", itp_type_pistol),
            (this_or_next|eq, ":type", itp_type_bullets),
            (this_or_next|eq, ":type", itp_type_bow),
            (this_or_next|eq, ":type", itp_type_crossbow),
            (this_or_next|eq, ":type", itp_type_bolts),
            (eq, ":type", itp_type_arrows),
            (assign, ":c", 1),
        (else_try),
            (eq, "$temp3", 4),
            (eq, ":type", itp_type_shield),
            (assign, ":c", 1),
        (else_try),
            (eq, "$temp3", 5),
            (eq, ":type", itp_type_head_armor),
            (assign, ":c", 1),
        (else_try),
            (eq, "$temp3", 6),
            (eq, ":type", itp_type_body_armor),
            (assign, ":c", 1),
        (else_try),
            (eq, "$temp3", 7),
            (eq, ":type", itp_type_foot_armor),
            (assign, ":c", 1),
        (else_try),
            (eq, "$temp3", 8),
            (eq, ":type", itp_type_hand_armor),
            (assign, ":c", 1),
        (else_try),
            (eq, "$temp3", 9),
            (eq, ":type", itp_type_horse),
            (assign, ":c", 1),
        (try_end),
        (eq, ":c", 1),
        (troop_set_slot, "trp_temp_array_c", ":slot", ":item"),
        (val_add, ":slot", 1),
    (try_end),
    (store_sub, "$cheat_find_item_range_begin", ":slot", 1),#stores number of items
    # (try_begin),
        # (gt, "$cheat_find_item_range_begin", horses_end),
        # (assign, "$cheat_find_item_range_begin", horses_begin),
    # (try_end),

    #0. BACKROUND
    (create_mesh_overlay, reg0, "mesh_mp_ui_bg"),
    (position_set_x, pos1, -1),
    (position_set_y, pos1, -1),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 1002),
    (position_set_y, pos1, 1002),
    (overlay_set_size, reg0, pos1),

    (store_mul, ":cur_troop", "$temp_troop", 2), #with weapons
    (create_mesh_overlay_with_tableau_material, "$g_presentation_obj_5", -1, "tableau_game_party_window", ":cur_troop"),## tableau_game_character_sheet
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, "$g_presentation_obj_5", pos1),
    (position_set_x, pos1, 325),
    (position_set_y, pos1, 20),
    (overlay_set_position, "$g_presentation_obj_5", pos1),

    #text
    (create_text_overlay, reg1, "@Item selection", tf_center_justify),
    (position_set_x, pos1, 155),
    (position_set_y, pos1, 705),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1100),
    (position_set_y, pos1, 1100),
    (overlay_set_size, reg1, pos1),

    (create_text_overlay, reg1, "@Troop inventory", tf_center_justify),
    (position_set_x, pos1, 825),
    (position_set_y, pos1, 705),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1100),
    (position_set_y, pos1, 1100),
    (overlay_set_size, reg1, pos1),

    (assign, ":cur_y", 690),

    (create_text_overlay,reg1,"@Item type:",tf_left_align),
    (position_set_x, pos1, 340),
    (position_set_y, pos1, ":cur_y"),
    (val_sub, ":cur_y", 35),
    (overlay_set_position,reg1, pos1),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size,reg1, pos1),

    (assign, "$g_presentation_obj_admin_panel_7", -1),
    (create_combo_button_overlay, "$g_presentation_obj_admin_panel_7"),
    (position_set_x, pos1, 465),
    (position_set_y, pos1, ":cur_y"),
    (val_sub, ":cur_y", 45),
    (overlay_set_position, "$g_presentation_obj_admin_panel_7", pos1),
    (position_set_x, pos1, 750),
    (position_set_y, pos1, 900),
    (overlay_set_size, "$g_presentation_obj_admin_panel_7", pos1),

    (overlay_add_item, "$g_presentation_obj_admin_panel_7", "@One Handed Weapons"),
    (overlay_add_item, "$g_presentation_obj_admin_panel_7", "@Two Handed Weapons"),
    (overlay_add_item, "$g_presentation_obj_admin_panel_7", "@Polearms"),
    (overlay_add_item, "$g_presentation_obj_admin_panel_7", "@Missile Weapons"),
    (overlay_add_item, "$g_presentation_obj_admin_panel_7", "@Shields"),
    (overlay_add_item, "$g_presentation_obj_admin_panel_7", "@Helmets and Caps"),
    (overlay_add_item, "$g_presentation_obj_admin_panel_7", "@Armours and Tunics"),
    (overlay_add_item, "$g_presentation_obj_admin_panel_7", "@Boots"),
    (overlay_add_item, "$g_presentation_obj_admin_panel_7", "@Gloves and Rings"),
    (overlay_add_item, "$g_presentation_obj_admin_panel_7", "@Horses"),
    (overlay_add_item, "$g_presentation_obj_admin_panel_7", "@Standards and Instruments"),

    (overlay_set_val, "$g_presentation_obj_admin_panel_7", "$temp3"),

    (create_text_overlay,reg1,"@Item culture:",tf_left_align),
    (position_set_x, pos1, 340),
    (position_set_y, pos1, ":cur_y"),
    (val_sub, ":cur_y", 35),
    (overlay_set_position,reg1, pos1),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size,reg1, pos1),

    (assign, "$g_presentation_obj_admin_panel_10", -1),
    (create_combo_button_overlay, "$g_presentation_obj_admin_panel_10"),
    (position_set_x, pos1, 465),
    (position_set_y, pos1, ":cur_y"),
    (val_sub, ":cur_y", 45),
    (overlay_set_position, "$g_presentation_obj_admin_panel_10", pos1),
    (position_set_x, pos1, 750),
    (position_set_y, pos1, 900),
    (overlay_set_size, "$g_presentation_obj_admin_panel_10", pos1),

    (overlay_add_item, "$g_presentation_obj_admin_panel_10", "@Ancient Greek"),
    (try_for_range_backwards, ":culture", cultures_begin, cultures_end),
        (str_store_faction_name, s10, ":culture"),
        (overlay_add_item, "$g_presentation_obj_admin_panel_10", "@{s10}"),
    (try_end),
    (overlay_add_item, "$g_presentation_obj_admin_panel_10", "@All"),
    (overlay_set_val, "$g_presentation_obj_admin_panel_10", "$temp2"),

    (try_begin),
        (eq, "$temp3", 10),
        (assign, "$temp1", -1),
    (else_try),
        (eq, "$temp3", 9),
        (assign, "$temp1", itp_type_horse),
    (else_try),
        (eq, "$temp3", 8),
        (assign, "$temp1", itp_type_hand_armor),
    (else_try),
        (eq, "$temp3", 7),
        (assign, "$temp1", itp_type_foot_armor),
    (else_try),
        (eq, "$temp3", 6),
        (assign, "$temp1", itp_type_body_armor),
    (else_try),
        (eq, "$temp3", 5),
        (assign, "$temp1", itp_type_head_armor),
    (else_try),
        (eq, "$temp3", 4),
        (assign, "$temp1", itp_type_shield),
    (else_try),
        (eq, "$temp3", 3),
        (assign, "$temp1", itp_type_bow),
    (else_try),
        (eq, "$temp3", 2),
        (assign, "$temp1", itp_type_polearm),
    (else_try),
        (eq, "$temp3", 1),
        (assign, "$temp1", itp_type_two_handed_wpn),
    (else_try),
        (eq, "$temp3", 0),
        (assign, "$temp1", itp_type_one_handed_wpn),
    (try_end),

    (create_text_overlay,reg1,"@Select item modifier:",tf_left_align),
    (position_set_x, pos1, 340),
    (position_set_y, pos1, ":cur_y"),
    (val_sub, ":cur_y", 35),
    (overlay_set_position,reg1, pos1),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size,reg1, pos1),

    (assign, ":imod", "$temp4_1"),#use this for item modifier
    (create_combo_button_overlay, "$g_presentation_obj_admin_panel_6"),
    (position_set_x, pos1, 465),
    (position_set_y, pos1, ":cur_y"),
    (val_sub, ":cur_y", 45),
    (overlay_set_position, "$g_presentation_obj_admin_panel_6", pos1),

    (position_set_x, pos1, 750),
    (position_set_y, pos1, 900),
    (overlay_set_size, "$g_presentation_obj_admin_panel_6", pos1),

    (try_begin),
        (eq, "$temp1", itp_type_horse),
        (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Heavy"),
        (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Spirited"),
        (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Champion"),
        (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@None"),
        (try_begin),
          (eq, ":imod", imod_heavy),
          (overlay_set_val, "$g_presentation_obj_admin_panel_6", 0),
        (else_try),
          (eq, ":imod", imod_spirited),
          (overlay_set_val, "$g_presentation_obj_admin_panel_6", 1),
        (else_try),
          (eq, ":imod", imod_champion),
          (overlay_set_val, "$g_presentation_obj_admin_panel_6", 2),
        (else_try),
          (overlay_set_val, "$g_presentation_obj_admin_panel_6", 3),
        (try_end),
    (else_try),
        (eq, "$temp1", itp_type_shield),
        (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Thick"),
        (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Reinforced"),
        (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@None"),
        (try_begin),
          (eq, ":imod", imod_thick),
          (overlay_set_val, "$g_presentation_obj_admin_panel_6", 0),
        (else_try),
          (eq, ":imod", imod_reinforced),
          (overlay_set_val, "$g_presentation_obj_admin_panel_6", 1),
        (else_try),
          (overlay_set_val, "$g_presentation_obj_admin_panel_6", 2),
        (try_end),
    (else_try),
        (ge, "$temp1", itp_type_head_armor),
        (le, "$temp1", itp_type_hand_armor),
        (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Sturdy"),
        (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Thick"),
        (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Hardened"),
        (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Reinforced"),
        (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Lordly"),
        (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@None"),
        (try_begin),
          (eq, ":imod", imod_sturdy),
          (overlay_set_val, "$g_presentation_obj_admin_panel_6", 0),
        (else_try),
          (eq, ":imod", imod_thick),
          (overlay_set_val, "$g_presentation_obj_admin_panel_6", 1),
        (else_try),
          (eq, ":imod", imod_hardened),
          (overlay_set_val, "$g_presentation_obj_admin_panel_6", 2),
        (else_try),
          (eq, ":imod", imod_reinforced),
          (overlay_set_val, "$g_presentation_obj_admin_panel_6", 3),
        (else_try),
          (eq, ":imod", imod_lordly),
          (overlay_set_val, "$g_presentation_obj_admin_panel_6", 4),
        (else_try),
          (overlay_set_val, "$g_presentation_obj_admin_panel_6", 5),
        (try_end),
    (else_try),
        (this_or_next | eq, "$temp1", itp_type_one_handed_wpn),
        (this_or_next | eq, "$temp1", itp_type_two_handed_wpn),
        (this_or_next | eq, "$temp1", itp_type_polearm),
        (this_or_next | eq, "$temp1", itp_type_bow),
        (this_or_next | eq, "$temp1", itp_type_crossbow),
        (this_or_next | eq, "$temp1", itp_type_pistol),
        (eq, "$temp1", itp_type_musket),
        (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Heavy"),
        (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Strong"),
        (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Balanced"),
        (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Tempered"),
        (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Masterwork"),
        (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@None"),
        (try_begin),
          (eq, ":imod", imod_heavy),
          (overlay_set_val, "$g_presentation_obj_admin_panel_6", 0),
        (else_try),
          (eq, ":imod", imod_strong),
          (overlay_set_val, "$g_presentation_obj_admin_panel_6", 1),
        (else_try),
          (eq, ":imod", imod_balanced),
          (overlay_set_val, "$g_presentation_obj_admin_panel_6", 2),
        (else_try),
          (eq, ":imod", imod_tempered),
          (overlay_set_val, "$g_presentation_obj_admin_panel_6", 3),
        (else_try),
          (eq, ":imod", imod_masterwork),
          (overlay_set_val, "$g_presentation_obj_admin_panel_6", 4),
        (else_try),
          (overlay_set_val, "$g_presentation_obj_admin_panel_6", 5),
        (try_end),
    (else_try),
        (this_or_next | eq, "$temp1", itp_type_arrows),
        (this_or_next | eq, "$temp1", itp_type_bolts),
        (this_or_next | eq, "$temp1", itp_type_bullets),
        (eq, "$temp1", itp_type_thrown),
        (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Large Bag"),
        (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Heavy"),
        (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@Balanced"),
        (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@None"),
        (try_begin),
          (eq, ":imod", imod_large_bag),
          (overlay_set_val, "$g_presentation_obj_admin_panel_6", 0),
        (else_try),
          (eq, ":imod", imod_heavy),
          (overlay_set_val, "$g_presentation_obj_admin_panel_6", 1),
        (else_try),
          (eq, ":imod", imod_balanced),
          (overlay_set_val, "$g_presentation_obj_admin_panel_6", 2),
        (else_try),
          (overlay_set_val, "$g_presentation_obj_admin_panel_6", 3),
        (try_end),
    (else_try),
        (eq, "$temp1", -1),
        (overlay_add_item, "$g_presentation_obj_admin_panel_6", "@None"),
        (overlay_set_val, "$g_presentation_obj_admin_panel_6", 0),
    (try_end),
    # (try_end),
    #end modifer selection

    #rename troop:
    (create_text_overlay, reg1, "@Singular Name:", tf_left_align),
    (position_set_x, pos1, 340),
    (position_set_y, pos1, ":cur_y"),
    (val_sub, ":cur_y", 35),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),

    (create_simple_text_box_overlay, "$g_presentation_obj_name_kingdom_1"),
    (position_set_x, pos1, 340),
    (position_set_y, pos1, ":cur_y"),
    (val_sub, ":cur_y", 45),
    (overlay_set_position, "$g_presentation_obj_name_kingdom_1", pos1),

    (str_store_troop_name, s7, "$temp_troop"),
    (overlay_set_text, "$g_presentation_obj_name_kingdom_1", s7),

    (create_text_overlay, reg1, "@Plural Name:", tf_left_align),
    (position_set_x, pos1, 340),
    (position_set_y, pos1, ":cur_y"),
    (val_sub, ":cur_y", 35),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),

    (create_simple_text_box_overlay, "$g_presentation_obj_name_kingdom_2"),
    (position_set_x, pos1, 340),
    (position_set_y, pos1, ":cur_y"),
    (val_sub, ":cur_y", 45),
    (overlay_set_position, "$g_presentation_obj_name_kingdom_2", pos1),

    (str_store_troop_name_plural, s7, "$temp_troop"),
    (overlay_set_text, "$g_presentation_obj_name_kingdom_2", s7),
    #rename troop end

    ###troop gender:
    (assign, "$g_presentation_obj_admin_panel_9", -1),
    (try_begin),
        (ge, "$cheat_mode", 1),
        (create_text_overlay, reg1, "@Gender:", tf_left_align),
        (position_set_x, pos1, 340),
        (position_set_y, pos1, ":cur_y"),
        (val_sub, ":cur_y", 35),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),

        (create_combo_button_overlay, "$g_presentation_obj_admin_panel_9"),
        (position_set_x, pos1, 450),
        (position_set_y, pos1, ":cur_y"),
        (val_sub, ":cur_y", 45),
        (overlay_set_position, "$g_presentation_obj_admin_panel_9", pos1),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 900),
        (overlay_set_size, "$g_presentation_obj_admin_panel_9", pos1),

        (overlay_add_item, "$g_presentation_obj_admin_panel_9", "@Male"),#tf_make is 0
        (overlay_add_item, "$g_presentation_obj_admin_panel_9", "@Female"),#tf_female is 1

        (troop_get_type, ":gender", "$temp_troop"),
        (overlay_set_val, "$g_presentation_obj_admin_panel_9", ":gender"),
    (try_end),
    #end troop gender

    ##item selection
    (str_clear, s1),
    (create_text_overlay, reg1, s1, tf_double_space|tf_scrollable),
    (position_set_x, pos1, 560),
    (position_set_y, pos1, 100),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 410),
    (position_set_y, pos1, 500),
    (overlay_set_area_size, reg1, pos1),
    (position_set_x, pos1, 1100),
    (position_set_y, pos1, 1100),
    (overlay_set_size, reg1, pos1),

    (str_clear, s0),
    (create_text_overlay, "$g_presentation_obj_1", s0, tf_scrollable),
    (position_set_x, pos1, 25),
    (position_set_y, pos1, 100),
    (overlay_set_position, "$g_presentation_obj_1", pos1),
    (position_set_x, pos1, 270),
    (position_set_y, pos1, 600),
    (overlay_set_area_size, "$g_presentation_obj_1", pos1),
    (set_container_overlay, "$g_presentation_obj_1"),

    (assign, ":pos_x", 0),
    # (assign, ":pos_y", 2575),
    (assign, ":pos_y", 0),
    (assign, ":slot_no", 0),

    (store_div, ":end", "$cheat_find_item_range_begin", 3),
    (val_add, ":end", 1),
    # (val_min, ":slot_no", 96),
    # (try_begin),
        # (store_mod, ":mod", "$cheat_find_item_range_begin", 3),
        # (eq, ":mod", 0),
        # (store_div, ":end", "$cheat_find_item_range_begin", 3),
    # (else_try),
        # (store_div, ":end", "$cheat_find_item_range_begin", 3),
        # (val_add, ":end", 1),
    # (try_end),

    # (assign, reg4, ":end"),
    # (assign, reg5, "$cheat_find_item_range_begin"),
    # (display_message, "@{reg4} {reg5}"),
    # (val_min, ":end", 96),

    #create dynamic item list
    (try_for_range, ":unused_height", 0, ":end"),
        (try_for_range, ":unused_width", 0, 3),
            (create_mesh_overlay, "$g_presentation_obj_1", "mesh_inv_slot"),
            (position_set_x, pos1, 890),
            (position_set_y, pos1, 830),
            (overlay_set_size, "$g_presentation_obj_1", pos1),
            (position_set_x, pos1, ":pos_x"),
            (position_set_y, pos1, ":pos_y"),
            (overlay_set_position, "$g_presentation_obj_1", pos1),
            (create_mesh_overlay, "$g_presentation_obj_1", "mesh_mp_inventory_choose"),
            (overlay_set_alpha, "$g_presentation_obj_1", 0),
            (position_set_x, pos1, 712),
            (position_set_y, pos1, 650),
            (overlay_set_size, "$g_presentation_obj_1", pos1),
            (position_set_x, pos1, ":pos_x"),
            (position_set_y, pos1, ":pos_y"),
            (overlay_set_position, "$g_presentation_obj_1", pos1),

            (troop_set_slot, "trp_temp_array_a", ":slot_no", "$g_presentation_obj_1"),
            (troop_get_slot, ":item_no", "trp_temp_array_c", ":slot_no"),

            # (store_add,":num_temp",":slot_no","$cheat_find_item_range_begin"),
            # (store_add,":item_no",":num_temp","itm_no_item"),
            (try_begin),
                # (lt, ":item_no", horses_end),
                (gt, ":item_no", 0),
                (create_mesh_overlay_with_item_id, "$g_presentation_obj_1", ":item_no"),
                (position_set_x, pos1, 890),
                (position_set_y, pos1, 830),
                (overlay_set_size, "$g_presentation_obj_1", pos1),
                (store_add, ":item_x", ":pos_x", 44),
                (store_add, ":item_y", ":pos_y", 41),
                (position_set_x, pos1, ":item_x"),
                (position_set_y, pos1, ":item_y"),
                (overlay_set_position, "$g_presentation_obj_1", pos1),
                (troop_set_slot, "trp_temp_array_b", ":item_no", "$g_presentation_obj_1"),
            (try_end),

            (val_add, ":slot_no", 1),
            (val_add, ":pos_x", 89),
        (try_end),
        (assign, ":pos_x", 0),
        (val_add, ":pos_y", 83),
    (try_end),

    (set_container_overlay, -1),
  ##end item selection

  ###begin troop inventory
    (str_clear, s1),
    (create_text_overlay, reg1, s1, tf_double_space|tf_scrollable),
    (position_set_x, pos1, 1300),
    (position_set_y, pos1, 100),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 500),
    (overlay_set_area_size, reg1, pos1),
    (position_set_x, pos1, 1100),
    (position_set_y, pos1, 1100),
    (overlay_set_size, reg1, pos1),

    (str_clear, s0),
    (create_text_overlay, "$g_presentation_obj_1", s0, tf_scrollable),
    (position_set_x, pos1, 685),
    (position_set_y, pos1, 100),
    (overlay_set_position, "$g_presentation_obj_1", pos1),
    (position_set_x, pos1, 270),
    (position_set_y, pos1, 600),
    (overlay_set_area_size, "$g_presentation_obj_1", pos1),
    (set_container_overlay, "$g_presentation_obj_1"),

    (assign, ":pos_x", 0),
    # (assign, ":pos_y", 2575),
    (assign, ":pos_y", 0),
    (assign, ":slot_no", 0),

    #create dynamic item list
    (try_for_range, ":unused_height", 0, 11),
        (try_for_range, ":unused_width", 0, 3),
            (create_mesh_overlay, "$g_presentation_obj_1", "mesh_inv_slot"),
            (position_set_x, pos1, 890),
            (position_set_y, pos1, 830),
            (overlay_set_size, "$g_presentation_obj_1", pos1),
            (position_set_x, pos1, ":pos_x"),
            (position_set_y, pos1, ":pos_y"),
            (overlay_set_position, "$g_presentation_obj_1", pos1),
            (create_mesh_overlay, "$g_presentation_obj_1", "mesh_mp_inventory_choose"),
            (overlay_set_alpha, "$g_presentation_obj_1", 0),
            (position_set_x, pos1, 712),
            (position_set_y, pos1, 650),
            (overlay_set_size, "$g_presentation_obj_1", pos1),
            (position_set_x, pos1, ":pos_x"),
            (position_set_y, pos1, ":pos_y"),
            (overlay_set_position, "$g_presentation_obj_1", pos1),

            (troop_set_slot, "trp_temp_array_olympia_a", ":slot_no", "$g_presentation_obj_1"),
            (troop_get_slot, ":item_no", "trp_temp_array_olympia_c", ":slot_no"),

            # (store_add,":num_temp",":slot_no","$cheat_find_item_range_begin"),
            # (store_add,":item_no",":num_temp","itm_no_item"),
            (try_begin),
                # (lt, ":item_no", horses_end),
                (gt, ":item_no", 0),
                (create_mesh_overlay_with_item_id, "$g_presentation_obj_1", ":item_no"),
                (position_set_x, pos1, 890),
                (position_set_y, pos1, 830),
                (overlay_set_size, "$g_presentation_obj_1", pos1),
                (store_add, ":item_x", ":pos_x", 44),
                (store_add, ":item_y", ":pos_y", 41),
                (position_set_x, pos1, ":item_x"),
                (position_set_y, pos1, ":item_y"),
                (overlay_set_position, "$g_presentation_obj_1", pos1),
                (troop_set_slot, "trp_temp_array_olympia_b", ":item_no", "$g_presentation_obj_1"),
            (try_end),

            (val_add, ":slot_no", 1),
            (val_add, ":pos_x", 89),
        (try_end),
        (assign, ":pos_x", 0),
        (val_add, ":pos_y", 83),
    (try_end),

    (set_container_overlay, -1),
    ##end troop inventory

    (create_game_button_overlay, "$g_presentation_obj_12", "str_done", 0),
    (position_set_x, pos1, 750),
    (position_set_y, pos1, 20),
    (overlay_set_position, "$g_presentation_obj_12", pos1),
    # (position_set_x, pos2, 50),
    # (position_set_y, pos2, 50),
    # (overlay_set_area_size, "$g_presentation_obj_12", pos2),

    (presentation_set_duration, 999999),
  ]),

  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":object"),
    (store_trigger_param_2, ":value"),

		(try_begin),
        (eq, ":object", "$g_presentation_obj_name_kingdom_1"),
        (str_store_string, s7, s0),
        (store_add, ":inventory_troop", "$temp_troop", 1),
        (troop_set_name, "$temp_troop", s7),
        (troop_set_name, ":inventory_troop", s7),
        (start_presentation, "prsnt_custom_troop_weapon_selection"),
    (else_try),
			  (eq,":object","$g_presentation_obj_12"),
        (try_begin),#assign globals properly for this special presentation
            (eq, "$g_presentation_next_presentation", "prsnt_barracks"),
            (assign, "$temp4", 2),
            (assign, reg43, 1),
            (assign, "$temp4_1", 3),
            (assign, "$g_next_menu", "mnu_barracks"),
        (try_end),
        (start_presentation, "$g_presentation_next_presentation"),
        (call_script, "script_finish_customizing", "$temp_troop"),
        # (change_screen_return),
		(else_try),
        (eq, ":object", "$g_presentation_obj_name_kingdom_2"),
        (str_store_string, s7, s0),
        (store_add, ":inventory_troop", "$temp_troop", 1),
        (troop_set_plural_name, "$temp_troop", s7),
        (troop_set_plural_name, ":inventory_troop", s7),
        (start_presentation, "prsnt_custom_troop_weapon_selection"),
		(else_try),
        (eq, ":object", "$g_presentation_obj_admin_panel_9"),
        (store_add, ":inventory_troop", "$temp_troop", 1),
        (troop_set_type, "$temp_troop", ":value"),
        (troop_set_type, ":inventory_troop", ":value"),
        (start_presentation, "prsnt_custom_troop_weapon_selection"),
    (else_try),
        (eq, ":object", "$g_presentation_obj_admin_panel_7"),
        (assign, "$temp3", ":value"),
        (start_presentation, "prsnt_custom_troop_weapon_selection"),
    (else_try),
        (eq, ":object", "$g_presentation_obj_admin_panel_10"),
        (assign, "$temp2", ":value"),
        (start_presentation, "prsnt_custom_troop_weapon_selection"),
		(else_try),
        (eq, ":object", "$g_presentation_obj_admin_panel_6"),
        (try_begin),
            (eq, "$temp1", itp_type_horse),
            (try_begin),
                (eq, ":value", 0),
                (assign, "$temp4_1", imod_heavy),
            (else_try),
                (eq, ":value", 1),
                (assign, "$temp4_1", imod_spirited),
            (else_try),
                (eq, ":value", 2),
                (assign, "$temp4_1", imod_champion),
            (else_try),
                (assign, "$temp4_1", -1),
            (try_end),
        (else_try),
            (eq, "$temp1", itp_type_shield),
            (try_begin),
                (eq, ":value", 0),
                (assign, "$temp4_1", imod_thick),
            (else_try),
                (eq, ":value", 1),
                (assign, "$temp4_1", imod_reinforced),
            (else_try),
                (eq, ":value", 2),
                (assign, "$temp4_1", -1),
            (try_end),
        (else_try),
            (ge, "$temp1", itp_type_head_armor),
            (le, "$temp1", itp_type_hand_armor),
            (try_begin),
                (eq, ":value", 0),
                (assign, "$temp4_1", imod_sturdy),
            (else_try),
                (eq, ":value", 1),
                (assign, "$temp4_1", imod_thick),
            (else_try),
                (eq, ":value", 2),
                (assign, "$temp4_1", imod_hardened),
            (else_try),
                (eq, ":value", 3),
                (assign, "$temp4_1", imod_reinforced),
            (else_try),
                (eq, ":value", 4),
                (assign, "$temp4_1", imod_lordly),
            (else_try),
                (assign, "$temp4_1", -1),
            (try_end),
        (else_try),
            (this_or_next | eq, "$temp1", itp_type_one_handed_wpn),
            (this_or_next | eq, "$temp1", itp_type_two_handed_wpn),
            (this_or_next | eq, "$temp1", itp_type_polearm),
            (this_or_next | eq, "$temp1", itp_type_bow),
            (this_or_next | eq, "$temp1", itp_type_crossbow),
            (this_or_next | eq, "$temp1", itp_type_pistol),
            (eq, "$temp1", itp_type_musket),
            (try_begin),
                (eq, ":value", 0),
                (assign, "$temp4_1", imod_heavy),
            (else_try),
                (eq, ":value", 1),
                (assign, "$temp4_1", imod_strong),
            (else_try),
                (eq, ":value", 2),
                (assign, "$temp4_1", imod_balanced),
            (else_try),
                (eq, ":value", 3),
                (assign, "$temp4_1", imod_tempered),
            (else_try),
                (eq, ":value", 4),
                (assign, "$temp4_1", imod_masterwork),
            (else_try),
                (assign, "$temp4_1", -1),
            (try_end),
        (else_try),
            (this_or_next | eq, "$temp1", itp_type_arrows),
            (this_or_next | eq, "$temp1", itp_type_bolts),
            (this_or_next | eq, "$temp1", itp_type_bullets),
            (eq, "$temp1", itp_type_thrown),
            (try_begin),
                (eq, ":value", 0),
                (assign, "$temp4_1", imod_large_bag),
            (else_try),
                (eq, ":value", 1),
                (assign, "$temp4_1", imod_heavy),
            (else_try),
                (eq, ":value", 2),
                (assign, "$temp4_1", imod_balanced),
            (else_try),
                (assign, "$temp4_1", -1),
            (try_end),
        (else_try),
            (eq, "$temp", -1),
            (assign, "$temp4_1", -1),
        (try_end),
        (start_presentation, "prsnt_custom_troop_weapon_selection"),
    (try_end),
  ]),

  (ti_on_presentation_mouse_enter_leave,[
    (store_trigger_param_1, ":object"),
    (store_trigger_param_2, ":enter_leave"),

    (try_begin),
        (eq, ":enter_leave", 0),
        (store_add, ":end", "$cheat_find_item_range_begin", 1),
        (try_for_range, ":slot_no", 0, ":end"),
            (troop_slot_eq, "trp_temp_array_a", ":slot_no", ":object"),
            (troop_get_slot, ":item_no", "trp_temp_array_c", ":slot_no"),
            (try_begin),
                (gt, ":item_no", 0),
                (troop_get_slot, ":target_obj", "trp_temp_array_b", ":item_no"),
                (overlay_get_position, pos0, ":target_obj"),
                (show_item_details, ":item_no", pos0, 100),
                (assign, "$g_current_opened_item_details", ":item_no"),
            (try_end),
        (try_end),

        (try_for_range, ":slot_no", 0, 33),
            (troop_slot_eq, "trp_temp_array_olympia_a", ":slot_no", ":object"),
            (troop_get_slot, ":item_no", "trp_temp_array_olympia_c", ":slot_no"),
            (try_begin),
                (gt, ":item_no", 0),
                (troop_get_slot, ":target_obj", "trp_temp_array_olympia_b", ":item_no"),
                (overlay_get_position, pos0, ":target_obj"),
                (store_add, ":troop_inventory", "$temp_troop", 1),
                (troop_get_slot, ":item_modifier", ":troop_inventory", ":item_no"),#use it to store item modifier
                (show_item_details_with_modifier, ":item_no", ":item_modifier", pos0, 100),
                (assign, "$g_current_opened_item_details", ":item_no"),
            (try_end),
        (try_end),
    (else_try),
        (store_add, ":end", "$cheat_find_item_range_begin", 1),
        (try_for_range, ":slot_no", 0, ":end"),
            (troop_slot_eq, "trp_temp_array_a", ":slot_no", ":object"),
            (try_begin),
                (eq, "$g_current_opened_item_details", ":item_no"),
                (close_item_details),
            (try_end),
        (try_end),
        (try_for_range, ":slot_no", 0, 33),
            (troop_slot_eq, "trp_temp_array_olympia_a", ":slot_no", ":object"),
            (try_begin),
                (eq, "$g_current_opened_item_details", ":item_no"),
                (close_item_details),
            (try_end),
        (try_end),
    (try_end),
  ]),

  (ti_on_presentation_mouse_press,[
	  (store_trigger_param_1, ":object"),
    (store_trigger_param_2, ":mouse_state"),

    (try_begin),#add items with left mouse button
        (eq, ":mouse_state", 0),
        (store_add, ":end", "$cheat_find_item_range_begin", 1),
        (try_for_range, ":slot_no", 0, ":end"),
            (troop_slot_eq, "trp_temp_array_a", ":slot_no", ":object"),
            (troop_get_slot, ":item_no", "trp_temp_array_c", ":slot_no"),
            (try_begin),
            (eq, "$current_item", -1),
            (gt, ":item_no", 0),
            (troop_get_slot, ":target_obj", "trp_temp_array_b", ":item_no"),
            (assign,"$current_item",":item_no"),
            (overlay_set_display, ":target_obj", 0),
            (create_mesh_overlay_with_item_id, "$g_presentation_credits_obj_1", "$current_item"),
            (position_set_x, pos1, 1000),
            (position_set_y, pos1, 1000),
            (overlay_set_size, "$g_presentation_credits_obj_1", pos1),
		   (else_try),
			      (eq, "$current_item", ":item_no"),
            (troop_get_slot, ":target_obj", "trp_temp_array_b", ":item_no"),
            (overlay_set_display,":target_obj", 1),
            (assign,"$g_presentation_credits_obj_1",-1),
            (assign,"$current_item",-1),
            (start_presentation, "prsnt_custom_troop_weapon_selection"),
        (try_end),
    (try_end),
        (try_begin),
            (gt,"$current_item",-1),
            (try_for_range, ":slot_no", 0, 33),
                (troop_slot_eq, "trp_temp_array_olympia_a", ":slot_no", ":object"),
                (troop_get_slot, ":slot_item","trp_temp_array_olympia_c", ":slot_no"),

                (try_begin),
                    (gt, ":slot_item", -1),
                    (troop_get_slot, ":target_obj","trp_temp_array_olympia_b", ":slot_item"),
                    (overlay_get_position, pos0, ":target_obj"),
                    (overlay_set_display, ":target_obj", 0),
                    (overlay_set_position, "$g_presentation_credits_obj_1", pos0),
                    (troop_set_slot, "trp_temp_array_olympia_c", ":slot_no", "$current_item"),

                    #removing old item
                    (store_add, ":inventory_troop", "$temp_troop", 1),
                    (troop_remove_item, "$temp_troop", ":slot_item"),
                    (troop_remove_item, ":inventory_troop", ":slot_item"),

                    #adding new item
                    (troop_add_item, ":inventory_troop", "$current_item", "$temp4_1"),
                    (troop_add_item, "$temp_troop", "$current_item", "$temp4_1"),
                    (troop_equip_items, "$temp_troop"),

                    (assign,"$g_presentation_credits_obj_1",-1),
                    (assign,"$current_item",-1),
                    (start_presentation, "prsnt_custom_troop_weapon_selection"),
                (else_try),
                    (overlay_get_position, pos0, ":object"),
                    (overlay_set_position, "$g_presentation_credits_obj_1", pos0),
                    (troop_set_slot, "trp_temp_array_olympia_c", ":slot_no", "$current_item"),

                    #adding new item
                    (troop_add_item, ":inventory_troop", "$current_item"),
                    (troop_add_item, "$temp_troop", "$current_item"),
                    (troop_equip_items, "$temp_troop"),

                    (assign,"$g_presentation_credits_obj_1",-1),
                    (assign,"$current_item",-1),
                    (start_presentation, "prsnt_custom_troop_weapon_selection"),
                (try_end),
            (try_end),
        (try_end),
	  (else_try),#remove items with right mouse button
        (eq, ":mouse_state", 1),
        (try_begin),
            (gt,"$current_item",-1),

            (assign,"$g_presentation_credits_obj_1",-1),
            (assign,"$current_item",-1),
            (start_presentation, "prsnt_custom_troop_weapon_selection"),
        (else_try),
            (try_for_range, ":slot_no", 0, 33),
                (troop_slot_eq, "trp_temp_array_olympia_a", ":slot_no", ":object"),
                (troop_get_slot, ":slot_item","trp_temp_array_olympia_c", ":slot_no"),
                (gt, ":slot_item", -1),
                (troop_set_slot, "trp_temp_array_c", ":slot_no", -1),

                #removing items
                (store_add, ":inventory_troop", "$temp_troop", 1),
                (troop_remove_item, "$temp_troop", ":slot_item"),
                (troop_remove_item, ":inventory_troop", ":slot_item"),
                (troop_equip_items, "$temp_troop"),

                (start_presentation, "prsnt_custom_troop_weapon_selection"),
            (try_end),
        (try_end),
        (start_presentation, "prsnt_custom_troop_weapon_selection"),
    (try_end),
  ]),
  (ti_on_presentation_run,[
    (set_fixed_point_multiplier, 1000),

    (try_begin),
        (key_clicked, key_escape),
        (start_presentation, "$g_presentation_next_presentation"),
        (call_script, "script_finish_customizing", "$temp_troop"),
        # (change_screen_return),
        # (jump_to_menu, "$g_next_menu"),
        # (presentation_set_duration, 0),
    (try_end),

    (try_begin),
        (gt,"$current_item",-1),
        (gt,"$g_presentation_credits_obj_1",-1),
        (mouse_get_position, pos1),
        (overlay_set_position, "$g_presentation_credits_obj_1", pos1),
    (try_end),
  ]),
]),
#####################END presentation to customize troop ####################################################################################################################################################################################


##################presentation to customize legion and auxiliar units ############################################################################################################################################################################
("custom_troop_tree_legion", 0, mesh_load_window, [
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    #initialization of variables
    (try_for_range, ":slot_no", 0, 80),
        (troop_set_slot, "trp_temp_array_a", ":slot_no", 0),
        (troop_set_slot, "trp_temp_array_b", ":slot_no", 0),
    (try_end),

    #choosing name:
    (create_text_overlay, reg1, "@Change Name", tf_center_justify),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 660),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 970),
    (position_set_y, pos1, 970),
    (overlay_set_area_size, reg1, pos1),

    (create_simple_text_box_overlay, "$g_presentation_obj_name_kingdom_1"),
    (position_set_x, pos1, 400),
    (position_set_y, pos1, 620),
    (overlay_set_position, "$g_presentation_obj_name_kingdom_1", pos1),
    (str_store_troop_name_plural, s7, "$g_player_troop"),
    (overlay_set_text, "$g_presentation_obj_name_kingdom_1", s7),

    # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
    (str_clear, s0),
    (create_text_overlay, reg43, s0, tf_scrollable_style_2),
    (position_set_x, pos1, 50),
    (position_set_y, pos1, 70),
    (overlay_set_position, reg43, pos1),
    (position_set_x, pos1, 970),
    (position_set_y, pos1, 527),
    (overlay_set_area_size, reg43, pos1),

    (set_container_overlay, reg43),#start scroll

    (try_begin),
        (eq, "$g_player_troop", "trp_players_infantry"),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 5, "trp_custom_infantry", 60, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 4, "trp_custom_infantry_exp", 210, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 3, "trp_custom_infantry_vet", 360, 110),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 2, "trp_custom_standard_bearer", 560, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 1, "trp_custom_hornman", 710, 110),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 210),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 210),
    (else_try),
        (eq, "$g_player_troop", "trp_players_cavalry"),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 5, "trp_custom_standard_bearer_cav", 60, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 4, "trp_custom_skirmisher_cav", 210, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 3, "trp_custom_skirmisher_cav_vet", 360, 110),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 2, "trp_custom_cav_barb", 560, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 1, "trp_custom_cav_barb_vet", 710, 110),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 210),
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 615, 210),
    (else_try),
        (eq, "$g_player_troop", "trp_players_skirmisher"),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 5, "trp_custom_standard_bearer_skirmisher", 60, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 4, "trp_custom_skirmisher", 210, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 3, "trp_custom_skirmisher_vet", 360, 110),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 2, "trp_custom_hornman_skirmisher", 560, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 1, "trp_custom_archer", 710, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 0, "trp_custom_archer_vet", 860, 110),

        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 210),
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 765, 210),
    (else_try),
        (eq, "$g_player_troop", "trp_players_legion"),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 9, "trp_custom_cornicen", 560, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 10, "trp_custom_balista", 710, 310),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 8, "trp_custom_vexilarius", 60, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 7, "trp_custom_tribunus", 210, 310),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 6, "trp_custom_primus_pilius", 360, 310),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 5, "trp_custom_legionary", 60, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 4, "trp_custom_legionary_exp", 210, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 3, "trp_custom_legionary_vet", 360, 110),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 2, "trp_custom_centurio", 560, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 1, "trp_custom_aquilifer", 710, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 0, "trp_custom_signifer", 860, 110),

        ##lines
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 115, 210),##45 space for x
        (call_script, "script_prsnt_upgrade_tree_lines", 25, 4, 260, 210),
    (else_try),
        (eq, "$g_player_troop", "trp_players_aux_cav"),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 3, "trp_custom_cav", 360, 110),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 2, "trp_custom_aux_cav", 560, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 1, "trp_custom_cav_vex", 710, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 0, "trp_custom_cav_of", 860, 110),
    (else_try),
        (eq, "$g_player_troop", "trp_players_aux_inf"),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 5, "trp_custom_aux_cornicern", 60, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 4, "trp_custom_aux_centurio", 210, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 3, "trp_custom_aux_signifer", 360, 110),

        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 2, "trp_custom_sagitarius", 560, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 1, "trp_custom_aux_miles", 710, 110),
        (call_script, "script_prsnt_upgrade_tree_troop_and_name", 0, "trp_custom_aux_spear", 860, 110),
    (try_end),
    (set_container_overlay, -1),#end scroll

    (try_begin),
        (eq, "$g_player_troop", "trp_players_legion"),
        # (eq, "$temp4", 1),
        (create_game_button_overlay, "$g_presentation_obj_11", "@Change Banner", 0),
        (position_set_x, pos1, 200),
        (position_set_y, pos1, 615),
        (overlay_set_position, "$g_presentation_obj_11", pos1),

        (troop_get_slot, ":cur_banner_mesh", "trp_players_legion", slot_troop_banner_scene_prop),
        (gt, ":cur_banner_mesh", 0),
        (val_sub, ":cur_banner_mesh", banner_scene_props_begin),
        (val_add, ":cur_banner_mesh", banner_meshes_begin),
        (create_mesh_overlay, reg1, ":cur_banner_mesh"),
        (position_set_x, pos1, 200),
        (position_set_y, pos1, 730),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 70),
        (position_set_y, pos1, 70),
        (overlay_set_size, reg1, pos1),
    (else_try),
        (assign, "$g_presentation_obj_11", -1),
    (try_end),

    # additional hints
    (create_text_overlay, reg1, "@You can customize the equipment and name of troops by clicking on them.", tf_scrollable_style_2),
    (position_set_x, pos1, 625),
    (position_set_y, pos1, 275),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 300),
    (position_set_y, pos1, 450),
    (overlay_set_area_size, reg1, pos1),

    (create_game_button_overlay, "$g_presentation_obj_12", "str_done", 0),
    (position_set_x, pos1, 750),
    (position_set_y, pos1, 30),
    (overlay_set_position, "$g_presentation_obj_12", pos1),
  ]),

  (ti_on_presentation_run, [
    (try_begin),
        (key_clicked, key_escape),
        (presentation_set_duration, 0),
        (jump_to_menu, "$g_next_menu"),
    (try_end),
  ]),

  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":object"),
    (try_begin),
        (eq, "$g_presentation_obj_name_kingdom_1", ":object"),
        (str_store_string, s7, s0),
        (troop_set_plural_name, "$g_player_troop", s7),
        (troop_set_name, "$g_player_troop", s7),
        (start_presentation, "prsnt_custom_troop_tree_legion"),
        (store_add, ":slot", slot_legion_commanders_begin, 13),#player legion
        (troop_get_slot, ":legate", "trp_province_array", ":slot"),
        (try_begin),
            (ge, ":legate", 1),
            (troop_get_slot, ":leaded_party", ":legate", slot_troop_leaded_party),
            (party_is_active, ":leaded_party"),
            (party_set_extra_text, ":leaded_party", s7),
        (try_end),
    (else_try),
        (eq,":object","$g_presentation_obj_12"),
        (presentation_set_duration, 0),
        (jump_to_menu, "$g_next_menu"),
    (else_try),
        (eq,":object","$g_presentation_obj_11"),
        (assign, "$g_edit_banner_troop", "trp_players_legion"),
        (assign, "$g_presentation_next_presentation", "prsnt_custom_troop_tree_legion"),
        (start_presentation, "prsnt_banner_selection"),
    (else_try),
        (try_for_range, ":slot_no", 0, 80),
            (troop_slot_eq, "trp_temp_array_a", ":slot_no", ":object"),
            (troop_get_slot, ":troop", "trp_temp_array_b", ":slot_no"),
            (assign, "$g_presentation_next_presentation", "prsnt_custom_troop_tree_legion"),
            (call_script, "script_start_customizing", ":troop"),
        (try_end),
    (try_end),
  ]),
]),
###end presentation to customize legion and auxiliar unit ##################################################################################################################################

("recruit_cohorts", 0, mesh_load_window, [
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    #init variables
    (assign, ":num_recruitable_cohorts", 0),

    (try_for_range, ":cohort", "pt_mercenary_guard", "pt_germans"),
        (troop_set_slot, "trp_temp_array_b", ":cohort", 0),
        (call_script, "script_cf_can_hire_cohort", ":cohort", "$g_encountered_party"),
        (val_add, ":num_recruitable_cohorts", 1),
    (try_end),

    # #0. BACKROUND
    # (create_mesh_overlay, reg0, "mesh_load_window"),
    # (position_set_x, pos1, -1),
    # (position_set_y, pos1, -1),
    # (overlay_set_position, reg0, pos1),
    # (position_set_x, pos1, 1002),
    # (position_set_y, pos1, 1002),
    # (overlay_set_size, reg0, pos1),


    (create_text_overlay, reg1, "@Select a military unit by pressing on its name.", tf_center_justify|tf_with_outline),
    (position_set_x, pos1, 1200),
    (position_set_y, pos1, 1200),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 500), # Higher, means more toward the right
    (position_set_y, pos1, 710), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (overlay_set_color, reg1, 0x00007F),


     ###on top, info about players party
    (create_text_overlay, "$g_presentation_obj_28", "@Your party information", tf_left_align),
    (position_set_x, pos1, 785),
    (position_set_y, pos1, 710),
    (overlay_set_position, "$g_presentation_obj_28", pos1),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, "$g_presentation_obj_28", pos1),
    (overlay_set_color, "$g_presentation_obj_28", 0x00007F),

    (store_party_size_wo_prisoners, reg1, "p_main_party"),
    (call_script, "script_calculate_weekly_party_wage", "p_main_party"),
    (assign, reg2, reg0),

    (call_script, "script_game_get_party_companion_limit", "p_main_party"),
    (assign, ":party_size", reg0),
    (assign, reg3, ":party_size"),
    (store_troop_gold, reg4, "trp_player"),

    (call_script, "script_get_cohort_limit", "p_main_party"),
    (store_sub, reg5, reg0, slot_cohort_1),

    (create_text_overlay, "$g_presentation_obj_27", "@Party size: {reg1} men.^Wage: {reg2} denars.^Party limit: {reg3} men.^Your gold: {reg4} denars.^Cohort limit: {reg5} cohorts.", tf_left_align),
    (position_set_x, pos1, 785),
    (position_set_y, pos1, 630),
    (overlay_set_position, "$g_presentation_obj_27", pos1),
    (position_set_x, pos1, 920),
    (position_set_y, pos1, 920),
    (overlay_set_size, "$g_presentation_obj_27", pos1),

    (call_script, "script_display_available_recruits", "$g_encountered_party"),

    (try_begin),
        (ge, "$g_rank", 1),
        (troop_get_slot, ":money_limit", "trp_global_variables", g_player_recruitement_limit),
        (assign, reg2, ":money_limit", ),
        (create_text_overlay, reg1, "@Imperial treasury funds: {reg2}.", tf_left_align),
        (position_set_x, pos1, 785),
        (position_set_y, pos1, 540),

        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 920),
        (position_set_y, pos1, 920),
        (overlay_set_size, reg1, pos1),
    (try_end),

    # Back to menu - graphical button
    (create_game_button_overlay, reg1, "str_return"),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 23),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_jrider_faction_report_return_to_menu", reg1),

    (create_game_button_overlay, reg1, "@Manage your cohorts"),
    (position_set_x, pos1, 750),
    (position_set_y, pos1, 23),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_2", reg1),

    ##creat a lines
    (create_mesh_overlay, reg1, "mesh_white_plane"),
    (overlay_set_color, reg1, 0x000000),#line color
    (position_set_x, pos3, 200000),
    (position_set_y, pos3, 50),
    (overlay_set_size, reg1, pos3),
    (position_set_x, pos3, 0),
    (position_set_y, pos3, 530),
    (overlay_set_position, reg1, pos3),

    (assign, "$g_presentation_obj_1", -1),
    (try_begin),
        (this_or_next|is_between, "$temp", "pt_mercenary_guard", "pt_steppe_bandit_lair"),
        (is_between, "$temp", "pt_legio_i_adjutrix_staff", "pt_germans"),
        (call_script, "script_get_cohort_name_to_s5", "$temp"),
        (create_text_overlay, reg1, "@Selected unit: {s5}", tf_left_align),
        (position_set_x, pos1, 25), # Higher, means more toward the right
        (position_set_y, pos1, 710), # Higher, means more toward the top
        (overlay_set_position, reg1, pos1),
        (overlay_set_color, reg1, 0x00007F),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),

        (call_script, "script_get_representative_troop_for_cohort", "$temp"),
        (store_mul, ":troop", reg0, 2),
        (create_mesh_overlay_with_tableau_material, reg0, -1, "tableau_troop_tree_pic", ":troop"),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, 515),
        (overlay_set_position, reg0, pos1),
        (position_set_x, pos3, 250),
        (position_set_y, pos3, 250),
        (overlay_set_size, reg0, pos3),

        (call_script, "script_get_cohort_info_to_s5", "$temp"),
        (create_text_overlay, reg1, s5, tf_scrollable_style_2),
        (position_set_x, pos1, 140),
        (position_set_y, pos1, 535),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 330),
        (position_set_y, pos1, 100),
        (overlay_set_area_size, reg1, pos1),

        # Back to menu - graphical button
        (create_game_button_overlay, reg1, "@Recruit"),
        (position_set_x, pos1, 250),
        (position_set_y, pos1, 650),
        (overlay_set_position, reg1, pos1),
        # (position_set_x, pos3, 1090),
        # (position_set_y, pos3, 1000),
        # (overlay_set_size, reg1, pos3),
        (assign, "$g_presentation_obj_1", reg1),
    (try_end),

    (create_text_overlay, reg1, "@Available military units:", tf_left_align),
    (position_set_x, pos1, 25), # Higher, means more toward the right
    (position_set_y, pos1, 510), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (overlay_set_color, reg1, 0x00007F),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),

    # # clear the string globals that we'll use
    (str_clear, s0),
    # # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
    (create_text_overlay, reg1, s0, tf_scrollable_style_2),
    (position_set_x, pos1, 50),
    (position_set_y, pos1, 75),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 425),
    (overlay_set_area_size, reg1, pos1),


    # (position_set_x, pos1, 0),
    (store_div, ":y_name", ":num_recruitable_cohorts", 4),##get y for size of the scrollable overlay
    (assign, reg2, ":y_name"),
    (val_mul, ":y_name", 250),
    (assign, ":x_name", 0),
    #text size
    (position_set_x, pos2, 925),
    (position_set_y, pos2, 925),

    # (assign, ":slot", 0),
    (set_container_overlay, reg1),#start scroll

    (try_for_range_backwards, ":cohort", "pt_mercenary_guard", "pt_germans"),
        (call_script, "script_cf_can_hire_cohort", ":cohort", "$g_encountered_party"),
        (try_begin),
            (gt, ":x_name", 690),
            (assign, ":x_name", 0),
            (val_sub, ":y_name", 220),
        (try_end),

        (call_script, "script_get_representative_troop_for_cohort", ":cohort"),
        (store_mul, ":troop", reg0, 2),
        (create_mesh_overlay_with_tableau_material, reg0, -1, "tableau_troop_tree_pic", ":troop"),
        (position_set_x, pos1, ":x_name"),
        (position_set_y, pos1, ":y_name"),
        (overlay_set_position, reg0, pos1),
        (position_set_x, pos3, 250),
        (position_set_y, pos3, 250),
        (overlay_set_size, reg0, pos3),

        # #creat button
        (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
        (position_set_x, pos1, ":x_name"),
        (store_sub, ":y_new", ":y_name", 20),
        (position_set_y, pos1, ":y_new"),
        (overlay_set_position, reg10, pos1),
        (position_set_x, pos3, 500),
        (position_set_y, pos3, 4000),
        (overlay_set_size, reg10, pos3),
        (overlay_set_alpha, reg10, 0),
        (overlay_set_color, reg10, 0xDDDDDD),
        (troop_set_slot, "trp_temp_array_b", ":cohort", reg10),


        (call_script, "script_get_cohort_name_to_s5", ":cohort"),
        (create_text_overlay, reg1, "@{s5}", tf_vertical_align_center),
        (position_set_x, pos1, ":x_name"),
        (position_set_y, pos1, ":y_new"),
        (overlay_set_position, reg1, pos1),
        (overlay_set_size, reg1, pos2),

        (val_add, ":x_name", 230),
    (try_end),
    (set_container_overlay, -1),#end scroll
  ]),
   ## Check for buttonpress
  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":button_pressed_id"),
    (try_begin),
        (eq, ":button_pressed_id", "$g_jrider_faction_report_return_to_menu"), # pressed  (Return to menu)
        (presentation_set_duration, 0),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_2"),
        (assign, "$temp", -1),
        (assign, "$temp2", -1),
        (assign, "$temp4_1", "prsnt_recruit_cohorts"),
        (start_presentation, "prsnt_manage_cohorts"),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_1"),
        (call_script, "script_get_cohort_info_to_s5", "$temp"),
        (store_troop_gold, ":g", "trp_player"),
        (try_begin),
            (ge, "$g_rank", 1),
            (troop_get_slot, ":imperial_funds", "trp_global_variables", g_player_recruitement_limit),
            (val_add, ":g", ":imperial_funds"),
        (try_end),
        # (party_get_slot, ":nobles", "$g_encountered_party", slot_center_volunteer_noble_troop_amount),
        # (party_get_slot, ":peasants", "$g_encountered_party", slot_center_peasant_troop_amount),
        # (party_get_slot, ":mercenaries", "$g_encountered_party", slot_center_mercenary_troop_amount_2),
        (assign, ":nobles", 0),
        (assign, ":peasants", 0),
        (assign, ":mercenaries", 0),
        (party_get_slot, ":province", "$current_town", slot_center_province),
        (try_for_range, ":center", centers_begin, centers_end),
            (party_slot_eq, ":center", slot_center_province, ":province"),
            (store_faction_of_party, ":center_faction", ":center"),
            (eq, ":center_faction", "$g_encountered_party_faction"),
            (party_get_slot, ":cur_number_nobles", ":center", slot_center_volunteer_noble_troop_amount),
            (val_add, ":nobles", ":cur_number_nobles"),
            (party_get_slot, ":cur_number_peasants", ":center", slot_center_peasant_troop_amount),
            (val_add, ":peasants", ":cur_number_peasants"),
            (party_get_slot, ":cur_number_mercenaries", ":center", slot_center_mercenary_troop_amount_2),
            (val_add, ":mercenaries", ":cur_number_mercenaries"),
        (try_end),

        (try_begin),
            (lt, ":g", reg6),
            (display_message, "str_not_enough_gold"),
        (else_try),
            (neg|troops_can_join, reg2),
            (display_message, "@Not enough party space"),
        (else_try),
            (lt, ":nobles", reg3),
            (try_begin),
                (faction_slot_eq, "$g_encountered_party_faction", slot_faction_culture, "fac_culture_7"),
                (str_store_string, s4, "@officers"),
            (else_try),
                (str_store_string, s4, "@nobles"),
            (try_end),
            (display_message, "@Not enough {s4} available in province."),
        (else_try),
            (lt, ":peasants", reg4),
            (display_message, "@Not enough recruits available in province."),
        (else_try),
            (lt, ":mercenaries", reg7),
            (display_message, "@Not enough mercenaries available in province."),
        (else_try),
            (call_script, "script_get_cohort_limit", "p_main_party"),
            (assign, ":end", reg0),
            (try_for_range, ":cohort", slot_cohort_begin, ":end"),
                (party_slot_eq, "p_main_party", ":cohort", 0),
                (assign, ":end", -1),
                (party_set_slot, "p_main_party", ":cohort", "$temp"),
            (try_end),
            (try_begin),
                (eq, ":end", -1),
                (party_add_template, "p_main_party", "$temp"),
                (call_script, "script_get_cohort_name_to_s5", "$temp"),
                (display_message, "@You recruited a {s5}"),
                # (val_sub, ":nobles", reg3),
                # (val_sub, ":peasants", reg4),
                # (val_sub, ":mercenaries", reg7),
                # (party_set_slot, "$g_encountered_party", slot_center_mercenary_troop_amount_2, ":mercenaries"),
                # (party_set_slot, "$g_encountered_party", slot_center_volunteer_noble_troop_amount, ":nobles"),
                # (party_set_slot, "$g_encountered_party", slot_center_peasant_troop_amount, ":peasants"),

                (call_script, "script_take_recruits_from_province", "$g_encountered_party", "$g_encountered_party_faction", reg3, reg4, reg7),

                (try_begin),
                    (ge, "$g_is_emperor", 1),
                    (call_script, "script_add_to_faction_bugdet", slot_faction_hire, "$players_kingdom", reg6),
                    (display_message, "@{reg6} denars were taken from the imperial treasury on your order to hire {s5}."),
                (else_try),
                    (ge, "$g_rank", 1),
                    (troop_get_slot, ":imperial_funds", "trp_global_variables", g_player_recruitement_limit),
                    (display_message, "@{reg6} denars were taken from the imperial treasury on your order to hire {s5}."),
                    (call_script, "script_add_to_faction_bugdet", slot_faction_hire, "$players_kingdom", reg6),
                    (val_sub, ":imperial_funds", reg6),
                    (try_begin),
                        (ge, ":imperial_funds", 0),
                        (assign, reg6, 0),
                        (troop_set_slot, "trp_global_variables", g_player_recruitement_limit, ":imperial_funds"),
                    (else_try),
                        (val_abs, ":imperial_funds"),
                        (assign, reg6, ":imperial_funds"),
                        (troop_set_slot, "trp_global_variables", g_player_recruitement_limit, 0),
                    (try_end),
                    (eq, reg6, 0),
                (else_try),
                    (troop_remove_gold, "trp_player", reg6),
                (try_end),
            (else_try),
                (display_message, "@You reached the maximum of cohorts you can command."),
            (try_end),
        (try_end),
        (start_presentation, "prsnt_recruit_cohorts"),
    (else_try),
        (assign, ":end", "pt_germans"),
        (try_for_range, ":slot", "pt_mercenary_guard", ":end"),
            (troop_slot_eq, "trp_temp_array_b", ":slot", ":button_pressed_id"),
            (assign, ":end", -1),
        (try_end),
        (eq, ":end", -1),
        (assign, "$temp", ":slot"),
        (start_presentation, "prsnt_recruit_cohorts"),
    (try_end),
  ]),

  (ti_on_presentation_run, [
    (try_begin),
        (key_clicked, key_space),
        (set_fixed_point_multiplier, 1000),
        (mouse_get_position, pos31),

        (position_get_x, reg31, pos31),
        (position_get_y, reg32, pos31),

        (display_message, "@X: {reg31} | Y: {reg32}"),
    (try_end),
  ]),
]),

("manage_cohorts", 0, mesh_load_window, [
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    #init variables
    (assign, ":num_of_cohorts", 0),


    (call_script, "script_get_cohort_limit", "p_main_party"),
    (assign, ":end", reg0),
    (try_for_range, ":cohort_dummy", slot_cohort_begin, ":end"),
        (troop_set_slot, "trp_temp_array_b", ":cohort_dummy", 0),
        (party_slot_ge, "p_main_party", ":cohort_dummy", 1),
        (val_add, ":num_of_cohorts", 1),
    (try_end),

    # #0. BACKROUND
    # (create_mesh_overlay, reg0, "mesh_load_window"),
    # (position_set_x, pos1, -1),
    # (position_set_y, pos1, -1),
    # (overlay_set_position, reg0, pos1),
    # (position_set_x, pos1, 1002),
    # (position_set_y, pos1, 1002),
    # (overlay_set_size, reg0, pos1),

    (assign, reg22, ":num_of_cohorts"),
    (store_mul, reg0, reg22, -1),
    (val_add, reg0, reg22, 2),
    (create_text_overlay, reg1, "@You have {reg22} {reg0?cohort:cohorts} in your party.", tf_center_justify|tf_with_outline),
    (position_set_x, pos1, 1200),
    (position_set_y, pos1, 1200),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 500), # Higher, means more toward the right
    (position_set_y, pos1, 710), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (overlay_set_color, reg1, 0x00007F),

     ###on top, info about players party
    (create_text_overlay, "$g_presentation_obj_28", "@Your party information", tf_left_align),
    (position_set_x, pos1, 785),
    (position_set_y, pos1, 710),
    (overlay_set_position, "$g_presentation_obj_28", pos1),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, "$g_presentation_obj_28", pos1),
    (overlay_set_color, "$g_presentation_obj_28", 0x00007F),

    (store_party_size_wo_prisoners, reg1, "p_main_party"),
    (call_script, "script_calculate_weekly_party_wage", "p_main_party"),
    (assign, reg2, reg0),

    (call_script, "script_game_get_party_companion_limit", "p_main_party"),
    (assign, ":party_size", reg0),
    (assign, reg3, ":party_size"),
    (store_troop_gold, reg4, "trp_player"),

    (call_script, "script_get_cohort_limit", "p_main_party"),
    (store_sub, reg5, reg0, slot_cohort_1),

    (create_text_overlay, "$g_presentation_obj_27", "@Party size: {reg1} men.^Wage: {reg2} denars.^Party limit: {reg3} men.^Your gold: {reg4} denars.^Cohort limit: {reg5} cohorts.", tf_left_align),
    (position_set_x, pos1, 785),
    (position_set_y, pos1, 630),
    (overlay_set_position, "$g_presentation_obj_27", pos1),
    (position_set_x, pos1, 920),
    (position_set_y, pos1, 920),
    (overlay_set_size, "$g_presentation_obj_27", pos1),

    (call_script, "script_display_available_recruits", "$g_encountered_party"),

    (try_begin),
        (ge, "$g_rank", 1),
        (troop_get_slot, ":money_limit", "trp_global_variables", g_player_recruitement_limit),
        (assign, reg2, ":money_limit", ),
        (create_text_overlay, reg1, "@Imperial treasury funds: {reg2}.", tf_left_align),
        (position_set_x, pos1, 785),
        (position_set_y, pos1, 580),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 920),
        (position_set_y, pos1, 920),
        (overlay_set_size, reg1, pos1),
    (try_end),

    # Back to menu - graphical button
    (create_game_button_overlay, reg1, "str_return"),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 23),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_jrider_faction_report_return_to_menu", reg1),

    (assign, "$g_presentation_obj_3", -1),
    (assign, "$g_presentation_obj_4", -1),
    (try_begin),
        (gt, ":num_of_cohorts", 1),
        (create_game_button_overlay, reg1, "@Disband ALL"),
        (position_set_x, pos1, 750),
        (position_set_y, pos1, 23),
        (overlay_set_position, reg1, pos1),
        (assign, "$g_presentation_obj_3", reg1),

        (create_game_button_overlay, reg1, "@Refresh ALL"),
        (position_set_x, pos1, 250),
        (position_set_y, pos1, 23),
        (overlay_set_position, reg1, pos1),
        (assign, "$g_presentation_obj_4", reg1),
    (try_end),

    ##creat a lines
    (create_mesh_overlay, reg1, "mesh_white_plane"),
    (overlay_set_color, reg1, 0x000000),#line color
    (position_set_x, pos3, 200000),
    (position_set_y, pos3, 50),
    (overlay_set_size, reg1, pos3),
    (position_set_x, pos3, 0),
    (position_set_y, pos3, 530),
    (overlay_set_position, reg1, pos3),

    (assign, "$g_presentation_obj_1", -1),
    (assign, "$g_presentation_obj_2", -1),
    (assign, "$g_presentation_obj_5", -1),
    (try_begin),
        (this_or_next|is_between, "$temp", "pt_mercenary_guard", "pt_steppe_bandit_lair"),
        (is_between, "$temp", "pt_legio_i_adjutrix_staff", "pt_germans"),
        (call_script, "script_get_cohort_name_to_s5", "$temp"),
        (create_text_overlay, reg1, "@Selected unit: {s5}", tf_left_align),
        (position_set_x, pos1, 25), # Higher, means more toward the right
        (position_set_y, pos1, 715), # Higher, means more toward the top
        (overlay_set_position, reg1, pos1),
        (overlay_set_color, reg1, 0x00007F),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),

        (call_script, "script_get_representative_troop_for_cohort", "$temp"),
        (store_mul, ":troop", reg0, 2),
        (create_mesh_overlay_with_tableau_material, reg0, -1, "tableau_troop_tree_pic", ":troop"),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, 525),
        (overlay_set_position, reg0, pos1),
        (position_set_x, pos3, 250),
        (position_set_y, pos3, 250),
        (overlay_set_size, reg0, pos3),

        (call_script, "script_cohort_describe_strength_to_s5_and_refil", "p_main_party", "$temp", "$temp2", "$g_encountered_party", -1, 0),
        (create_text_overlay, reg1, s5, tf_scrollable_style_2),
        (position_set_x, pos1, 140),
        (position_set_y, pos1, 535),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 330),
        (position_set_y, pos1, 90),
        (overlay_set_area_size, reg1, pos1),

        (try_begin),
            (call_script, "script_cf_can_manage_garrision", "$g_encountered_party"),
            (create_game_button_overlay, reg1, "@Add to Garrison"),
            (position_set_x, pos1, 250),
            (position_set_y, pos1, 685),
            (overlay_set_position, reg1, pos1),
            (position_set_x, pos1, 115),
            (position_set_y, pos1, 25),
            (overlay_set_size, reg1, pos1),
            (assign, "$g_presentation_obj_5", reg1),
        (else_try),
            (call_script, "script_cf_can_donate_to_garrision", "$g_encountered_party"),
            (create_game_button_overlay, reg1, "@Add to Garrison"),
            (position_set_x, pos1, 250),
            (position_set_y, pos1, 685),
            (overlay_set_position, reg1, pos1),
            (position_set_x, pos1, 115),
            (position_set_y, pos1, 25),
            (overlay_set_size, reg1, pos1),
            (assign, "$g_presentation_obj_5", reg1),
        (try_end),

        (create_game_button_overlay, reg1, "@Refresh"),
        (position_set_x, pos1, 250),
        (position_set_y, pos1, 658),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 115),
        (position_set_y, pos1, 25),
        (overlay_set_size, reg1, pos1),
        (assign, "$g_presentation_obj_1", reg1),

        (create_game_button_overlay, reg1, "@Disband"),
        (position_set_x, pos1, 250),
        (position_set_y, pos1, 631),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 115),
        (position_set_y, pos1, 25),
        (overlay_set_size, reg1, pos1),
        (assign, "$g_presentation_obj_2", reg1),
    (try_end),

    (create_text_overlay, reg1, "@Military units of your party:", tf_left_align),
    (position_set_x, pos1, 25), # Higher, means more toward the right
    (position_set_y, pos1, 510), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (overlay_set_color, reg1, 0x00007F),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),

    # # clear the string globals that we'll use
    (str_clear, s0),
    # # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
    (create_text_overlay, reg1, s0, tf_scrollable_style_2),
    (position_set_x, pos1, 70),
    (position_set_y, pos1, 70),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 430),
    (overlay_set_area_size, reg1, pos1),


    # (position_set_x, pos1, 0),
    (store_div, ":y_name", ":num_of_cohorts", 4),##get y for size of the scrollable overlay
    (val_mul, ":y_name", 250),
    (assign, ":x_name", 0),
    #text size
    (position_set_x, pos2, 900),
    (position_set_y, pos2, 900),

    (assign, ":counter", 1),

    # (assign, ":slot", 0),
    (set_container_overlay, reg1),#start scroll

    (try_for_range, ":cohort_dummy", slot_cohort_begin, ":end"),
        (party_get_slot, ":cohort", "p_main_party", ":cohort_dummy"),
        (ge, ":cohort", 1),
        (try_begin),
            (gt, ":x_name", 690),
            (assign, ":x_name", 0),
            (val_sub, ":y_name", 220),
        (try_end),
        (call_script, "script_get_representative_troop_for_cohort", ":cohort"),
        (store_mul, ":troop", reg0, 2),
        (create_mesh_overlay_with_tableau_material, reg0, -1, "tableau_troop_tree_pic", ":troop"),
        (position_set_x, pos1, ":x_name"),
        (position_set_y, pos1, ":y_name"),
        (overlay_set_position, reg0, pos1),
        (position_set_x, pos3, 250),
        (position_set_y, pos3, 250),
        (overlay_set_size, reg0, pos3),

        # #creat button
        (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
        (position_set_x, pos1, ":x_name"),
        (store_sub, ":y_new", ":y_name", 20),
        (position_set_y, pos1, ":y_new"),
        (overlay_set_position, reg10, pos1),
        (position_set_x, pos3, 500),
        (position_set_y, pos3, 4000),
        (overlay_set_size, reg10, pos3),
        (overlay_set_alpha, reg10, 0),
        (overlay_set_color, reg10, 0xDDDDDD),
        (troop_set_slot, "trp_temp_array_b", ":cohort_dummy", reg10),


        (call_script, "script_get_cohort_name_to_s5", ":cohort"),
        (assign, reg0, ":counter"),
        (create_text_overlay, reg1, "@{reg0}. cohort^{s5}", tf_left_align),
        (position_set_x, pos1, ":x_name"),
        (position_set_y, pos1, ":y_new"),
        (overlay_set_position, reg1, pos1),
        (overlay_set_size, reg1, pos2),

        (val_add, ":x_name", 230),
        (val_add, ":counter", 1),
    (try_end),
    (set_container_overlay, -1),#end scroll
  ]),
  ## Check for buttonpress
  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":button_pressed_id"),
    (try_begin),
        (eq, ":button_pressed_id", "$g_jrider_faction_report_return_to_menu"), # pressed  (Return to menu)
        (assign, "$temp", -1),
        (start_presentation, "$temp4_1"),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_1"), #refil

        (call_script, "script_cohort_describe_strength_to_s5_and_refil", "p_main_party", "$temp", "$temp2", "$g_encountered_party", "trp_player", 1),
        (start_presentation, "prsnt_manage_cohorts"),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_2"), #disband

        (call_script, "script_cohort_remove_from_party", "p_main_party", "$temp", "$temp2"),

        (assign, "$temp", -1),
        (start_presentation, "prsnt_manage_cohorts"),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_5"), #donate to garrison

        (call_script, "script_add_cohort_to_party_from_party", "p_main_party", "$g_encountered_party", "$temp", "$temp2"),
        (assign, "$temp", -1),
        (start_presentation, "prsnt_manage_cohorts"),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_3"), #disband ALL
        (call_script, "script_get_cohort_limit", "p_main_party"),
        (assign, ":end", reg0),
        (try_for_range, ":cohort_slot", slot_cohort_begin, ":end"),
            (party_get_slot, ":cohort", "p_main_party", ":cohort_slot"),
            (ge, ":cohort", 1),
            (call_script, "script_cohort_remove_from_party", "p_main_party", ":cohort", ":cohort_slot"),
        (try_end),
        (assign, "$temp", -1),
        (start_presentation, "prsnt_manage_cohorts"),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_4"), #Refresh ALL

        (call_script, "script_get_cohort_limit", "p_main_party"),
        (assign, ":end", reg0),
        (try_for_range, ":cohort_slot", slot_cohort_begin, ":end"),
            (party_get_slot, ":cohort", "p_main_party", ":cohort_slot"),
            (ge, ":cohort", 1),
            (call_script, "script_cohort_describe_strength_to_s5_and_refil", "p_main_party", ":cohort", ":cohort_slot", "$g_encountered_party", "trp_player", 1),
        (try_end),

        (start_presentation, "prsnt_manage_cohorts"),
    (else_try),
        (call_script, "script_get_cohort_limit", "p_main_party"),
        (assign, ":end", reg0),
        (try_for_range, ":cohort_dummy", slot_cohort_begin, ":end"),
            (troop_slot_eq, "trp_temp_array_b", ":cohort_dummy", ":button_pressed_id"),
            (party_get_slot, "$temp", "p_main_party", ":cohort_dummy"),
            (assign, ":end", -1),
        (try_end),
        (eq, ":end", -1),
        (assign, "$temp2", ":cohort_dummy"),
        (start_presentation, "prsnt_manage_cohorts"),
    (try_end),
  ]),

  (ti_on_presentation_run, [
    (try_begin),
        (key_clicked, key_space),
        (set_fixed_point_multiplier, 1000),
        (mouse_get_position, pos31),

        (position_get_x, reg31, pos31),
        (position_get_y, reg32, pos31),

        (display_message, "@X: {reg31} | Y: {reg32}"),
    (try_end),
  ]),
]),

("manage_cohorts_town", 0, mesh_load_window, [
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    #init variables
    (assign, ":num_of_cohorts", 0),

    (try_for_range, ":cohort_dummy", slot_cohort_town_begin, slot_cohort_town_end),
        (troop_set_slot, "trp_temp_array_b", ":cohort_dummy", 0),
        (party_slot_ge, "$g_encountered_party", ":cohort_dummy", 1),
        (val_add, ":num_of_cohorts", 1),
    (try_end),

    # #0. BACKROUND
    # (create_mesh_overlay, reg0, "mesh_load_window"),
    # (position_set_x, pos1, -1),
    # (position_set_y, pos1, -1),
    # (overlay_set_position, reg0, pos1),
    # (position_set_x, pos1, 1002),
    # (position_set_y, pos1, 1002),
    # (overlay_set_size, reg0, pos1),

    (assign, reg22, ":num_of_cohorts"),
    (store_mul, reg0, reg22, -1),
    (val_add, reg0, reg22, 2),
    (create_text_overlay, reg1, "@There are {reg22} {reg0?cohort:cohorts} stationed in town.", tf_center_justify|tf_with_outline),
    (position_set_x, pos1, 1200),
    (position_set_y, pos1, 1200),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 500), # Higher, means more toward the right
    (position_set_y, pos1, 710), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (overlay_set_color, reg1, 0x00007F),

     ###on top, info about players party
    (create_text_overlay, "$g_presentation_obj_28", "@Town information", tf_left_align),
    (position_set_x, pos1, 785),
    (position_set_y, pos1, 710),
    (overlay_set_position, "$g_presentation_obj_28", pos1),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, "$g_presentation_obj_28", pos1),
    (overlay_set_color, "$g_presentation_obj_28", 0x00007F),

    (store_party_size_wo_prisoners, reg1, "$g_encountered_party"),
    (call_script, "script_calculate_weekly_party_wage", "$g_encountered_party"),
    (assign, reg2, reg0),

    (party_get_slot, reg4, "$g_encountered_party", slot_town_wealth),

    (create_text_overlay, "$g_presentation_obj_27", "@Party size: {reg1} men.^Party wage: {reg2} denars.^Budget of the town watch: {reg4} denars.", tf_left_align),
    (position_set_x, pos1, 785),
    (position_set_y, pos1, 630),
    (overlay_set_position, "$g_presentation_obj_27", pos1),
    (position_set_x, pos1, 920),
    (position_set_y, pos1, 920),
    (overlay_set_size, "$g_presentation_obj_27", pos1),

    (call_script, "script_display_available_recruits", "$current_town"),

    (try_begin),
        (ge, "$g_rank", 1),
        (troop_get_slot, ":money_limit", "trp_global_variables", g_player_recruitement_limit),
        (assign, reg2, ":money_limit", ),
        (create_text_overlay, reg1, "@Imperial treasury funds: {reg2}.", tf_left_align),
        (position_set_x, pos1, 785),
        (position_set_y, pos1, 540),

        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 920),
        (position_set_y, pos1, 920),
        (overlay_set_size, reg1, pos1),
    (try_end),

    # (assign, "$g_presentation_obj_5", -1),
    # (try_begin),
        # (eq, reg63, 1),
        # (create_game_button_overlay, reg1, "@Exchange Members"),
        # (position_set_x, pos1, 250),
        # (position_set_y, pos1, 23),
        # (overlay_set_position, reg1, pos1),
        # (assign, "$g_presentation_obj_5", reg1),
    # (try_end),

    # Back to menu - graphical button
    (create_game_button_overlay, reg1, "str_return"),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 23),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_jrider_faction_report_return_to_menu", reg1),

    # Back to menu - graphical button
    (create_game_button_overlay, reg1, "@Manage your Cohorts"),
    (position_set_x, pos1, 750),
    (position_set_y, pos1, 23),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_presentation_obj_3", reg1),

    ##creat a lines
    (create_mesh_overlay, reg1, "mesh_white_plane"),
    (overlay_set_color, reg1, 0x000000),#line color
    (position_set_x, pos3, 200000),
    (position_set_y, pos3, 50),
    (overlay_set_size, reg1, pos3),
    (position_set_x, pos3, 0),
    (position_set_y, pos3, 530),
    (overlay_set_position, reg1, pos3),


    (assign, "$g_presentation_obj_1", -1),
    (assign, "$g_presentation_obj_4", -1),
    (assign, "$g_presentation_obj_2", -1),
    (try_begin),
        (this_or_next|is_between, "$temp", "pt_legio_i_adjutrix_staff", "pt_germans"),
        (is_between, "$temp", "pt_kingdom_1_town_watch", "pt_steppe_bandit_lair"),
        (call_script, "script_get_cohort_name_to_s5", "$temp"),
        (create_text_overlay, reg1, "@Selected unit: {s5}", tf_left_align),
        (position_set_x, pos1, 25), # Higher, means more toward the right
        (position_set_y, pos1, 715), # Higher, means more toward the top
        (overlay_set_position, reg1, pos1),
        (overlay_set_color, reg1, 0x00007F),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),

        (call_script, "script_get_representative_troop_for_cohort", "$temp"),
        (store_mul, ":troop", reg0, 2),
        (create_mesh_overlay_with_tableau_material, reg0, -1, "tableau_troop_tree_pic", ":troop"),
        (position_set_x, pos1, 0),
        (position_set_y, pos1, 525),
        (overlay_set_position, reg0, pos1),
        (position_set_x, pos3, 250),
        (position_set_y, pos3, 250),
        (overlay_set_size, reg0, pos3),

        (call_script, "script_cohort_describe_strength_to_s5_and_refil", "$g_encountered_party", "$temp", "$temp2", "$g_encountered_party", -1, 0),
        (create_text_overlay, reg1, s5, tf_scrollable_style_2),
        (position_set_x, pos1, 140),
        (position_set_y, pos1, 535),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 330),
        (position_set_y, pos1, 90),
        (overlay_set_area_size, reg1, pos1),

        (try_begin),
            (call_script, "script_cf_can_manage_garrision", "$g_encountered_party"),
            (create_game_button_overlay, reg1, "@Add to Main Party"),
            (position_set_x, pos1, 250),
            (position_set_y, pos1, 685),
            (overlay_set_position, reg1, pos1),
            (position_set_x, pos1, 115),
            (position_set_y, pos1, 25),
            (overlay_set_size, reg1, pos1),
            (assign, "$g_presentation_obj_4", reg1),
        (try_end),

        (create_game_button_overlay, reg1, "@Refresh"),
        (position_set_x, pos1, 250),
        (position_set_y, pos1, 658),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 115),
        (position_set_y, pos1, 25),
        (overlay_set_size, reg1, pos1),
        (assign, "$g_presentation_obj_1", reg1),

        (try_begin),
            (call_script, "script_cf_can_manage_garrision", "$g_encountered_party"),
            (create_game_button_overlay, reg1, "@Disband"),
            (position_set_x, pos1, 250),
            (position_set_y, pos1, 631),
            (overlay_set_position, reg1, pos1),
            (position_set_x, pos1, 115),
            (position_set_y, pos1, 25),
            (overlay_set_size, reg1, pos1),
            (assign, "$g_presentation_obj_2", reg1),
        (try_end),
    (try_end),

    (create_text_overlay, reg1, "@Military units in town:", tf_left_align),
    (position_set_x, pos1, 25), # Higher, means more toward the right
    (position_set_y, pos1, 510), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (overlay_set_color, reg1, 0x00007F),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),

    # # clear the string globals that we'll use
    (str_clear, s0),
    # # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
    (create_text_overlay, reg1, s0, tf_scrollable_style_2),
    (position_set_x, pos1, 70),
    (position_set_y, pos1, 70),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 430),
    (overlay_set_area_size, reg1, pos1),


    # (position_set_x, pos1, 0),
    (store_div, ":y_name", ":num_of_cohorts", 4),##get y for size of the scrollable overlay
    (val_mul, ":y_name", 250),
    (assign, ":x_name", 0),
    #text size
    (position_set_x, pos2, 900),
    (position_set_y, pos2, 900),

    (assign, ":counter", 1),
    # (assign, ":slot", 0),
    (set_container_overlay, reg1),#start scroll

    (try_for_range, ":cohort_dummy", slot_cohort_town_begin, slot_cohort_town_end),
        (party_get_slot, ":cohort", "$g_encountered_party", ":cohort_dummy"),
        (ge, ":cohort", 1),
        (try_begin),
            (gt, ":x_name", 690),
            (assign, ":x_name", 0),
            (val_sub, ":y_name", 220),
        (try_end),
        (call_script, "script_get_representative_troop_for_cohort", ":cohort"),
        (store_mul, ":troop", reg0, 2),
        (create_mesh_overlay_with_tableau_material, reg0, -1, "tableau_troop_tree_pic", ":troop"),
        (position_set_x, pos1, ":x_name"),
        (position_set_y, pos1, ":y_name"),
        (overlay_set_position, reg0, pos1),
        (position_set_x, pos3, 250),
        (position_set_y, pos3, 250),
        (overlay_set_size, reg0, pos3),

        # #creat button
        (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
        (position_set_x, pos1, ":x_name"),
        (store_sub, ":y_new", ":y_name", 20),
        (position_set_y, pos1, ":y_new"),
        (overlay_set_position, reg10, pos1),
        (position_set_x, pos3, 500),
        (position_set_y, pos3, 4000),
        (overlay_set_size, reg10, pos3),
        (overlay_set_alpha, reg10, 0),
        (overlay_set_color, reg10, 0xDDDDDD),
        (troop_set_slot, "trp_temp_array_b", ":cohort_dummy", reg10),

        (call_script, "script_get_cohort_name_to_s5", ":cohort"),
        (assign, reg0, ":counter"),
        (create_text_overlay, reg1, "@{reg0}. cohort^{s5}", tf_left_align),
        (position_set_x, pos1, ":x_name"),
        (position_set_y, pos1, ":y_new"),
        (overlay_set_position, reg1, pos1),
        (overlay_set_size, reg1, pos2),

        (val_add, ":x_name", 230),
        (val_add, ":counter", 1),
    (try_end),
    (set_container_overlay, -1),#end scroll
  ]),
  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":button_pressed_id"),
    (try_begin),
        (eq, ":button_pressed_id", "$g_jrider_faction_report_return_to_menu"), # pressed  (Return to menu)
        (assign, "$temp", -1),
        (assign, "$temp2", -1),
        (presentation_set_duration, 0),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_1"), #refil

        (call_script, "script_cohort_describe_strength_to_s5_and_refil", "$g_encountered_party", "$temp", "$temp2", "$g_encountered_party", "trp_player", 1),
        (start_presentation, "prsnt_manage_cohorts_town"),
    # (else_try),
        # (eq, ":button_pressed_id", "$g_presentation_obj_5"), #exchange
        # (assign, "$temp", -1),
        # (assign, "$temp2", -1),
        # (display_message, "@Check"),
        # (change_screen_exchange_members,1),
        # (jump_to_menu, "mnu_exchange"),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_3"), #refil
        (assign, "$temp", -1),
        (assign, "$temp2", -1),
        (assign, "$temp4_1", "prsnt_manage_cohorts_town"),
        (start_presentation, "prsnt_manage_cohorts"),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_4"), #add to main party

        (try_begin),
            (is_between, "$temp", "pt_kingdom_1_town_watch", "pt_kingdom_1_reinforcements_a"),
            (display_message, "@You cannot add the local townwatch to your party.", message_alert),
        (else_try),
            (call_script, "script_cohort_describe_strength_to_s5_and_refil", "$g_encountered_party", "$temp", "$temp2", "$g_encountered_party", -1, 0),
            (neg|troops_can_join, reg2),
            (display_message, "@Not enough space in your party.", message_alert),
        (else_try),
            (call_script, "script_add_cohort_to_party_from_party", "$g_encountered_party", "p_main_party", "$temp", "$temp2"),
            (assign, "$temp", -1),
            (assign, "$temp2", -1),
        (try_end),
        (start_presentation, "prsnt_manage_cohorts_town"),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_2"), #disband

        (try_begin),
            (is_between, "$temp", "pt_kingdom_1_town_watch", "pt_kingdom_1_reinforcements_a"),
            (display_message, "@You cannot disband the local townwatch", message_alert),
        (else_try),
            (call_script, "script_cohort_remove_from_party", "$g_encountered_party", "$temp", "$temp2"),
            (assign, "$temp", -1),
        (try_end),
        (start_presentation, "prsnt_manage_cohorts_town"),
    (else_try),
        (assign, ":end", slot_cohort_town_end),
        (try_for_range, ":cohort_dummy", slot_cohort_town_begin, ":end"),
            (troop_slot_eq, "trp_temp_array_b", ":cohort_dummy", ":button_pressed_id"),
            (party_get_slot, "$temp", "$g_encountered_party", ":cohort_dummy"),
            (assign, ":end", -1),
        (try_end),
        (eq, ":end", -1),
        (assign, "$temp2", ":cohort_dummy"),
        (start_presentation, "prsnt_manage_cohorts_town"),
    (try_end),
  ]),
  (ti_on_presentation_run, [
    (try_begin),
        (key_clicked, key_space),
        (set_fixed_point_multiplier, 1000),
        (mouse_get_position, pos31),

        (position_get_x, reg31, pos31),
        (position_get_y, reg32, pos31),

        (display_message, "@X: {reg31} | Y: {reg32}"),
    (try_end),
  ]),
]),

("senate", 0, 0,[
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),
    # BOARD
    (create_mesh_overlay, reg1, "mesh_vc_menu_board"),
    (position_set_x, pos1, 700),
    (position_set_y, pos1, 0),
    (overlay_set_position, reg1, pos1),
    # LOCATION INFO TEXT
    #(create_mesh_overlay, reg2, "mesh_mp_score_b"),
    (create_mesh_overlay, reg2, "mesh_white_plane"),
    (overlay_set_color, reg2, 0x000000),
    (overlay_set_alpha, reg2, 0xB0),

    (create_text_overlay, reg1, s60, tf_scrollable|tf_double_space|tf_center_justify),	#tf_with_outline|
    (position_set_x, pos1, 850),
    (position_set_y, pos1, 850),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 660 * 50),
    #(position_set_y, pos1, 250 * 50),
    (position_set_y, pos1, 137 * 50),
    (overlay_set_size, reg2, pos1),
    (position_set_x, pos1, 660),
    #(position_set_y, pos1, 250),
    (position_set_y, pos1, 132),
    (overlay_set_area_size, reg1, pos1),
    (position_set_x, pos1, 20),
    #(position_set_y, pos1, 470),
    (position_set_y, pos1, 600),
    (overlay_set_position, reg2, pos1),
    (overlay_set_position, reg1, pos1),
    (overlay_set_color, reg1, 0xDDDDDD),

    # VC-1746:
    (assign, ":button_distance", 40),
    (assign, ":no_of_mno", 0),
    (try_for_range, ":menu_slot", 0, 30),
        (troop_set_slot, "trp_temp_array_a", ":menu_slot", -1),
        (call_script, "script_cf_menu_condition_senate", ":menu_slot", 0),
        (val_add, ":no_of_mno", 1),
        (ge, ":no_of_mno", 15),
        (val_sub, ":button_distance", 1),
    (try_end),

    # BUTTONS:
    (assign, ":button_y_position", 600),
    (try_for_range, ":menu_slot", 0, 30),
        (call_script, "script_cf_menu_condition_senate", ":menu_slot", 0),
        (create_button_overlay, reg1, s1, tf_center_justify),
        (troop_set_slot, "trp_temp_array_a", ":menu_slot", reg1),
        (position_set_x, pos1, 850),
        (position_set_y, pos1, ":button_y_position"),
        (val_sub, ":button_y_position", ":button_distance"),
        (overlay_set_position, reg1, pos1),
    (try_end),
  ]),
  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":object"),

    (try_for_range, ":menu_slot", 0, 30),
        (troop_slot_eq, "trp_temp_array_a", ":menu_slot", ":object"),
        (call_script, "script_cf_menu_condition_senate", ":menu_slot", 1),
    (try_end),
  ]),
]),

("imperial_budget_report", 0, mesh_load_window, [
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    (assign, ":total_expected_loss", 0),
    (assign, ":total_loss", 0),
    (assign, ":total_expected_income", 0),
    (assign, ":total_income", 0),

    # #0. BACKROUND
    # (create_mesh_overlay, reg0, "mesh_load_window"),
    # (position_set_x, pos1, -1),
    # (position_set_y, pos1, -1),
    # (overlay_set_position, reg0, pos1),
    # (position_set_x, pos1, 1002),
    # (position_set_y, pos1, 1002),
    # (overlay_set_size, reg0, pos1),

    (create_text_overlay, reg1, "@Imperial budget report.", tf_center_justify),
    (position_set_x, pos1, 1500),
    (position_set_y, pos1, 1500),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 500), # Higher, means more toward the right
    (position_set_y, pos1, 710), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),

    (create_text_overlay, reg1, "@Total actual income/expenses.", tf_center_justify),
    (position_set_x, pos1, 1350),
    (position_set_y, pos1, 1350),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 250), # Higher, means more toward the right
    (position_set_y, pos1, 680), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),

    (create_text_overlay, reg1, "@Expected income/expenses.", tf_center_justify),
    (position_set_x, pos1, 1350),
    (position_set_y, pos1, 1350),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 750), # Higher, means more toward the right
    (position_set_y, pos1, 680), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),

    #summary of economic information

    (create_text_overlay, reg1, "@Weekly expected taxes, based on economic information", tf_center_justify),
    (position_set_x, pos1, 1100),
    (position_set_y, pos1, 1100),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 650+100), # Higher, means more toward the right
    (position_set_y, pos1, 620+25), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),

    (create_text_overlay, reg1, "@Settlement", tf_left_align),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 470+100), # Higher, means more toward the right
    (position_set_y, pos1, 620), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),

    (create_text_overlay, reg1, "@Wealth", tf_left_align),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 650+100), # Higher, means more toward the right
    (position_set_y, pos1, 620), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),

    (create_text_overlay, reg1, "@Expected Tax", tf_left_align),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 750+100), # Higher, means more toward the right
    (position_set_y, pos1, 620), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),

    (str_clear, s0),
    (create_text_overlay, reg1, s0, tf_scrollable),
    (position_set_x, pos1, 450+100),
    (position_set_y, pos1, 510),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 350),
    (position_set_y, pos1, 100),
    (overlay_set_area_size, reg1, pos1),
    (set_container_overlay, reg1),

    #get number of lines
    (assign, ":line_number", -1),
    (try_for_range, ":towns", centers_begin, centers_end),
        (store_faction_of_party, ":faction", ":towns"),
        (eq, ":faction", "fac_kingdom_7"),
        (val_add, ":line_number", 1),
    (try_end),
    (store_mul, ":cur_y", ":line_number", 27),

    #total
    (assign, ":total_wealth", 0),
    (assign, ":total_expected_tax", 0),
    (try_for_range, ":towns", centers_begin, centers_end),
        (store_faction_of_party, ":faction", ":towns"),
        (eq, ":faction", "fac_kingdom_7"),
        (str_store_party_name, s1, ":towns"),
        (party_get_slot, reg2, ":towns", slot_center_capital),
        (party_get_slot, reg0, ":towns", slot_center_accumulated_tariffs),
        (val_add, reg2, reg0),

        (create_text_overlay, reg1, "@{s1}: ", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),

        (val_add, ":total_wealth", reg2),
        (create_text_overlay, reg1, "@{reg2}", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 200),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),

        (val_mul, reg2, 60),
        (val_div, reg2, 100),
        (faction_get_slot, ":taxrate", "fac_kingdom_7", slot_faction_tax_rate),
        (val_mul, reg2, ":taxrate"),
        (val_div, reg2, 100),
        (val_add, ":total_expected_tax", reg2),
        (create_text_overlay, reg1, "@{reg2}", 0),
        (overlay_set_color, reg1, 0x00AA00),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 300),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (val_sub, ":cur_y", 27),
    (try_end),
    (set_container_overlay, -1),

    ##creat some lines
    (create_mesh_overlay, reg1, "mesh_white_plane"),
    (overlay_set_color, reg1, 0x000000),#line color
    (position_set_x, pos3, 17000),
    (position_set_y, pos3, 100),
    (overlay_set_size, reg1, pos3),
    (position_set_x, pos3, 475+100),
    (position_set_y, pos3, 500),
    (overlay_set_position, reg1, pos3),

    #display total
    (str_clear, s0),
    (create_text_overlay, reg1, s0, tf_scrollable),
    (position_set_x, pos1, 450+100),
    (position_set_y, pos1, 415),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 350),
    (position_set_y, pos1, 75),
    (overlay_set_area_size, reg1, pos1),
    (set_container_overlay, reg1),

    #get number of lines
    (assign, ":line_number", 1),
    (store_mul, ":cur_y", ":line_number", 27),

    (create_text_overlay, reg1, "@Total: ", 0),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 25),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg1, pos1),

    (assign, reg2, ":total_wealth"),
    (create_text_overlay, reg1, "@{reg2}", 0),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 200),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg1, pos1),

    (val_add, ":total_expected_income", ":total_expected_tax"),
    (assign, reg2, ":total_expected_tax"),
    (create_text_overlay, reg1, "@{reg2}", 0),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (overlay_set_color, reg1, 0x00AA00),
    (position_set_x, pos1, 300),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg1, pos1),
    (val_sub, ":cur_y", 27),

    (set_container_overlay, -1),

    #summary of expenses information: wages of legions/aux

    (create_text_overlay, reg1, "@Weekly expected legion/auxiliar wages", tf_center_justify),
    (position_set_x, pos1, 1100),
    (position_set_y, pos1, 1100),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 650+100), # Higher, means more toward the right
    (position_set_y, pos1, 230+25+198), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),

    (create_text_overlay, reg1, "@Unit", tf_left_align),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 470+100), # Higher, means more toward the right
    (position_set_y, pos1, 230+198), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),

    (create_text_overlay, reg1, "@Party Size", tf_left_align),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 650+100), # Higher, means more toward the right
    (position_set_y, pos1, 230+198), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),

    (create_text_overlay, reg1, "@Wage", tf_left_align),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 750+100), # Higher, means more toward the right
    (position_set_y, pos1, 230+198), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),

    (str_clear, s0),
    (create_text_overlay, reg1, s0, tf_scrollable),
    (position_set_x, pos1, 450+100),
    (position_set_y, pos1, 125+198),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 350),
    (position_set_y, pos1, 100),
    (overlay_set_area_size, reg1, pos1),
    (set_container_overlay, reg1),

    #get number of lines
    (assign, ":line_number", -1),
    (try_for_range, ":legate", active_npcs_begin, active_npcs_end),
        (store_faction_of_troop, ":faction", ":legate"),
        (eq, ":faction", "fac_kingdom_7"),
        (troop_get_slot, ":legion", ":legate", slot_troop_legion),
        (troop_get_slot, ":auxiliar", ":legate", slot_troop_aux),
        (this_or_next|gt, ":legion", 1),
        (gt, ":auxiliar", 1),
        (val_add, ":line_number", 1),
    (try_end),
    (store_mul, ":cur_y", ":line_number", 27),

    #total
    (assign, ":total_party_size", 0),
    (assign, ":total_expected_wages", 0),
    (try_for_range, ":legate", active_npcs_begin, active_npcs_end),
        (store_faction_of_troop, ":faction", ":legate"),
        (eq, ":faction", "fac_kingdom_7"),

        (troop_slot_eq, ":legate", slot_troop_occupation, slto_kingdom_hero),

        (troop_get_slot, ":legion", ":legate", slot_troop_legion),
        (troop_get_slot, ":auxiliar", ":legate", slot_troop_aux),
        (this_or_next|gt, ":legion", 1),
        (gt, ":auxiliar", 1),

        (try_begin),
            (gt, ":legion", 0),
            (store_add, ":string", "str_lover_talk", ":legion"),
            (str_store_string, s1, ":string"),
        (else_try),
            (call_script, "script_get_cohort_name_to_s5", ":auxiliar"),
            (str_store_string_reg, s1, s5),
        (try_end),

        (create_text_overlay, reg1, "@{s1}: ", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),

        (troop_get_slot, ":leaded_party", ":legate", slot_troop_leaded_party),
        (assign, reg2, 0),
        (try_begin),
            (party_is_active, ":leaded_party"),
            (store_party_size_wo_prisoners, reg2, ":leaded_party"),
            (val_add, ":total_party_size", reg2),
        (try_end),

        (create_text_overlay, reg1, "@{reg2}", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 200),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),

        (assign, reg0, 0),
        (try_begin),
            (party_is_active, ":leaded_party"),
            (call_script, "script_calculate_weekly_party_wage", ":leaded_party"),
            (val_add, ":total_expected_wages", reg0),
        (try_end),
        (create_text_overlay, reg1, "@{reg0}", 0),
        (overlay_set_color, reg1, 0xFF0000),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 300),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (val_sub, ":cur_y", 27),
    (try_end),
    (set_container_overlay, -1),

    ##creat some lines
    (create_mesh_overlay, reg1, "mesh_white_plane"),
    (overlay_set_color, reg1, 0x000000),#line color
    (position_set_x, pos3, 18000),
    (position_set_y, pos3, 100),
    (overlay_set_size, reg1, pos3),
    (position_set_x, pos3, 475+100),
    (position_set_y, pos3, 120+198),
    (overlay_set_position, reg1, pos3),

    #display total
    (str_clear, s0),
    (create_text_overlay, reg1, s0, tf_scrollable),
    (position_set_x, pos1, 450+100),
    (position_set_y, pos1, 30+198),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 350),
    (position_set_y, pos1, 75),
    (overlay_set_area_size, reg1, pos1),
    (set_container_overlay, reg1),

    #get number of lines
    (assign, ":line_number", 1),
    (store_mul, ":cur_y", ":line_number", 27),

    (create_text_overlay, reg1, "@Total: ", 0),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 25),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg1, pos1),

    (assign, reg2, ":total_party_size"),
    (create_text_overlay, reg1, "@{reg2}", 0),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 200),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg1, pos1),

    (val_add, ":total_expected_loss", ":total_expected_wages"),
    (assign, reg2, ":total_expected_wages"),
    (create_text_overlay, reg1, "@{reg2}", 0),
    (overlay_set_color, reg1, 0xFF0000),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 300),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg1, pos1),
    (val_sub, ":cur_y", 27),

    (set_container_overlay, -1),

    #summary of expenses information: wages

    (create_text_overlay, reg1, "@Weekly expected garrison wages", tf_center_justify),
    (position_set_x, pos1, 1100),
    (position_set_y, pos1, 1100),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 650+100), # Higher, means more toward the right
    (position_set_y, pos1, 230+25), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),

    (create_text_overlay, reg1, "@Settlement", tf_left_align),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 470+100), # Higher, means more toward the right
    (position_set_y, pos1, 230), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),

    (create_text_overlay, reg1, "@Garrison Size", tf_left_align),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 650+100), # Higher, means more toward the right
    (position_set_y, pos1, 230), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),

    (create_text_overlay, reg1, "@Wage", tf_left_align),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 750+100), # Higher, means more toward the right
    (position_set_y, pos1, 230), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),

    (str_clear, s0),
    (create_text_overlay, reg1, s0, tf_scrollable),
    (position_set_x, pos1, 450+100),
    (position_set_y, pos1, 125),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 350),
    (position_set_y, pos1, 100),
    (overlay_set_area_size, reg1, pos1),
    (set_container_overlay, reg1),

    #get number of lines
    (assign, ":line_number", -1),
    (try_for_range, ":towns", walled_centers_begin, walled_centers_end),
        (store_faction_of_party, ":faction", ":towns"),
        (eq, ":faction", "fac_kingdom_7"),
        (val_add, ":line_number", 1),
    (try_end),
    (store_mul, ":cur_y", ":line_number", 27),

    #total
    (assign, ":total_garrisons", 0),
    (assign, ":total_expected_garrison_wages", 0),
    (try_for_range, ":towns", walled_centers_begin, walled_centers_end),
        (store_faction_of_party, ":faction", ":towns"),
        (eq, ":faction", "fac_kingdom_7"),
        (str_store_party_name, s1, ":towns"),

        (create_text_overlay, reg1, "@{s1}: ", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),

        (store_party_size_wo_prisoners, reg2, ":towns"),
        (val_add, ":total_garrisons", reg2),
        (create_text_overlay, reg1, "@{reg2}", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 200),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),

        (assign, ":wages", 0),
        (try_for_range, ":cohort_slot", slot_cohort_town_4+1, slot_cohort_town_end),
            (party_get_slot, ":cohort", ":towns", ":cohort_slot"),
            (call_script, "script_cohort_describe_strength_to_s5_and_refil", ":towns", ":cohort", ":cohort_slot", -1, -1, 0),
            (val_add, ":wages", reg5),
        (try_end),
        (val_div, ":wages", 2),#is garrison
        (val_add, ":total_expected_garrison_wages", ":wages"),
        (assign, reg0, ":wages"),
        (create_text_overlay, reg1, "@{reg0}", 0),
        (overlay_set_color, reg1, 0xFF0000),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 300),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),
        (val_sub, ":cur_y", 27),
    (try_end),
    (set_container_overlay, -1),

    ##creat some lines
    (create_mesh_overlay, reg1, "mesh_white_plane"),
    (overlay_set_color, reg1, 0x000000),#line color
    (position_set_x, pos3, 18000),
    (position_set_y, pos3, 100),
    (overlay_set_size, reg1, pos3),
    (position_set_x, pos3, 475+100),
    (position_set_y, pos3, 120),
    (overlay_set_position, reg1, pos3),

    #display total
    (str_clear, s0),
    (create_text_overlay, reg1, s0, tf_scrollable),
    (position_set_x, pos1, 450+100),
    (position_set_y, pos1, 30),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 350),
    (position_set_y, pos1, 75),
    (overlay_set_area_size, reg1, pos1),
    (set_container_overlay, reg1),

    #get number of lines
    (assign, ":line_number", 1),
    (store_mul, ":cur_y", ":line_number", 27),

    (create_text_overlay, reg1, "@Total: ", 0),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 25),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg1, pos1),

    (assign, reg2, ":total_garrisons"),
    (create_text_overlay, reg1, "@{reg2}", 0),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 200),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg1, pos1),

    (val_add, ":total_expected_loss", ":total_expected_garrison_wages"),
    (assign, reg2, ":total_expected_garrison_wages"),
    (create_text_overlay, reg1, "@{reg2}", 0),
    (overlay_set_color, reg1, 0xFF0000),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 300),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg1, pos1),
    (val_sub, ":cur_y", 27),

    (set_container_overlay, -1),

   #summary of actual income

    (create_text_overlay, reg1, "@Income, as delivered by tax collectors", tf_center_justify),
    (position_set_x, pos1, 1100),
    (position_set_y, pos1, 1100),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 650-400), # Higher, means more toward the right
    (position_set_y, pos1, 650), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),

    (create_text_overlay, reg1, "@Tax type", tf_left_align),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 470-400), # Higher, means more toward the right
    (position_set_y, pos1, 620), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),

    (create_text_overlay, reg1, "@Tax/Tribute", tf_left_align),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 650-400), # Higher, means more toward the right
    (position_set_y, pos1, 620), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),

    (str_clear, s0),
    (create_text_overlay, reg1, s0, tf_scrollable),
    (position_set_x, pos1, 450-400),
    (position_set_y, pos1, 510),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 350),
    (position_set_y, pos1, 100),
    (overlay_set_area_size, reg1, pos1),
    (set_container_overlay, reg1),

    (faction_get_slot, ":emperors_boecket", "fac_kingdom_7", slot_faction_emperors_bocket),

    #get number of lines
    (store_sub, ":line_number", slot_faction_taxes_diplomacy, slot_faction_taxes_govern),
    (try_begin),
        (gt, ":emperors_boecket", 0),
        (val_add, ":line_number", 1),
    (try_end),
    (store_mul, ":cur_y", ":line_number", 27),

    #total
    (assign, ":total_tax", 0),
    (try_for_range, ":slot", slot_faction_taxes_govern, slot_faction_taxes_diplomacy+1),
        (store_sub, ":string", ":slot", slot_faction_taxes_govern),
        (val_add, ":string", "str_faction_taxes_govern"),
        (str_store_string, s1, ":string"),
        (create_text_overlay, reg1, "@{s1}: ", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),

        (faction_get_slot, reg2, "fac_kingdom_7", ":slot"),
        (val_add, ":total_tax", reg2),
        (create_text_overlay, reg1, "@{reg2}", 0),
        (overlay_set_color, reg1, 0x00AA00),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 200),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),

        (val_sub, ":cur_y", 27),
    (try_end),

    (try_begin),
        (gt, ":emperors_boecket", 0),
        (create_text_overlay, reg1, "@Emperor's grants: ", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),

        (val_abs, ":emperors_boecket"),
        (val_add, ":total_tax", ":emperors_boecket"),
        (assign, reg2, ":emperors_boecket"),
        (create_text_overlay, reg1, "@{reg2}", 0),
        (overlay_set_color, reg1, 0x00AA00),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 200),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),

        (val_sub, ":cur_y", 27),
    (try_end),

    (set_container_overlay, -1),


    ##creat some lines
    (create_mesh_overlay, reg1, "mesh_white_plane"),
    (overlay_set_color, reg1, 0x000000),#line color
    (position_set_x, pos3, 17000),
    (position_set_y, pos3, 100),
    (overlay_set_size, reg1, pos3),
    (position_set_x, pos3, 450-375),
    (position_set_y, pos3, 500),
    (overlay_set_position, reg1, pos3),

    #display total
    (str_clear, s0),
    (create_text_overlay, reg1, s0, tf_scrollable),
    (position_set_x, pos1, 450-400),
    (position_set_y, pos1, 415),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 350),
    (position_set_y, pos1, 75),
    (overlay_set_area_size, reg1, pos1),
    (set_container_overlay, reg1),

    #get number of lines
    (assign, ":line_number", 1),
    (store_mul, ":cur_y", ":line_number", 27),

    (create_text_overlay, reg1, "@Total: ", 0),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 25),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg1, pos1),

    (val_add, ":total_income", ":total_tax"),
    (assign, reg2, ":total_tax"),
    (create_text_overlay, reg1, "@{reg2}", 0),
    (overlay_set_color, reg1, 0x00AA00),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 200),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg1, pos1),

    (set_container_overlay, -1),

    #summary actual expenses
    (create_text_overlay, reg1, "@Spendings, as accounted by officials", tf_center_justify),
    (position_set_x, pos1, 1100),
    (position_set_y, pos1, 1100),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 650-400), # Higher, means more toward the right
    (position_set_y, pos1, 650-225), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),

    (create_text_overlay, reg1, "@Spending type", tf_left_align),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 470-400), # Higher, means more toward the right
    (position_set_y, pos1, 620-225), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),

    (create_text_overlay, reg1, "@Amount", tf_left_align),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 650-400), # Higher, means more toward the right
    (position_set_y, pos1, 620-225), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),

    (str_clear, s0),
    (create_text_overlay, reg1, s0, tf_scrollable),
    (position_set_x, pos1, 450-400),
    (position_set_y, pos1, 510-225),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 350),
    (position_set_y, pos1, 100),
    (overlay_set_area_size, reg1, pos1),
    (set_container_overlay, reg1),

    #get number of lines
    (store_sub, ":line_number", slot_faction_spending_diplomacy, slot_faction_hire),
    (try_begin),
        (lt, ":emperors_boecket", 0),
        (val_add, ":line_number", 1),
    (try_end),
    (store_mul, ":cur_y", ":line_number", 27),

    #total
    (assign, ":total_spending", 0),
    (try_for_range, ":slot", slot_faction_hire, slot_faction_spending_diplomacy+1),
        (store_sub, ":string", ":slot", slot_faction_hire),
        (val_add, ":string", "str_faction_hire"),
        (str_store_string, s1, ":string"),
        (create_text_overlay, reg1, "@{s1}: ", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),

        (faction_get_slot, reg2, "fac_kingdom_7", ":slot"),
        (val_add, ":total_spending", reg2),
        (create_text_overlay, reg1, "@{reg2}", 0),
        (overlay_set_color, reg1, 0xFF0000),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 200),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),

        (val_sub, ":cur_y", 27),
    (try_end),

    (try_begin),
        (lt, ":emperors_boecket", 0),
        (create_text_overlay, reg1, "@Emperor's spending: ", 0),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),

        (val_abs, ":emperors_boecket"),
        (val_add, ":total_spending", ":emperors_boecket"),
        (assign, reg2, ":emperors_boecket"),
        (create_text_overlay, reg1, "@{reg2}", 0),
        (overlay_set_color, reg1, 0xFF0000),
        (position_set_x, pos1, 900),
        (position_set_y, pos1, 900),
        (overlay_set_size, reg1, pos1),
        (position_set_x, pos1, 200),
        (position_set_y, pos1, ":cur_y"),
        (overlay_set_position, reg1, pos1),

        (val_sub, ":cur_y", 27),
    (try_end),

    (set_container_overlay, -1),


    ##creat some lines
    (create_mesh_overlay, reg1, "mesh_white_plane"),
    (overlay_set_color, reg1, 0x000000),#line color
    (position_set_x, pos3, 17000),
    (position_set_y, pos3, 100),
    (overlay_set_size, reg1, pos3),
    (position_set_x, pos3, 450-375),
    (position_set_y, pos3, 500-225),
    (overlay_set_position, reg1, pos3),

    #display total
    (str_clear, s0),
    (create_text_overlay, reg1, s0, tf_scrollable),
    (position_set_x, pos1, 450-400),
    (position_set_y, pos1, 415-225),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 350),
    (position_set_y, pos1, 75),
    (overlay_set_area_size, reg1, pos1),
    (set_container_overlay, reg1),

    #get number of lines
    (assign, ":line_number", 1),
    (store_mul, ":cur_y", ":line_number", 27),

    (create_text_overlay, reg1, "@Total: ", 0),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 25),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg1, pos1),

    (val_add, ":total_loss", ":total_spending"),
    (assign, reg2, ":total_spending"),
    (create_text_overlay, reg1, "@{reg2}", 0),
    (overlay_set_color, reg1, 0xFF0000),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 200),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg1, pos1),

    (set_container_overlay, -1),

    ##total summary
    (create_text_overlay, reg1, "@Expected netto income: ", 0),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 580),
    (position_set_y, pos1, 55),
    (overlay_set_position, reg1, pos1),

    (store_sub, ":total_netto_expected_income", ":total_expected_income", ":total_expected_loss"),
    (assign, reg2, ":total_netto_expected_income"),
    (create_text_overlay, reg1, "@{reg2}", 0),
    (try_begin),
        (gt, ":total_netto_expected_income", 0),
        (overlay_set_color, reg1, 0x00AA00),
    (else_try),
        (overlay_set_color, reg1, 0xFF0000),
    (try_end),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 650+200),
    (position_set_y, pos1, 55),
    (overlay_set_position, reg1, pos1),

    (create_text_overlay, reg1, "@Netto income: ", 0),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 75),
    (position_set_y, pos1, 215),
    (overlay_set_position, reg1, pos1),

    (store_sub, ":total_netto_income", ":total_income", ":total_loss"),
    (assign, reg2, ":total_netto_income"),
    (create_text_overlay, reg1, "@{reg2}", 0),
    (try_begin),
        (gt, ":total_netto_income", 0),
        (overlay_set_color, reg1, 0x00AA00),
    (else_try),
        (overlay_set_color, reg1, 0xFF0000),
    (try_end),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 250),
    (position_set_y, pos1, 215),
    (overlay_set_position, reg1, pos1),

    (create_text_overlay, reg1, "@Current treasury: ", 0),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 75),
    (position_set_y, pos1, 175),
    (overlay_set_position, reg1, pos1),

    (faction_get_slot, ":treasury", "fac_kingdom_7", slot_faction_treasury),
    (assign, reg2, ":treasury"),
    (create_text_overlay, reg1, "@{reg2}", 0),
    (try_begin),
        (gt, ":treasury", 0),
        (overlay_set_color, reg1, 0x00AA00),
    (else_try),
        (overlay_set_color, reg1, 0xFF0000),
    (try_end),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 250),
    (position_set_y, pos1, 175),
    (overlay_set_position, reg1, pos1),

    (create_text_overlay, reg1, "@Current debts: ", 0),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 75),
    (position_set_y, pos1, 145),
    (overlay_set_position, reg1, pos1),

    (faction_get_slot, ":debts", "fac_kingdom_7", slot_faction_debts),
    (assign, reg2, ":debts"),
    (create_text_overlay, reg1, "@{reg2}", 0),
    (try_begin),
        (gt, ":debts", 0),
        (overlay_set_color, reg1, 0xFF0000),
    (else_try),
        (overlay_set_color, reg1, 0x00AA00),
    (try_end),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 250),
    (position_set_y, pos1, 145),
    (overlay_set_position, reg1, pos1),

    #new
    (create_text_overlay, reg1, "@New treasury: ", 0),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 75),
    (position_set_y, pos1, 115),
    (overlay_set_position, reg1, pos1),

    (store_add, reg2, ":treasury", ":total_netto_income"),
    (val_max, reg2, 0),
    (create_text_overlay, reg1, "@{reg2}", 0),
    (try_begin),
        (gt, reg2, 0),
        (overlay_set_color, reg1, 0x00AA00),
    (else_try),
        (overlay_set_color, reg1, 0xFF0000),
    (try_end),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 250),
    (position_set_y, pos1, 115),
    (overlay_set_position, reg1, pos1),

    (create_text_overlay, reg1, "@New debts: ", 0),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 75),
    (position_set_y, pos1, 85),
    (overlay_set_position, reg1, pos1),

    (store_add, reg2, ":treasury", ":total_netto_income"),
    (val_mul, reg2, -1),
    (val_max, reg2, 0),
    (val_add, reg2, ":debts"),
    (create_text_overlay, reg1, "@{reg2}", 0),
    (try_begin),
        (gt, reg2, 0),
        (overlay_set_color, reg1, 0xFF0000),
    (else_try),
        (overlay_set_color, reg1, 0x00AA00),
    (try_end),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 250),
    (position_set_y, pos1, 85),
    (overlay_set_position, reg1, pos1),

    #display information
    # (str_clear, s0),
    # (create_text_overlay, reg1, "@The expected income gives you an approximation of what to expect, however it does not consider the resources spend on recruiting new soldiers and refilling the garrisions."
    # +" It also does not take into account wealth lost due to raids nor does it take corruption into account. However, it still gives a rough estimate on what to expect."
    # +" ^^Spendings are accounted asynchrone, i.e. the garrison of Rome gets paid on a different day in the month then those in Palmyra.", tf_scrollable),
    # (position_set_x, pos1, 70),
    # (position_set_y, pos1, 75),
    # (overlay_set_position, reg1, pos1),
    # (position_set_x, pos1, 900),
    # (position_set_y, pos1, 900),
    # (overlay_set_size, reg1, pos1),
    # (position_set_x, pos1, 300),
    # (position_set_y, pos1, 119),
    # (overlay_set_area_size, reg1, pos1),
    # (set_container_overlay, reg1),
    # (set_container_overlay, -1),

    # Back to menu - graphical button
    (create_game_button_overlay, reg1, "str_return"),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 23),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_jrider_faction_report_return_to_menu", reg1),

    (try_begin),
        (eq, "$g_apply_budget_report_to_gold", 1),
        (call_script, "script_weekly_imperial_balance", "fac_kingdom_7"),
        (assign, "$g_apply_budget_report_to_gold", 0),
    (try_end),
  ]),

   ## Check for buttonpress
   (ti_on_presentation_event_state_change,
    [
      (store_trigger_param_1, ":button_pressed_id"),
      (try_begin),
          (eq, ":button_pressed_id", "$g_jrider_faction_report_return_to_menu"), # pressed  (Return to menu)
          (assign, "$temp", -1),
          (assign, "$temp2", -1),
          (presentation_set_duration, 0),
      (try_end),
    ]),

    (ti_on_presentation_run, [
      (try_begin),
          (key_clicked, key_space),
          (set_fixed_point_multiplier, 1000),
          (mouse_get_position, pos31),

          (position_get_x, reg31, pos31),
          (position_get_y, reg32, pos31),

          (display_message, "@X: {reg31} | Y: {reg32}"),
      (try_end),
    ]),
]),

("select_kingdom", 0, mesh_load_window, [
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    (try_for_range, ":slot", 1, 30),
        (troop_set_slot, "trp_temp_array_a", ":slot", -1),
        (troop_set_slot, "trp_temp_array_b", ":slot", -1),
    (try_end),
    #init variables
    (assign, ":num_lords", 0),
    (try_for_range, ":kingdom", npc_kingdoms_begin, npc_kingdoms_end),
        (store_sub, ":slot", ":kingdom", npc_kingdoms_begin),
        (troop_set_slot, "trp_temp_array_b", ":slot", -1),
        (assign, ":block", 0),
        (try_begin),
            (troop_slot_eq, "trp_global_variables", g_starting_year, 63),
            (is_between, ":kingdom", fac_kingdom_24, fac_kingdom_27+1),
            (assign, ":block", 1),
        (try_end),
        (eq, ":block", 0),
        (val_add, ":slot", 1),
        (troop_set_slot, "trp_temp_array_a", ":slot", ":kingdom"),
        (val_add, ":num_lords", 1),
    (try_end),

    # #0. BACKROUND
    # (create_mesh_overlay, reg0, "mesh_load_window"),
    # (position_set_x, pos1, -1),
    # (position_set_y, pos1, -1),
    # (overlay_set_position, reg0, pos1),
    # (position_set_x, pos1, 1002),
    # (position_set_y, pos1, 1002),
    # (overlay_set_size, reg0, pos1),

    (create_combo_button_overlay, "$g_presentation_obj_1"),
    (position_set_x, pos1, 750),
    (position_set_y, pos1, 710),
    (overlay_set_position, "$g_presentation_obj_1", pos1),
    (overlay_add_item, "$g_presentation_obj_1", "@Year 63 AD (Nero's terror)"),
    (overlay_add_item, "$g_presentation_obj_1", "@Year 68 AD (Four Caesars)"),
    (try_begin),
        (troop_slot_eq, "trp_global_variables", g_starting_year, 63),
        (overlay_set_val, "$g_presentation_obj_1", 0),
    (else_try),
        (overlay_set_val, "$g_presentation_obj_1", 1),
    (try_end),

    (try_begin),
        (gt, "$temp_troop", -1),

        (try_begin),
            (eq, "$temp_troop", "trp_senator_5"),
            (assign, ":npc_faction", "fac_kingdom_24"),
        (else_try),
            (eq, "$temp_troop", "trp_legatus_11"),
            (assign, ":npc_faction", "fac_kingdom_25"),
        (else_try),
            (eq, "$temp_troop", "trp_senator_2"),
            (assign, ":npc_faction", "fac_kingdom_26"),
        (else_try),
            (eq, "$temp_troop", "trp_senator_1"),
            (assign, ":npc_faction", "fac_kingdom_27"),
        (else_try),
            (store_troop_faction, ":npc_faction", "$temp_troop"),
        (try_end),


        (str_store_troop_name_plural, s0, "$temp_troop"),
        (store_sub, ":title_index", ":npc_faction", kingdoms_begin),
        (call_script, "script_dplmc_store_troop_is_female", "$temp_troop"),#<- dplmc+ altered
        (assign, ":troop_is_female", reg0),
        (try_begin),
            (eq, ":troop_is_female", 0), #<- dplmc+ altered
            (val_add, ":title_index", "str_faction_leader_title_male_player"),
        (else_try),
            (val_add, ":title_index", "str_faction_leader_title_female_player"), #unmarried or unlanded ladies should just be Lady
        (try_end),
        (str_store_string, s1, ":title_index"),
        (create_text_overlay, reg1, "@Selected: {s1}", 0),
        (position_set_x, pos1, 25),
        (position_set_y, pos1, 715),
        (overlay_set_position, reg1, pos1),
        # (overlay_set_color, reg1, 0x00007F),
        (position_set_x, pos1, 950),
        (position_set_y, pos1, 950),
        (overlay_set_size, reg1, pos1),

        (create_mesh_overlay_with_tableau_material, reg0, -1, "tableau_kingdom_selection_mesh", "$temp_troop"),
        (position_set_x, pos1, 10),
        (position_set_y, pos1, 540),
        (overlay_set_position, reg0, pos1),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 500),
        (overlay_set_size, reg0, pos1),


        (try_begin),
            (eq, "$g_campaign_type", g_campaign_king),
            (val_sub, ":npc_faction", kingdoms_begin),
            (store_add, ":string", ":npc_faction", "str_kingdom_1_description"),
            (val_sub, ":string", 1),
            (str_store_string, s0, ":string"),
        (else_try),
            (faction_get_slot, ":culture", ":npc_faction", slot_faction_culture),
            (store_sub, ":string", ":culture", "fac_culture_1"),
            (val_add, ":string", "str_culture_1"),
            (str_store_string, s0, ":string"),
            (str_store_faction_name, s2, ":npc_faction"),
            (str_store_faction_name, s1, ":culture"),
            (str_store_string, s0, "@Your faction {s2} is of {s1} culture.^^{s0}"),
        (try_end),
        (create_text_overlay, reg1, s0, tf_scrollable_style_2),
        (position_set_x, pos1, 535),
        (position_set_y, pos1, 50),
        (overlay_set_position, reg1, pos1),

        (position_set_x, pos1, 415),
        (position_set_y, pos1, 450+200),
        (overlay_set_area_size, reg1, pos1),
        (set_container_overlay, reg1),
        (set_container_overlay, -1),

        (try_begin),
            (eq, "$g_campaign_type", g_campaign_king),
            (create_text_overlay, reg1, "@Character information", 0),
            (position_set_x, pos1, 1000),
            (position_set_y, pos1, 1000),
            (overlay_set_size, reg1, pos1),
            (position_set_x, pos1, 295), # Higher, means more toward the right
            (position_set_y, pos1, 710), # Higher, means more toward the top
            (overlay_set_position, reg1, pos1),

            (str_clear, s0),
            (create_text_overlay, reg1, s0, tf_scrollable_style_2),
            (position_set_x, pos1, 225),
            (position_set_y, pos1, 550),
            (overlay_set_position, reg1, pos1),
            (position_set_x, pos1, 260),
            (position_set_y, pos1, 150),
            (overlay_set_area_size, reg1, pos1),
            (set_container_overlay, reg1),

            #get number of lines
            (assign, ":line_number", 0),
            (try_for_range, ":npc", active_npcs_begin, kingdom_ladies_end),
                (call_script, "script_troop_get_family_relation_to_troop", ":npc", "$temp_troop"),
                (gt, reg0, 0),
                (val_add, ":line_number", 1),
            (try_end),
            (val_add, ":line_number", 1),
            (store_mul, ":cur_y", ":line_number", 27),

            (try_for_range, ":npc", active_npcs_begin, kingdom_ladies_end),
                (call_script, "script_troop_get_family_relation_to_troop", ":npc", "$temp_troop"),
                (gt, reg0, 0),

                (str_store_troop_name, s1, ":npc"),
                (create_text_overlay, reg1, "@{s1} ({s11})", 0),
                (position_set_x, pos1, 900),
                (position_set_y, pos1, 900),
                (overlay_set_size, reg1, pos1),
                (position_set_x, pos1, 25),
                (position_set_y, pos1, ":cur_y"),
                (overlay_set_position, reg1, pos1),

                (val_sub, ":cur_y", 27),
            (try_end),

            (troop_get_slot, reg1, "$temp_troop", slot_troop_age),
            (create_text_overlay, reg1, "@Age: {reg1}", 0),
            (position_set_x, pos1, 900),
            (position_set_y, pos1, 900),
            (overlay_set_size, reg1, pos1),
            (position_set_x, pos1, 25),
            (position_set_y, pos1, ":cur_y"),
            (overlay_set_position, reg1, pos1),
            (val_sub, ":cur_y", 27),

            (set_container_overlay, -1),
        (try_end),
    (try_end),

    # Back to menu - graphical button
    (create_game_button_overlay, reg1, "@Return"),
    (position_set_x, pos1, 300),
    (position_set_y, pos1, 10),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_jrider_faction_report_return_to_menu", reg1),

    # Back to menu - graphical button
    (create_game_button_overlay, reg1, "@Continue"),
    (position_set_x, pos1, 700),
    (position_set_y, pos1, 10),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_jrider_faction_filter", reg1),

    ##creat a lines
    # (create_mesh_overlay, reg1, "mesh_white_plane"),
    # (overlay_set_color, reg1, 0x000000),#line color
    # (position_set_x, pos3, 200000),
    # (position_set_y, pos3, 50),
    # (overlay_set_size, reg1, pos3),
    # (position_set_x, pos3, 0),
    # (position_set_y, pos3, 530),
    # (overlay_set_position, reg1, pos3),

    (create_text_overlay, reg1, "@Rulers:", tf_left_align),
    (position_set_x, pos1, 25), # Higher, means more toward the right
    (position_set_y, pos1, 510), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (overlay_set_color, reg1, 0x00007F),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),

    # # clear the string globals that we'll use
    (str_clear, s0),
    # (str_clear, s20),
    # (str_clear, s21),
    # (str_clear, s23),
    # (str_clear, s24),
    # # Scrollable area (all the next overlay will be contained in this, s0 sets the scrollbar)
    (create_text_overlay, reg1, s0, tf_scrollable_style_2),
    (position_set_x, pos1, 50),
    (position_set_y, pos1, 50),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 450),
    (position_set_y, pos1, 450),
    (overlay_set_area_size, reg1, pos1),

    # (position_set_x, pos1, 0),
    (store_div, ":y_name", ":num_lords", 2),##get y for size of the scrollable overlay
    # (val_sub, ":y_name", 1),
    (val_mul, ":y_name", 225),
    (assign, ":x_name", 20),
    #text size
    (position_set_x, pos2, 900),
    (position_set_y, pos2, 900),

    # (assign, ":slot", 0),
    (set_container_overlay, reg1),#start scroll
    (try_for_range, ":slot", 1, 30),
        (troop_get_slot, ":faction", "trp_temp_array_a", ":slot"),
        (gt, ":faction", -1),
        (try_begin),
            (eq, ":faction", "fac_kingdom_24"),
            (assign, ":active_npc", "trp_senator_5"),
        (else_try),
            (eq, ":faction", "fac_kingdom_25"),
            (assign, ":active_npc", "trp_legatus_11"),
        (else_try),
            (eq, ":faction", "fac_kingdom_26"),
            (assign, ":active_npc", "trp_senator_2"),
        (else_try),
            (eq, ":faction", "fac_kingdom_27"),
            (assign, ":active_npc", "trp_senator_1"),
        (else_try),
            (faction_get_slot, ":active_npc", ":faction", slot_faction_leader),
        (try_end),
        (is_between, ":active_npc", kings_begin, kingdom_ladies_end),
        # (str_store_troop_name, s1, ":active_npc"),
        # (assign, reg0, ":x_name"),
        # (assign, reg1, ":y_name"),
        # (display_message, "@{s1}: ({reg0}, {reg1})"),
        (neq, "$temp_troop", ":active_npc"),
        (try_begin),
            (ge, ":x_name", 460),
            (assign, ":x_name", 0),
            (val_sub, ":y_name", 220),
        (try_end),
        (assign, reg0, 0),
        (try_begin),
            (troop_slot_eq, "trp_global_variables", g_starting_year, 68),
            (eq, ":faction", "fac_kingdom_7"),
            (assign, reg0, 1),
        (try_end),
        (eq, reg0, 0),

        (create_mesh_overlay_with_tableau_material, reg0, -1, "tableau_kingdom_selection_mesh", ":active_npc"),
        (position_set_x, pos1, ":x_name"),
        (position_set_y, pos1, ":y_name"),
        (overlay_set_position, reg0, pos1),
        (position_set_x, pos3, 500),
        (position_set_y, pos3, 500),
        (overlay_set_size, reg0, pos3),

        # #creat button
        (create_image_button_overlay, reg10, "mesh_longer_button", "mesh_longer_button"),
        (overlay_set_position, reg10, pos1),
        (position_set_x, pos3, 1000),
        (position_set_y, pos3, 2000),
        (overlay_set_size, reg10, pos3),
        (overlay_set_alpha, reg10, 0),
        (overlay_set_color, reg10, 0xDDDDDD),
        (troop_set_slot, "trp_temp_array_b", ":slot", reg10),

        (str_store_troop_name_plural, s0, ":active_npc"),
        (store_sub, ":title_index", ":faction", kingdoms_begin),
        (call_script, "script_dplmc_store_troop_is_female", ":active_npc"),#<- dplmc+ altered
        (assign, ":troop_is_female", reg0),
        (try_begin),
            (eq, ":troop_is_female", 0), #<- dplmc+ altered
            (val_add, ":title_index", "str_faction_leader_title_male_player"),
        (else_try),
            (val_add, ":title_index", "str_faction_leader_title_female_player"), #unmarried or unlanded ladies should just be Lady
        (try_end),
        (str_store_string, s1, ":title_index"),

        (create_text_overlay, reg1, "@{s1}", tf_left_align),
        (position_set_x, pos1, ":x_name"),
        (store_sub, ":y_new", ":y_name", 20),
        (position_set_y, pos1, ":y_new"),
        (overlay_set_position, reg1, pos1),
        (overlay_set_size, reg1, pos2),

        (str_store_faction_name, s21, ":faction"),
        (create_text_overlay, reg1, "@{s21}", tf_left_align),
        (position_set_x, pos1, ":x_name"),
        (store_sub, ":y_new", ":y_name", 40),
        (position_set_y, pos1, ":y_new"),
        (overlay_set_position, reg1, pos1),
        (overlay_set_size, reg1, pos2),

        (val_add, ":x_name", 230),
    (try_end),
    (set_container_overlay, -1),#end scroll
  ]),
   ## Check for buttonpress
  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":button_pressed_id"),
    (store_trigger_param_2, ":value"),
    (try_begin),
        (eq, ":button_pressed_id", "$g_presentation_obj_1"),
        (assign, "$g_presentation_obj_1", ":value"),
        (try_begin),
            (eq,  ":value", 0),
            (troop_set_slot, "trp_global_variables", g_starting_year, 63),
        (else_try),
            (troop_set_slot, "trp_global_variables", g_starting_year, 68),
        (try_end),
        (start_presentation, "prsnt_select_kingdom"),
    (else_try),
        (eq, ":button_pressed_id", "$g_jrider_faction_report_return_to_menu"), # pressed  (Return to menu)
        (jump_to_menu, "mnu_start_game_0"),
        (presentation_set_duration, 0),
    (else_try),
        (assign, ":end", 30),
        (try_for_range, ":slot", 1, ":end"),
            (troop_slot_eq, "trp_temp_array_b", ":slot", ":button_pressed_id"),
            (troop_get_slot, ":faction", "trp_temp_array_a", ":slot"),
            (assign, ":end", -1),
        (try_end),
        (eq, ":end", -1),
        (try_begin),
            (eq, ":faction", "fac_kingdom_24"),
            (assign, "$temp_troop", "trp_senator_5"),
        (else_try),
            (eq, ":faction", "fac_kingdom_25"),
            (assign, "$temp_troop", "trp_legatus_11"),
        (else_try),
            (eq, ":faction", "fac_kingdom_26"),
            (assign, "$temp_troop", "trp_senator_2"),
        (else_try),
            (eq, ":faction", "fac_kingdom_27"),
            (assign, "$temp_troop", "trp_senator_1"),
        (else_try),
            (faction_get_slot, "$temp_troop", ":faction", slot_faction_leader),
        (try_end),
        (start_presentation, "prsnt_select_kingdom"),
    (else_try),
        (eq, ":button_pressed_id", "$g_jrider_faction_filter"),
        (try_begin),
            (is_between, "$temp_troop", kings_begin, kingdom_ladies_end),
            (try_begin),
                (eq, "$temp_troop", "trp_senator_5"),
                (assign, ":faction", "fac_kingdom_24"),
            (else_try),
                (eq, "$temp_troop", "trp_legatus_11"),
                (assign, ":faction", "fac_kingdom_25"),
            (else_try),
                (eq, "$temp_troop", "trp_senator_2"),
                (assign, ":faction", "fac_kingdom_26"),
            (else_try),
                (eq, "$temp_troop", "trp_senator_1"),
                (assign, ":faction", "fac_kingdom_27"),
            (else_try),
                (store_troop_faction, ":faction", "$temp_troop"),
            (try_end),
            (try_begin),
                (eq, "$g_campaign_type", g_campaign_king),
                (call_script, "script_player_is_king", ":faction"),
            (else_try),
                (call_script, "script_player_is_lord", ":faction"),
            (try_end),
            (presentation_set_duration, 0),
            (jump_to_menu, "mnu_choose_skill"),
        (else_try),
            (display_message, "@Select a king!", message_alert),
        (try_end),
    (try_end),
  ]),

  (ti_on_presentation_run, [
    (try_begin),
        (key_clicked, key_space),
        (set_fixed_point_multiplier, 1000),
        (mouse_get_position, pos31),

        (position_get_x, reg31, pos31),
        (position_get_y, reg32, pos31),

        (display_message, "@X: {reg31} | Y: {reg32}"),
    (try_end),
  ]),
]),

("mcc_character_creation", 0, 0, [
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    (create_mesh_overlay, reg1, "mesh_load_window"),
    (position_set_x, pos1, 0),
    (position_set_y, pos1, 0),
    (overlay_set_position, reg1, pos1),

    # starting year
    (create_combo_button_overlay, "$g_presentation_obj_6"),
    (position_set_x, pos1, 750),
    (position_set_y, pos1, 710),
    (overlay_set_position, "$g_presentation_obj_6", pos1),
    (overlay_add_item, "$g_presentation_obj_6", "@Year 63 AD (Nero's terror)"),
    (overlay_add_item, "$g_presentation_obj_6", "@Year 68 AD (Four Caesars)"),
    (try_begin),
        (troop_slot_eq, "trp_global_variables", g_starting_year, 63),
        (overlay_set_val, "$g_presentation_obj_6", 0),
    (else_try),
        (overlay_set_val, "$g_presentation_obj_6", 1),
    (try_end),

    ## Done button
    (create_game_button_overlay, "$g_presentation_obj_1", "@Done"),
    (position_set_x, pos1, 875),
    (position_set_y, pos1, 35),
    (overlay_set_position, "$g_presentation_obj_1", pos1),

    ## Back button
    (create_game_button_overlay, "$g_presentation_obj_2", "@Back"),
    (position_set_x, pos1, 700),
    (position_set_y, pos1, 35),
    (overlay_set_position, "$g_presentation_obj_2", pos1),

    ## Default button
    (create_game_button_overlay, "$g_presentation_obj_3", "@Default"),
    (position_set_x, pos1, 125),
    (position_set_y, pos1, 35),
    (overlay_set_position, "$g_presentation_obj_3", pos1),

    ## title
    (create_text_overlay, reg1, "@Character Creation", tf_center_justify),
    (position_set_x, pos1, 1500),
    (position_set_y, pos1, 1500),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 690),
    (overlay_set_position, reg1, pos1),

    (assign, ":cur_y", 660+35),
    ## background
    (create_text_overlay, reg1, "@Background:", tf_center_justify),
    (position_set_x, pos1, 1200),
    (position_set_y, pos1, 1200),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 150),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg1, pos1),
    (val_sub, ":cur_y", 40),

    (create_text_overlay, reg1, "@Culture:", tf_center_justify),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 150),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg1, pos1),
    (val_sub, ":cur_y", 30),

    (create_combo_button_overlay, "$g_presentation_obj_region"),
    (position_set_x, pos1, 175),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, "$g_presentation_obj_region", pos1),
    (position_set_x, pos1, 800),
    (position_set_y, pos1, 800),
    (overlay_set_size, "$g_presentation_obj_region", pos1),
    (try_for_range, ":culture", cultures_begin, cultures_end),
        (str_store_faction_name, s1, ":culture"),
        (overlay_add_item, "$g_presentation_obj_region", "@{s1}"),
    (try_end),
    (store_sub, ":value", "$background_answer_4", "fac_culture_1"),
    (overlay_set_val, "$g_presentation_obj_region", ":value"),
    (val_sub, ":cur_y", 40),

    (create_text_overlay, reg1, "@Gender:", tf_center_justify),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 150),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg1, pos1),
    (val_sub, ":cur_y", 30),

    (create_combo_button_overlay, "$g_presentation_obj_gender", tf_center_justify),
    (position_set_x, pos1, 175),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, "$g_presentation_obj_gender", pos1),
    (position_set_x, pos1, 800),
    (position_set_y, pos1, 800),
    (overlay_set_size, "$g_presentation_obj_gender", pos1),
    (overlay_add_item, "$g_presentation_obj_gender", "@Man"),
    (overlay_add_item, "$g_presentation_obj_gender", "@Woman"),
    (overlay_set_val, "$g_presentation_obj_gender", "$character_gender"),
    (val_sub, ":cur_y", 40),

    (create_text_overlay, reg1, "@Status:", tf_center_justify),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 150),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg1, pos1),
    (val_sub, ":cur_y", 30),

    (create_combo_button_overlay, "$g_presentation_obj_father"),
    (position_set_x, pos1, 175),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, "$g_presentation_obj_father", pos1),
    (position_set_x, pos1, 800),
    (position_set_y, pos1, 800),
    (overlay_set_size, "$g_presentation_obj_father", pos1),
    (overlay_add_item, "$g_presentation_obj_father", "@Slave"),
    (overlay_add_item, "$g_presentation_obj_father", "@Freeman"),
    (overlay_add_item, "$g_presentation_obj_father", "@Lesser Noble"),

    (overlay_set_val, "$g_presentation_obj_father", "$background_type"),
    (val_sub, ":cur_y", 40),

    (create_text_overlay, reg1, "@Body Build:", tf_center_justify),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 150),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg1, pos1),
    (val_sub, ":cur_y", 30),

    (create_combo_button_overlay, "$g_presentation_obj_early"),
    (position_set_x, pos1, 175),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, "$g_presentation_obj_early", pos1),
    (position_set_x, pos1, 800),
    (position_set_y, pos1, 800),
    (overlay_set_size, "$g_presentation_obj_early", pos1),
    (overlay_add_item, "$g_presentation_obj_early", "@Strong"),
    (overlay_add_item, "$g_presentation_obj_early", "@Agile"),
    (overlay_add_item, "$g_presentation_obj_early", "@Weak"),
    (overlay_set_val, "$g_presentation_obj_early", "$background_answer_2"),
    (val_sub, ":cur_y", 40),

    (create_text_overlay, reg1, "@Mind:", tf_center_justify),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 150),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, reg1, pos1),
    (val_sub, ":cur_y", 30),

    (create_combo_button_overlay, "$g_presentation_obj_adult"),
    (position_set_x, pos1, 175),
    (position_set_y, pos1, ":cur_y"),
    (overlay_set_position, "$g_presentation_obj_adult", pos1),
    (position_set_x, pos1, 800),
    (position_set_y, pos1, 800),
    (overlay_set_size, "$g_presentation_obj_adult", pos1),
    (overlay_add_item, "$g_presentation_obj_adult", "@Genius"),
    (overlay_add_item, "$g_presentation_obj_adult", "@Shrewd"),
    (overlay_add_item, "$g_presentation_obj_adult", "@Normal"),
    (overlay_add_item, "$g_presentation_obj_adult", "@Dull"),

    (overlay_set_val, "$g_presentation_obj_adult", "$background_answer_3"),
    (val_sub, ":cur_y", 40),

    ## biography
    (create_text_overlay, reg1, "@Biography:", tf_center_justify),
    (position_set_x, pos1, 1200),
    (position_set_y, pos1, 1200),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 660),
    (overlay_set_position, reg1, pos1),

    (call_script, "script_mcc_get_character_background_text"),
    (create_text_overlay, "$g_presentation_obj_story", "@{s1}", tf_double_space|tf_scrollable),
    (position_set_x, pos1, 320),
    (position_set_y, pos1, 90),
    (overlay_set_position, "$g_presentation_obj_story", pos1),
    (position_set_x, pos1, 340),
    (position_set_y, pos1, 520),
    (overlay_set_area_size, "$g_presentation_obj_story", pos1),

    ## stat changes
    (create_text_overlay, reg1, "@Stat Changes:", tf_center_justify),
    (position_set_x, pos1, 1200),
    (position_set_y, pos1, 1200),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 835),
    (position_set_y, pos1, 660),
    (overlay_set_position, reg1, pos1),


    #(call_script, "script_mcc_initialize_faction_items"),
    ##########################################################
    ###                 GENERATE STAT INFO                 ###
    ##########################################################
    (str_clear, s5),

    ### STRENGTH ###
    # Label
    (create_text_overlay, reg1, "@Str", tf_center_justify),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 760),
    (position_set_y, pos1, 620),
    (overlay_set_position, reg1, pos1),

    ## Value
    (create_text_overlay, "$g_presentation_obj_strength", "str_mcc_zero", tf_center_justify),
    (position_set_x, pos1, 850),
    (position_set_y, pos1, 850),
    (overlay_set_size, "$g_presentation_obj_strength", pos1),
    (position_set_x, pos1, 760),
    (position_set_y, pos1, 595),
    (overlay_set_position, "$g_presentation_obj_strength", pos1),

    ### AGILITY ###
    # Label
    (create_text_overlay, reg1, "@Agi", tf_center_justify),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 805),
    (position_set_y, pos1, 620),
    (overlay_set_position, reg1, pos1),

    ## Value
    (create_text_overlay, "$g_presentation_obj_agility", "str_mcc_zero", tf_center_justify),
    (position_set_x, pos1, 850),
    (position_set_y, pos1, 850),
    (overlay_set_size, "$g_presentation_obj_agility", pos1),
    (position_set_x, pos1, 805),
    (position_set_y, pos1, 595),
    (overlay_set_position, "$g_presentation_obj_agility", pos1),

    ### INTELLIGENCE ###
    # Label
    (create_text_overlay, reg1, "@Int", tf_center_justify),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 850),
    (position_set_y, pos1, 620),
    (overlay_set_position, reg1, pos1),

    ## Value
    (create_text_overlay, "$g_presentation_obj_intel", "str_mcc_zero", tf_center_justify),
    (position_set_x, pos1, 850),
    (position_set_y, pos1, 850),
    (overlay_set_size, "$g_presentation_obj_intel", pos1),
    (position_set_x, pos1, 850),
    (position_set_y, pos1, 595),
    (overlay_set_position, "$g_presentation_obj_intel", pos1),

    ### CHARISMA ###
    # Label
    (create_text_overlay, reg1, "@Cha", tf_center_justify),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 895),
    (position_set_y, pos1, 620),
    (overlay_set_position, reg1, pos1),

    ## Value
    (create_text_overlay, "$g_presentation_obj_charisma", "str_mcc_zero", tf_center_justify),
    (position_set_x, pos1, 850),
    (position_set_y, pos1, 850),
    (overlay_set_size, "$g_presentation_obj_charisma", pos1),
    (position_set_x, pos1, 895),
    (position_set_y, pos1, 595),
    (overlay_set_position, "$g_presentation_obj_charisma", pos1),

    ### GOLD ###
    # Label
    (create_text_overlay, reg1, "@Gold"),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 695),
    (position_set_y, pos1, 520),
    (overlay_set_position, reg1, pos1),

    ## Value
    (create_text_overlay, "$g_presentation_obj_gold", "str_mcc_zero", tf_center_justify),
    (position_set_x, pos1, 850),
    (position_set_y, pos1, 850),
    (overlay_set_size, "$g_presentation_obj_gold", pos1),
    (position_set_x, pos1, 805),
    (position_set_y, pos1, 520),
    (overlay_set_position, "$g_presentation_obj_gold", pos1),

    ### RENOWN ###
    # Label
    (create_text_overlay, reg1, "@Renown"),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 695),
    (position_set_y, pos1, 500),
    (overlay_set_position, reg1, pos1),

    ## Value
    (create_text_overlay, "$g_presentation_obj_renown", "str_mcc_zero", tf_center_justify),
    (position_set_x, pos1, 850),
    (position_set_y, pos1, 850),
    (overlay_set_size, "$g_presentation_obj_renown", pos1),
    (position_set_x, pos1, 805),
    (position_set_y, pos1, 500),
    (overlay_set_position, "$g_presentation_obj_renown", pos1),

    ### WEAPON PROF - ONE HAND ###
    # Label
    (create_text_overlay, reg1, "@One Handed"),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 695),
    (position_set_y, pos1, 480),
    (overlay_set_position, reg1, pos1),

    ## Value
    (create_text_overlay, "$g_presentation_obj_onehand", "str_mcc_zero", tf_center_justify),
    (position_set_x, pos1, 850),
    (position_set_y, pos1, 850),
    (overlay_set_size, "$g_presentation_obj_onehand", pos1),
    (position_set_x, pos1, 805),
    (position_set_y, pos1, 480),
    (overlay_set_position, "$g_presentation_obj_onehand", pos1),

    ### WEAPON PROF - TWO HAND ###
    # Label
    (create_text_overlay, reg1, "@Two Handed"),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 695),
    (position_set_y, pos1, 460),
    (overlay_set_position, reg1, pos1),

    ## Value
    (create_text_overlay, "$g_presentation_obj_twohand", "str_mcc_zero", tf_center_justify),
    (position_set_x, pos1, 850),
    (position_set_y, pos1, 850),
    (overlay_set_size, "$g_presentation_obj_twohand", pos1),
    (position_set_x, pos1, 805),
    (position_set_y, pos1, 460),
    (overlay_set_position, "$g_presentation_obj_twohand", pos1),

    ### WEAPON PROF - POLEARMS ###
    # Label
    (create_text_overlay, reg1, "@Polearms"),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 695),
    (position_set_y, pos1, 440),
    (overlay_set_position, reg1, pos1),

    ## Value
    (create_text_overlay, "$g_presentation_obj_polearm", "str_mcc_zero", tf_center_justify),
    (position_set_x, pos1, 850),
    (position_set_y, pos1, 850),
    (overlay_set_size, "$g_presentation_obj_polearm", pos1),
    (position_set_x, pos1, 805),
    (position_set_y, pos1, 440),
    (overlay_set_position, "$g_presentation_obj_polearm", pos1),

    ### WEAPON PROF - ARCHERY ###
    # Label
    (create_text_overlay, reg1, "@Bows"),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 695),
    (position_set_y, pos1, 420),
    (overlay_set_position, reg1, pos1),

    ## Value
    (create_text_overlay, "$g_presentation_obj_bow", "str_mcc_zero", tf_center_justify),
    (position_set_x, pos1, 850),
    (position_set_y, pos1, 850),
    (overlay_set_size, "$g_presentation_obj_bow", pos1),
    (position_set_x, pos1, 805),
    (position_set_y, pos1, 420),
    (overlay_set_position, "$g_presentation_obj_bow", pos1),

    ### WEAPON PROF - CROSSBOW ###
    # Label
    (create_text_overlay, reg1, "@Ballista"),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 695),
    (position_set_y, pos1, 400),
    (overlay_set_position, reg1, pos1),

    ## Value
    (create_text_overlay, "$g_presentation_obj_xbow", "str_mcc_zero", tf_center_justify),
    (position_set_x, pos1, 850),
    (position_set_y, pos1, 850),
    (overlay_set_size, "$g_presentation_obj_xbow", pos1),
    (position_set_x, pos1, 805),
    (position_set_y, pos1, 400),
    (overlay_set_position, "$g_presentation_obj_xbow", pos1),

    ### WEAPON PROF - THROWING ###
    # Label
    (create_text_overlay, reg1, "@Throwing"),
    (position_set_x, pos1, 900),
    (position_set_y, pos1, 900),
    (overlay_set_size, reg1, pos1),
    (position_set_x, pos1, 695),
    (position_set_y, pos1, 380),
    (overlay_set_position, reg1, pos1),
    ## Value
    (create_text_overlay, "$g_presentation_obj_throw", "str_mcc_zero", tf_center_justify),
    (position_set_x, pos1, 850),
    (position_set_y, pos1, 850),
    (overlay_set_size, "$g_presentation_obj_throw", pos1),
    (position_set_x, pos1, 805),
    (position_set_y, pos1, 380),
    (overlay_set_position, "$g_presentation_obj_throw", pos1),

    (call_script, "script_mcc_generate_skill_set", limit_to_stats),
  ]),
  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":object"),
    (store_trigger_param_2, ":value"),

    (try_begin),
        (eq, ":object", "$g_presentation_obj_6"),
        (assign, "$g_presentation_obj_6", ":value"),
        (try_begin),
            (eq,  ":value", 0),
            (troop_set_slot, "trp_global_variables", g_starting_year, 63),
        (else_try),
            (troop_set_slot, "trp_global_variables", g_starting_year, 68),
        (try_end),
        (start_presentation, "prsnt_mcc_character_creation"),
    (else_try),
    ####### DONE BUTTON #######
        (eq, ":object", "$g_presentation_obj_1"),
        (call_script, "script_mcc_end_presentation_begin_game"),
        (try_begin),
            (presentation_set_duration, 0),
            (jump_to_menu, "mnu_choose_skill"),
        (try_end),
    (else_try), ####### BACK BUTTON #######
        (eq, ":object", "$g_presentation_obj_2"),
        (jump_to_menu, "mnu_start_game_0"),
        (presentation_set_duration, 0),
    (else_try), ####### DEFAULT BUTTON #######]
        (eq, ":object", "$g_presentation_obj_3"),
        (call_script, "script_mcc_default_settings"),
        (start_presentation, "prsnt_mcc_character_creation"),
    (else_try), ####### GENDER MENU #######
        (eq, ":object", "$g_presentation_obj_gender"),
        (assign, "$character_gender", ":value"),
        (start_presentation, "prsnt_mcc_character_creation"),
        (assign, "$g_presentation_obj_gender", ":value"),
    (else_try), ####### FATHER BACKGROUND MENU #######
        (eq, ":object", "$g_presentation_obj_father"),
        (assign, "$background_type", ":value"),
        (start_presentation, "prsnt_mcc_character_creation"),
        (assign, "$g_presentation_obj_father", ":value"),
    (else_try), ####### EARLY LIFE BACKGROUND MENU #######
        (eq, ":object", "$g_presentation_obj_early"),
        (assign, "$background_answer_2", ":value"),
        (start_presentation, "prsnt_mcc_character_creation"),
        (assign, "$g_presentation_obj_early", ":value"),
    (else_try), ####### LATER LIFE BACKGROUND MENU #######
        (eq, ":object", "$g_presentation_obj_adult"),
        (assign, "$background_answer_3", ":value"),
        (start_presentation, "prsnt_mcc_character_creation"),
        (assign, "$g_presentation_obj_adult", ":value"),
    (else_try), ####### Culture #######
        (eq, ":object", "$g_presentation_obj_region"),
        (assign, "$g_presentation_obj_region", ":value"),
        (store_add, "$background_answer_4", ":value", "fac_culture_1"),
        (start_presentation, "prsnt_mcc_character_creation"),
    (try_end),
  ]),
]),

("simple_encounter", 0, 0, [
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    (create_mesh_overlay, reg1, "mesh_load_window"),
    (position_set_x, pos1, 0),
    (position_set_y, pos1, 0),
    (overlay_set_position, reg1, pos1),

    (call_script, "script_get_background_pic_for_battle", "$g_encountered_party_template", "$g_encountered_party_faction"),
    (create_mesh_overlay, reg1, reg0),
    (position_set_x, pos1, -350),
    (position_set_y, pos1, 0),
    (overlay_set_position, reg1, pos1),

    # text
    (create_text_overlay, reg0, "@Your side", tf_center_justify|tf_single_line|tf_with_outline),
    (overlay_set_color, reg0, 0x355E3B),
    (position_set_x, pos1, 1500),
    (position_set_y, pos1, 1500),
    (overlay_set_size, reg0, pos1),
    (position_set_x, pos1, 175),
    (position_set_y, pos1, 700),
    (overlay_set_position, reg0, pos1),

    #text size
    (position_set_x, pos2, 900),
    (position_set_y, pos2, 900),

    (str_clear, s0),
    (create_text_overlay, reg1, s0, tf_scrollable),
    (position_set_x, pos1, 15),
    (position_set_y, pos1, 365),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 250),
    (position_set_y, pos1, 315),
    (overlay_set_area_size, reg1, pos1),

    (set_container_overlay, reg1),#start scroll

    (position_set_x, pos1, 125),
    (position_set_y, pos1, 0),

    (party_get_num_attached_parties, ":num_attached_parties",  "p_main_party"),
    (try_for_range, ":rank", 0, ":num_attached_parties"),
        (party_get_attached_party_with_rank, ":party_no", "p_main_party", ":rank"),
        (call_script, "script_generate_party_list_for_battle", ":party_no"),
    (try_end),

    (try_begin),
        (party_is_active, "$g_ally_party"),
        (party_get_num_attached_parties, ":num_attached_parties",  "$g_ally_party"),
        (try_for_range, ":rank", 0, ":num_attached_parties"),
            (party_get_attached_party_with_rank, ":party_no", "$g_ally_party", ":rank"),
            (call_script, "script_generate_party_list_for_battle", ":party_no"),
        (try_end),
        (call_script, "script_generate_party_list_for_battle", "$g_ally_party"),
    (try_end),

    (call_script, "script_generate_party_list_for_battle", "p_main_party"),

    (set_container_overlay, -1),#end scroll

    (str_clear, s0),
    (create_text_overlay, reg1, s0, tf_scrollable),
    (position_set_x, pos1, 15),
    (position_set_y, pos1, 130),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 250),
    (position_set_y, pos1, 200),
    (overlay_set_area_size, reg1, pos1),

    (set_container_overlay, reg1),
    (party_clear, "p_temp_party"),
    (party_collect_attachments_to_party, "p_main_party", "p_temp_party"),
    (try_begin),
        (gt, "$g_ally_party", 0),
        (party_collect_attachments_to_party, "$g_ally_party", "p_temp_party_2"),
        (assign, "$g_move_heroes", 1),
        (call_script, "script_party_add_party", "p_temp_party", "p_temp_party_2"),
    (try_end),

    (store_party_size_wo_prisoners, reg22, "p_temp_party"),
    # (display_message, "@Your size: {reg22}"),
    (call_script, "script_generate_list_of_party_members", "p_temp_party", 0, 250),

    (set_container_overlay, -1),

    (create_text_overlay, reg0, "@Enemy Side",  tf_center_justify|tf_single_line|tf_with_outline),
    (overlay_set_color, reg0, 0x800020),
    (position_set_x, pos1, 1500),
    (position_set_y, pos1, 1500),
    (overlay_set_size, reg0, pos1),
    (position_set_x, pos1, 820),
    (position_set_y, pos1, 700),
    (overlay_set_position, reg0, pos1),


    (str_clear, s0),
    (create_text_overlay, reg1, s0, tf_scrollable),
    (position_set_x, pos1, 715),
    (position_set_y, pos1, 365),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 250),
    (position_set_y, pos1, 315),
    (overlay_set_area_size, reg1, pos1),

    (set_container_overlay, reg1),#start scroll

    (position_set_x, pos1, 125),
    (position_set_y, pos1, 0),

    (try_begin),
        (party_is_active, "$g_enemy_party"),
        (party_get_num_attached_parties, ":num_attached_parties",  "$g_enemy_party"),
        (try_for_range, ":rank", 0, ":num_attached_parties"),
            (party_get_attached_party_with_rank, ":party_no", "$g_enemy_party", ":rank"),
            (call_script, "script_generate_party_list_for_battle", ":party_no"),
        (try_end),
        (call_script, "script_generate_party_list_for_battle", "$g_enemy_party"),
    (try_end),

    (set_container_overlay, -1),#end scroll

    (try_begin),
        (party_is_active, "$g_enemy_party"),

        (str_clear, s0),
        (create_text_overlay, reg1, s0, tf_scrollable),
        (position_set_x, pos1, 715),
        (position_set_y, pos1, 130),
        (overlay_set_position, reg1, pos1),
        (position_set_x, pos1, 250),
        (position_set_y, pos1, 200),
        (overlay_set_area_size, reg1, pos1),

        (set_container_overlay, reg1),
        (party_clear, "p_temp_party"),
        (party_collect_attachments_to_party, "$g_enemy_party", "p_temp_party"),
        (store_party_size_wo_prisoners, reg22, "p_temp_party"),
        # (display_message, "@Size: {reg22}"),
        (call_script, "script_generate_list_of_party_members", "p_temp_party", 0, 250),
        (set_container_overlay, -1),
    (try_end),

    # main text
    (create_text_overlay, reg0, s3, tf_scrollable|tf_center_justify),
    (position_set_x, pos1, 1000),
    (position_set_y, pos1, 1000),
    (overlay_set_size, reg0, pos1),
    (position_set_x, pos1, 320),
    (position_set_y, pos1, 560),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 360),
    (position_set_y, pos1, 130),
    (overlay_set_area_size, reg0, pos1),

    (try_for_range, ":slot", 0, 20),
        (troop_set_slot, "trp_temp_array_c", -1),
    (try_end),

    (assign, ":number_of_buttons", 0),

    # Back to menu - graphical button
    (str_clear, s0),
    (try_begin),
        (neq, "$player_ambushed",1),
        (eq,"$cant_leave_encounter", 0),
        (gt, "$enlisted_party",-1),
        (call_script, "script_party_count_fit_for_battle", "$g_enemy_party"),
        (le, reg0, 0),
        (str_store_string, s0, "@Leave"),
    (else_try),
        (neq, "$player_ambushed",1),
        (eq,"$cant_leave_encounter", 0),
        (eq, "$enlisted_party",-1),
        (str_store_string, s0, "@Leave"),
    (else_try),
        (eq,"$cant_leave_encounter", 1),
        (str_store_string, s0, "@Surrender"),
    (try_end),

    (assign, "$g_presentation_obj_1", -1),
    (try_begin),
        (neg|str_is_empty, s0),
        (create_game_button_overlay, "$g_presentation_obj_1", s0),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 50),
        (overlay_set_position, "$g_presentation_obj_1", pos1),
        (troop_set_slot, "trp_temp_array_c", ":number_of_buttons", "$g_presentation_obj_1"),
        (val_add, ":number_of_buttons", 1),
    (try_end),

    # retreat with cover
    (str_clear, s0),
    (try_begin),
        (eq, "$enlisted_party",-1),
        (neq, "$player_ambushed",1),
        (eq,"$cant_leave_encounter", 1),
        (call_script, "script_get_max_skill_of_player_party", "skl_tactics"),
        (assign, ":max_skill", reg0),
        (val_add, ":max_skill", 4),

        (call_script, "script_party_count_members_with_full_health", "p_collective_enemy", 0),
        (assign, ":enemy_party_strength", reg0),
        (val_div, ":enemy_party_strength", 2),

        (val_div, ":enemy_party_strength", ":max_skill"),
        (val_max, ":enemy_party_strength", 1),

        (call_script, "script_party_count_fit_regulars", "p_main_party"),
        (assign, ":player_count", reg0),
        (ge, ":player_count", ":enemy_party_strength"),

        (assign, ":block", 0),
        (try_begin),
            (check_quest_active, "qst_four_emperors"),
            (quest_slot_eq, "qst_four_emperors", slot_quest_current_state, 11),
            (quest_slot_eq, "qst_four_emperors", slot_quest_target_troop, "trp_legatus_11"),
            (assign, ":block", 1),
        (else_try),
            (check_quest_active, "qst_four_emperors"),
            (quest_slot_eq, "qst_four_emperors", slot_quest_current_state, 15),
            (this_or_next|quest_slot_eq, "qst_four_emperors", slot_quest_target_troop, "trp_senator_2"),
            (quest_slot_eq, "qst_four_emperors", slot_quest_target_troop, "trp_statthalter_9"),
            (assign, ":block", 1),
        (try_end),
        (eq, ":block", 0),

        (str_store_string, s0, "@Cover the retreat."),
    (else_try),
        (gt, "$enlisted_party",-1),
        (str_store_string, s0, "@[Try to end current battle.]"),
    (try_end),

    (assign, "$g_presentation_obj_2", -1),
    (try_begin),
        (neg|str_is_empty, s0),
        (create_game_button_overlay, "$g_presentation_obj_2", s0),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 50),
        (overlay_set_position, "$g_presentation_obj_2", pos1),
        (troop_set_slot, "trp_temp_array_c", ":number_of_buttons", "$g_presentation_obj_2"),
        (val_add, ":number_of_buttons", 1),
    (try_end),

    ## auto battle
    (assign, "$g_presentation_obj_3", -1),
    (try_begin),
        (neq, "$player_ambushed",1),#Ambush Yes
        (eq, "$encountered_party_friendly", 0),
        (create_game_button_overlay, "$g_presentation_obj_3", "@Auto-calculate battle"),
#       (position_set_x, pos1, 500),
        (position_set_y, pos1, 50),
        (overlay_set_position, "$g_presentation_obj_3", pos1),
        (troop_set_slot, "trp_temp_array_c", ":number_of_buttons", "$g_presentation_obj_3"),
        (val_add, ":number_of_buttons", 1),
    (try_end),

    ## lead the attack
    (assign, "$temp4_1", -1),
    (str_clear, s0),
    (try_begin),
        (eq, "$encountered_party_friendly", 0),
        (neg|troop_is_wounded, "trp_player"),
        (party_slot_eq, "p_main_party", slot_party_on_water, 1),
        (party_get_current_terrain, ":terrain_type", "p_main_party"),
        (this_or_next|eq,":terrain_type",0),	#no ambushes at sea
        (this_or_next|eq,":terrain_type",7),
        (this_or_next|eq,":terrain_type",8),
        (eq,":terrain_type",6),
        (str_store_string, s0, "@Lead the boarding"),
        (assign, "$temp4_1", 1),
    (else_try),
        (neq, "$player_ambushed",1),#Ambush Yes
        (party_get_current_terrain, ":terrain_type", "p_main_party"),
        (neq,":terrain_type",0),	#no ambushes at sea
        (neq,":terrain_type",7),
        (neq,":terrain_type",8),
        (neq,":terrain_type",6),
        (eq, "$encountered_party_friendly", 0),
        (neg|troop_is_wounded, "trp_player"),
        (str_store_string, s0, "@Lead the charge"),
        (assign, "$temp4_1", 2),
    (else_try),
        (eq,"$player_ambushed",1),
        (eq, "$encountered_party_friendly", 0),
        (str_store_string, s0, "@Lead the defend"),
        (assign, "$temp4_1", 3),
    (else_try),
        (eq,"$player_ambushed",5),
        (eq, "$encountered_party_friendly", 0),
        (neg|troop_is_wounded, "trp_player"),
        (neq, "$g_encounter_type", enctype_fighting_against_village_raid),
        (party_get_current_terrain, ":terrain_type", "p_main_party"),
        (neq,":terrain_type",0),	#no ambushes at sea
        (neq,":terrain_type",7),
        (neq,":terrain_type",8),
        #limit parties that ambush
        (neg|is_between, "$g_encountered_party","pt_merchant_caravan", "pt_kingdom_hero_party"),
        (neg|is_between, "$g_encountered_party","pt_steppe_bandit_lair", "pt_legio_i_adjutrix_staff"),
        (troop_slot_eq, "trp_global_variables", g_player_trench, 0),
        (str_store_string, s0, "@Ambush the defend"),
        (assign, "$temp4_1", 4),
    (try_end),

    (assign, "$g_presentation_obj_4", -1),
    (try_begin),
        (neg|str_is_empty, s0),
        (create_game_button_overlay, "$g_presentation_obj_4", s0),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 50),
        (overlay_set_position, "$g_presentation_obj_4", pos1),
        (troop_set_slot, "trp_temp_array_c", ":number_of_buttons", "$g_presentation_obj_4"),
        (val_add, ":number_of_buttons", 1),
    (try_end),

    (assign, "$g_presentation_obj_6", -1),
    (try_begin),
        (neq, "$player_ambushed",1),#Ambush Yes
        (neq, "$g_empieza_asedio", 1),#no in sieges
        (eq, "$encountered_party_friendly", 0),
        (neg|troop_is_wounded, "trp_player"),
        (party_get_skill_level, ":tactics", "p_main_party", skl_tactics),
        (ge, ":tactics", 4),
        (party_get_current_terrain,":terrain","p_main_party"),
        (neq,":terrain",0),
        (neq,":terrain",7),
        (neq,":terrain",8),
        (neq,":terrain",6),
        (troop_slot_eq, "trp_global_variables", g_player_trench, 0),
        (create_game_button_overlay, "$g_presentation_obj_6", "@Tactical Options"),
        (position_set_x, pos1, 500),
        (position_set_y, pos1, 50),
        (overlay_set_position, "$g_presentation_obj_6", pos1),
        (troop_set_slot, "trp_temp_array_c", ":number_of_buttons", "$g_presentation_obj_6"),
        (val_add, ":number_of_buttons", 1),
    (try_end),

    (create_game_button_overlay, "$g_presentation_obj_5", "@Game Settings"),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 50),
    (overlay_set_position, "$g_presentation_obj_5", pos1),
    (troop_set_slot, "trp_temp_array_c", ":number_of_buttons", "$g_presentation_obj_5"),
    (val_add, ":number_of_buttons", 1),

    # (assign, reg2, ":number_of_buttons"),
    # (display_message, "@Number of buttons: {reg2}"),
    (try_begin),
        (ge, ":number_of_buttons", 2),
        (assign, ":cur_y", 50),
        (try_begin),
            (ge, ":number_of_buttons", 8),
            (assign, ":num_rows", 3),
        (else_try),
            (ge, ":number_of_buttons", 4),
            (assign, ":num_rows", 2),
        (else_try),
            (assign, ":num_rows", 1),
        (try_end),

        (assign, ":button_from", 0),
        (assign, ":button_to", ":number_of_buttons"),
        (val_min, ":button_to", 4),

        # (assign, reg2, ":num_rows"),
        # (display_message, "@num_rows = {reg2}"),

        # (assign, reg2, ":button_to"),
        # (display_message, "@button_to = {reg2}"),

        (try_for_range, ":rows", 0, ":num_rows"),
            (gt, ":button_to", 0),
            (store_sub, ":cur_x", ":button_to", ":button_from"),
            (val_mul, ":cur_x", 80),
            (store_sub, ":cur_x", 580, ":cur_x"),

            # (assign, reg2, ":button_to"),
            # (display_message, "@button_to = {reg2}"),
            # (assign, reg2, ":button_from"),
            # (display_message, "@button_from = {reg2}"),

            (try_for_range, ":slot", ":button_from", ":button_to"),
                (troop_get_slot, ":button", "trp_temp_array_c", ":slot"),
                (gt, ":button", -1),
                (position_set_x, pos1, ":cur_x"),
                (position_set_y, pos1, ":cur_y"),
                (overlay_set_position, ":button", pos1),
                (val_add, ":cur_x", 160),
            (try_end),
            (assign, ":button_from", ":button_to"),
            (val_add, ":button_to", 4),
            (val_min, ":button_to", ":number_of_buttons"),
            (val_add, ":cur_y", 50),
            # (display_message, "@Iterate"),
        (try_end),
    (try_end),
  ]),

   ## Check for buttonpress
  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":button_pressed_id"),
    (try_begin),
        (eq, ":button_pressed_id", "$g_presentation_obj_1"),
        (try_begin),
            (eq,"$cant_leave_encounter", 1),
            (assign,"$g_player_surrenders",1),
            (jump_to_menu, "mnu_simple_encounter"),
        (else_try),
            (try_begin),
                (eq, "$encountered_party_friendly", 0),
                (encountered_party_is_attacker),
                (call_script, "script_objectionable_action", tmt_aristocratic, "str_flee_battle"),
            (try_end),
            (try_begin),
                (eq, "$encountered_party_friendly", 0),
                (party_get_num_companion_stacks, ":num_stacks", "p_encountered_party_backup"),
                (try_for_range, ":stack_no", 0, ":num_stacks"),
                    (party_stack_get_troop_id,   ":stack_troop","p_encountered_party_backup",":stack_no"),
                    (is_between, ":stack_troop", active_npcs_begin, active_npcs_end),
                    (troop_slot_eq, ":stack_troop", slot_troop_occupation, slto_kingdom_hero),
                    (store_troop_faction, ":victorious_faction", ":stack_troop"),
                    (call_script, "script_add_log_entry", logent_player_retreated_from_lord, "trp_player",  -1, ":stack_troop", ":victorious_faction"),
                (try_end),
            (try_end),
            (leave_encounter),
            (jump_to_menu, "mnu_auto_return_map"),
        (try_end),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_2"),
        (try_begin),
            (gt, "$enlisted_party",-1),
            (leave_encounter),
            (jump_to_menu, "mnu_auto_return_map"),
            (party_end_battle, "$enlisted_party"),
            (party_relocate_near_party, "$enlisted_party", "$g_encountered_party", 3),
        (else_try),
            (jump_to_menu, "mnu_encounter_retreat_confirm"),
        (try_end),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_3"),
        (jump_to_menu, "mnu_order_attack_begin"),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_4"),
        (try_begin),
            (eq, "$temp4_1", 1), ## SEABATLE
            (assign, "$g_battle_result", 0),
            (assign, "$g_engaged_enemy", 1),
            (call_script, "script_calculate_renown_value"),
            (call_script, "script_calculate_battle_advantage"),
            (set_battle_advantage, reg0),
            (set_party_battle_mode),
            (try_begin),
                (eq, "$g_encounter_type", enctype_fighting_against_village_raid),
                (set_jump_mission,"mt_village_raid"),
                (party_get_slot, ":scene_to_use", "$g_encounter_is_in_village", slot_castle_exterior),
                (jump_to_scene, ":scene_to_use"),
            (else_try),
                (eq, "$g_encounter_type", enctype_catched_during_village_raid),
                (set_jump_mission,"mt_village_raid"),
                (party_get_slot, ":scene_to_use", "$g_encounter_is_in_village", slot_castle_exterior),
                (jump_to_scene, ":scene_to_use"),
            (else_try),
                (set_jump_mission,"mt_ship_battle"),
                  # (try_begin),
                  # (store_faction_of_party, ":fac","$g_enemy_party"),
                  # (faction_slot_eq, ":fac", slot_faction_culture, "fac_culture_7"),
                (jump_to_scene, "scn_sea_roman"),
                  # (else_try),
                  # (jump_to_scene, "scn_sea_barbarian"),
                # (try_end),
                  #Wulf end
            (try_end),
            (assign, "$g_next_menu", "mnu_simple_encounter"),
            (jump_to_menu, "mnu_battle_debrief"),
            (change_screen_mission),
        (else_try),
            (eq, "$temp4_1", 2), ### CHARGE
            (assign, "$g_battle_result", 0),
            (assign, "$g_engaged_enemy", 1),

            (assign, "$player_deploy_troops", 1),
            # (party_get_template_id, ":encountered_party_template", "$g_encountered_party"),

            (call_script, "script_calculate_renown_value"),
            ##diplomacy start+
            (try_begin),
                #Call this to properly set cached values for strength
                (eq, "$g_dplmc_terrain_advantage", DPLMC_TERRAIN_ADVANTAGE_ENABLE),
                (assign, ":terrain_code", dplmc_terrain_code_none),#defined in header_terrain_types.py
                (try_begin),
                    (this_or_next|eq, "$g_encounter_type", enctype_fighting_against_village_raid),
                    (eq, "$g_encounter_type", enctype_catched_during_village_raid),
                    (assign, ":terrain_code", dplmc_terrain_code_village),#defined in header_terrain_types.py
                (else_try),
                    (encountered_party_is_attacker),
                    (call_script, "script_dplmc_get_terrain_code_for_battle", "$g_encountered_party", "p_main_party"),
                    (assign, ":terrain_code", reg0),
                (else_try),
                    (call_script, "script_dplmc_get_terrain_code_for_battle", "p_main_party", "$g_encountered_party"),
                    (assign, ":terrain_code", reg0),
                (try_end),
                (neq, ":terrain_code", dplmc_terrain_code_none),
                (call_script, "script_dplmc_party_calculate_strength_in_terrain", "p_main_party", ":terrain_code", 0, 1),
                (call_script, "script_dplmc_party_calculate_strength_in_terrain", "$g_encountered_party", ":terrain_code", 0, 1),
            (try_end),
            ##diplomacy end+
            (call_script, "script_calculate_battle_advantage"),
            (set_battle_advantage, reg0),
            (set_party_battle_mode),
            (try_begin),
                (troop_slot_eq, "trp_global_variables", g_player_trench, 1),
                (set_jump_mission,"mt_camp_defend"),
                (call_script, "script_get_camp_scene"),
                (jump_to_scene, reg0),
            (else_try),
                (eq, "$g_encounter_type", enctype_fighting_against_village_raid),
                (set_jump_mission,"mt_village_raid"),
                (party_get_slot, ":scene_to_use", "$g_encounter_is_in_village", slot_castle_exterior),
                (jump_to_scene, ":scene_to_use"),
            (else_try),
                (eq, "$g_encounter_type", enctype_catched_during_village_raid),
                (set_jump_mission,"mt_village_raid"),
                (party_get_slot, ":scene_to_use", "$g_encounter_is_in_village", slot_castle_exterior),
                (jump_to_scene, ":scene_to_use"),
          # (else_try),
            # (this_or_next|eq, ":terrain_type", rt_desert),
            # (eq, ":terrain_type", rt_desert_forest),
            # (eq, ":encountered_party_template", "pt_kingdom_caravan_party"),
            # (assign, ":scene_to_use", "scn_caravan_ambush_desert"),
            # (jump_to_scene, ":scene_to_use"),
            # (set_jump_mission,"mt_lead_charge"),
          # (else_try),
            # (this_or_next|eq, ":terrain_type", rt_snow),
            # (eq, ":terrain_type", rt_snow_forest),
            # (eq, ":encountered_party_template", "pt_kingdom_caravan_party"),
            # (assign, ":scene_to_use", "scn_caravan_ambush_med"),
            # (jump_to_scene, ":scene_to_use"),
            # (set_jump_mission,"mt_lead_charge"),
          # (else_try),
            # (eq, ":encountered_party_template", "pt_kingdom_caravan_party"),
            # (assign, ":scene_to_use", "scn_caravan_ambush"),
            # (jump_to_scene, ":scene_to_use"),
            # (set_jump_mission,"mt_lead_charge"),
            (else_try),
                (check_quest_active, "qst_four_emperors"),
                (quest_slot_eq, "qst_four_emperors", slot_quest_current_state, 11),
                (quest_slot_eq, "qst_four_emperors", slot_quest_target_troop, "trp_legatus_11"),
                (set_jump_mission,"mt_lead_charge"),
                (jump_to_scene, "scn_second_battle_of_bedriacum"),
            (else_try),
                (check_quest_active, "qst_four_emperors"),
                (this_or_next|quest_slot_eq, "qst_four_emperors", slot_quest_target_troop, "trp_senator_2"),
                (quest_slot_eq, "qst_four_emperors", slot_quest_target_troop, "trp_statthalter_9"),
                (quest_slot_eq, "qst_four_emperors", slot_quest_current_state, 15),
                (set_jump_mission,"mt_lead_charge"),
                (jump_to_scene, "scn_second_battle_of_bedriacum"),
            (else_try),
              # (call_script, "script_encounter_calculate_fit"),
              # (try_begin),
                # (this_or_next|ge, reg10, 100),
                # (ge, reg11, 100),
                # (set_jump_mission,"mt_lead_charge_large"),
                # (call_script, "script_setup_random_scene"),
              # (else_try),
                (set_jump_mission,"mt_lead_charge"),
                (call_script, "script_setup_random_scene"),
              # (try_end),
            (try_end),
            (assign, "$g_next_menu", "mnu_simple_encounter"),
            (jump_to_menu, "mnu_battle_debrief"),
            (change_screen_mission),
        (else_try),
            (eq, "$temp4_1", 3), # ABMUSH DEFEND
            (assign,"$player_ambushed",3),
            (assign, "$g_battle_result", 0),
            (assign, "$g_engaged_enemy", 1),
            (call_script, "script_calculate_renown_value"),
            ##diplomacy start+
            (try_begin),
                #Call this to properly set cached values for strength
                (eq, "$g_dplmc_terrain_advantage", DPLMC_TERRAIN_ADVANTAGE_ENABLE),
                (assign, ":terrain_code", dplmc_terrain_code_none),#defined in header_terrain_types.py
                (try_begin),
                    (this_or_next|eq, "$g_encounter_type", enctype_fighting_against_village_raid),
                        (eq, "$g_encounter_type", enctype_catched_during_village_raid),
                    (assign, ":terrain_code", dplmc_terrain_code_village),#defined in header_terrain_types.py
                (else_try),
                    (encountered_party_is_attacker),
                    (call_script, "script_dplmc_get_terrain_code_for_battle", "$g_encountered_party", "p_main_party"),
                    (assign, ":terrain_code", reg0),
                (else_try),
                    (call_script, "script_dplmc_get_terrain_code_for_battle", "p_main_party", "$g_encountered_party"),
                    (assign, ":terrain_code", reg0),
                (try_end),
                (neq, ":terrain_code", dplmc_terrain_code_none),
                (call_script, "script_dplmc_party_calculate_strength_in_terrain", "p_main_party", ":terrain_code", 0, 1),
                (call_script, "script_dplmc_party_calculate_strength_in_terrain", "$g_encountered_party", ":terrain_code", 0, 1),
            (try_end),
            ##diplomacy end+
            (call_script, "script_calculate_battle_advantage"),
            (set_battle_advantage, reg0),
            (set_party_battle_mode),

            (display_message, "@You have been ambushed!", message_negative),
            (set_jump_mission,"mt_lead_charge_ambush"),

            (party_get_current_terrain, ":terrain_type", "p_main_party"),
            (call_script, "script_setup_random_scene_ambush", ":terrain_type"),
            (jump_to_scene, reg0),

            (assign, "$g_next_menu", "mnu_simple_encounter"),
            (jump_to_menu, "mnu_battle_debrief"),
            (change_screen_mission),
        (else_try),
            (eq, "$temp4_1", 4), # AMBUSH ATTACK
            (assign,"$player_ambushed",4),
            (assign, "$g_battle_result", 0),
            (assign, "$g_engaged_enemy", 1),

            #	(assign, "$player_deploy_troops", 1),
            #(assign,"$player_ambushed",1),
            (call_script, "script_calculate_renown_value"),
            ##diplomacy start+
            (try_begin),
                #Call this to properly set cached values for strength
                (eq, "$g_dplmc_terrain_advantage", DPLMC_TERRAIN_ADVANTAGE_ENABLE),
                (assign, ":terrain_code", dplmc_terrain_code_none),#defined in header_terrain_types.py
                (try_begin),
                    (this_or_next|eq, "$g_encounter_type", enctype_fighting_against_village_raid),
                    (eq, "$g_encounter_type", enctype_catched_during_village_raid),
                    (assign, ":terrain_code", dplmc_terrain_code_village),#defined in header_terrain_types.py
                (else_try),
                    (encountered_party_is_attacker),
                    (call_script, "script_dplmc_get_terrain_code_for_battle", "$g_encountered_party", "p_main_party"),
                    (assign, ":terrain_code", reg0),
                (else_try),
                    (call_script, "script_dplmc_get_terrain_code_for_battle", "p_main_party", "$g_encountered_party"),
                    (assign, ":terrain_code", reg0),
                (try_end),
                (neq, ":terrain_code", dplmc_terrain_code_none),
                (call_script, "script_dplmc_party_calculate_strength_in_terrain", "p_main_party", ":terrain_code", 0, 1),
                (call_script, "script_dplmc_party_calculate_strength_in_terrain", "$g_encountered_party", ":terrain_code", 0, 1),
            (try_end),
            ##diplomacy end+
            (call_script, "script_calculate_battle_advantage"),
            (set_battle_advantage, reg0),
            (set_party_battle_mode),

            (display_message, "@You have ambushed the enemy!", message_positive),
            (set_jump_mission,"mt_lead_charge_ambush_attack"),
            (party_get_current_terrain, ":terrain_type", "p_main_party"),
            (call_script, "script_setup_random_scene_ambush", ":terrain_type"),
            (jump_to_scene, reg0),
            (assign, "$g_next_menu", "mnu_simple_encounter"),
            (jump_to_menu, "mnu_battle_debrief"),
            (change_screen_mission),
        (else_try),
            (display_message, "@A bug happened!", message_negative),
        (try_end),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_5"),
        (assign, "$temp", 1),
        (jump_to_menu, "mnu_return_to_game_options"),
    (else_try),
        (eq, ":button_pressed_id", "$g_presentation_obj_6"),
        (party_get_num_companion_stacks, ":num_stacks","p_main_party"),
        (assign, ":num_men", 0),
        (try_for_range, ":i_stack", 0, ":num_stacks"),
            (party_stack_get_size, ":stack_size","p_main_party",":i_stack"),
            (val_add, ":num_men", ":stack_size"),
        (try_end),
        (try_begin),
            (ge, ":num_men", 50), # deja pasar si el player tiene por lo menos 50 hombres
            #(assign,"$emboscada_time", 1), #antes de 48 horas no puede haber otra emboscada ambush chief
            (jump_to_menu,"mnu_panel_comandante"),
        (else_try),
            (display_message,"@You need to have 50 or more men in order to use the commander panel.", message_alert),
        (try_end),
    (try_end),
  ]),

  (ti_on_presentation_run,[
    (try_begin),
        # (this_or_next|key_clicked, key_i),
        (game_key_clicked, gk_inventory_window),
        (troop_clear_inventory, "trp_quick_battle_6_player"),
        (change_screen_trade, "trp_quick_battle_6_player"),
    (else_try),
        # (this_or_next|key_clicked, key_c),
        (game_key_clicked, gk_character_window),
        (change_screen_view_character, "trp_player"),
    (else_try),
        # (this_or_next|key_clicked, key_c),
        (game_key_clicked, gk_party_window),
        (assign, "$temp", 1),
        (jump_to_menu, "mnu_return_to_party_screen"),
    (try_end),
  ]),
]),

("ask_audience", 0, 0, [
  (ti_on_presentation_load,[
    (presentation_set_duration, 999999),
    (set_fixed_point_multiplier, 1000),

    (try_for_range, ":active_npc", active_npcs_begin, kingdom_ladies_end),
        (troop_set_slot, "trp_temp_array_a", ":active_npc", -1),
        (troop_set_slot, "trp_temp_array_b", ":active_npc", -1),
    (try_end),

    # #0. BACKROUND
    (create_mesh_overlay, reg0, "mesh_game_log_window"),
    (position_set_x, pos1, 300),
    (position_set_y, pos1, 100),
    (overlay_set_position, reg0, pos1),
    (position_set_x, pos1, 400),
    (position_set_y, pos1, 850),
    (overlay_set_size, reg0, pos1),

    # Presentation title, centered at the top
    (try_begin),
      (faction_slot_eq, "$g_encountered_party_faction", slot_faction_leader, "trp_player"),
      (str_store_string, s20, "@With whom do you like to speak?"),
    (else_try),
      (str_store_string, s20, "@Request an audience with someone..."),
    (try_end),
    (create_text_overlay, reg1, "@{s20}", tf_center_justify),
    (position_set_x, pos1, 475), # Higher, means more toward the right
    (position_set_y, pos1, 710), # Higher, means more toward the top
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 1200),
    (position_set_y, pos1, 1200),
    (overlay_set_size, reg1, pos1),

    (str_clear, s0),
    (create_text_overlay, reg1, s0, tf_scrollable_style_2),
    (position_set_x, pos1, 350),
    (position_set_y, pos1, 150),
    (overlay_set_position, reg1, pos1),
    (position_set_x, pos1, 300),
    (position_set_y, pos1, 525),
    (overlay_set_area_size, reg1, pos1),
    (set_container_overlay, reg1),#start scroll

    (assign, ":num_lines", 0),
    (call_script, "script_dplmc_time_sorted_heroes_for_center", "$g_encountered_party", "p_temp_party"),
    (party_get_num_companion_stacks, ":num_stacks","p_temp_party"),
    (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop","p_temp_party",":i_stack"),
        (val_add, ":num_lines", 1),
    (try_end),
    (try_for_range, ":cur_troop", kingdom_ladies_begin, kingdom_ladies_end),
        (neq, ":cur_troop", "trp_knight_1_1_wife"), #The one who should not appear in game
        (troop_slot_eq, ":cur_troop", slot_troop_occupation, slto_kingdom_lady),#is active lady
        (troop_slot_eq, ":cur_troop", slot_troop_cur_center, "$g_encountered_party"),
        (val_add, ":num_lines", 1),
    (try_end),
    (position_set_x, pos1, 50),
    (store_mul, ":y_name", 30, ":num_lines"),##get y for size of the scrollable overlay
    ##text size of the table
    (position_set_x, pos2, 900),
    (position_set_y, pos2, 900),

    (try_for_range, ":i_stack", 0, ":num_stacks"),
        (party_stack_get_troop_id, ":stack_troop","p_temp_party",":i_stack"),
        (str_store_troop_name, 20, ":stack_troop"),
        (create_text_overlay, reg0, "@{s20}", tf_left_align|tf_with_outline),
        (position_set_y, pos1, ":y_name"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_color, reg0, message_alert),
        (overlay_set_size, reg0, pos2),
        (troop_set_slot, "trp_temp_array_b", ":stack_troop", reg0),

        (create_image_button_overlay, reg0, "mesh_longer_button", "mesh_longer_button"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_size, reg0, pos2),
        (overlay_set_alpha, reg0, 0),
        (overlay_set_color, reg0, 0xDDDDDD),
        (troop_set_slot, "trp_temp_array_a", ":stack_troop", reg0),

        (val_sub, ":y_name", 30),
    (try_end),

    (try_for_range, ":cur_troop", kingdom_ladies_begin, kingdom_ladies_end),
        (neq, ":cur_troop", "trp_knight_1_1_wife"), #The one who should not appear in game
        (troop_slot_eq, ":cur_troop", slot_troop_occupation, slto_kingdom_lady),#is active lady
        (troop_slot_eq, ":cur_troop", slot_troop_cur_center, "$g_encountered_party"),

        (str_store_troop_name, 20, ":cur_troop"),
        (create_text_overlay, reg0, "@{s20}", tf_left_align|tf_with_outline),
        (position_set_y, pos1, ":y_name"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_color, reg0, message_alert),
        (overlay_set_size, reg0, pos2),
        (troop_set_slot, "trp_temp_array_b", ":cur_troop", reg0),

        (create_image_button_overlay, reg0, "mesh_longer_button", "mesh_longer_button"),
        (overlay_set_position, reg0, pos1),
        (overlay_set_size, reg0, pos2),
        (overlay_set_alpha, reg0, 0),
        (overlay_set_color, reg0, 0xDDDDDD),
        (troop_set_slot, "trp_temp_array_a", ":cur_troop", reg0),

        (val_sub, ":y_name", 30),
    (try_end),
    (set_container_overlay, -1),#end scroll

    (create_game_button_overlay, reg1, "str_return"),
    (position_set_x, pos1, 500),
    (position_set_y, pos1, 110),
    (overlay_set_position, reg1, pos1),
    (assign, "$g_jrider_faction_report_return_to_menu", reg1),
  ]),
  ## Check for buttonpress
  (ti_on_presentation_event_state_change,[
    (store_trigger_param_1, ":button_pressed_id"),
    (try_begin),
        (eq, ":button_pressed_id", "$g_jrider_faction_report_return_to_menu"),
        (presentation_set_duration, 0),
    (else_try),
        (assign, "$castle_meeting_selected_troop", -1),
        (try_for_range, ":active_npc", active_npcs_begin, kingdom_ladies_end),
            (eq, "$castle_meeting_selected_troop", -1),
            (troop_slot_eq, "trp_temp_array_a", ":active_npc", ":button_pressed_id"),
            (assign, "$castle_meeting_selected_troop", ":active_npc"),
        (try_end),
        (is_between, "$castle_meeting_selected_troop", active_npcs_begin, kingdom_ladies_end),
        (str_store_troop_name, s15, "$castle_meeting_selected_troop"),
        (display_message, "@A meeting with {s15} is setup.", message_alert),
        (call_script, "script_start_court_conversation", "$castle_meeting_selected_troop", "$current_town"),
    (try_end),
  ]),
  (ti_on_presentation_mouse_enter_leave,[
    (store_trigger_param_1, ":overlay_id"),
    (store_trigger_param_2, ":mouse_enter"),
    # (assign, reg10, ":overlay_id"),
    # (display_message, "@{reg10}"),
    (assign, ":break", kingdom_ladies_end),
    (try_for_range, ":active_npc", active_npcs_begin, ":break"),
        (troop_slot_eq, "trp_temp_array_b", ":active_npc", ":overlay_id"),
        # (neg|troop_slot_eq, "trp_temp_array_a", ":active_npc", ":overlay_id"),
        (assign, ":break", -1),
    (try_end),
    (eq, ":break", -1),
    (try_begin),
        (eq, ":mouse_enter", 1),
        (overlay_set_color, ":overlay_id", message_alert),
        (assign, ":re_size", 900),
        (position_set_x, pos1, ":re_size"),
        (position_set_y, pos1, ":re_size"),
        (overlay_set_size, ":overlay_id", pos1),
    (else_try),
        (overlay_set_color, ":overlay_id", 0xAA0000),
        (assign, ":re_size", 1200),
        (position_set_x, pos1, ":re_size"),
        (position_set_y, pos1, ":re_size"),
        (overlay_set_size, ":overlay_id", pos1),
        # (play_sound, "snd_message_negative_sound"),
    (try_end),
  ]),
  (ti_on_presentation_run, [
    (try_begin),
        (key_clicked, key_escape),
        (presentation_set_duration, 0),
    (else_try),
        (key_clicked, key_space),
        (set_fixed_point_multiplier, 1000),
        (mouse_get_position, pos31),

        (position_get_x, reg31, pos31),
        (position_get_y, reg32, pos31),

        (display_message, "@X: {reg31} | Y: {reg32}"),
    (try_end),
  ]),
]),

]#end of file